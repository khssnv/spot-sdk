// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot_cam/compositor.proto

package spot_cam

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IrColorMap_ColorMap int32

const (
	IrColorMap_COLORMAP_UNKNOWN IrColorMap_ColorMap = 0
	//the greyscale colormap maps the minimum value (defined below) to black and the maximum value (defined below) to white
	IrColorMap_COLORMAP_GREYSCALE IrColorMap_ColorMap = 1
	//the jet colormap uses blues for values closer to the minimum, and red values for values closer to the maximum.
	IrColorMap_COLORMAP_JET IrColorMap_ColorMap = 2
	//the inferno colormap maps the minimum value to black and the maximum value to light yellow RGB(252, 252, 164). It is also
	//easier to view by those with color blindness
	IrColorMap_COLORMAP_INFERNO IrColorMap_ColorMap = 3
	//the turbo colormap uses blues for values closer to the minumum, red values for values closer to the maximum,
	//and addresses some short comings of the jet color map such as false detail, banding and color blindness
	IrColorMap_COLORMAP_TURBO IrColorMap_ColorMap = 4
)

// Enum value maps for IrColorMap_ColorMap.
var (
	IrColorMap_ColorMap_name = map[int32]string{
		0: "COLORMAP_UNKNOWN",
		1: "COLORMAP_GREYSCALE",
		2: "COLORMAP_JET",
		3: "COLORMAP_INFERNO",
		4: "COLORMAP_TURBO",
	}
	IrColorMap_ColorMap_value = map[string]int32{
		"COLORMAP_UNKNOWN":   0,
		"COLORMAP_GREYSCALE": 1,
		"COLORMAP_JET":       2,
		"COLORMAP_INFERNO":   3,
		"COLORMAP_TURBO":     4,
	}
)

func (x IrColorMap_ColorMap) Enum() *IrColorMap_ColorMap {
	p := new(IrColorMap_ColorMap)
	*p = x
	return p
}

func (x IrColorMap_ColorMap) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IrColorMap_ColorMap) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_cam_compositor_proto_enumTypes[0].Descriptor()
}

func (IrColorMap_ColorMap) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_cam_compositor_proto_enumTypes[0]
}

func (x IrColorMap_ColorMap) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IrColorMap_ColorMap.Descriptor instead.
func (IrColorMap_ColorMap) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{9, 0}
}

// A "Screen" represents a particular layout of camera images
// used by the video stream.
type ScreenDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifer for a screen.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ScreenDescription) Reset() {
	*x = ScreenDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScreenDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScreenDescription) ProtoMessage() {}

func (x *ScreenDescription) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScreenDescription.ProtoReflect.Descriptor instead.
func (*ScreenDescription) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{0}
}

func (x *ScreenDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request the current screen in use.
type GetScreenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetScreenRequest) Reset() {
	*x = GetScreenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenRequest) ProtoMessage() {}

func (x *GetScreenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenRequest.ProtoReflect.Descriptor instead.
func (*GetScreenRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{1}
}

func (x *GetScreenRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Specify which screen is currently being displayed in the video stream.
type GetScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Identifier of the current screen.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetScreenResponse) Reset() {
	*x = GetScreenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetScreenResponse) ProtoMessage() {}

func (x *GetScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetScreenResponse.ProtoReflect.Descriptor instead.
func (*GetScreenResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{2}
}

func (x *GetScreenResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetScreenResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request information about the current cameras in the video stream.
type GetVisibleCamerasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetVisibleCamerasRequest) Reset() {
	*x = GetVisibleCamerasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVisibleCamerasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVisibleCamerasRequest) ProtoMessage() {}

func (x *GetVisibleCamerasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVisibleCamerasRequest.ProtoReflect.Descriptor instead.
func (*GetVisibleCamerasRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{3}
}

func (x *GetVisibleCamerasRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Description of the parameters and locations of each camera in the
// current video stream.
type GetVisibleCamerasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of all camera streams visible in the current video stream.
	Streams []*GetVisibleCamerasResponse_Stream `protobuf:"bytes,2,rep,name=streams,proto3" json:"streams,omitempty"`
}

func (x *GetVisibleCamerasResponse) Reset() {
	*x = GetVisibleCamerasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVisibleCamerasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVisibleCamerasResponse) ProtoMessage() {}

func (x *GetVisibleCamerasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVisibleCamerasResponse.ProtoReflect.Descriptor instead.
func (*GetVisibleCamerasResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{4}
}

func (x *GetVisibleCamerasResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetVisibleCamerasResponse) GetStreams() []*GetVisibleCamerasResponse_Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

// Request the different screen layouts available.
type ListScreensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListScreensRequest) Reset() {
	*x = ListScreensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScreensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScreensRequest) ProtoMessage() {}

func (x *ListScreensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScreensRequest.ProtoReflect.Descriptor instead.
func (*ListScreensRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{5}
}

func (x *ListScreensRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Response with all screen layouts available.
type ListScreensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of all screen layouts that can be selected.
	Screens []*ScreenDescription `protobuf:"bytes,2,rep,name=screens,proto3" json:"screens,omitempty"`
}

func (x *ListScreensResponse) Reset() {
	*x = ListScreensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListScreensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListScreensResponse) ProtoMessage() {}

func (x *ListScreensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListScreensResponse.ProtoReflect.Descriptor instead.
func (*ListScreensResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{6}
}

func (x *ListScreensResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListScreensResponse) GetScreens() []*ScreenDescription {
	if x != nil {
		return x.Screens
	}
	return nil
}

// Switch the camera layout in the video stream to the one specified.
type SetScreenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Identifier as specified in ListScreensResponse.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SetScreenRequest) Reset() {
	*x = SetScreenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScreenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScreenRequest) ProtoMessage() {}

func (x *SetScreenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScreenRequest.ProtoReflect.Descriptor instead.
func (*SetScreenRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{7}
}

func (x *SetScreenRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetScreenRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Result of setting the camera layout.
type SetScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Identifier of the screen used.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *SetScreenResponse) Reset() {
	*x = SetScreenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetScreenResponse) ProtoMessage() {}

func (x *SetScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetScreenResponse.ProtoReflect.Descriptor instead.
func (*SetScreenResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{8}
}

func (x *SetScreenResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetScreenResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

//the colormap is a mapping of radiometric data to color, to make the images easier for people to look at in real time.
type IrColorMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Colormap IrColorMap_ColorMap     `protobuf:"varint,1,opt,name=colormap,proto3,enum=bosdyn.api.spot_cam.IrColorMap_ColorMap" json:"colormap,omitempty"`
	Scale    *IrColorMap_ScalingPair `protobuf:"bytes,2,opt,name=scale,proto3" json:"scale,omitempty"`
	//if auto_scale is true, then the min and max values are derived from the data itself, and the settings
	//above are ignored
	AutoScale *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=auto_scale,json=autoScale,proto3" json:"auto_scale,omitempty"`
}

func (x *IrColorMap) Reset() {
	*x = IrColorMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrColorMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrColorMap) ProtoMessage() {}

func (x *IrColorMap) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrColorMap.ProtoReflect.Descriptor instead.
func (*IrColorMap) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{9}
}

func (x *IrColorMap) GetColormap() IrColorMap_ColorMap {
	if x != nil {
		return x.Colormap
	}
	return IrColorMap_COLORMAP_UNKNOWN
}

func (x *IrColorMap) GetScale() *IrColorMap_ScalingPair {
	if x != nil {
		return x.Scale
	}
	return nil
}

func (x *IrColorMap) GetAutoScale() *wrapperspb.BoolValue {
	if x != nil {
		return x.AutoScale
	}
	return nil
}

type SetIrColormapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Map    *IrColorMap        `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
}

func (x *SetIrColormapRequest) Reset() {
	*x = SetIrColormapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIrColormapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIrColormapRequest) ProtoMessage() {}

func (x *SetIrColormapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIrColormapRequest.ProtoReflect.Descriptor instead.
func (*SetIrColormapRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{10}
}

func (x *SetIrColormapRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetIrColormapRequest) GetMap() *IrColorMap {
	if x != nil {
		return x.Map
	}
	return nil
}

type SetIrColormapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SetIrColormapResponse) Reset() {
	*x = SetIrColormapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIrColormapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIrColormapResponse) ProtoMessage() {}

func (x *SetIrColormapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIrColormapResponse.ProtoReflect.Descriptor instead.
func (*SetIrColormapResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{11}
}

func (x *SetIrColormapResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetIrColormapRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetIrColormapRequest) Reset() {
	*x = GetIrColormapRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIrColormapRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIrColormapRequest) ProtoMessage() {}

func (x *GetIrColormapRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIrColormapRequest.ProtoReflect.Descriptor instead.
func (*GetIrColormapRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{12}
}

func (x *GetIrColormapRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetIrColormapResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Map    *IrColorMap         `protobuf:"bytes,2,opt,name=map,proto3" json:"map,omitempty"`
}

func (x *GetIrColormapResponse) Reset() {
	*x = GetIrColormapResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIrColormapResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIrColormapResponse) ProtoMessage() {}

func (x *GetIrColormapResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIrColormapResponse.ProtoReflect.Descriptor instead.
func (*GetIrColormapResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{13}
}

func (x *GetIrColormapResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetIrColormapResponse) GetMap() *IrColorMap {
	if x != nil {
		return x.Map
	}
	return nil
}

//the ir meter overlay allows for pixel-accurate measurements to be taken and displayed to the user
type IrMeterOverlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//If enable isn't true, don't overlay any IR meter
	Enable bool                                  `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	Coords *IrMeterOverlay_NormalizedCoordinates `protobuf:"bytes,2,opt,name=coords,proto3" json:"coords,omitempty"`
}

func (x *IrMeterOverlay) Reset() {
	*x = IrMeterOverlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrMeterOverlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrMeterOverlay) ProtoMessage() {}

func (x *IrMeterOverlay) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrMeterOverlay.ProtoReflect.Descriptor instead.
func (*IrMeterOverlay) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{14}
}

func (x *IrMeterOverlay) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *IrMeterOverlay) GetCoords() *IrMeterOverlay_NormalizedCoordinates {
	if x != nil {
		return x.Coords
	}
	return nil
}

type SetIrMeterOverlayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Overlay *IrMeterOverlay    `protobuf:"bytes,2,opt,name=overlay,proto3" json:"overlay,omitempty"`
}

func (x *SetIrMeterOverlayRequest) Reset() {
	*x = SetIrMeterOverlayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIrMeterOverlayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIrMeterOverlayRequest) ProtoMessage() {}

func (x *SetIrMeterOverlayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIrMeterOverlayRequest.ProtoReflect.Descriptor instead.
func (*SetIrMeterOverlayRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{15}
}

func (x *SetIrMeterOverlayRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetIrMeterOverlayRequest) GetOverlay() *IrMeterOverlay {
	if x != nil {
		return x.Overlay
	}
	return nil
}

type SetIrMeterOverlayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SetIrMeterOverlayResponse) Reset() {
	*x = SetIrMeterOverlayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetIrMeterOverlayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetIrMeterOverlayResponse) ProtoMessage() {}

func (x *SetIrMeterOverlayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetIrMeterOverlayResponse.ProtoReflect.Descriptor instead.
func (*SetIrMeterOverlayResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{16}
}

func (x *SetIrMeterOverlayResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The location and camera parameters for a single camera.
type GetVisibleCamerasResponse_Stream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The location of this camera stream within the larger stream.
	Window *GetVisibleCamerasResponse_Stream_Window `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	// The name field in this camera member is of the form 'c:w',
	// where c is the name of the camera and w is the name of the
	// window that's projecting it.
	Camera *Camera `protobuf:"bytes,2,opt,name=camera,proto3" json:"camera,omitempty"`
}

func (x *GetVisibleCamerasResponse_Stream) Reset() {
	*x = GetVisibleCamerasResponse_Stream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVisibleCamerasResponse_Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVisibleCamerasResponse_Stream) ProtoMessage() {}

func (x *GetVisibleCamerasResponse_Stream) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVisibleCamerasResponse_Stream.ProtoReflect.Descriptor instead.
func (*GetVisibleCamerasResponse_Stream) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{4, 0}
}

func (x *GetVisibleCamerasResponse_Stream) GetWindow() *GetVisibleCamerasResponse_Stream_Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *GetVisibleCamerasResponse_Stream) GetCamera() *Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

// The location of a sub-image within a larger image.
type GetVisibleCamerasResponse_Stream_Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xoffset int32 `protobuf:"varint,1,opt,name=xoffset,proto3" json:"xoffset,omitempty"`
	Yoffset int32 `protobuf:"varint,2,opt,name=yoffset,proto3" json:"yoffset,omitempty"`
	//The image should be cropped out of the stream at this
	//resolution, and then scaled to the resolution described
	//in the 'camera' member, below.  once that scaling takes
	//place, the intrinsics will be valid.
	Width  int32 `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height int32 `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *GetVisibleCamerasResponse_Stream_Window) Reset() {
	*x = GetVisibleCamerasResponse_Stream_Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVisibleCamerasResponse_Stream_Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVisibleCamerasResponse_Stream_Window) ProtoMessage() {}

func (x *GetVisibleCamerasResponse_Stream_Window) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVisibleCamerasResponse_Stream_Window.ProtoReflect.Descriptor instead.
func (*GetVisibleCamerasResponse_Stream_Window) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *GetVisibleCamerasResponse_Stream_Window) GetXoffset() int32 {
	if x != nil {
		return x.Xoffset
	}
	return 0
}

func (x *GetVisibleCamerasResponse_Stream_Window) GetYoffset() int32 {
	if x != nil {
		return x.Yoffset
	}
	return 0
}

func (x *GetVisibleCamerasResponse_Stream_Window) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *GetVisibleCamerasResponse_Stream_Window) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type IrColorMap_ScalingPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//the minimum value to do color mapping, in degrees Celsius
	Min float64 `protobuf:"fixed64,1,opt,name=min,proto3" json:"min,omitempty"`
	//the maximum value to do color mapping, in degrees Celsius
	Max float64 `protobuf:"fixed64,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *IrColorMap_ScalingPair) Reset() {
	*x = IrColorMap_ScalingPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrColorMap_ScalingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrColorMap_ScalingPair) ProtoMessage() {}

func (x *IrColorMap_ScalingPair) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrColorMap_ScalingPair.ProtoReflect.Descriptor instead.
func (*IrColorMap_ScalingPair) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{9, 0}
}

func (x *IrColorMap_ScalingPair) GetMin() float64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *IrColorMap_ScalingPair) GetMax() float64 {
	if x != nil {
		return x.Max
	}
	return 0
}

//these coordinates, normalized from 0-1, are within the ir camera 'window'
//note: if the coordinates lie within an 'invalid' region of the window, then
//the meter will be disabled.
type IrMeterOverlay_NormalizedCoordinates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *IrMeterOverlay_NormalizedCoordinates) Reset() {
	*x = IrMeterOverlay_NormalizedCoordinates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IrMeterOverlay_NormalizedCoordinates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IrMeterOverlay_NormalizedCoordinates) ProtoMessage() {}

func (x *IrMeterOverlay_NormalizedCoordinates) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_compositor_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IrMeterOverlay_NormalizedCoordinates.ProtoReflect.Descriptor instead.
func (*IrMeterOverlay_NormalizedCoordinates) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP(), []int{14, 0}
}

func (x *IrMeterOverlay_NormalizedCoordinates) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *IrMeterOverlay_NormalizedCoordinates) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_bosdyn_api_spot_cam_compositor_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_cam_compositor_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x1a, 0x17, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x27, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0xa2, 0x03, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0xff, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x54, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x1a, 0x6a, 0x0a, 0x06, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x78, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x78, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x79, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x79, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x47, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x8b, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x07,
	0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x2e, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x73, 0x22, 0x59,
	0x0a, 0x10, 0x53, 0x65, 0x74, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf9, 0x02, 0x0a, 0x0a, 0x49, 0x72, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x44, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x49, 0x72,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61,
	0x70, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x6d, 0x61, 0x70, 0x12, 0x41, 0x0a, 0x05, 0x73,
	0x63, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d,
	0x2e, 0x49, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x2e, 0x53, 0x63, 0x61, 0x6c,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x61, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x1a, 0x31, 0x0a, 0x0b, 0x53, 0x63, 0x61,
	0x6c, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x74, 0x0a, 0x08,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x4d, 0x41, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x4d, 0x41, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x59, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x4d,
	0x41, 0x50, 0x5f, 0x4a, 0x45, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x4d, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x46, 0x45, 0x52, 0x4e, 0x4f, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x55, 0x52, 0x42, 0x4f,
	0x10, 0x04, 0x22, 0x7c, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x49, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x6d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a,
	0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d,
	0x2e, 0x49, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70,
	0x22, 0x4b, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x49, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x6d, 0x61,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x49, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x49, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x6d, 0x61, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49,
	0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x6d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x49, 0x72, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x4d, 0x61, 0x70, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x22, 0xb0, 0x01, 0x0a, 0x0e, 0x49, 0x72, 0x4d,
	0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x49, 0x72, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x52, 0x06,
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x33, 0x0a, 0x15, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x8c, 0x01, 0x0a, 0x18,
	0x53, 0x65, 0x74, 0x49, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x07, 0x6f,
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63,
	0x61, 0x6d, 0x2e, 0x49, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x79, 0x52, 0x07, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x65,
	0x74, 0x49, 0x72, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x4d, 0x42, 0x0f, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e,
	0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_cam_compositor_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_cam_compositor_proto_rawDescData = file_bosdyn_api_spot_cam_compositor_proto_rawDesc
)

func file_bosdyn_api_spot_cam_compositor_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_cam_compositor_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_cam_compositor_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_cam_compositor_proto_rawDescData)
	})
	return file_bosdyn_api_spot_cam_compositor_proto_rawDescData
}

var file_bosdyn_api_spot_cam_compositor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_spot_cam_compositor_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bosdyn_api_spot_cam_compositor_proto_goTypes = []interface{}{
	(IrColorMap_ColorMap)(0),                        // 0: bosdyn.api.spot_cam.IrColorMap.ColorMap
	(*ScreenDescription)(nil),                       // 1: bosdyn.api.spot_cam.ScreenDescription
	(*GetScreenRequest)(nil),                        // 2: bosdyn.api.spot_cam.GetScreenRequest
	(*GetScreenResponse)(nil),                       // 3: bosdyn.api.spot_cam.GetScreenResponse
	(*GetVisibleCamerasRequest)(nil),                // 4: bosdyn.api.spot_cam.GetVisibleCamerasRequest
	(*GetVisibleCamerasResponse)(nil),               // 5: bosdyn.api.spot_cam.GetVisibleCamerasResponse
	(*ListScreensRequest)(nil),                      // 6: bosdyn.api.spot_cam.ListScreensRequest
	(*ListScreensResponse)(nil),                     // 7: bosdyn.api.spot_cam.ListScreensResponse
	(*SetScreenRequest)(nil),                        // 8: bosdyn.api.spot_cam.SetScreenRequest
	(*SetScreenResponse)(nil),                       // 9: bosdyn.api.spot_cam.SetScreenResponse
	(*IrColorMap)(nil),                              // 10: bosdyn.api.spot_cam.IrColorMap
	(*SetIrColormapRequest)(nil),                    // 11: bosdyn.api.spot_cam.SetIrColormapRequest
	(*SetIrColormapResponse)(nil),                   // 12: bosdyn.api.spot_cam.SetIrColormapResponse
	(*GetIrColormapRequest)(nil),                    // 13: bosdyn.api.spot_cam.GetIrColormapRequest
	(*GetIrColormapResponse)(nil),                   // 14: bosdyn.api.spot_cam.GetIrColormapResponse
	(*IrMeterOverlay)(nil),                          // 15: bosdyn.api.spot_cam.IrMeterOverlay
	(*SetIrMeterOverlayRequest)(nil),                // 16: bosdyn.api.spot_cam.SetIrMeterOverlayRequest
	(*SetIrMeterOverlayResponse)(nil),               // 17: bosdyn.api.spot_cam.SetIrMeterOverlayResponse
	(*GetVisibleCamerasResponse_Stream)(nil),        // 18: bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream
	(*GetVisibleCamerasResponse_Stream_Window)(nil), // 19: bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window
	(*IrColorMap_ScalingPair)(nil),                  // 20: bosdyn.api.spot_cam.IrColorMap.ScalingPair
	(*IrMeterOverlay_NormalizedCoordinates)(nil),    // 21: bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates
	(*api.RequestHeader)(nil),                       // 22: bosdyn.api.RequestHeader
	(*api.ResponseHeader)(nil),                      // 23: bosdyn.api.ResponseHeader
	(*wrapperspb.BoolValue)(nil),                    // 24: google.protobuf.BoolValue
	(*Camera)(nil),                                  // 25: bosdyn.api.spot_cam.Camera
}
var file_bosdyn_api_spot_cam_compositor_proto_depIdxs = []int32{
	22, // 0: bosdyn.api.spot_cam.GetScreenRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 1: bosdyn.api.spot_cam.GetScreenResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 2: bosdyn.api.spot_cam.GetVisibleCamerasRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 3: bosdyn.api.spot_cam.GetVisibleCamerasResponse.header:type_name -> bosdyn.api.ResponseHeader
	18, // 4: bosdyn.api.spot_cam.GetVisibleCamerasResponse.streams:type_name -> bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream
	22, // 5: bosdyn.api.spot_cam.ListScreensRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 6: bosdyn.api.spot_cam.ListScreensResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 7: bosdyn.api.spot_cam.ListScreensResponse.screens:type_name -> bosdyn.api.spot_cam.ScreenDescription
	22, // 8: bosdyn.api.spot_cam.SetScreenRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 9: bosdyn.api.spot_cam.SetScreenResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 10: bosdyn.api.spot_cam.IrColorMap.colormap:type_name -> bosdyn.api.spot_cam.IrColorMap.ColorMap
	20, // 11: bosdyn.api.spot_cam.IrColorMap.scale:type_name -> bosdyn.api.spot_cam.IrColorMap.ScalingPair
	24, // 12: bosdyn.api.spot_cam.IrColorMap.auto_scale:type_name -> google.protobuf.BoolValue
	22, // 13: bosdyn.api.spot_cam.SetIrColormapRequest.header:type_name -> bosdyn.api.RequestHeader
	10, // 14: bosdyn.api.spot_cam.SetIrColormapRequest.map:type_name -> bosdyn.api.spot_cam.IrColorMap
	23, // 15: bosdyn.api.spot_cam.SetIrColormapResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 16: bosdyn.api.spot_cam.GetIrColormapRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 17: bosdyn.api.spot_cam.GetIrColormapResponse.header:type_name -> bosdyn.api.ResponseHeader
	10, // 18: bosdyn.api.spot_cam.GetIrColormapResponse.map:type_name -> bosdyn.api.spot_cam.IrColorMap
	21, // 19: bosdyn.api.spot_cam.IrMeterOverlay.coords:type_name -> bosdyn.api.spot_cam.IrMeterOverlay.NormalizedCoordinates
	22, // 20: bosdyn.api.spot_cam.SetIrMeterOverlayRequest.header:type_name -> bosdyn.api.RequestHeader
	15, // 21: bosdyn.api.spot_cam.SetIrMeterOverlayRequest.overlay:type_name -> bosdyn.api.spot_cam.IrMeterOverlay
	23, // 22: bosdyn.api.spot_cam.SetIrMeterOverlayResponse.header:type_name -> bosdyn.api.ResponseHeader
	19, // 23: bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.window:type_name -> bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.Window
	25, // 24: bosdyn.api.spot_cam.GetVisibleCamerasResponse.Stream.camera:type_name -> bosdyn.api.spot_cam.Camera
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_cam_compositor_proto_init() }
func file_bosdyn_api_spot_cam_compositor_proto_init() {
	if File_bosdyn_api_spot_cam_compositor_proto != nil {
		return
	}
	file_bosdyn_api_spot_cam_camera_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScreenDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetScreenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVisibleCamerasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVisibleCamerasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScreensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListScreensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScreenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetScreenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrColorMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIrColormapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIrColormapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIrColormapRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIrColormapResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrMeterOverlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIrMeterOverlayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetIrMeterOverlayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVisibleCamerasResponse_Stream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVisibleCamerasResponse_Stream_Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrColorMap_ScalingPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_compositor_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IrMeterOverlay_NormalizedCoordinates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_cam_compositor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_cam_compositor_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_cam_compositor_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_cam_compositor_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_cam_compositor_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_cam_compositor_proto = out.File
	file_bosdyn_api_spot_cam_compositor_proto_rawDesc = nil
	file_bosdyn_api_spot_cam_compositor_proto_goTypes = nil
	file_bosdyn_api_spot_cam_compositor_proto_depIdxs = nil
}
