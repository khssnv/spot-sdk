// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot_cam/streamquality.proto

package spot_cam

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Options for automatic white balancing mode.
type StreamParams_AwbModeEnum int32

const (
	StreamParams_OFF              StreamParams_AwbModeEnum = 0
	StreamParams_AUTO             StreamParams_AwbModeEnum = 1
	StreamParams_INCANDESCENT     StreamParams_AwbModeEnum = 2
	StreamParams_FLUORESCENT      StreamParams_AwbModeEnum = 3
	StreamParams_WARM_FLUORESCENT StreamParams_AwbModeEnum = 4
	StreamParams_DAYLIGHT         StreamParams_AwbModeEnum = 5
	StreamParams_CLOUDY           StreamParams_AwbModeEnum = 6
	StreamParams_TWILIGHT         StreamParams_AwbModeEnum = 7
	StreamParams_SHADE            StreamParams_AwbModeEnum = 8
	StreamParams_DARK             StreamParams_AwbModeEnum = 9
)

// Enum value maps for StreamParams_AwbModeEnum.
var (
	StreamParams_AwbModeEnum_name = map[int32]string{
		0: "OFF",
		1: "AUTO",
		2: "INCANDESCENT",
		3: "FLUORESCENT",
		4: "WARM_FLUORESCENT",
		5: "DAYLIGHT",
		6: "CLOUDY",
		7: "TWILIGHT",
		8: "SHADE",
		9: "DARK",
	}
	StreamParams_AwbModeEnum_value = map[string]int32{
		"OFF":              0,
		"AUTO":             1,
		"INCANDESCENT":     2,
		"FLUORESCENT":      3,
		"WARM_FLUORESCENT": 4,
		"DAYLIGHT":         5,
		"CLOUDY":           6,
		"TWILIGHT":         7,
		"SHADE":            8,
		"DARK":             9,
	}
)

func (x StreamParams_AwbModeEnum) Enum() *StreamParams_AwbModeEnum {
	p := new(StreamParams_AwbModeEnum)
	*p = x
	return p
}

func (x StreamParams_AwbModeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamParams_AwbModeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_cam_streamquality_proto_enumTypes[0].Descriptor()
}

func (StreamParams_AwbModeEnum) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_cam_streamquality_proto_enumTypes[0]
}

func (x StreamParams_AwbModeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamParams_AwbModeEnum.Descriptor instead.
func (StreamParams_AwbModeEnum) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{0, 0}
}

// Parameters for how the video stream should be processed and compressed.
type StreamParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The compression level in target BPS
	Targetbitrate *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=targetbitrate,proto3" json:"targetbitrate,omitempty"`
	// How often should the entire feed be refreshed? (in frames)
	// Note: the feed is refreshed on a macroblock level; there are no full I-frames
	Refreshinterval *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=refreshinterval,proto3" json:"refreshinterval,omitempty"`
	// How often should an IDR message get sent? (in frames)
	Idrinterval *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=idrinterval,proto3" json:"idrinterval,omitempty"`
	// Optional setting of automatic white balancing mode.
	Awb *StreamParams_AwbMode `protobuf:"bytes,4,opt,name=awb,proto3" json:"awb,omitempty"`
}

func (x *StreamParams) Reset() {
	*x = StreamParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamParams) ProtoMessage() {}

func (x *StreamParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamParams.ProtoReflect.Descriptor instead.
func (*StreamParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{0}
}

func (x *StreamParams) GetTargetbitrate() *wrapperspb.Int64Value {
	if x != nil {
		return x.Targetbitrate
	}
	return nil
}

func (x *StreamParams) GetRefreshinterval() *wrapperspb.Int64Value {
	if x != nil {
		return x.Refreshinterval
	}
	return nil
}

func (x *StreamParams) GetIdrinterval() *wrapperspb.Int64Value {
	if x != nil {
		return x.Idrinterval
	}
	return nil
}

func (x *StreamParams) GetAwb() *StreamParams_AwbMode {
	if x != nil {
		return x.Awb
	}
	return nil
}

// Request the current video stream parameters.
type GetStreamParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetStreamParamsRequest) Reset() {
	*x = GetStreamParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamParamsRequest) ProtoMessage() {}

func (x *GetStreamParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamParamsRequest.ProtoReflect.Descriptor instead.
func (*GetStreamParamsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{1}
}

func (x *GetStreamParamsRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provides the current video stream parameters.
type GetStreamParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Current video stream parameters.
	Params *StreamParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GetStreamParamsResponse) Reset() {
	*x = GetStreamParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStreamParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamParamsResponse) ProtoMessage() {}

func (x *GetStreamParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamParamsResponse.ProtoReflect.Descriptor instead.
func (*GetStreamParamsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{2}
}

func (x *GetStreamParamsResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStreamParamsResponse) GetParams() *StreamParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Modify the video stream parameters.
type SetStreamParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Set only the fields that should be modified.
	Params *StreamParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *SetStreamParamsRequest) Reset() {
	*x = SetStreamParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStreamParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStreamParamsRequest) ProtoMessage() {}

func (x *SetStreamParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStreamParamsRequest.ProtoReflect.Descriptor instead.
func (*SetStreamParamsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{3}
}

func (x *SetStreamParamsRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetStreamParamsRequest) GetParams() *StreamParams {
	if x != nil {
		return x.Params
	}
	return nil
}

// Result of setting video stream parameters.
type SetStreamParamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Applied video stream parameters.
	Params *StreamParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *SetStreamParamsResponse) Reset() {
	*x = SetStreamParamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetStreamParamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetStreamParamsResponse) ProtoMessage() {}

func (x *SetStreamParamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetStreamParamsResponse.ProtoReflect.Descriptor instead.
func (*SetStreamParamsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{4}
}

func (x *SetStreamParamsResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetStreamParamsResponse) GetParams() *StreamParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type EnableCongestionControlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// A boolean 'true' enables receiver congestion control while 'false' disables it
	EnableCongestionControl bool `protobuf:"varint,2,opt,name=enable_congestion_control,json=enableCongestionControl,proto3" json:"enable_congestion_control,omitempty"`
}

func (x *EnableCongestionControlRequest) Reset() {
	*x = EnableCongestionControlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableCongestionControlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCongestionControlRequest) ProtoMessage() {}

func (x *EnableCongestionControlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCongestionControlRequest.ProtoReflect.Descriptor instead.
func (*EnableCongestionControlRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{5}
}

func (x *EnableCongestionControlRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EnableCongestionControlRequest) GetEnableCongestionControl() bool {
	if x != nil {
		return x.EnableCongestionControl
	}
	return false
}

type EnableCongestionControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *EnableCongestionControlResponse) Reset() {
	*x = EnableCongestionControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableCongestionControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableCongestionControlResponse) ProtoMessage() {}

func (x *EnableCongestionControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableCongestionControlResponse.ProtoReflect.Descriptor instead.
func (*EnableCongestionControlResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{6}
}

func (x *EnableCongestionControlResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Wrapper for AwbModeEnum to allow it to be optionally set.
type StreamParams_AwbMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Awb StreamParams_AwbModeEnum `protobuf:"varint,1,opt,name=awb,proto3,enum=bosdyn.api.spot_cam.StreamParams_AwbModeEnum" json:"awb,omitempty"`
}

func (x *StreamParams_AwbMode) Reset() {
	*x = StreamParams_AwbMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamParams_AwbMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamParams_AwbMode) ProtoMessage() {}

func (x *StreamParams_AwbMode) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamParams_AwbMode.ProtoReflect.Descriptor instead.
func (*StreamParams_AwbMode) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamParams_AwbMode) GetAwb() StreamParams_AwbModeEnum {
	if x != nil {
		return x.Awb
	}
	return StreamParams_OFF
}

var File_bosdyn_api_spot_cam_streamquality_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_cam_streamquality_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x71, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x1a, 0x17,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf9, 0x03, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x64, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x64, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x3b, 0x0a, 0x03, 0x61, 0x77, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x2e, 0x41, 0x77, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x03, 0x61, 0x77, 0x62, 0x1a, 0x4a,
	0x0a, 0x07, 0x41, 0x77, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x03, 0x61, 0x77, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x41, 0x77, 0x62, 0x4d, 0x6f, 0x64,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x03, 0x61, 0x77, 0x62, 0x22, 0x96, 0x01, 0x0a, 0x0b, 0x41,
	0x77, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46,
	0x46, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x4e, 0x43, 0x41, 0x4e, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x4c, 0x55, 0x4f, 0x52, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x57, 0x41, 0x52, 0x4d, 0x5f, 0x46, 0x4c, 0x55, 0x4f, 0x52, 0x45, 0x53,
	0x43, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x59, 0x4c, 0x49, 0x47,
	0x48, 0x54, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x59, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x54, 0x57, 0x49, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x10, 0x07, 0x12, 0x09,
	0x0a, 0x05, 0x53, 0x48, 0x41, 0x44, 0x45, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x52,
	0x4b, 0x10, 0x09, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x88, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x86, 0x01, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22,
	0x8f, 0x01, 0x0a, 0x1e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x22, 0x55, 0x0a, 0x1f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x67, 0x65,
	0x73, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x50, 0x42, 0x12, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e,
	0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_cam_streamquality_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_cam_streamquality_proto_rawDescData = file_bosdyn_api_spot_cam_streamquality_proto_rawDesc
)

func file_bosdyn_api_spot_cam_streamquality_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_cam_streamquality_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_cam_streamquality_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_cam_streamquality_proto_rawDescData)
	})
	return file_bosdyn_api_spot_cam_streamquality_proto_rawDescData
}

var file_bosdyn_api_spot_cam_streamquality_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_spot_cam_streamquality_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bosdyn_api_spot_cam_streamquality_proto_goTypes = []interface{}{
	(StreamParams_AwbModeEnum)(0),           // 0: bosdyn.api.spot_cam.StreamParams.AwbModeEnum
	(*StreamParams)(nil),                    // 1: bosdyn.api.spot_cam.StreamParams
	(*GetStreamParamsRequest)(nil),          // 2: bosdyn.api.spot_cam.GetStreamParamsRequest
	(*GetStreamParamsResponse)(nil),         // 3: bosdyn.api.spot_cam.GetStreamParamsResponse
	(*SetStreamParamsRequest)(nil),          // 4: bosdyn.api.spot_cam.SetStreamParamsRequest
	(*SetStreamParamsResponse)(nil),         // 5: bosdyn.api.spot_cam.SetStreamParamsResponse
	(*EnableCongestionControlRequest)(nil),  // 6: bosdyn.api.spot_cam.EnableCongestionControlRequest
	(*EnableCongestionControlResponse)(nil), // 7: bosdyn.api.spot_cam.EnableCongestionControlResponse
	(*StreamParams_AwbMode)(nil),            // 8: bosdyn.api.spot_cam.StreamParams.AwbMode
	(*wrapperspb.Int64Value)(nil),           // 9: google.protobuf.Int64Value
	(*api.RequestHeader)(nil),               // 10: bosdyn.api.RequestHeader
	(*api.ResponseHeader)(nil),              // 11: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_spot_cam_streamquality_proto_depIdxs = []int32{
	9,  // 0: bosdyn.api.spot_cam.StreamParams.targetbitrate:type_name -> google.protobuf.Int64Value
	9,  // 1: bosdyn.api.spot_cam.StreamParams.refreshinterval:type_name -> google.protobuf.Int64Value
	9,  // 2: bosdyn.api.spot_cam.StreamParams.idrinterval:type_name -> google.protobuf.Int64Value
	8,  // 3: bosdyn.api.spot_cam.StreamParams.awb:type_name -> bosdyn.api.spot_cam.StreamParams.AwbMode
	10, // 4: bosdyn.api.spot_cam.GetStreamParamsRequest.header:type_name -> bosdyn.api.RequestHeader
	11, // 5: bosdyn.api.spot_cam.GetStreamParamsResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 6: bosdyn.api.spot_cam.GetStreamParamsResponse.params:type_name -> bosdyn.api.spot_cam.StreamParams
	10, // 7: bosdyn.api.spot_cam.SetStreamParamsRequest.header:type_name -> bosdyn.api.RequestHeader
	1,  // 8: bosdyn.api.spot_cam.SetStreamParamsRequest.params:type_name -> bosdyn.api.spot_cam.StreamParams
	11, // 9: bosdyn.api.spot_cam.SetStreamParamsResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 10: bosdyn.api.spot_cam.SetStreamParamsResponse.params:type_name -> bosdyn.api.spot_cam.StreamParams
	10, // 11: bosdyn.api.spot_cam.EnableCongestionControlRequest.header:type_name -> bosdyn.api.RequestHeader
	11, // 12: bosdyn.api.spot_cam.EnableCongestionControlResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 13: bosdyn.api.spot_cam.StreamParams.AwbMode.awb:type_name -> bosdyn.api.spot_cam.StreamParams.AwbModeEnum
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_cam_streamquality_proto_init() }
func file_bosdyn_api_spot_cam_streamquality_proto_init() {
	if File_bosdyn_api_spot_cam_streamquality_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStreamParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStreamParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetStreamParamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableCongestionControlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableCongestionControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_streamquality_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamParams_AwbMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_cam_streamquality_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_cam_streamquality_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_cam_streamquality_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_cam_streamquality_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_cam_streamquality_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_cam_streamquality_proto = out.File
	file_bosdyn_api_spot_cam_streamquality_proto_rawDesc = nil
	file_bosdyn_api_spot_cam_streamquality_proto_goTypes = nil
	file_bosdyn_api_spot_cam_streamquality_proto_depIdxs = nil
}
