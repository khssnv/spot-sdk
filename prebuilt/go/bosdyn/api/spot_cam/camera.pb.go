// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot_cam/camera.proto

package spot_cam

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Camera struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the camera.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Resolution of the sensor, where x = width and y = height.
	Resolution *api.Vec2 `protobuf:"bytes,2,opt,name=resolution,proto3" json:"resolution,omitempty"`
	// The frame name for the parent frame of this camera. This frame will show up in the FrameTreeSnapshot
	// grabbed from the payload registration service.
	BaseFrameName string `protobuf:"bytes,3,opt,name=base_frame_name,json=baseFrameName,proto3" json:"base_frame_name,omitempty"`
	// 'base_tfrom_sensor' defines the transform from the specific camera to the named base from.
	// This is deprecated in favor of 'base_tform_sensor' which follows the intended naming convention
	// and FrameTree directionality convention of the Spot system as defined in geometry.proto.
	//
	// Deprecated: Do not use.
	BaseTfromSensor *api.SE3Pose `protobuf:"bytes,4,opt,name=base_tfrom_sensor,json=baseTfromSensor,proto3" json:"base_tfrom_sensor,omitempty"`
	// The transform from the named base frame to this specific camera
	BaseTformSensor *api.SE3Pose `protobuf:"bytes,7,opt,name=base_tform_sensor,json=baseTformSensor,proto3" json:"base_tform_sensor,omitempty"`
	// Types that are assignable to Intrinsics:
	//	*Camera_Pinhole
	//	*Camera_Spherical
	Intrinsics isCamera_Intrinsics `protobuf_oneof:"intrinsics"`
}

func (x *Camera) Reset() {
	*x = Camera{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_camera_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camera) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera) ProtoMessage() {}

func (x *Camera) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_camera_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera.ProtoReflect.Descriptor instead.
func (*Camera) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_camera_proto_rawDescGZIP(), []int{0}
}

func (x *Camera) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Camera) GetResolution() *api.Vec2 {
	if x != nil {
		return x.Resolution
	}
	return nil
}

func (x *Camera) GetBaseFrameName() string {
	if x != nil {
		return x.BaseFrameName
	}
	return ""
}

// Deprecated: Do not use.
func (x *Camera) GetBaseTfromSensor() *api.SE3Pose {
	if x != nil {
		return x.BaseTfromSensor
	}
	return nil
}

func (x *Camera) GetBaseTformSensor() *api.SE3Pose {
	if x != nil {
		return x.BaseTformSensor
	}
	return nil
}

func (m *Camera) GetIntrinsics() isCamera_Intrinsics {
	if m != nil {
		return m.Intrinsics
	}
	return nil
}

func (x *Camera) GetPinhole() *Camera_PinholeIntrinsics {
	if x, ok := x.GetIntrinsics().(*Camera_Pinhole); ok {
		return x.Pinhole
	}
	return nil
}

func (x *Camera) GetSpherical() *Camera_SphericalLimits {
	if x, ok := x.GetIntrinsics().(*Camera_Spherical); ok {
		return x.Spherical
	}
	return nil
}

type isCamera_Intrinsics interface {
	isCamera_Intrinsics()
}

type Camera_Pinhole struct {
	// Physical cameras
	Pinhole *Camera_PinholeIntrinsics `protobuf:"bytes,5,opt,name=pinhole,proto3,oneof"`
}

type Camera_Spherical struct {
	// Only synthetic spherical panoramas
	Spherical *Camera_SphericalLimits `protobuf:"bytes,6,opt,name=spherical,proto3,oneof"`
}

func (*Camera_Pinhole) isCamera_Intrinsics() {}

func (*Camera_Spherical) isCamera_Intrinsics() {}

type Camera_PinholeIntrinsics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Focal_length in pixels
	FocalLength *api.Vec2 `protobuf:"bytes,1,opt,name=focal_length,json=focalLength,proto3" json:"focal_length,omitempty"`
	// Center point in pixels
	CenterPoint *api.Vec2 `protobuf:"bytes,2,opt,name=center_point,json=centerPoint,proto3" json:"center_point,omitempty"`
	// The following 4 parameters are radial distortion coefficeints to 4 orders.
	// See: https://en.wikipedia.org/wiki/Distortion_(optics)#Software_correction
	// If all 4 of these values are 0, do not apply any correction.
	K1 float32 `protobuf:"fixed32,3,opt,name=k1,proto3" json:"k1,omitempty"`
	K2 float32 `protobuf:"fixed32,4,opt,name=k2,proto3" json:"k2,omitempty"`
	K3 float32 `protobuf:"fixed32,5,opt,name=k3,proto3" json:"k3,omitempty"`
	K4 float32 `protobuf:"fixed32,6,opt,name=k4,proto3" json:"k4,omitempty"`
}

func (x *Camera_PinholeIntrinsics) Reset() {
	*x = Camera_PinholeIntrinsics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_camera_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camera_PinholeIntrinsics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera_PinholeIntrinsics) ProtoMessage() {}

func (x *Camera_PinholeIntrinsics) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_camera_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera_PinholeIntrinsics.ProtoReflect.Descriptor instead.
func (*Camera_PinholeIntrinsics) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_camera_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Camera_PinholeIntrinsics) GetFocalLength() *api.Vec2 {
	if x != nil {
		return x.FocalLength
	}
	return nil
}

func (x *Camera_PinholeIntrinsics) GetCenterPoint() *api.Vec2 {
	if x != nil {
		return x.CenterPoint
	}
	return nil
}

func (x *Camera_PinholeIntrinsics) GetK1() float32 {
	if x != nil {
		return x.K1
	}
	return 0
}

func (x *Camera_PinholeIntrinsics) GetK2() float32 {
	if x != nil {
		return x.K2
	}
	return 0
}

func (x *Camera_PinholeIntrinsics) GetK3() float32 {
	if x != nil {
		return x.K3
	}
	return 0
}

func (x *Camera_PinholeIntrinsics) GetK4() float32 {
	if x != nil {
		return x.K4
	}
	return 0
}

// Spherical limits are the minimum and maximum angle of the image.
// IE the upper left pixel is at min_angle.x, min_angle.y
// and the lower right pixel is at max_angle.x, max_angle.y
// for a full-FOV image this will be (-180, 90) and (180, -90)
type Camera_SphericalLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinAngle *api.Vec2 `protobuf:"bytes,1,opt,name=min_angle,json=minAngle,proto3" json:"min_angle,omitempty"`
	MaxAngle *api.Vec2 `protobuf:"bytes,2,opt,name=max_angle,json=maxAngle,proto3" json:"max_angle,omitempty"`
}

func (x *Camera_SphericalLimits) Reset() {
	*x = Camera_SphericalLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_camera_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Camera_SphericalLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Camera_SphericalLimits) ProtoMessage() {}

func (x *Camera_SphericalLimits) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_camera_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Camera_SphericalLimits.ProtoReflect.Descriptor instead.
func (*Camera_SphericalLimits) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_camera_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Camera_SphericalLimits) GetMinAngle() *api.Vec2 {
	if x != nil {
		return x.MinAngle
	}
	return nil
}

func (x *Camera_SphericalLimits) GetMaxAngle() *api.Vec2 {
	if x != nil {
		return x.MaxAngle
	}
	return nil
}

var File_bosdyn_api_spot_cam_camera_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_cam_camera_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x13, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xd3, 0x05, 0x0a, 0x06, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x30, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61,
	0x73, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x74, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0f, 0x62, 0x61, 0x73, 0x65, 0x54, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x12, 0x3f, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73,
	0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65,
	0x52, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e,
	0x50, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63,
	0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x09,
	0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x70, 0x68, 0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x1a, 0xbd, 0x01, 0x0a, 0x11, 0x50, 0x69,
	0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x12,
	0x33, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x0b, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x0c, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x0b, 0x63, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x31, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6b, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x32, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6b, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x33, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6b, 0x33, 0x12, 0x0e, 0x0a, 0x02, 0x6b, 0x34, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x6b, 0x34, 0x1a, 0x6f, 0x0a, 0x0f, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x09,
	0x6d, 0x69, 0x6e, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x32, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x09, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32,
	0x52, 0x08, 0x6d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x6c, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x42, 0x49, 0x42, 0x0b, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_cam_camera_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_cam_camera_proto_rawDescData = file_bosdyn_api_spot_cam_camera_proto_rawDesc
)

func file_bosdyn_api_spot_cam_camera_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_cam_camera_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_cam_camera_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_cam_camera_proto_rawDescData)
	})
	return file_bosdyn_api_spot_cam_camera_proto_rawDescData
}

var file_bosdyn_api_spot_cam_camera_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_bosdyn_api_spot_cam_camera_proto_goTypes = []interface{}{
	(*Camera)(nil),                   // 0: bosdyn.api.spot_cam.Camera
	(*Camera_PinholeIntrinsics)(nil), // 1: bosdyn.api.spot_cam.Camera.PinholeIntrinsics
	(*Camera_SphericalLimits)(nil),   // 2: bosdyn.api.spot_cam.Camera.SphericalLimits
	(*api.Vec2)(nil),                 // 3: bosdyn.api.Vec2
	(*api.SE3Pose)(nil),              // 4: bosdyn.api.SE3Pose
}
var file_bosdyn_api_spot_cam_camera_proto_depIdxs = []int32{
	3, // 0: bosdyn.api.spot_cam.Camera.resolution:type_name -> bosdyn.api.Vec2
	4, // 1: bosdyn.api.spot_cam.Camera.base_tfrom_sensor:type_name -> bosdyn.api.SE3Pose
	4, // 2: bosdyn.api.spot_cam.Camera.base_tform_sensor:type_name -> bosdyn.api.SE3Pose
	1, // 3: bosdyn.api.spot_cam.Camera.pinhole:type_name -> bosdyn.api.spot_cam.Camera.PinholeIntrinsics
	2, // 4: bosdyn.api.spot_cam.Camera.spherical:type_name -> bosdyn.api.spot_cam.Camera.SphericalLimits
	3, // 5: bosdyn.api.spot_cam.Camera.PinholeIntrinsics.focal_length:type_name -> bosdyn.api.Vec2
	3, // 6: bosdyn.api.spot_cam.Camera.PinholeIntrinsics.center_point:type_name -> bosdyn.api.Vec2
	3, // 7: bosdyn.api.spot_cam.Camera.SphericalLimits.min_angle:type_name -> bosdyn.api.Vec2
	3, // 8: bosdyn.api.spot_cam.Camera.SphericalLimits.max_angle:type_name -> bosdyn.api.Vec2
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_cam_camera_proto_init() }
func file_bosdyn_api_spot_cam_camera_proto_init() {
	if File_bosdyn_api_spot_cam_camera_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_cam_camera_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camera); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_camera_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camera_PinholeIntrinsics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_camera_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Camera_SphericalLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_spot_cam_camera_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Camera_Pinhole)(nil),
		(*Camera_Spherical)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_cam_camera_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_cam_camera_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_cam_camera_proto_depIdxs,
		MessageInfos:      file_bosdyn_api_spot_cam_camera_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_cam_camera_proto = out.File
	file_bosdyn_api_spot_cam_camera_proto_rawDesc = nil
	file_bosdyn_api_spot_cam_camera_proto_goTypes = nil
	file_bosdyn_api_spot_cam_camera_proto_depIdxs = nil
}
