// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot_cam/ptz.proto

package spot_cam

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//PtzDescription provides information about a given PTZ. The name is usually all that's required to
//describe a PTZ, but ListPtzResponse will include more information.
type PtzDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of a particular controllable PTZ mechanism (real or virtual).
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If a limit is not set, all positions are valid
	PanLimit  *PtzDescription_Limits `protobuf:"bytes,2,opt,name=pan_limit,json=panLimit,proto3" json:"pan_limit,omitempty"`    // Limits in degrees.
	TiltLimit *PtzDescription_Limits `protobuf:"bytes,3,opt,name=tilt_limit,json=tiltLimit,proto3" json:"tilt_limit,omitempty"` // Limits in degrees.
	ZoomLimit *PtzDescription_Limits `protobuf:"bytes,4,opt,name=zoom_limit,json=zoomLimit,proto3" json:"zoom_limit,omitempty"` // Limits in zoom level.
}

func (x *PtzDescription) Reset() {
	*x = PtzDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzDescription) ProtoMessage() {}

func (x *PtzDescription) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzDescription.ProtoReflect.Descriptor instead.
func (*PtzDescription) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{0}
}

func (x *PtzDescription) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PtzDescription) GetPanLimit() *PtzDescription_Limits {
	if x != nil {
		return x.PanLimit
	}
	return nil
}

func (x *PtzDescription) GetTiltLimit() *PtzDescription_Limits {
	if x != nil {
		return x.TiltLimit
	}
	return nil
}

func (x *PtzDescription) GetZoomLimit() *PtzDescription_Limits {
	if x != nil {
		return x.ZoomLimit
	}
	return nil
}

// Doubles as a description of current state, or a command for a new position.
type PtzPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The "mech" ptz can pan [0, 360] degrees,
	// tilt approximately [-30, 100] degrees where 0 is the horizon, IR and PTZ models differ
	// and zoom between 1x and 30x.
	Ptz  *PtzDescription        `protobuf:"bytes,2,opt,name=ptz,proto3" json:"ptz,omitempty"`
	Pan  *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=pan,proto3" json:"pan,omitempty"`   // degrees
	Tilt *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=tilt,proto3" json:"tilt,omitempty"` // degrees
	Zoom *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=zoom,proto3" json:"zoom,omitempty"` // zoom level
}

func (x *PtzPosition) Reset() {
	*x = PtzPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzPosition) ProtoMessage() {}

func (x *PtzPosition) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzPosition.ProtoReflect.Descriptor instead.
func (*PtzPosition) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{1}
}

func (x *PtzPosition) GetPtz() *PtzDescription {
	if x != nil {
		return x.Ptz
	}
	return nil
}

func (x *PtzPosition) GetPan() *wrapperspb.FloatValue {
	if x != nil {
		return x.Pan
	}
	return nil
}

func (x *PtzPosition) GetTilt() *wrapperspb.FloatValue {
	if x != nil {
		return x.Tilt
	}
	return nil
}

func (x *PtzPosition) GetZoom() *wrapperspb.FloatValue {
	if x != nil {
		return x.Zoom
	}
	return nil
}

// Doubles as a description of current state, or a command for a new velocity.
type PtzVelocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The "mech" ptz cannot be used with Velocity.
	Ptz  *PtzDescription        `protobuf:"bytes,2,opt,name=ptz,proto3" json:"ptz,omitempty"`
	Pan  *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=pan,proto3" json:"pan,omitempty"`   // degrees/second
	Tilt *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=tilt,proto3" json:"tilt,omitempty"` // degrees/second
	Zoom *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=zoom,proto3" json:"zoom,omitempty"` // zoom level/second
}

func (x *PtzVelocity) Reset() {
	*x = PtzVelocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzVelocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzVelocity) ProtoMessage() {}

func (x *PtzVelocity) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzVelocity.ProtoReflect.Descriptor instead.
func (*PtzVelocity) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{2}
}

func (x *PtzVelocity) GetPtz() *PtzDescription {
	if x != nil {
		return x.Ptz
	}
	return nil
}

func (x *PtzVelocity) GetPan() *wrapperspb.FloatValue {
	if x != nil {
		return x.Pan
	}
	return nil
}

func (x *PtzVelocity) GetTilt() *wrapperspb.FloatValue {
	if x != nil {
		return x.Tilt
	}
	return nil
}

func (x *PtzVelocity) GetZoom() *wrapperspb.FloatValue {
	if x != nil {
		return x.Zoom
	}
	return nil
}

// Request the current position of a ptz.
type GetPtzPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Only the name is used.
	Ptz *PtzDescription `protobuf:"bytes,2,opt,name=ptz,proto3" json:"ptz,omitempty"`
}

func (x *GetPtzPositionRequest) Reset() {
	*x = GetPtzPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPtzPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPtzPositionRequest) ProtoMessage() {}

func (x *GetPtzPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPtzPositionRequest.ProtoReflect.Descriptor instead.
func (*GetPtzPositionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{3}
}

func (x *GetPtzPositionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetPtzPositionRequest) GetPtz() *PtzDescription {
	if x != nil {
		return x.Ptz
	}
	return nil
}

// Provides the current measured position.
type GetPtzPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Current position of the mechanism.
	Position *PtzPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *GetPtzPositionResponse) Reset() {
	*x = GetPtzPositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPtzPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPtzPositionResponse) ProtoMessage() {}

func (x *GetPtzPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPtzPositionResponse.ProtoReflect.Descriptor instead.
func (*GetPtzPositionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{4}
}

func (x *GetPtzPositionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetPtzPositionResponse) GetPosition() *PtzPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

// Request the velocity of a ptz
type GetPtzVelocityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Only the name is used.
	Ptz *PtzDescription `protobuf:"bytes,2,opt,name=ptz,proto3" json:"ptz,omitempty"`
}

func (x *GetPtzVelocityRequest) Reset() {
	*x = GetPtzVelocityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPtzVelocityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPtzVelocityRequest) ProtoMessage() {}

func (x *GetPtzVelocityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPtzVelocityRequest.ProtoReflect.Descriptor instead.
func (*GetPtzVelocityRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{5}
}

func (x *GetPtzVelocityRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetPtzVelocityRequest) GetPtz() *PtzDescription {
	if x != nil {
		return x.Ptz
	}
	return nil
}

// Provides the current measured velocity.
type GetPtzVelocityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Current velocity of the mechanism.
	Velocity *PtzVelocity `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *GetPtzVelocityResponse) Reset() {
	*x = GetPtzVelocityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPtzVelocityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPtzVelocityResponse) ProtoMessage() {}

func (x *GetPtzVelocityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPtzVelocityResponse.ProtoReflect.Descriptor instead.
func (*GetPtzVelocityResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{6}
}

func (x *GetPtzVelocityResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetPtzVelocityResponse) GetVelocity() *PtzVelocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

// Request all available ptzs on the SpotCam.
type ListPtzRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListPtzRequest) Reset() {
	*x = ListPtzRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPtzRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPtzRequest) ProtoMessage() {}

func (x *ListPtzRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPtzRequest.ProtoReflect.Descriptor instead.
func (*ListPtzRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{7}
}

func (x *ListPtzRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provide all available ptz on the SpotCam.
type ListPtzResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of ptzs, real and virtual.
	Ptzs []*PtzDescription `protobuf:"bytes,2,rep,name=ptzs,proto3" json:"ptzs,omitempty"`
}

func (x *ListPtzResponse) Reset() {
	*x = ListPtzResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPtzResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPtzResponse) ProtoMessage() {}

func (x *ListPtzResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPtzResponse.ProtoReflect.Descriptor instead.
func (*ListPtzResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{8}
}

func (x *ListPtzResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListPtzResponse) GetPtzs() []*PtzDescription {
	if x != nil {
		return x.Ptzs
	}
	return nil
}

// Command the ptz to move to a position.
type SetPtzPositionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Desired position to achieve.
	Position *PtzPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *SetPtzPositionRequest) Reset() {
	*x = SetPtzPositionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPtzPositionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPtzPositionRequest) ProtoMessage() {}

func (x *SetPtzPositionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPtzPositionRequest.ProtoReflect.Descriptor instead.
func (*SetPtzPositionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{9}
}

func (x *SetPtzPositionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetPtzPositionRequest) GetPosition() *PtzPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

// Result of a SetPtzPositionRequest.
type SetPtzPositionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Applied desired position.
	Position *PtzPosition `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *SetPtzPositionResponse) Reset() {
	*x = SetPtzPositionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPtzPositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPtzPositionResponse) ProtoMessage() {}

func (x *SetPtzPositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPtzPositionResponse.ProtoReflect.Descriptor instead.
func (*SetPtzPositionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{10}
}

func (x *SetPtzPositionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetPtzPositionResponse) GetPosition() *PtzPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

// Command a velocity for a ptz.
type SetPtzVelocityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Desired velocity to achieve.
	Velocity *PtzVelocity `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *SetPtzVelocityRequest) Reset() {
	*x = SetPtzVelocityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPtzVelocityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPtzVelocityRequest) ProtoMessage() {}

func (x *SetPtzVelocityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPtzVelocityRequest.ProtoReflect.Descriptor instead.
func (*SetPtzVelocityRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{11}
}

func (x *SetPtzVelocityRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetPtzVelocityRequest) GetVelocity() *PtzVelocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

// Result of a SetPtzVelocityRequest.
type SetPtzVelocityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Applied desired position.
	Velocity *PtzVelocity `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
}

func (x *SetPtzVelocityResponse) Reset() {
	*x = SetPtzVelocityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPtzVelocityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPtzVelocityResponse) ProtoMessage() {}

func (x *SetPtzVelocityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPtzVelocityResponse.ProtoReflect.Descriptor instead.
func (*SetPtzVelocityResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{12}
}

func (x *SetPtzVelocityResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetPtzVelocityResponse) GetVelocity() *PtzVelocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

// Command to reset PTZ autofocus
type InitializeLensRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *InitializeLensRequest) Reset() {
	*x = InitializeLensRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeLensRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeLensRequest) ProtoMessage() {}

func (x *InitializeLensRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeLensRequest.ProtoReflect.Descriptor instead.
func (*InitializeLensRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{13}
}

func (x *InitializeLensRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Result of a InitializeLensRequest.
type InitializeLensResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *InitializeLensResponse) Reset() {
	*x = InitializeLensResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitializeLensResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitializeLensResponse) ProtoMessage() {}

func (x *InitializeLensResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitializeLensResponse.ProtoReflect.Descriptor instead.
func (*InitializeLensResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{14}
}

func (x *InitializeLensResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Limits for a single axis.
type PtzDescription_Limits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min *wrapperspb.FloatValue `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"` // Units depend on the axis being controlled.
	Max *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"` // Units depend on the axis being controlled.
}

func (x *PtzDescription_Limits) Reset() {
	*x = PtzDescription_Limits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PtzDescription_Limits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PtzDescription_Limits) ProtoMessage() {}

func (x *PtzDescription_Limits) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_ptz_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PtzDescription_Limits.ProtoReflect.Descriptor instead.
func (*PtzDescription_Limits) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PtzDescription_Limits) GetMin() *wrapperspb.FloatValue {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *PtzDescription_Limits) GetMax() *wrapperspb.FloatValue {
	if x != nil {
		return x.Max
	}
	return nil
}

var File_bosdyn_api_spot_cam_ptz_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_cam_ptz_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x70, 0x74, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x63, 0x61, 0x6d, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x02,
	0x0a, 0x0e, 0x50, 0x74, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74,
	0x7a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x73, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a,
	0x0a, 0x74, 0x69, 0x6c, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x09, 0x74,
	0x69, 0x6c, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x49, 0x0a, 0x0a, 0x7a, 0x6f, 0x6f, 0x6d,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63,
	0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x52, 0x09, 0x7a, 0x6f, 0x6f, 0x6d, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x1a, 0x66, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2d, 0x0a,
	0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x2d, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0xd5, 0x01, 0x0a, 0x0b,
	0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x03, 0x70,
	0x74, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50,
	0x74, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70,
	0x74, 0x7a, 0x12, 0x2d, 0x0a, 0x03, 0x70, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x61,
	0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x69,
	0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x7a,
	0x6f, 0x6f, 0x6d, 0x22, 0xd5, 0x01, 0x0a, 0x0b, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x35, 0x0a, 0x03, 0x70, 0x74, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x74, 0x7a, 0x12, 0x2d, 0x0a, 0x03, 0x70, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x70, 0x61, 0x6e, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x69, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x69, 0x6c, 0x74, 0x12, 0x2f, 0x0a, 0x04, 0x7a, 0x6f,
	0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x7a, 0x6f, 0x6f, 0x6d, 0x22, 0x81, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x70, 0x74, 0x7a, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x74, 0x7a, 0x22,
	0x8a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x03, 0x70, 0x74, 0x7a,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x70, 0x74, 0x7a,
	0x22, 0x8a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x43, 0x0a,
	0x0e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x74, 0x7a, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x7e, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x74, 0x7a, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x04, 0x70, 0x74, 0x7a,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74,
	0x7a, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x70, 0x74,
	0x7a, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8a, 0x01,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x50, 0x74, 0x7a, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e,
	0x50, 0x74, 0x7a, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x22, 0x8a, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x50, 0x74, 0x7a,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x50, 0x74, 0x7a,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x22, 0x4a, 0x0a, 0x15, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x4c, 0x65, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x4c,
	0x0a, 0x16, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x4c, 0x65, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x46, 0x42, 0x08,
	0x50, 0x74, 0x7a, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x63, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_cam_ptz_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_cam_ptz_proto_rawDescData = file_bosdyn_api_spot_cam_ptz_proto_rawDesc
)

func file_bosdyn_api_spot_cam_ptz_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_cam_ptz_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_cam_ptz_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_cam_ptz_proto_rawDescData)
	})
	return file_bosdyn_api_spot_cam_ptz_proto_rawDescData
}

var file_bosdyn_api_spot_cam_ptz_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_bosdyn_api_spot_cam_ptz_proto_goTypes = []interface{}{
	(*PtzDescription)(nil),         // 0: bosdyn.api.spot_cam.PtzDescription
	(*PtzPosition)(nil),            // 1: bosdyn.api.spot_cam.PtzPosition
	(*PtzVelocity)(nil),            // 2: bosdyn.api.spot_cam.PtzVelocity
	(*GetPtzPositionRequest)(nil),  // 3: bosdyn.api.spot_cam.GetPtzPositionRequest
	(*GetPtzPositionResponse)(nil), // 4: bosdyn.api.spot_cam.GetPtzPositionResponse
	(*GetPtzVelocityRequest)(nil),  // 5: bosdyn.api.spot_cam.GetPtzVelocityRequest
	(*GetPtzVelocityResponse)(nil), // 6: bosdyn.api.spot_cam.GetPtzVelocityResponse
	(*ListPtzRequest)(nil),         // 7: bosdyn.api.spot_cam.ListPtzRequest
	(*ListPtzResponse)(nil),        // 8: bosdyn.api.spot_cam.ListPtzResponse
	(*SetPtzPositionRequest)(nil),  // 9: bosdyn.api.spot_cam.SetPtzPositionRequest
	(*SetPtzPositionResponse)(nil), // 10: bosdyn.api.spot_cam.SetPtzPositionResponse
	(*SetPtzVelocityRequest)(nil),  // 11: bosdyn.api.spot_cam.SetPtzVelocityRequest
	(*SetPtzVelocityResponse)(nil), // 12: bosdyn.api.spot_cam.SetPtzVelocityResponse
	(*InitializeLensRequest)(nil),  // 13: bosdyn.api.spot_cam.InitializeLensRequest
	(*InitializeLensResponse)(nil), // 14: bosdyn.api.spot_cam.InitializeLensResponse
	(*PtzDescription_Limits)(nil),  // 15: bosdyn.api.spot_cam.PtzDescription.Limits
	(*wrapperspb.FloatValue)(nil),  // 16: google.protobuf.FloatValue
	(*api.RequestHeader)(nil),      // 17: bosdyn.api.RequestHeader
	(*api.ResponseHeader)(nil),     // 18: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_spot_cam_ptz_proto_depIdxs = []int32{
	15, // 0: bosdyn.api.spot_cam.PtzDescription.pan_limit:type_name -> bosdyn.api.spot_cam.PtzDescription.Limits
	15, // 1: bosdyn.api.spot_cam.PtzDescription.tilt_limit:type_name -> bosdyn.api.spot_cam.PtzDescription.Limits
	15, // 2: bosdyn.api.spot_cam.PtzDescription.zoom_limit:type_name -> bosdyn.api.spot_cam.PtzDescription.Limits
	0,  // 3: bosdyn.api.spot_cam.PtzPosition.ptz:type_name -> bosdyn.api.spot_cam.PtzDescription
	16, // 4: bosdyn.api.spot_cam.PtzPosition.pan:type_name -> google.protobuf.FloatValue
	16, // 5: bosdyn.api.spot_cam.PtzPosition.tilt:type_name -> google.protobuf.FloatValue
	16, // 6: bosdyn.api.spot_cam.PtzPosition.zoom:type_name -> google.protobuf.FloatValue
	0,  // 7: bosdyn.api.spot_cam.PtzVelocity.ptz:type_name -> bosdyn.api.spot_cam.PtzDescription
	16, // 8: bosdyn.api.spot_cam.PtzVelocity.pan:type_name -> google.protobuf.FloatValue
	16, // 9: bosdyn.api.spot_cam.PtzVelocity.tilt:type_name -> google.protobuf.FloatValue
	16, // 10: bosdyn.api.spot_cam.PtzVelocity.zoom:type_name -> google.protobuf.FloatValue
	17, // 11: bosdyn.api.spot_cam.GetPtzPositionRequest.header:type_name -> bosdyn.api.RequestHeader
	0,  // 12: bosdyn.api.spot_cam.GetPtzPositionRequest.ptz:type_name -> bosdyn.api.spot_cam.PtzDescription
	18, // 13: bosdyn.api.spot_cam.GetPtzPositionResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 14: bosdyn.api.spot_cam.GetPtzPositionResponse.position:type_name -> bosdyn.api.spot_cam.PtzPosition
	17, // 15: bosdyn.api.spot_cam.GetPtzVelocityRequest.header:type_name -> bosdyn.api.RequestHeader
	0,  // 16: bosdyn.api.spot_cam.GetPtzVelocityRequest.ptz:type_name -> bosdyn.api.spot_cam.PtzDescription
	18, // 17: bosdyn.api.spot_cam.GetPtzVelocityResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 18: bosdyn.api.spot_cam.GetPtzVelocityResponse.velocity:type_name -> bosdyn.api.spot_cam.PtzVelocity
	17, // 19: bosdyn.api.spot_cam.ListPtzRequest.header:type_name -> bosdyn.api.RequestHeader
	18, // 20: bosdyn.api.spot_cam.ListPtzResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 21: bosdyn.api.spot_cam.ListPtzResponse.ptzs:type_name -> bosdyn.api.spot_cam.PtzDescription
	17, // 22: bosdyn.api.spot_cam.SetPtzPositionRequest.header:type_name -> bosdyn.api.RequestHeader
	1,  // 23: bosdyn.api.spot_cam.SetPtzPositionRequest.position:type_name -> bosdyn.api.spot_cam.PtzPosition
	18, // 24: bosdyn.api.spot_cam.SetPtzPositionResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 25: bosdyn.api.spot_cam.SetPtzPositionResponse.position:type_name -> bosdyn.api.spot_cam.PtzPosition
	17, // 26: bosdyn.api.spot_cam.SetPtzVelocityRequest.header:type_name -> bosdyn.api.RequestHeader
	2,  // 27: bosdyn.api.spot_cam.SetPtzVelocityRequest.velocity:type_name -> bosdyn.api.spot_cam.PtzVelocity
	18, // 28: bosdyn.api.spot_cam.SetPtzVelocityResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 29: bosdyn.api.spot_cam.SetPtzVelocityResponse.velocity:type_name -> bosdyn.api.spot_cam.PtzVelocity
	17, // 30: bosdyn.api.spot_cam.InitializeLensRequest.header:type_name -> bosdyn.api.RequestHeader
	18, // 31: bosdyn.api.spot_cam.InitializeLensResponse.header:type_name -> bosdyn.api.ResponseHeader
	16, // 32: bosdyn.api.spot_cam.PtzDescription.Limits.min:type_name -> google.protobuf.FloatValue
	16, // 33: bosdyn.api.spot_cam.PtzDescription.Limits.max:type_name -> google.protobuf.FloatValue
	34, // [34:34] is the sub-list for method output_type
	34, // [34:34] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_cam_ptz_proto_init() }
func file_bosdyn_api_spot_cam_ptz_proto_init() {
	if File_bosdyn_api_spot_cam_ptz_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PtzDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PtzPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PtzVelocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPtzPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPtzPositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPtzVelocityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPtzVelocityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPtzRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPtzResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPtzPositionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPtzPositionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPtzVelocityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPtzVelocityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeLensRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitializeLensResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_ptz_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PtzDescription_Limits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_cam_ptz_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_cam_ptz_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_cam_ptz_proto_depIdxs,
		MessageInfos:      file_bosdyn_api_spot_cam_ptz_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_cam_ptz_proto = out.File
	file_bosdyn_api_spot_cam_ptz_proto_rawDesc = nil
	file_bosdyn_api_spot_cam_ptz_proto_goTypes = nil
	file_bosdyn_api_spot_cam_ptz_proto_depIdxs = nil
}
