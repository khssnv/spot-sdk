// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot_cam/logging.proto

package spot_cam

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible types of media that can be stored.
type Logpoint_RecordType int32

const (
	Logpoint_STILLIMAGE Logpoint_RecordType = 0
)

// Enum value maps for Logpoint_RecordType.
var (
	Logpoint_RecordType_name = map[int32]string{
		0: "STILLIMAGE",
	}
	Logpoint_RecordType_value = map[string]int32{
		"STILLIMAGE": 0,
	}
)

func (x Logpoint_RecordType) Enum() *Logpoint_RecordType {
	p := new(Logpoint_RecordType)
	*p = x
	return p
}

func (x Logpoint_RecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Logpoint_RecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_cam_logging_proto_enumTypes[0].Descriptor()
}

func (Logpoint_RecordType) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_cam_logging_proto_enumTypes[0]
}

func (x Logpoint_RecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Logpoint_RecordType.Descriptor instead.
func (Logpoint_RecordType) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{0, 0}
}

// Possible stages of data acquisition.
type Logpoint_LogStatus int32

const (
	Logpoint_FAILED   Logpoint_LogStatus = 0
	Logpoint_QUEUED   Logpoint_LogStatus = 1 //the logpoint has been queued to be downloaded from the renderer
	Logpoint_COMPLETE Logpoint_LogStatus = 2 // the logpoint is written to the disk
	Logpoint_UNKNOWN  Logpoint_LogStatus = -1
)

// Enum value maps for Logpoint_LogStatus.
var (
	Logpoint_LogStatus_name = map[int32]string{
		0:  "FAILED",
		1:  "QUEUED",
		2:  "COMPLETE",
		-1: "UNKNOWN",
	}
	Logpoint_LogStatus_value = map[string]int32{
		"FAILED":   0,
		"QUEUED":   1,
		"COMPLETE": 2,
		"UNKNOWN":  -1,
	}
)

func (x Logpoint_LogStatus) Enum() *Logpoint_LogStatus {
	p := new(Logpoint_LogStatus)
	*p = x
	return p
}

func (x Logpoint_LogStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Logpoint_LogStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_cam_logging_proto_enumTypes[1].Descriptor()
}

func (Logpoint_LogStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_cam_logging_proto_enumTypes[1]
}

func (x Logpoint_LogStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Logpoint_LogStatus.Descriptor instead.
func (Logpoint_LogStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{0, 1}
}

type Logpoint_QueueStatus int32

const (
	Logpoint_QUEUED_UNKNOWN Logpoint_QueueStatus = 0
	Logpoint_QUEUED_RENDER  Logpoint_QueueStatus = 1 // The logpoint has been queued to be downloaded from the renderer
	Logpoint_QUEUED_DISK    Logpoint_QueueStatus = 2 // The logpoint is in general ram, and will be written to the disk when resources allow
)

// Enum value maps for Logpoint_QueueStatus.
var (
	Logpoint_QueueStatus_name = map[int32]string{
		0: "QUEUED_UNKNOWN",
		1: "QUEUED_RENDER",
		2: "QUEUED_DISK",
	}
	Logpoint_QueueStatus_value = map[string]int32{
		"QUEUED_UNKNOWN": 0,
		"QUEUED_RENDER":  1,
		"QUEUED_DISK":    2,
	}
)

func (x Logpoint_QueueStatus) Enum() *Logpoint_QueueStatus {
	p := new(Logpoint_QueueStatus)
	*p = x
	return p
}

func (x Logpoint_QueueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Logpoint_QueueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_cam_logging_proto_enumTypes[2].Descriptor()
}

func (Logpoint_QueueStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_cam_logging_proto_enumTypes[2]
}

func (x Logpoint_QueueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Logpoint_QueueStatus.Descriptor instead.
func (Logpoint_QueueStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{0, 2}
}

// A representation of a stored data acquisition.
type Logpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for a data acquisition event.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Type of data held in this log point.
	Type Logpoint_RecordType `protobuf:"varint,2,opt,name=type,proto3,enum=bosdyn.api.spot_cam.Logpoint_RecordType" json:"type,omitempty"`
	// Current stage of acquisition.
	Status Logpoint_LogStatus `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.spot_cam.Logpoint_LogStatus" json:"status,omitempty"`
	// Only filled out when status == QUEUED
	QueueStatus Logpoint_QueueStatus `protobuf:"varint,8,opt,name=queue_status,json=queueStatus,proto3,enum=bosdyn.api.spot_cam.Logpoint_QueueStatus" json:"queue_status,omitempty"`
	// An arbitrary string to be stored with the log data.
	Tag string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
	// Time of acquisition.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Image format of the stored data.
	ImageParams *Logpoint_ImageParams `protobuf:"bytes,6,opt,name=image_params,json=imageParams,proto3" json:"image_params,omitempty"`
	// Camera data for all sub-images contained within the image data.
	Calibration []*Logpoint_Calibration `protobuf:"bytes,7,rep,name=calibration,proto3" json:"calibration,omitempty"`
}

func (x *Logpoint) Reset() {
	*x = Logpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logpoint) ProtoMessage() {}

func (x *Logpoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logpoint.ProtoReflect.Descriptor instead.
func (*Logpoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{0}
}

func (x *Logpoint) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Logpoint) GetType() Logpoint_RecordType {
	if x != nil {
		return x.Type
	}
	return Logpoint_STILLIMAGE
}

func (x *Logpoint) GetStatus() Logpoint_LogStatus {
	if x != nil {
		return x.Status
	}
	return Logpoint_FAILED
}

func (x *Logpoint) GetQueueStatus() Logpoint_QueueStatus {
	if x != nil {
		return x.QueueStatus
	}
	return Logpoint_QUEUED_UNKNOWN
}

func (x *Logpoint) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Logpoint) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Logpoint) GetImageParams() *Logpoint_ImageParams {
	if x != nil {
		return x.ImageParams
	}
	return nil
}

func (x *Logpoint) GetCalibration() []*Logpoint_Calibration {
	if x != nil {
		return x.Calibration
	}
	return nil
}

// Delete a log point from the store.
type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Log point to delete.  Only the name is used.
	Point *Logpoint `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{1}
}

func (x *DeleteRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteRequest) GetPoint() *Logpoint {
	if x != nil {
		return x.Point
	}
	return nil
}

// Response to a deletion with any errors that occurred.
type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Request for status about the current stage of data acquisition.
type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Log point to query.  Only the name is used.
	Point *Logpoint `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{3}
}

func (x *GetStatusRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStatusRequest) GetPoint() *Logpoint {
	if x != nil {
		return x.Point
	}
	return nil
}

// Provide an update on the stage of data acquisition.
type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The logpoint returned here can be used to add a tag to the Logpoint later
	Point *Logpoint `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{4}
}

func (x *GetStatusResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStatusResponse) GetPoint() *Logpoint {
	if x != nil {
		return x.Point
	}
	return nil
}

// Retrieve the binary data associated with a log point.
type RetrieveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Log point to retrieve.  Only the name is used.
	Point *Logpoint `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *RetrieveRequest) Reset() {
	*x = RetrieveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRequest) ProtoMessage() {}

func (x *RetrieveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{5}
}

func (x *RetrieveRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RetrieveRequest) GetPoint() *Logpoint {
	if x != nil {
		return x.Point
	}
	return nil
}

// Provide the data stored at a log point.
// Store() dictates what processing happens in this response.
// c0 -> c4 will return the raw (rgb24) fisheye image of the camera at that index.
// Storing a panorama will process the data into a stitched image.
type RetrieveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Log point retrieved.
	Logpoint *Logpoint `protobuf:"bytes,2,opt,name=logpoint,proto3" json:"logpoint,omitempty"`
	// Data chunk bytes field should be concatenated together to recover the binary data.
	Data *api.DataChunk `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RetrieveResponse) Reset() {
	*x = RetrieveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveResponse) ProtoMessage() {}

func (x *RetrieveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveResponse.ProtoReflect.Descriptor instead.
func (*RetrieveResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{6}
}

func (x *RetrieveResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RetrieveResponse) GetLogpoint() *Logpoint {
	if x != nil {
		return x.Logpoint
	}
	return nil
}

func (x *RetrieveResponse) GetData() *api.DataChunk {
	if x != nil {
		return x.Data
	}
	return nil
}

// Retrieve the binary data associated with a log point, with no processing applied.
// Storing a panorama will retrieve tiled individual images.
// For IR, the temperature at each pixel is 0.1 * the int value in Kelvin.
type RetrieveRawDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Log point to retrieve.  Only the name is used.
	Point *Logpoint `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *RetrieveRawDataRequest) Reset() {
	*x = RetrieveRawDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRawDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRawDataRequest) ProtoMessage() {}

func (x *RetrieveRawDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRawDataRequest.ProtoReflect.Descriptor instead.
func (*RetrieveRawDataRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{7}
}

func (x *RetrieveRawDataRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RetrieveRawDataRequest) GetPoint() *Logpoint {
	if x != nil {
		return x.Point
	}
	return nil
}

type RetrieveRawDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Log point retrieved.
	Logpoint *Logpoint `protobuf:"bytes,2,opt,name=logpoint,proto3" json:"logpoint,omitempty"`
	// Data chunk bytes field should be concatenated together to recover the binary data.
	Data *api.DataChunk `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RetrieveRawDataResponse) Reset() {
	*x = RetrieveRawDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetrieveRawDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveRawDataResponse) ProtoMessage() {}

func (x *RetrieveRawDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveRawDataResponse.ProtoReflect.Descriptor instead.
func (*RetrieveRawDataResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{8}
}

func (x *RetrieveRawDataResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RetrieveRawDataResponse) GetLogpoint() *Logpoint {
	if x != nil {
		return x.Logpoint
	}
	return nil
}

func (x *RetrieveRawDataResponse) GetData() *api.DataChunk {
	if x != nil {
		return x.Data
	}
	return nil
}

// Trigger a data acquisition.
type StoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Which camera to capture.
	Camera *Camera `protobuf:"bytes,2,opt,name=camera,proto3" json:"camera,omitempty"`
	// Type of data capture to perform.
	Type Logpoint_RecordType `protobuf:"varint,3,opt,name=type,proto3,enum=bosdyn.api.spot_cam.Logpoint_RecordType" json:"type,omitempty"`
	// Metadata to associate with the store.
	Tag string `protobuf:"bytes,4,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *StoreRequest) Reset() {
	*x = StoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreRequest) ProtoMessage() {}

func (x *StoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreRequest.ProtoReflect.Descriptor instead.
func (*StoreRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{9}
}

func (x *StoreRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StoreRequest) GetCamera() *Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *StoreRequest) GetType() Logpoint_RecordType {
	if x != nil {
		return x.Type
	}
	return Logpoint_STILLIMAGE
}

func (x *StoreRequest) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// Result of data acquisition trigger.
type StoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The log point returned here can be used to add a tag to the Logpoint later
	// It will very likely be in th 'QUEUED' state.
	Point *Logpoint `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *StoreResponse) Reset() {
	*x = StoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreResponse) ProtoMessage() {}

func (x *StoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreResponse.ProtoReflect.Descriptor instead.
func (*StoreResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{10}
}

func (x *StoreResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StoreResponse) GetPoint() *Logpoint {
	if x != nil {
		return x.Point
	}
	return nil
}

// Add tag metadata to an existing log point.
type TagRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Logpoint to add metadata to. Name and tag are used.
	Point *Logpoint `protobuf:"bytes,2,opt,name=point,proto3" json:"point,omitempty"`
}

func (x *TagRequest) Reset() {
	*x = TagRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagRequest) ProtoMessage() {}

func (x *TagRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagRequest.ProtoReflect.Descriptor instead.
func (*TagRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{11}
}

func (x *TagRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TagRequest) GetPoint() *Logpoint {
	if x != nil {
		return x.Point
	}
	return nil
}

// Result of adding tag metadata to a log point.
type TagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *TagResponse) Reset() {
	*x = TagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagResponse) ProtoMessage() {}

func (x *TagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagResponse.ProtoReflect.Descriptor instead.
func (*TagResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{12}
}

func (x *TagResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Request the available cameras.
type ListCamerasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListCamerasRequest) Reset() {
	*x = ListCamerasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCamerasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCamerasRequest) ProtoMessage() {}

func (x *ListCamerasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCamerasRequest.ProtoReflect.Descriptor instead.
func (*ListCamerasRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{13}
}

func (x *ListCamerasRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provide the list of available cameras.
type ListCamerasResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of all cameras which can be used in a StoreRequest.
	Cameras []*Camera `protobuf:"bytes,2,rep,name=cameras,proto3" json:"cameras,omitempty"`
}

func (x *ListCamerasResponse) Reset() {
	*x = ListCamerasResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListCamerasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCamerasResponse) ProtoMessage() {}

func (x *ListCamerasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCamerasResponse.ProtoReflect.Descriptor instead.
func (*ListCamerasResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{14}
}

func (x *ListCamerasResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListCamerasResponse) GetCameras() []*Camera {
	if x != nil {
		return x.Cameras
	}
	return nil
}

// List all available log points, whether they have completed or not.
type ListLogpointsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListLogpointsRequest) Reset() {
	*x = ListLogpointsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogpointsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogpointsRequest) ProtoMessage() {}

func (x *ListLogpointsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogpointsRequest.ProtoReflect.Descriptor instead.
func (*ListLogpointsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{15}
}

func (x *ListLogpointsRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provide all log points in the system.
type ListLogpointsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of all the individual log points concatenated into a list.
	// This stream may take a long time to complete if there are a lot of stored images.
	Logpoints []*Logpoint `protobuf:"bytes,2,rep,name=logpoints,proto3" json:"logpoints,omitempty"`
}

func (x *ListLogpointsResponse) Reset() {
	*x = ListLogpointsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogpointsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogpointsResponse) ProtoMessage() {}

func (x *ListLogpointsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogpointsResponse.ProtoReflect.Descriptor instead.
func (*ListLogpointsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{16}
}

func (x *ListLogpointsResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListLogpointsResponse) GetLogpoints() []*Logpoint {
	if x != nil {
		return x.Logpoints
	}
	return nil
}

// Set encryption for the disk.
type SetPassphraseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// After setting the passphrase, please reboot the system to
	// remount the encrypted filesystem layer.
	Passphrase string `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
}

func (x *SetPassphraseRequest) Reset() {
	*x = SetPassphraseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPassphraseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPassphraseRequest) ProtoMessage() {}

func (x *SetPassphraseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPassphraseRequest.ProtoReflect.Descriptor instead.
func (*SetPassphraseRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{17}
}

func (x *SetPassphraseRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetPassphraseRequest) GetPassphrase() string {
	if x != nil {
		return x.Passphrase
	}
	return ""
}

// Response from setting the disk encryption.
// After setting the passphrase, please reboot the system to
// remount the encrypted filesystem layer.
type SetPassphraseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SetPassphraseResponse) Reset() {
	*x = SetPassphraseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPassphraseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPassphraseResponse) ProtoMessage() {}

func (x *SetPassphraseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPassphraseResponse.ProtoReflect.Descriptor instead.
func (*SetPassphraseResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{18}
}

func (x *SetPassphraseResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Change debug logging settings on the SpotCam.
type DebugRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Set true to enable logging of temperature data;
	EnableTemperature bool `protobuf:"varint,2,opt,name=enable_temperature,json=enableTemperature,proto3" json:"enable_temperature,omitempty"`
	// Set true to enable logging of humidity data;
	EnableHumidity bool `protobuf:"varint,3,opt,name=enable_humidity,json=enableHumidity,proto3" json:"enable_humidity,omitempty"`
	// Set true to enable logging of BIT events;
	// BIT events are always recorded to volatile memory
	// and can be viewed (and cleared) with the Health service,
	// but this enables writing them to disk.
	Enable_BIT bool `protobuf:"varint,4,opt,name=enable_BIT,json=enableBIT,proto3" json:"enable_BIT,omitempty"`
	// Set true to enable logging of Shock data;
	// this is on by default.
	EnableShock bool `protobuf:"varint,5,opt,name=enable_shock,json=enableShock,proto3" json:"enable_shock,omitempty"`
	// Set to true to enable logging of system load stats
	// cpu, gpu, memory, and network utilization
	EnableSystemStat bool `protobuf:"varint,6,opt,name=enable_system_stat,json=enableSystemStat,proto3" json:"enable_system_stat,omitempty"`
}

func (x *DebugRequest) Reset() {
	*x = DebugRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugRequest) ProtoMessage() {}

func (x *DebugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugRequest.ProtoReflect.Descriptor instead.
func (*DebugRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{19}
}

func (x *DebugRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DebugRequest) GetEnableTemperature() bool {
	if x != nil {
		return x.EnableTemperature
	}
	return false
}

func (x *DebugRequest) GetEnableHumidity() bool {
	if x != nil {
		return x.EnableHumidity
	}
	return false
}

func (x *DebugRequest) GetEnable_BIT() bool {
	if x != nil {
		return x.Enable_BIT
	}
	return false
}

func (x *DebugRequest) GetEnableShock() bool {
	if x != nil {
		return x.EnableShock
	}
	return false
}

func (x *DebugRequest) GetEnableSystemStat() bool {
	if x != nil {
		return x.EnableSystemStat
	}
	return false
}

// Response with any errors for debug setting changes.
type DebugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *DebugResponse) Reset() {
	*x = DebugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DebugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DebugResponse) ProtoMessage() {}

func (x *DebugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DebugResponse.ProtoReflect.Descriptor instead.
func (*DebugResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{20}
}

func (x *DebugResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Description of image format.
type Logpoint_ImageParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width  int32                 `protobuf:"varint,1,opt,name=width,proto3" json:"width,omitempty"`
	Height int32                 `protobuf:"varint,2,opt,name=height,proto3" json:"height,omitempty"`
	Format api.Image_PixelFormat `protobuf:"varint,3,opt,name=format,proto3,enum=bosdyn.api.Image_PixelFormat" json:"format,omitempty"`
}

func (x *Logpoint_ImageParams) Reset() {
	*x = Logpoint_ImageParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logpoint_ImageParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logpoint_ImageParams) ProtoMessage() {}

func (x *Logpoint_ImageParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logpoint_ImageParams.ProtoReflect.Descriptor instead.
func (*Logpoint_ImageParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Logpoint_ImageParams) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Logpoint_ImageParams) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Logpoint_ImageParams) GetFormat() api.Image_PixelFormat {
	if x != nil {
		return x.Format
	}
	return api.Image_PixelFormat(0)
}

// Data describing the camera intrinsics and extrinsics for a window of the image.
type Logpoint_Calibration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xoffset       int32  `protobuf:"varint,1,opt,name=xoffset,proto3" json:"xoffset,omitempty"`
	Yoffset       int32  `protobuf:"varint,2,opt,name=yoffset,proto3" json:"yoffset,omitempty"`
	Width         int32  `protobuf:"varint,3,opt,name=width,proto3" json:"width,omitempty"`
	Height        int32  `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	BaseFrameName string `protobuf:"bytes,7,opt,name=base_frame_name,json=baseFrameName,proto3" json:"base_frame_name,omitempty"`
	// 'base_tfrom_sensor' defines the transform from the specific camera to the named base from.
	// This is deprecated in favor of 'base_tform_sensor' which follows the intended naming convention
	// and FrameTree directionality convention of the Spot system as defined in geometry.proto.
	//
	// Deprecated: Do not use.
	BaseTfromSensor *api.SE3Pose `protobuf:"bytes,5,opt,name=base_tfrom_sensor,json=baseTfromSensor,proto3" json:"base_tfrom_sensor,omitempty"`
	// The transform from the named base frame to this specific camera
	BaseTformSensor *api.SE3Pose              `protobuf:"bytes,8,opt,name=base_tform_sensor,json=baseTformSensor,proto3" json:"base_tform_sensor,omitempty"`
	Intrinsics      *Camera_PinholeIntrinsics `protobuf:"bytes,6,opt,name=intrinsics,proto3" json:"intrinsics,omitempty"`
}

func (x *Logpoint_Calibration) Reset() {
	*x = Logpoint_Calibration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logpoint_Calibration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logpoint_Calibration) ProtoMessage() {}

func (x *Logpoint_Calibration) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_logging_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logpoint_Calibration.ProtoReflect.Descriptor instead.
func (*Logpoint_Calibration) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Logpoint_Calibration) GetXoffset() int32 {
	if x != nil {
		return x.Xoffset
	}
	return 0
}

func (x *Logpoint_Calibration) GetYoffset() int32 {
	if x != nil {
		return x.Yoffset
	}
	return 0
}

func (x *Logpoint_Calibration) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Logpoint_Calibration) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Logpoint_Calibration) GetBaseFrameName() string {
	if x != nil {
		return x.BaseFrameName
	}
	return ""
}

// Deprecated: Do not use.
func (x *Logpoint_Calibration) GetBaseTfromSensor() *api.SE3Pose {
	if x != nil {
		return x.BaseTfromSensor
	}
	return nil
}

func (x *Logpoint_Calibration) GetBaseTformSensor() *api.SE3Pose {
	if x != nil {
		return x.BaseTformSensor
	}
	return nil
}

func (x *Logpoint_Calibration) GetIntrinsics() *Camera_PinholeIntrinsics {
	if x != nil {
		return x.Intrinsics
	}
	return nil
}

var File_bosdyn_api_spot_cam_logging_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_cam_logging_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x1a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x08, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x4c, 0x0a, 0x0c, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d,
	0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c,
	0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x0b,
	0x63, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x72, 0x0a, 0x0b, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0xec, 0x02,
	0x0a, 0x0b, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x78, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x78, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x79, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x26, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x62, 0x61, 0x73, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x74, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x62, 0x61, 0x73,
	0x65, 0x54, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x11,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0f, 0x62, 0x61,
	0x73, 0x65, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x4d, 0x0a,
	0x0a, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x50,
	0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x49, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x22, 0x1c, 0x0a, 0x0a,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x54,
	0x49, 0x4c, 0x4c, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x00, 0x22, 0x47, 0x0a, 0x09, 0x4c, 0x6f,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0x01, 0x22, 0x45, 0x0a, 0x0b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x55, 0x45, 0x55, 0x45, 0x44,
	0x5f, 0x52, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x45,
	0x55, 0x45, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x4b, 0x10, 0x02, 0x22, 0x77, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x7a, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x22, 0x79, 0x0a, 0x0f, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c,
	0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xac,
	0x01, 0x0a, 0x10, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e,
	0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x80, 0x01,
	0x0a, 0x16, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x61, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d,
	0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x22, 0xb3, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x52, 0x61, 0x77,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc6, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d,
	0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12,
	0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22,
	0x78, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x0a, 0x54, 0x61, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e,
	0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22,
	0x41, 0x0a, 0x0b, 0x54, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x47, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x80, 0x01, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x07, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x07, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x73, 0x22, 0x49,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x88, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d,
	0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x67, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0x69, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70,
	0x68, 0x72, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x22,
	0x4b, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x89, 0x02, 0x0a,
	0x0c, 0x44, 0x65, 0x62, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x75, 0x6d, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x48, 0x75, 0x6d, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x42, 0x49, 0x54, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x42, 0x49, 0x54, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x73, 0x68, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x68, 0x6f, 0x63, 0x6b, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x22, 0x43, 0x0a, 0x0d, 0x44, 0x65, 0x62, 0x75,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x4a, 0x42,
	0x0c, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bosdyn_api_spot_cam_logging_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_cam_logging_proto_rawDescData = file_bosdyn_api_spot_cam_logging_proto_rawDesc
)

func file_bosdyn_api_spot_cam_logging_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_cam_logging_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_cam_logging_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_cam_logging_proto_rawDescData)
	})
	return file_bosdyn_api_spot_cam_logging_proto_rawDescData
}

var file_bosdyn_api_spot_cam_logging_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bosdyn_api_spot_cam_logging_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_bosdyn_api_spot_cam_logging_proto_goTypes = []interface{}{
	(Logpoint_RecordType)(0),         // 0: bosdyn.api.spot_cam.Logpoint.RecordType
	(Logpoint_LogStatus)(0),          // 1: bosdyn.api.spot_cam.Logpoint.LogStatus
	(Logpoint_QueueStatus)(0),        // 2: bosdyn.api.spot_cam.Logpoint.QueueStatus
	(*Logpoint)(nil),                 // 3: bosdyn.api.spot_cam.Logpoint
	(*DeleteRequest)(nil),            // 4: bosdyn.api.spot_cam.DeleteRequest
	(*DeleteResponse)(nil),           // 5: bosdyn.api.spot_cam.DeleteResponse
	(*GetStatusRequest)(nil),         // 6: bosdyn.api.spot_cam.GetStatusRequest
	(*GetStatusResponse)(nil),        // 7: bosdyn.api.spot_cam.GetStatusResponse
	(*RetrieveRequest)(nil),          // 8: bosdyn.api.spot_cam.RetrieveRequest
	(*RetrieveResponse)(nil),         // 9: bosdyn.api.spot_cam.RetrieveResponse
	(*RetrieveRawDataRequest)(nil),   // 10: bosdyn.api.spot_cam.RetrieveRawDataRequest
	(*RetrieveRawDataResponse)(nil),  // 11: bosdyn.api.spot_cam.RetrieveRawDataResponse
	(*StoreRequest)(nil),             // 12: bosdyn.api.spot_cam.StoreRequest
	(*StoreResponse)(nil),            // 13: bosdyn.api.spot_cam.StoreResponse
	(*TagRequest)(nil),               // 14: bosdyn.api.spot_cam.TagRequest
	(*TagResponse)(nil),              // 15: bosdyn.api.spot_cam.TagResponse
	(*ListCamerasRequest)(nil),       // 16: bosdyn.api.spot_cam.ListCamerasRequest
	(*ListCamerasResponse)(nil),      // 17: bosdyn.api.spot_cam.ListCamerasResponse
	(*ListLogpointsRequest)(nil),     // 18: bosdyn.api.spot_cam.ListLogpointsRequest
	(*ListLogpointsResponse)(nil),    // 19: bosdyn.api.spot_cam.ListLogpointsResponse
	(*SetPassphraseRequest)(nil),     // 20: bosdyn.api.spot_cam.SetPassphraseRequest
	(*SetPassphraseResponse)(nil),    // 21: bosdyn.api.spot_cam.SetPassphraseResponse
	(*DebugRequest)(nil),             // 22: bosdyn.api.spot_cam.DebugRequest
	(*DebugResponse)(nil),            // 23: bosdyn.api.spot_cam.DebugResponse
	(*Logpoint_ImageParams)(nil),     // 24: bosdyn.api.spot_cam.Logpoint.ImageParams
	(*Logpoint_Calibration)(nil),     // 25: bosdyn.api.spot_cam.Logpoint.Calibration
	(*timestamppb.Timestamp)(nil),    // 26: google.protobuf.Timestamp
	(*api.RequestHeader)(nil),        // 27: bosdyn.api.RequestHeader
	(*api.ResponseHeader)(nil),       // 28: bosdyn.api.ResponseHeader
	(*api.DataChunk)(nil),            // 29: bosdyn.api.DataChunk
	(*Camera)(nil),                   // 30: bosdyn.api.spot_cam.Camera
	(api.Image_PixelFormat)(0),       // 31: bosdyn.api.Image.PixelFormat
	(*api.SE3Pose)(nil),              // 32: bosdyn.api.SE3Pose
	(*Camera_PinholeIntrinsics)(nil), // 33: bosdyn.api.spot_cam.Camera.PinholeIntrinsics
}
var file_bosdyn_api_spot_cam_logging_proto_depIdxs = []int32{
	0,  // 0: bosdyn.api.spot_cam.Logpoint.type:type_name -> bosdyn.api.spot_cam.Logpoint.RecordType
	1,  // 1: bosdyn.api.spot_cam.Logpoint.status:type_name -> bosdyn.api.spot_cam.Logpoint.LogStatus
	2,  // 2: bosdyn.api.spot_cam.Logpoint.queue_status:type_name -> bosdyn.api.spot_cam.Logpoint.QueueStatus
	26, // 3: bosdyn.api.spot_cam.Logpoint.timestamp:type_name -> google.protobuf.Timestamp
	24, // 4: bosdyn.api.spot_cam.Logpoint.image_params:type_name -> bosdyn.api.spot_cam.Logpoint.ImageParams
	25, // 5: bosdyn.api.spot_cam.Logpoint.calibration:type_name -> bosdyn.api.spot_cam.Logpoint.Calibration
	27, // 6: bosdyn.api.spot_cam.DeleteRequest.header:type_name -> bosdyn.api.RequestHeader
	3,  // 7: bosdyn.api.spot_cam.DeleteRequest.point:type_name -> bosdyn.api.spot_cam.Logpoint
	28, // 8: bosdyn.api.spot_cam.DeleteResponse.header:type_name -> bosdyn.api.ResponseHeader
	27, // 9: bosdyn.api.spot_cam.GetStatusRequest.header:type_name -> bosdyn.api.RequestHeader
	3,  // 10: bosdyn.api.spot_cam.GetStatusRequest.point:type_name -> bosdyn.api.spot_cam.Logpoint
	28, // 11: bosdyn.api.spot_cam.GetStatusResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 12: bosdyn.api.spot_cam.GetStatusResponse.point:type_name -> bosdyn.api.spot_cam.Logpoint
	27, // 13: bosdyn.api.spot_cam.RetrieveRequest.header:type_name -> bosdyn.api.RequestHeader
	3,  // 14: bosdyn.api.spot_cam.RetrieveRequest.point:type_name -> bosdyn.api.spot_cam.Logpoint
	28, // 15: bosdyn.api.spot_cam.RetrieveResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 16: bosdyn.api.spot_cam.RetrieveResponse.logpoint:type_name -> bosdyn.api.spot_cam.Logpoint
	29, // 17: bosdyn.api.spot_cam.RetrieveResponse.data:type_name -> bosdyn.api.DataChunk
	27, // 18: bosdyn.api.spot_cam.RetrieveRawDataRequest.header:type_name -> bosdyn.api.RequestHeader
	3,  // 19: bosdyn.api.spot_cam.RetrieveRawDataRequest.point:type_name -> bosdyn.api.spot_cam.Logpoint
	28, // 20: bosdyn.api.spot_cam.RetrieveRawDataResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 21: bosdyn.api.spot_cam.RetrieveRawDataResponse.logpoint:type_name -> bosdyn.api.spot_cam.Logpoint
	29, // 22: bosdyn.api.spot_cam.RetrieveRawDataResponse.data:type_name -> bosdyn.api.DataChunk
	27, // 23: bosdyn.api.spot_cam.StoreRequest.header:type_name -> bosdyn.api.RequestHeader
	30, // 24: bosdyn.api.spot_cam.StoreRequest.camera:type_name -> bosdyn.api.spot_cam.Camera
	0,  // 25: bosdyn.api.spot_cam.StoreRequest.type:type_name -> bosdyn.api.spot_cam.Logpoint.RecordType
	28, // 26: bosdyn.api.spot_cam.StoreResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 27: bosdyn.api.spot_cam.StoreResponse.point:type_name -> bosdyn.api.spot_cam.Logpoint
	27, // 28: bosdyn.api.spot_cam.TagRequest.header:type_name -> bosdyn.api.RequestHeader
	3,  // 29: bosdyn.api.spot_cam.TagRequest.point:type_name -> bosdyn.api.spot_cam.Logpoint
	28, // 30: bosdyn.api.spot_cam.TagResponse.header:type_name -> bosdyn.api.ResponseHeader
	27, // 31: bosdyn.api.spot_cam.ListCamerasRequest.header:type_name -> bosdyn.api.RequestHeader
	28, // 32: bosdyn.api.spot_cam.ListCamerasResponse.header:type_name -> bosdyn.api.ResponseHeader
	30, // 33: bosdyn.api.spot_cam.ListCamerasResponse.cameras:type_name -> bosdyn.api.spot_cam.Camera
	27, // 34: bosdyn.api.spot_cam.ListLogpointsRequest.header:type_name -> bosdyn.api.RequestHeader
	28, // 35: bosdyn.api.spot_cam.ListLogpointsResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 36: bosdyn.api.spot_cam.ListLogpointsResponse.logpoints:type_name -> bosdyn.api.spot_cam.Logpoint
	27, // 37: bosdyn.api.spot_cam.SetPassphraseRequest.header:type_name -> bosdyn.api.RequestHeader
	28, // 38: bosdyn.api.spot_cam.SetPassphraseResponse.header:type_name -> bosdyn.api.ResponseHeader
	27, // 39: bosdyn.api.spot_cam.DebugRequest.header:type_name -> bosdyn.api.RequestHeader
	28, // 40: bosdyn.api.spot_cam.DebugResponse.header:type_name -> bosdyn.api.ResponseHeader
	31, // 41: bosdyn.api.spot_cam.Logpoint.ImageParams.format:type_name -> bosdyn.api.Image.PixelFormat
	32, // 42: bosdyn.api.spot_cam.Logpoint.Calibration.base_tfrom_sensor:type_name -> bosdyn.api.SE3Pose
	32, // 43: bosdyn.api.spot_cam.Logpoint.Calibration.base_tform_sensor:type_name -> bosdyn.api.SE3Pose
	33, // 44: bosdyn.api.spot_cam.Logpoint.Calibration.intrinsics:type_name -> bosdyn.api.spot_cam.Camera.PinholeIntrinsics
	45, // [45:45] is the sub-list for method output_type
	45, // [45:45] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_cam_logging_proto_init() }
func file_bosdyn_api_spot_cam_logging_proto_init() {
	if File_bosdyn_api_spot_cam_logging_proto != nil {
		return
	}
	file_bosdyn_api_spot_cam_camera_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRawDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetrieveRawDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCamerasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListCamerasResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogpointsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogpointsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPassphraseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPassphraseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DebugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logpoint_ImageParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_logging_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logpoint_Calibration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_cam_logging_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_cam_logging_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_cam_logging_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_cam_logging_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_cam_logging_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_cam_logging_proto = out.File
	file_bosdyn_api_spot_cam_logging_proto_rawDesc = nil
	file_bosdyn_api_spot_cam_logging_proto_goTypes = nil
	file_bosdyn_api_spot_cam_logging_proto_depIdxs = nil
}
