// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot_cam/network.proto

package spot_cam

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible types of servers
type ICEServerServertype int32

const (
	ICEServer_UNKNOWN ICEServerServertype = 0
	ICEServer_STUN    ICEServerServertype = 1
	ICEServer_TURN    ICEServerServertype = 2
)

// Enum value maps for ICEServerServertype.
var (
	ICEServerServertype_name = map[int32]string{
		0: "UNKNOWN",
		1: "STUN",
		2: "TURN",
	}
	ICEServerServertype_value = map[string]int32{
		"UNKNOWN": 0,
		"STUN":    1,
		"TURN":    2,
	}
)

func (x ICEServerServertype) Enum() *ICEServerServertype {
	p := new(ICEServerServertype)
	*p = x
	return p
}

func (x ICEServerServertype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ICEServerServertype) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_cam_network_proto_enumTypes[0].Descriptor()
}

func (ICEServerServertype) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_cam_network_proto_enumTypes[0]
}

func (x ICEServerServertype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ICEServerServertype.Descriptor instead.
func (ICEServerServertype) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{5, 0}
}

// Network configuration data.
type NetworkTuple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//a big-endian representation of an IPv4 address
	Address *wrapperspb.UInt32Value `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	//The mask used for defining the system's subnet
	Netmask *wrapperspb.UInt32Value `protobuf:"bytes,3,opt,name=netmask,proto3" json:"netmask,omitempty"`
	//A global routing is set up for the address defined below (if present)
	Gateway *wrapperspb.UInt32Value `protobuf:"bytes,4,opt,name=gateway,proto3" json:"gateway,omitempty"`
	//If MTU is present, and <16 bits wide, then it is set for the ethernet interface's MTU
	//if not, the MTU is set to 1500
	Mtu *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *NetworkTuple) Reset() {
	*x = NetworkTuple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkTuple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkTuple) ProtoMessage() {}

func (x *NetworkTuple) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkTuple.ProtoReflect.Descriptor instead.
func (*NetworkTuple) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkTuple) GetAddress() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *NetworkTuple) GetNetmask() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Netmask
	}
	return nil
}

func (x *NetworkTuple) GetGateway() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *NetworkTuple) GetMtu() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Mtu
	}
	return nil
}

// Retrieve current network configuration.
type GetNetworkSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetNetworkSettingsRequest) Reset() {
	*x = GetNetworkSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkSettingsRequest) ProtoMessage() {}

func (x *GetNetworkSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetNetworkSettingsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{1}
}

func (x *GetNetworkSettingsRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provides the current network configuration.
type GetNetworkSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Current network configuration.
	Settings *NetworkTuple `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *GetNetworkSettingsResponse) Reset() {
	*x = GetNetworkSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNetworkSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNetworkSettingsResponse) ProtoMessage() {}

func (x *GetNetworkSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNetworkSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetNetworkSettingsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{2}
}

func (x *GetNetworkSettingsResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetNetworkSettingsResponse) GetSettings() *NetworkTuple {
	if x != nil {
		return x.Settings
	}
	return nil
}

// Request the SSL certificate currently in use.
type GetSSLCertRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetSSLCertRequest) Reset() {
	*x = GetSSLCertRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSSLCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSSLCertRequest) ProtoMessage() {}

func (x *GetSSLCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSSLCertRequest.ProtoReflect.Descriptor instead.
func (*GetSSLCertRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{3}
}

func (x *GetSSLCertRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provides the SSL certificate currently in use.
type GetSSLCertResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// An ASCII-armored representation of the SSL certificate
	Certificate string `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`
}

func (x *GetSSLCertResponse) Reset() {
	*x = GetSSLCertResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSSLCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSSLCertResponse) ProtoMessage() {}

func (x *GetSSLCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSSLCertResponse.ProtoReflect.Descriptor instead.
func (*GetSSLCertResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{4}
}

func (x *GetSSLCertResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetSSLCertResponse) GetCertificate() string {
	if x != nil {
		return x.Certificate
	}
	return ""
}

// Servers used in the ICE resolution process.
type ICEServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// STUN or TURN server.
	Type ICEServerServertype `protobuf:"varint,1,opt,name=type,proto3,enum=bosdyn.api.spot_cam.ICEServerServertype" json:"type,omitempty"`
	// Network address of the server.
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Only the least significant 16 bits are used.
	Port uint32 `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ICEServer) Reset() {
	*x = ICEServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ICEServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ICEServer) ProtoMessage() {}

func (x *ICEServer) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ICEServer.ProtoReflect.Descriptor instead.
func (*ICEServer) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{5}
}

func (x *ICEServer) GetType() ICEServerServertype {
	if x != nil {
		return x.Type
	}
	return ICEServer_UNKNOWN
}

func (x *ICEServer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ICEServer) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

// Request the servers used for ICE resolution.
type GetICEConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetICEConfigurationRequest) Reset() {
	*x = GetICEConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetICEConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetICEConfigurationRequest) ProtoMessage() {}

func (x *GetICEConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetICEConfigurationRequest.ProtoReflect.Descriptor instead.
func (*GetICEConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{6}
}

func (x *GetICEConfigurationRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provides the ICE resolution servers.
type GetICEConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of servers used for ICE resolution.
	Servers []*ICEServer `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *GetICEConfigurationResponse) Reset() {
	*x = GetICEConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetICEConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetICEConfigurationResponse) ProtoMessage() {}

func (x *GetICEConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetICEConfigurationResponse.ProtoReflect.Descriptor instead.
func (*GetICEConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{7}
}

func (x *GetICEConfigurationResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetICEConfigurationResponse) GetServers() []*ICEServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

// Modify the ICE configuration.
// Note: this configuration replaces any configuration currently present.
// It is *not* appended.
type SetICEConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of servers used for ICE resolution.
	Servers []*ICEServer `protobuf:"bytes,2,rep,name=servers,proto3" json:"servers,omitempty"`
}

func (x *SetICEConfigurationRequest) Reset() {
	*x = SetICEConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetICEConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetICEConfigurationRequest) ProtoMessage() {}

func (x *SetICEConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetICEConfigurationRequest.ProtoReflect.Descriptor instead.
func (*SetICEConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{8}
}

func (x *SetICEConfigurationRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetICEConfigurationRequest) GetServers() []*ICEServer {
	if x != nil {
		return x.Servers
	}
	return nil
}

// Result of modifying the ICE configuration.
type SetICEConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SetICEConfigurationResponse) Reset() {
	*x = SetICEConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetICEConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetICEConfigurationResponse) ProtoMessage() {}

func (x *SetICEConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetICEConfigurationResponse.ProtoReflect.Descriptor instead.
func (*SetICEConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_network_proto_rawDescGZIP(), []int{9}
}

func (x *SetICEConfigurationResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

var File_bosdyn_api_spot_cam_network_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_cam_network_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe6, 0x01, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x65,
	0x74, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x6d, 0x61,
	0x73, 0x6b, 0x12, 0x36, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x74,
	0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x22, 0x4e, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8f, 0x01, 0x0a, 0x1a, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x75, 0x70,
	0x6c, 0x65, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x46, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x53, 0x4c, 0x43, 0x65,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x22, 0xa7, 0x01, 0x0a, 0x09, 0x49, 0x43, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3d,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63,
	0x61, 0x6d, 0x2e, 0x49, 0x43, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x2d, 0x0a, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x55, 0x4e, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x54, 0x55, 0x52, 0x4e, 0x10, 0x02, 0x22, 0x4f, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x49, 0x43, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x49, 0x43, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x38, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x49, 0x43, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x53, 0x65,
	0x74, 0x49, 0x43, 0x45, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x07, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63,
	0x61, 0x6d, 0x2e, 0x49, 0x43, 0x45, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x51, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x49, 0x43, 0x45, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x4a, 0x42, 0x0c, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x5f, 0x63, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_cam_network_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_cam_network_proto_rawDescData = file_bosdyn_api_spot_cam_network_proto_rawDesc
)

func file_bosdyn_api_spot_cam_network_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_cam_network_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_cam_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_cam_network_proto_rawDescData)
	})
	return file_bosdyn_api_spot_cam_network_proto_rawDescData
}

var file_bosdyn_api_spot_cam_network_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_spot_cam_network_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bosdyn_api_spot_cam_network_proto_goTypes = []interface{}{
	(ICEServerServertype)(0),            // 0: bosdyn.api.spot_cam.ICEServer.servertype
	(*NetworkTuple)(nil),                // 1: bosdyn.api.spot_cam.NetworkTuple
	(*GetNetworkSettingsRequest)(nil),   // 2: bosdyn.api.spot_cam.GetNetworkSettingsRequest
	(*GetNetworkSettingsResponse)(nil),  // 3: bosdyn.api.spot_cam.GetNetworkSettingsResponse
	(*GetSSLCertRequest)(nil),           // 4: bosdyn.api.spot_cam.GetSSLCertRequest
	(*GetSSLCertResponse)(nil),          // 5: bosdyn.api.spot_cam.GetSSLCertResponse
	(*ICEServer)(nil),                   // 6: bosdyn.api.spot_cam.ICEServer
	(*GetICEConfigurationRequest)(nil),  // 7: bosdyn.api.spot_cam.GetICEConfigurationRequest
	(*GetICEConfigurationResponse)(nil), // 8: bosdyn.api.spot_cam.GetICEConfigurationResponse
	(*SetICEConfigurationRequest)(nil),  // 9: bosdyn.api.spot_cam.SetICEConfigurationRequest
	(*SetICEConfigurationResponse)(nil), // 10: bosdyn.api.spot_cam.SetICEConfigurationResponse
	(*wrapperspb.UInt32Value)(nil),      // 11: google.protobuf.UInt32Value
	(*api.RequestHeader)(nil),           // 12: bosdyn.api.RequestHeader
	(*api.ResponseHeader)(nil),          // 13: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_spot_cam_network_proto_depIdxs = []int32{
	11, // 0: bosdyn.api.spot_cam.NetworkTuple.address:type_name -> google.protobuf.UInt32Value
	11, // 1: bosdyn.api.spot_cam.NetworkTuple.netmask:type_name -> google.protobuf.UInt32Value
	11, // 2: bosdyn.api.spot_cam.NetworkTuple.gateway:type_name -> google.protobuf.UInt32Value
	11, // 3: bosdyn.api.spot_cam.NetworkTuple.mtu:type_name -> google.protobuf.UInt32Value
	12, // 4: bosdyn.api.spot_cam.GetNetworkSettingsRequest.header:type_name -> bosdyn.api.RequestHeader
	13, // 5: bosdyn.api.spot_cam.GetNetworkSettingsResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 6: bosdyn.api.spot_cam.GetNetworkSettingsResponse.settings:type_name -> bosdyn.api.spot_cam.NetworkTuple
	12, // 7: bosdyn.api.spot_cam.GetSSLCertRequest.header:type_name -> bosdyn.api.RequestHeader
	13, // 8: bosdyn.api.spot_cam.GetSSLCertResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 9: bosdyn.api.spot_cam.ICEServer.type:type_name -> bosdyn.api.spot_cam.ICEServer.servertype
	12, // 10: bosdyn.api.spot_cam.GetICEConfigurationRequest.header:type_name -> bosdyn.api.RequestHeader
	13, // 11: bosdyn.api.spot_cam.GetICEConfigurationResponse.header:type_name -> bosdyn.api.ResponseHeader
	6,  // 12: bosdyn.api.spot_cam.GetICEConfigurationResponse.servers:type_name -> bosdyn.api.spot_cam.ICEServer
	12, // 13: bosdyn.api.spot_cam.SetICEConfigurationRequest.header:type_name -> bosdyn.api.RequestHeader
	6,  // 14: bosdyn.api.spot_cam.SetICEConfigurationRequest.servers:type_name -> bosdyn.api.spot_cam.ICEServer
	13, // 15: bosdyn.api.spot_cam.SetICEConfigurationResponse.header:type_name -> bosdyn.api.ResponseHeader
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_cam_network_proto_init() }
func file_bosdyn_api_spot_cam_network_proto_init() {
	if File_bosdyn_api_spot_cam_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_cam_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkTuple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNetworkSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSSLCertRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSSLCertResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ICEServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetICEConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetICEConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetICEConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetICEConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_cam_network_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_cam_network_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_cam_network_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_cam_network_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_cam_network_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_cam_network_proto = out.File
	file_bosdyn_api_spot_cam_network_proto_rawDesc = nil
	file_bosdyn_api_spot_cam_network_proto_goTypes = nil
	file_bosdyn_api_spot_cam_network_proto_depIdxs = nil
}
