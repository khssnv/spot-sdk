// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot_cam/audio.proto

package spot_cam

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Audio capture channel
type AudioCaptureChannel int32

const (
	AudioCaptureChannel_AUDIO_CHANNEL_UNKNOWN      AudioCaptureChannel = 0
	AudioCaptureChannel_AUDIO_CHANNEL_INTERNAL_MIC AudioCaptureChannel = 1
	AudioCaptureChannel_AUDIO_CHANNEL_EXTERNAL_MIC AudioCaptureChannel = 2
)

// Enum value maps for AudioCaptureChannel.
var (
	AudioCaptureChannel_name = map[int32]string{
		0: "AUDIO_CHANNEL_UNKNOWN",
		1: "AUDIO_CHANNEL_INTERNAL_MIC",
		2: "AUDIO_CHANNEL_EXTERNAL_MIC",
	}
	AudioCaptureChannel_value = map[string]int32{
		"AUDIO_CHANNEL_UNKNOWN":      0,
		"AUDIO_CHANNEL_INTERNAL_MIC": 1,
		"AUDIO_CHANNEL_EXTERNAL_MIC": 2,
	}
)

func (x AudioCaptureChannel) Enum() *AudioCaptureChannel {
	p := new(AudioCaptureChannel)
	*p = x
	return p
}

func (x AudioCaptureChannel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioCaptureChannel) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_cam_audio_proto_enumTypes[0].Descriptor()
}

func (AudioCaptureChannel) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_cam_audio_proto_enumTypes[0]
}

func (x AudioCaptureChannel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioCaptureChannel.Descriptor instead.
func (AudioCaptureChannel) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{0}
}

// Identifier for a playable sound.
type Sound struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//internally, sounds are stored in a flat table. This name is the
	//identifier of a sound effect
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Sound) Reset() {
	*x = Sound{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sound) ProtoMessage() {}

func (x *Sound) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sound.ProtoReflect.Descriptor instead.
func (*Sound) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{0}
}

func (x *Sound) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Request for all sounds present on the robot.
type ListSoundsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListSoundsRequest) Reset() {
	*x = ListSoundsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSoundsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoundsRequest) ProtoMessage() {}

func (x *ListSoundsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoundsRequest.ProtoReflect.Descriptor instead.
func (*ListSoundsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{1}
}

func (x *ListSoundsRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// List of all sounds present on the robot.
type ListSoundsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// All sounds currently loaded.
	Sounds []*Sound `protobuf:"bytes,2,rep,name=sounds,proto3" json:"sounds,omitempty"`
}

func (x *ListSoundsResponse) Reset() {
	*x = ListSoundsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSoundsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSoundsResponse) ProtoMessage() {}

func (x *ListSoundsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSoundsResponse.ProtoReflect.Descriptor instead.
func (*ListSoundsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{2}
}

func (x *ListSoundsResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListSoundsResponse) GetSounds() []*Sound {
	if x != nil {
		return x.Sounds
	}
	return nil
}

// Set the desired volume level of the system.
type SetVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	//volume, as a percentage of maximum.
	Volume float32 `protobuf:"fixed32,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *SetVolumeRequest) Reset() {
	*x = SetVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumeRequest) ProtoMessage() {}

func (x *SetVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumeRequest.ProtoReflect.Descriptor instead.
func (*SetVolumeRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{3}
}

func (x *SetVolumeRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetVolumeRequest) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Result of changing the system volume level.
type SetVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SetVolumeResponse) Reset() {
	*x = SetVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVolumeResponse) ProtoMessage() {}

func (x *SetVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVolumeResponse.ProtoReflect.Descriptor instead.
func (*SetVolumeResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{4}
}

func (x *SetVolumeResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Query the current volume level of the system.
type GetVolumeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetVolumeRequest) Reset() {
	*x = GetVolumeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolumeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolumeRequest) ProtoMessage() {}

func (x *GetVolumeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolumeRequest.ProtoReflect.Descriptor instead.
func (*GetVolumeRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{5}
}

func (x *GetVolumeRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provides the current volume level of the system.
type GetVolumeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	//volume, as a percentage of maximum.
	Volume float32 `protobuf:"fixed32,2,opt,name=volume,proto3" json:"volume,omitempty"`
}

func (x *GetVolumeResponse) Reset() {
	*x = GetVolumeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVolumeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVolumeResponse) ProtoMessage() {}

func (x *GetVolumeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVolumeResponse.ProtoReflect.Descriptor instead.
func (*GetVolumeResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{6}
}

func (x *GetVolumeResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetVolumeResponse) GetVolume() float32 {
	if x != nil {
		return x.Volume
	}
	return 0
}

// Begin playing a loaded sound from the robot's speakers.
type PlaySoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The sound identifier as uploaded by LoadSoundRequest or listed in ListSoundsResponse.
	Sound *Sound `protobuf:"bytes,2,opt,name=sound,proto3" json:"sound,omitempty"`
	// If the gain field is populated, then volume of the sound is
	// multiplied by this value.  Does not modify the system volume level.
	Gain *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *PlaySoundRequest) Reset() {
	*x = PlaySoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySoundRequest) ProtoMessage() {}

func (x *PlaySoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySoundRequest.ProtoReflect.Descriptor instead.
func (*PlaySoundRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{7}
}

func (x *PlaySoundRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlaySoundRequest) GetSound() *Sound {
	if x != nil {
		return x.Sound
	}
	return nil
}

func (x *PlaySoundRequest) GetGain() *wrapperspb.FloatValue {
	if x != nil {
		return x.Gain
	}
	return nil
}

// Result of staring playback of a sound.
type PlaySoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *PlaySoundResponse) Reset() {
	*x = PlaySoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySoundResponse) ProtoMessage() {}

func (x *PlaySoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySoundResponse.ProtoReflect.Descriptor instead.
func (*PlaySoundResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{8}
}

func (x *PlaySoundResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Remove a loaded sound from the library of loaded sounds.
type DeleteSoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The sound identifier as uploaded by LoadSoundRequest or listed in ListSoundsResponse.
	Sound *Sound `protobuf:"bytes,2,opt,name=sound,proto3" json:"sound,omitempty"`
}

func (x *DeleteSoundRequest) Reset() {
	*x = DeleteSoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSoundRequest) ProtoMessage() {}

func (x *DeleteSoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSoundRequest.ProtoReflect.Descriptor instead.
func (*DeleteSoundRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteSoundRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteSoundRequest) GetSound() *Sound {
	if x != nil {
		return x.Sound
	}
	return nil
}

// Result of deleting a sound from the library.
type DeleteSoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *DeleteSoundResponse) Reset() {
	*x = DeleteSoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSoundResponse) ProtoMessage() {}

func (x *DeleteSoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSoundResponse.ProtoReflect.Descriptor instead.
func (*DeleteSoundResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteSoundResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Load a new sound onto the robot for future playback.
type LoadSoundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Identifier for the sound.
	// If the same identifier is used as a previously loaded sound, that sound will be overwritten with the new data.
	Sound *Sound `protobuf:"bytes,2,opt,name=sound,proto3" json:"sound,omitempty"`
	// WAV bytes to be joined.
	Data *api.DataChunk `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *LoadSoundRequest) Reset() {
	*x = LoadSoundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSoundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSoundRequest) ProtoMessage() {}

func (x *LoadSoundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSoundRequest.ProtoReflect.Descriptor instead.
func (*LoadSoundRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{11}
}

func (x *LoadSoundRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LoadSoundRequest) GetSound() *Sound {
	if x != nil {
		return x.Sound
	}
	return nil
}

func (x *LoadSoundRequest) GetData() *api.DataChunk {
	if x != nil {
		return x.Data
	}
	return nil
}

// Result of uploading a sound.
type LoadSoundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *LoadSoundResponse) Reset() {
	*x = LoadSoundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadSoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadSoundResponse) ProtoMessage() {}

func (x *LoadSoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadSoundResponse.ProtoReflect.Descriptor instead.
func (*LoadSoundResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{12}
}

func (x *LoadSoundResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Request to set the audio capture channel
type SetAudioCaptureChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *api.RequestHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Channel AudioCaptureChannel `protobuf:"varint,2,opt,name=channel,proto3,enum=bosdyn.api.spot_cam.AudioCaptureChannel" json:"channel,omitempty"`
}

func (x *SetAudioCaptureChannelRequest) Reset() {
	*x = SetAudioCaptureChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAudioCaptureChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAudioCaptureChannelRequest) ProtoMessage() {}

func (x *SetAudioCaptureChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAudioCaptureChannelRequest.ProtoReflect.Descriptor instead.
func (*SetAudioCaptureChannelRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{13}
}

func (x *SetAudioCaptureChannelRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetAudioCaptureChannelRequest) GetChannel() AudioCaptureChannel {
	if x != nil {
		return x.Channel
	}
	return AudioCaptureChannel_AUDIO_CHANNEL_UNKNOWN
}

// Result of setting the audio capture channel
type SetAudioCaptureChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SetAudioCaptureChannelResponse) Reset() {
	*x = SetAudioCaptureChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAudioCaptureChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAudioCaptureChannelResponse) ProtoMessage() {}

func (x *SetAudioCaptureChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAudioCaptureChannelResponse.ProtoReflect.Descriptor instead.
func (*SetAudioCaptureChannelResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{14}
}

func (x *SetAudioCaptureChannelResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Request to get the audio capture channel
type GetAudioCaptureChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetAudioCaptureChannelRequest) Reset() {
	*x = GetAudioCaptureChannelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioCaptureChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioCaptureChannelRequest) ProtoMessage() {}

func (x *GetAudioCaptureChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioCaptureChannelRequest.ProtoReflect.Descriptor instead.
func (*GetAudioCaptureChannelRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{15}
}

func (x *GetAudioCaptureChannelRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Result of getting the audio capture channel
type GetAudioCaptureChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Channel AudioCaptureChannel `protobuf:"varint,2,opt,name=channel,proto3,enum=bosdyn.api.spot_cam.AudioCaptureChannel" json:"channel,omitempty"`
}

func (x *GetAudioCaptureChannelResponse) Reset() {
	*x = GetAudioCaptureChannelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioCaptureChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioCaptureChannelResponse) ProtoMessage() {}

func (x *GetAudioCaptureChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioCaptureChannelResponse.ProtoReflect.Descriptor instead.
func (*GetAudioCaptureChannelResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{16}
}

func (x *GetAudioCaptureChannelResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAudioCaptureChannelResponse) GetChannel() AudioCaptureChannel {
	if x != nil {
		return x.Channel
	}
	return AudioCaptureChannel_AUDIO_CHANNEL_UNKNOWN
}

// Request to set the audio capture channel
type SetAudioCaptureGainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *api.RequestHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Channel AudioCaptureChannel `protobuf:"varint,2,opt,name=channel,proto3,enum=bosdyn.api.spot_cam.AudioCaptureChannel" json:"channel,omitempty"`
	// Gain for microphone, range from 0.0 to 1.0
	Gain float64 `protobuf:"fixed64,3,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *SetAudioCaptureGainRequest) Reset() {
	*x = SetAudioCaptureGainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAudioCaptureGainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAudioCaptureGainRequest) ProtoMessage() {}

func (x *SetAudioCaptureGainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAudioCaptureGainRequest.ProtoReflect.Descriptor instead.
func (*SetAudioCaptureGainRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{17}
}

func (x *SetAudioCaptureGainRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetAudioCaptureGainRequest) GetChannel() AudioCaptureChannel {
	if x != nil {
		return x.Channel
	}
	return AudioCaptureChannel_AUDIO_CHANNEL_UNKNOWN
}

func (x *SetAudioCaptureGainRequest) GetGain() float64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

// Result of setting the audio capture gain
type SetAudioCaptureGainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SetAudioCaptureGainResponse) Reset() {
	*x = SetAudioCaptureGainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAudioCaptureGainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAudioCaptureGainResponse) ProtoMessage() {}

func (x *SetAudioCaptureGainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAudioCaptureGainResponse.ProtoReflect.Descriptor instead.
func (*SetAudioCaptureGainResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{18}
}

func (x *SetAudioCaptureGainResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Request to get the audio capture channel
type GetAudioCaptureGainRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *api.RequestHeader  `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Channel AudioCaptureChannel `protobuf:"varint,2,opt,name=channel,proto3,enum=bosdyn.api.spot_cam.AudioCaptureChannel" json:"channel,omitempty"`
}

func (x *GetAudioCaptureGainRequest) Reset() {
	*x = GetAudioCaptureGainRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioCaptureGainRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioCaptureGainRequest) ProtoMessage() {}

func (x *GetAudioCaptureGainRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioCaptureGainRequest.ProtoReflect.Descriptor instead.
func (*GetAudioCaptureGainRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{19}
}

func (x *GetAudioCaptureGainRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAudioCaptureGainRequest) GetChannel() AudioCaptureChannel {
	if x != nil {
		return x.Channel
	}
	return AudioCaptureChannel_AUDIO_CHANNEL_UNKNOWN
}

// Result of getting the audio capture gain
type GetAudioCaptureGainResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Gain for microphone, range from 0.0 to 1.0
	Gain float64 `protobuf:"fixed64,2,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *GetAudioCaptureGainResponse) Reset() {
	*x = GetAudioCaptureGainResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAudioCaptureGainResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioCaptureGainResponse) ProtoMessage() {}

func (x *GetAudioCaptureGainResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_cam_audio_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioCaptureGainResponse.ProtoReflect.Descriptor instead.
func (*GetAudioCaptureGainResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP(), []int{20}
}

func (x *GetAudioCaptureGainResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetAudioCaptureGainResponse) GetGain() float64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

var File_bosdyn_api_spot_cam_audio_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_cam_audio_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x13, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x05,
	0x53, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x7c, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61,
	0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x22,
	0x5d, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x47,
	0x0a, 0x11, 0x53, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x5f,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22,
	0xa8, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x04, 0x67, 0x61, 0x69,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x22, 0x47, 0x0a, 0x11, 0x50, 0x6c,
	0x61, 0x79, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x79, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61,
	0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x49,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xa2, 0x01, 0x0a, 0x10, 0x4c, 0x6f,
	0x61, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x47,
	0x0a, 0x11, 0x4c, 0x6f, 0x61, 0x64, 0x53, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x96, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x22, 0x54, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x98, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xa7, 0x01, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x41, 0x75, 0x64,
	0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x22,
	0x51, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x65, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x41,
	0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x47, 0x61, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x67,
	0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x2a,
	0x70, 0x0a, 0x13, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f,
	0x43, 0x48, 0x41, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x43, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x4e,
	0x45, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x43, 0x10,
	0x02, 0x42, 0x48, 0x42, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73,
	0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_cam_audio_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_cam_audio_proto_rawDescData = file_bosdyn_api_spot_cam_audio_proto_rawDesc
)

func file_bosdyn_api_spot_cam_audio_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_cam_audio_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_cam_audio_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_cam_audio_proto_rawDescData)
	})
	return file_bosdyn_api_spot_cam_audio_proto_rawDescData
}

var file_bosdyn_api_spot_cam_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_spot_cam_audio_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bosdyn_api_spot_cam_audio_proto_goTypes = []interface{}{
	(AudioCaptureChannel)(0),               // 0: bosdyn.api.spot_cam.AudioCaptureChannel
	(*Sound)(nil),                          // 1: bosdyn.api.spot_cam.Sound
	(*ListSoundsRequest)(nil),              // 2: bosdyn.api.spot_cam.ListSoundsRequest
	(*ListSoundsResponse)(nil),             // 3: bosdyn.api.spot_cam.ListSoundsResponse
	(*SetVolumeRequest)(nil),               // 4: bosdyn.api.spot_cam.SetVolumeRequest
	(*SetVolumeResponse)(nil),              // 5: bosdyn.api.spot_cam.SetVolumeResponse
	(*GetVolumeRequest)(nil),               // 6: bosdyn.api.spot_cam.GetVolumeRequest
	(*GetVolumeResponse)(nil),              // 7: bosdyn.api.spot_cam.GetVolumeResponse
	(*PlaySoundRequest)(nil),               // 8: bosdyn.api.spot_cam.PlaySoundRequest
	(*PlaySoundResponse)(nil),              // 9: bosdyn.api.spot_cam.PlaySoundResponse
	(*DeleteSoundRequest)(nil),             // 10: bosdyn.api.spot_cam.DeleteSoundRequest
	(*DeleteSoundResponse)(nil),            // 11: bosdyn.api.spot_cam.DeleteSoundResponse
	(*LoadSoundRequest)(nil),               // 12: bosdyn.api.spot_cam.LoadSoundRequest
	(*LoadSoundResponse)(nil),              // 13: bosdyn.api.spot_cam.LoadSoundResponse
	(*SetAudioCaptureChannelRequest)(nil),  // 14: bosdyn.api.spot_cam.SetAudioCaptureChannelRequest
	(*SetAudioCaptureChannelResponse)(nil), // 15: bosdyn.api.spot_cam.SetAudioCaptureChannelResponse
	(*GetAudioCaptureChannelRequest)(nil),  // 16: bosdyn.api.spot_cam.GetAudioCaptureChannelRequest
	(*GetAudioCaptureChannelResponse)(nil), // 17: bosdyn.api.spot_cam.GetAudioCaptureChannelResponse
	(*SetAudioCaptureGainRequest)(nil),     // 18: bosdyn.api.spot_cam.SetAudioCaptureGainRequest
	(*SetAudioCaptureGainResponse)(nil),    // 19: bosdyn.api.spot_cam.SetAudioCaptureGainResponse
	(*GetAudioCaptureGainRequest)(nil),     // 20: bosdyn.api.spot_cam.GetAudioCaptureGainRequest
	(*GetAudioCaptureGainResponse)(nil),    // 21: bosdyn.api.spot_cam.GetAudioCaptureGainResponse
	(*api.RequestHeader)(nil),              // 22: bosdyn.api.RequestHeader
	(*api.ResponseHeader)(nil),             // 23: bosdyn.api.ResponseHeader
	(*wrapperspb.FloatValue)(nil),          // 24: google.protobuf.FloatValue
	(*api.DataChunk)(nil),                  // 25: bosdyn.api.DataChunk
}
var file_bosdyn_api_spot_cam_audio_proto_depIdxs = []int32{
	22, // 0: bosdyn.api.spot_cam.ListSoundsRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 1: bosdyn.api.spot_cam.ListSoundsResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 2: bosdyn.api.spot_cam.ListSoundsResponse.sounds:type_name -> bosdyn.api.spot_cam.Sound
	22, // 3: bosdyn.api.spot_cam.SetVolumeRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 4: bosdyn.api.spot_cam.SetVolumeResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 5: bosdyn.api.spot_cam.GetVolumeRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 6: bosdyn.api.spot_cam.GetVolumeResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 7: bosdyn.api.spot_cam.PlaySoundRequest.header:type_name -> bosdyn.api.RequestHeader
	1,  // 8: bosdyn.api.spot_cam.PlaySoundRequest.sound:type_name -> bosdyn.api.spot_cam.Sound
	24, // 9: bosdyn.api.spot_cam.PlaySoundRequest.gain:type_name -> google.protobuf.FloatValue
	23, // 10: bosdyn.api.spot_cam.PlaySoundResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 11: bosdyn.api.spot_cam.DeleteSoundRequest.header:type_name -> bosdyn.api.RequestHeader
	1,  // 12: bosdyn.api.spot_cam.DeleteSoundRequest.sound:type_name -> bosdyn.api.spot_cam.Sound
	23, // 13: bosdyn.api.spot_cam.DeleteSoundResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 14: bosdyn.api.spot_cam.LoadSoundRequest.header:type_name -> bosdyn.api.RequestHeader
	1,  // 15: bosdyn.api.spot_cam.LoadSoundRequest.sound:type_name -> bosdyn.api.spot_cam.Sound
	25, // 16: bosdyn.api.spot_cam.LoadSoundRequest.data:type_name -> bosdyn.api.DataChunk
	23, // 17: bosdyn.api.spot_cam.LoadSoundResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 18: bosdyn.api.spot_cam.SetAudioCaptureChannelRequest.header:type_name -> bosdyn.api.RequestHeader
	0,  // 19: bosdyn.api.spot_cam.SetAudioCaptureChannelRequest.channel:type_name -> bosdyn.api.spot_cam.AudioCaptureChannel
	23, // 20: bosdyn.api.spot_cam.SetAudioCaptureChannelResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 21: bosdyn.api.spot_cam.GetAudioCaptureChannelRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 22: bosdyn.api.spot_cam.GetAudioCaptureChannelResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 23: bosdyn.api.spot_cam.GetAudioCaptureChannelResponse.channel:type_name -> bosdyn.api.spot_cam.AudioCaptureChannel
	22, // 24: bosdyn.api.spot_cam.SetAudioCaptureGainRequest.header:type_name -> bosdyn.api.RequestHeader
	0,  // 25: bosdyn.api.spot_cam.SetAudioCaptureGainRequest.channel:type_name -> bosdyn.api.spot_cam.AudioCaptureChannel
	23, // 26: bosdyn.api.spot_cam.SetAudioCaptureGainResponse.header:type_name -> bosdyn.api.ResponseHeader
	22, // 27: bosdyn.api.spot_cam.GetAudioCaptureGainRequest.header:type_name -> bosdyn.api.RequestHeader
	0,  // 28: bosdyn.api.spot_cam.GetAudioCaptureGainRequest.channel:type_name -> bosdyn.api.spot_cam.AudioCaptureChannel
	23, // 29: bosdyn.api.spot_cam.GetAudioCaptureGainResponse.header:type_name -> bosdyn.api.ResponseHeader
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_cam_audio_proto_init() }
func file_bosdyn_api_spot_cam_audio_proto_init() {
	if File_bosdyn_api_spot_cam_audio_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sound); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSoundsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSoundsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVolumeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVolumeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSoundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadSoundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAudioCaptureChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAudioCaptureChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioCaptureChannelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioCaptureChannelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAudioCaptureGainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAudioCaptureGainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioCaptureGainRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_cam_audio_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAudioCaptureGainResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_cam_audio_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_cam_audio_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_cam_audio_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_cam_audio_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_cam_audio_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_cam_audio_proto = out.File
	file_bosdyn_api_spot_cam_audio_proto_rawDesc = nil
	file_bosdyn_api_spot_cam_audio_proto_goTypes = nil
	file_bosdyn_api_spot_cam_audio_proto_depIdxs = nil
}
