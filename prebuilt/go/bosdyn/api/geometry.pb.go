// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/geometry.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Two dimensional vector primitive.
type Vec2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Vec2) Reset() {
	*x = Vec2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vec2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec2) ProtoMessage() {}

func (x *Vec2) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec2.ProtoReflect.Descriptor instead.
func (*Vec2) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{0}
}

func (x *Vec2) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vec2) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

// Three dimensional vector primitive.
type Vec3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vec3) Reset() {
	*x = Vec3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vec3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec3) ProtoMessage() {}

func (x *Vec3) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec3.ProtoReflect.Descriptor instead.
func (*Vec3) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{1}
}

func (x *Vec3) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Vec3) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Vec3) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Cylindrical coordinates are a generalization of polar coordiates, adding a
// height
// axis. See (http://mathworld.wolfram.com/CylindricalCoordinates.html) for
// more details.
type CylindricalCoordinate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R     float64 `protobuf:"fixed64,1,opt,name=r,proto3" json:"r,omitempty"`         // Radial coordinate
	Theta float64 `protobuf:"fixed64,2,opt,name=theta,proto3" json:"theta,omitempty"` // Azimuthal coordinate
	Z     float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`         // Vertical coordiante
}

func (x *CylindricalCoordinate) Reset() {
	*x = CylindricalCoordinate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CylindricalCoordinate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CylindricalCoordinate) ProtoMessage() {}

func (x *CylindricalCoordinate) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CylindricalCoordinate.ProtoReflect.Descriptor instead.
func (*CylindricalCoordinate) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{2}
}

func (x *CylindricalCoordinate) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *CylindricalCoordinate) GetTheta() float64 {
	if x != nil {
		return x.Theta
	}
	return 0
}

func (x *CylindricalCoordinate) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

// Quaternion primitive. A quaternion can be used to describe the rotation.
type Quaternion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty"`
	Z float64 `protobuf:"fixed64,3,opt,name=z,proto3" json:"z,omitempty"`
	W float64 `protobuf:"fixed64,4,opt,name=w,proto3" json:"w,omitempty"`
}

func (x *Quaternion) Reset() {
	*x = Quaternion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quaternion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quaternion) ProtoMessage() {}

func (x *Quaternion) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quaternion.ProtoReflect.Descriptor instead.
func (*Quaternion) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{3}
}

func (x *Quaternion) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Quaternion) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Quaternion) GetZ() float64 {
	if x != nil {
		return x.Z
	}
	return 0
}

func (x *Quaternion) GetW() float64 {
	if x != nil {
		return x.W
	}
	return 0
}

// Plane primitive, described with a point and normal.
type Plane struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Point  *Vec3 `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`   // A point on the plane.
	Normal *Vec3 `protobuf:"bytes,2,opt,name=normal,proto3" json:"normal,omitempty"` // The direction of the planes normal.
}

func (x *Plane) Reset() {
	*x = Plane{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Plane) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plane) ProtoMessage() {}

func (x *Plane) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plane.ProtoReflect.Descriptor instead.
func (*Plane) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{4}
}

func (x *Plane) GetPoint() *Vec3 {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Plane) GetNormal() *Vec3 {
	if x != nil {
		return x.Normal
	}
	return nil
}

// A square oriented in 3D space.
type Quad struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The center of the quad and the orientation of the normal.
	// The normal axis is [0, 0, 1].
	Pose *SE3Pose `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
	// The side length of the quad.
	Size float64 `protobuf:"fixed64,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Quad) Reset() {
	*x = Quad{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quad) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quad) ProtoMessage() {}

func (x *Quad) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quad.ProtoReflect.Descriptor instead.
func (*Quad) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{5}
}

func (x *Quad) GetPose() *SE3Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *Quad) GetSize() float64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// A ray in 3D space.
type Ray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Base of ray.
	Origin *Vec3 `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// Unit vector defining the direction of the ray.
	Direction *Vec3 `protobuf:"bytes,2,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *Ray) Reset() {
	*x = Ray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ray) ProtoMessage() {}

func (x *Ray) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ray.ProtoReflect.Descriptor instead.
func (*Ray) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{6}
}

func (x *Ray) GetOrigin() *Vec3 {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Ray) GetDirection() *Vec3 {
	if x != nil {
		return x.Direction
	}
	return nil
}

// Geometric primitive to describe 2D position and rotation.
type SE2Pose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Vec2   `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"` // (m)
	Angle    float64 `protobuf:"fixed64,2,opt,name=angle,proto3" json:"angle,omitempty"`     // (rad)
}

func (x *SE2Pose) Reset() {
	*x = SE2Pose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2Pose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2Pose) ProtoMessage() {}

func (x *SE2Pose) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2Pose.ProtoReflect.Descriptor instead.
func (*SE2Pose) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{7}
}

func (x *SE2Pose) GetPosition() *Vec2 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SE2Pose) GetAngle() float64 {
	if x != nil {
		return x.Angle
	}
	return 0
}

// Geometric primitive that describes a 2D velocity through it's linear and angular components.
type SE2Velocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Linear  *Vec2   `protobuf:"bytes,1,opt,name=linear,proto3" json:"linear,omitempty"`     // (m/s)
	Angular float64 `protobuf:"fixed64,2,opt,name=angular,proto3" json:"angular,omitempty"` // (rad/s)
}

func (x *SE2Velocity) Reset() {
	*x = SE2Velocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2Velocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2Velocity) ProtoMessage() {}

func (x *SE2Velocity) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2Velocity.ProtoReflect.Descriptor instead.
func (*SE2Velocity) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{8}
}

func (x *SE2Velocity) GetLinear() *Vec2 {
	if x != nil {
		return x.Linear
	}
	return nil
}

func (x *SE2Velocity) GetAngular() float64 {
	if x != nil {
		return x.Angular
	}
	return 0
}

// Geometric primitive to couple minimum and maximum SE2Velocities in a single message.
type SE2VelocityLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, limits the maximum velocity.
	MaxVel *SE2Velocity `protobuf:"bytes,1,opt,name=max_vel,json=maxVel,proto3" json:"max_vel,omitempty"`
	// If set, limits the minimum velocity.
	MinVel *SE2Velocity `protobuf:"bytes,2,opt,name=min_vel,json=minVel,proto3" json:"min_vel,omitempty"`
}

func (x *SE2VelocityLimit) Reset() {
	*x = SE2VelocityLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2VelocityLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2VelocityLimit) ProtoMessage() {}

func (x *SE2VelocityLimit) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2VelocityLimit.ProtoReflect.Descriptor instead.
func (*SE2VelocityLimit) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{9}
}

func (x *SE2VelocityLimit) GetMaxVel() *SE2Velocity {
	if x != nil {
		return x.MaxVel
	}
	return nil
}

func (x *SE2VelocityLimit) GetMinVel() *SE2Velocity {
	if x != nil {
		return x.MinVel
	}
	return nil
}

// Geometric primitive to describe 3D position and rotation.
type SE3Pose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Vec3       `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"` // (m)
	Rotation *Quaternion `protobuf:"bytes,2,opt,name=rotation,proto3" json:"rotation,omitempty"`
}

func (x *SE3Pose) Reset() {
	*x = SE3Pose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE3Pose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE3Pose) ProtoMessage() {}

func (x *SE3Pose) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE3Pose.ProtoReflect.Descriptor instead.
func (*SE3Pose) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{10}
}

func (x *SE3Pose) GetPosition() *Vec3 {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *SE3Pose) GetRotation() *Quaternion {
	if x != nil {
		return x.Rotation
	}
	return nil
}

// Geometric primitive that describes a 3D velocity through it's linear and angular components.
type SE3Velocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Linear  *Vec3 `protobuf:"bytes,1,opt,name=linear,proto3" json:"linear,omitempty"`   // (m/s)
	Angular *Vec3 `protobuf:"bytes,2,opt,name=angular,proto3" json:"angular,omitempty"` // (rad/s)
}

func (x *SE3Velocity) Reset() {
	*x = SE3Velocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE3Velocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE3Velocity) ProtoMessage() {}

func (x *SE3Velocity) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE3Velocity.ProtoReflect.Descriptor instead.
func (*SE3Velocity) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{11}
}

func (x *SE3Velocity) GetLinear() *Vec3 {
	if x != nil {
		return x.Linear
	}
	return nil
}

func (x *SE3Velocity) GetAngular() *Vec3 {
	if x != nil {
		return x.Angular
	}
	return nil
}

// Geometric primitive used to specify forces and torques.
type Wrench struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Force  *Vec3 `protobuf:"bytes,1,opt,name=force,proto3" json:"force,omitempty"`   // (N)
	Torque *Vec3 `protobuf:"bytes,2,opt,name=torque,proto3" json:"torque,omitempty"` // (Nm)
}

func (x *Wrench) Reset() {
	*x = Wrench{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Wrench) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Wrench) ProtoMessage() {}

func (x *Wrench) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Wrench.ProtoReflect.Descriptor instead.
func (*Wrench) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{12}
}

func (x *Wrench) GetForce() *Vec3 {
	if x != nil {
		return x.Force
	}
	return nil
}

func (x *Wrench) GetTorque() *Vec3 {
	if x != nil {
		return x.Torque
	}
	return nil
}

type FrameTreeSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// child_to_parent_edge_map maps the child frame name to the ParentEdge.
	// In aggregate, this forms the tree structure.
	ChildToParentEdgeMap map[string]*FrameTreeSnapshot_ParentEdge `protobuf:"bytes,1,rep,name=child_to_parent_edge_map,json=childToParentEdgeMap,proto3" json:"child_to_parent_edge_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *FrameTreeSnapshot) Reset() {
	*x = FrameTreeSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTreeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTreeSnapshot) ProtoMessage() {}

func (x *FrameTreeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTreeSnapshot.ProtoReflect.Descriptor instead.
func (*FrameTreeSnapshot) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{13}
}

func (x *FrameTreeSnapshot) GetChildToParentEdgeMap() map[string]*FrameTreeSnapshot_ParentEdge {
	if x != nil {
		return x.ChildToParentEdgeMap
	}
	return nil
}

// Geometric primitive describing a two-dimensional box.
type Box2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *Vec2 `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Box2) Reset() {
	*x = Box2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Box2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box2) ProtoMessage() {}

func (x *Box2) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box2.ProtoReflect.Descriptor instead.
func (*Box2) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{14}
}

func (x *Box2) GetSize() *Vec2 {
	if x != nil {
		return x.Size
	}
	return nil
}

// Geometric primitive to describe a 2D box in a specific frame.
type Box2WithFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The box is specified with width (y) and length (x), and the full box is
	// fixed at an origin, where it's sides are along the coordinate frame's
	// axes.
	Box *Box2 `protobuf:"bytes,1,opt,name=box,proto3" json:"box,omitempty"`
	// The pose of the axis-aligned box is in 'frame_name'.
	FrameName string `protobuf:"bytes,2,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// The transformation of the axis-aligned box into the desired frame
	// (specified above).
	FrameNameTformBox *SE3Pose `protobuf:"bytes,3,opt,name=frame_name_tform_box,json=frameNameTformBox,proto3" json:"frame_name_tform_box,omitempty"`
}

func (x *Box2WithFrame) Reset() {
	*x = Box2WithFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Box2WithFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box2WithFrame) ProtoMessage() {}

func (x *Box2WithFrame) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box2WithFrame.ProtoReflect.Descriptor instead.
func (*Box2WithFrame) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{15}
}

func (x *Box2WithFrame) GetBox() *Box2 {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *Box2WithFrame) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *Box2WithFrame) GetFrameNameTformBox() *SE3Pose {
	if x != nil {
		return x.FrameNameTformBox
	}
	return nil
}

// Geometric primitive describing a three-dimensional box.
type Box3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *Vec3 `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *Box3) Reset() {
	*x = Box3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Box3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box3) ProtoMessage() {}

func (x *Box3) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box3.ProtoReflect.Descriptor instead.
func (*Box3) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{16}
}

func (x *Box3) GetSize() *Vec3 {
	if x != nil {
		return x.Size
	}
	return nil
}

// Geometric primitive to describe a 3D box in a specific frame.
type Box3WithFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The box width (y), length (x), and height (z) are interpreted in, and the
	// full box is fixed at an origin, where it's sides are along the coordinate
	// frame's axes.
	Box *Box3 `protobuf:"bytes,1,opt,name=box,proto3" json:"box,omitempty"`
	// The pose of the axis-aligned box is in 'frame_name'.
	FrameName string `protobuf:"bytes,2,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// The transformation of the axis-aligned box into the desired frame
	// (specified above).
	FrameNameTformBox *SE3Pose `protobuf:"bytes,3,opt,name=frame_name_tform_box,json=frameNameTformBox,proto3" json:"frame_name_tform_box,omitempty"`
}

func (x *Box3WithFrame) Reset() {
	*x = Box3WithFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Box3WithFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Box3WithFrame) ProtoMessage() {}

func (x *Box3WithFrame) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Box3WithFrame.ProtoReflect.Descriptor instead.
func (*Box3WithFrame) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{17}
}

func (x *Box3WithFrame) GetBox() *Box3 {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *Box3WithFrame) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *Box3WithFrame) GetFrameNameTformBox() *SE3Pose {
	if x != nil {
		return x.FrameNameTformBox
	}
	return nil
}

// Represents a row-major order matrix of doubles.
type Matrix struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows   int32     `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Cols   int32     `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	Values []float64 `protobuf:"fixed64,3,rep,packed,name=values,proto3" json:"values,omitempty"`
}

func (x *Matrix) Reset() {
	*x = Matrix{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Matrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Matrix) ProtoMessage() {}

func (x *Matrix) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Matrix.ProtoReflect.Descriptor instead.
func (*Matrix) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{18}
}

func (x *Matrix) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Matrix) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *Matrix) GetValues() []float64 {
	if x != nil {
		return x.Values
	}
	return nil
}

// Represents the translation/rotation covariance of an SE3 Pose.
// The 6x6 matrix can be viewed as the covariance among 6 variables: \
//      rx     ry  rz    x    y    z                                 \
// rx rxrx  rxry rxrz  rxx  rxy  rxz                                 \
// ry ryrx  ryry ryrz  ryx  ryy  ryz                                 \
// rz rzrx  rzry rzrz  rzx  rzy  rzz                                 \
// x   xrx   xry  xrz   xx   xy   xz                                 \
// y   yrx   yry  yrz   yx   yy   yz                                 \
// z   zrx   zry  zrz   zx   zy   zz                                 \
// where x, y, z are translations in meters, and rx, ry, rz are rotations around
// the x, y and z axes in radians.                                   \
// The matrix is symmetric, so, for example, xy = yx.                \
type SE3Covariance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Row-major order representation of the covariance matrix.
	Matrix *Matrix `protobuf:"bytes,1,opt,name=matrix,proto3" json:"matrix,omitempty"`
	// Variance of the yaw component of the SE3 Pose.
	// Warning: deprecated in 2.1. This should equal cov_rzrz, inside `matrix`.
	//
	// Deprecated: Do not use.
	YawVariance float64 `protobuf:"fixed64,2,opt,name=yaw_variance,json=yawVariance,proto3" json:"yaw_variance,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovXx float64 `protobuf:"fixed64,3,opt,name=cov_xx,json=covXx,proto3" json:"cov_xx,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovXy float64 `protobuf:"fixed64,4,opt,name=cov_xy,json=covXy,proto3" json:"cov_xy,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovXz float64 `protobuf:"fixed64,5,opt,name=cov_xz,json=covXz,proto3" json:"cov_xz,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovYx float64 `protobuf:"fixed64,6,opt,name=cov_yx,json=covYx,proto3" json:"cov_yx,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovYy float64 `protobuf:"fixed64,7,opt,name=cov_yy,json=covYy,proto3" json:"cov_yy,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovYz float64 `protobuf:"fixed64,8,opt,name=cov_yz,json=covYz,proto3" json:"cov_yz,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovZx float64 `protobuf:"fixed64,9,opt,name=cov_zx,json=covZx,proto3" json:"cov_zx,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovZy float64 `protobuf:"fixed64,10,opt,name=cov_zy,json=covZy,proto3" json:"cov_zy,omitempty"`
	// Warning: deprecated in 2.1. Use 'matrix.'
	//
	// Deprecated: Do not use.
	CovZz float64 `protobuf:"fixed64,11,opt,name=cov_zz,json=covZz,proto3" json:"cov_zz,omitempty"`
}

func (x *SE3Covariance) Reset() {
	*x = SE3Covariance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE3Covariance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE3Covariance) ProtoMessage() {}

func (x *SE3Covariance) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE3Covariance.ProtoReflect.Descriptor instead.
func (*SE3Covariance) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{19}
}

func (x *SE3Covariance) GetMatrix() *Matrix {
	if x != nil {
		return x.Matrix
	}
	return nil
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetYawVariance() float64 {
	if x != nil {
		return x.YawVariance
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovXx() float64 {
	if x != nil {
		return x.CovXx
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovXy() float64 {
	if x != nil {
		return x.CovXy
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovXz() float64 {
	if x != nil {
		return x.CovXz
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovYx() float64 {
	if x != nil {
		return x.CovYx
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovYy() float64 {
	if x != nil {
		return x.CovYy
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovYz() float64 {
	if x != nil {
		return x.CovYz
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovZx() float64 {
	if x != nil {
		return x.CovZx
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovZy() float64 {
	if x != nil {
		return x.CovZy
	}
	return 0
}

// Deprecated: Do not use.
func (x *SE3Covariance) GetCovZz() float64 {
	if x != nil {
		return x.CovZz
	}
	return 0
}

// Multi-part, 1D line segments defined by a series of points.
type PolyLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Vec2 `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *PolyLine) Reset() {
	*x = PolyLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolyLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolyLine) ProtoMessage() {}

func (x *PolyLine) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolyLine.ProtoReflect.Descriptor instead.
func (*PolyLine) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{20}
}

func (x *PolyLine) GetPoints() []*Vec2 {
	if x != nil {
		return x.Points
	}
	return nil
}

// Polygon in the XY plane.
// May be concave, but should not self-intersect. Vertices can be specified in either
// clockwise or counterclockwise orders.
type Polygon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vertexes []*Vec2 `protobuf:"bytes,1,rep,name=vertexes,proto3" json:"vertexes,omitempty"`
}

func (x *Polygon) Reset() {
	*x = Polygon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Polygon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Polygon) ProtoMessage() {}

func (x *Polygon) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Polygon.ProtoReflect.Descriptor instead.
func (*Polygon) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{21}
}

func (x *Polygon) GetVertexes() []*Vec2 {
	if x != nil {
		return x.Vertexes
	}
	return nil
}

// Represents a region in the XY plane that consists of a single polygon
// from which polygons representing exclusion areas may be subtracted.
//
// A point is considered to be inside the region if it is inside the inclusion
// polygon and not inside any of the exclusion polygons.
//
// Note that while this can be used to represent a polygon with holes, that
// exclusions are not necessarily holes:  An exclusion polygon may not be
// completely inside the inclusion polygon.
type PolygonWithExclusions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inclusion  *Polygon   `protobuf:"bytes,5,opt,name=inclusion,proto3" json:"inclusion,omitempty"`
	Exclusions []*Polygon `protobuf:"bytes,6,rep,name=exclusions,proto3" json:"exclusions,omitempty"`
}

func (x *PolygonWithExclusions) Reset() {
	*x = PolygonWithExclusions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolygonWithExclusions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolygonWithExclusions) ProtoMessage() {}

func (x *PolygonWithExclusions) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolygonWithExclusions.ProtoReflect.Descriptor instead.
func (*PolygonWithExclusions) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{22}
}

func (x *PolygonWithExclusions) GetInclusion() *Polygon {
	if x != nil {
		return x.Inclusion
	}
	return nil
}

func (x *PolygonWithExclusions) GetExclusions() []*Polygon {
	if x != nil {
		return x.Exclusions
	}
	return nil
}

// Represents a circular 2D area.
type Circle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CenterPt *Vec2   `protobuf:"bytes,1,opt,name=center_pt,json=centerPt,proto3" json:"center_pt,omitempty"`
	Radius   float64 `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"` // Dimensions in m from center_pt.
}

func (x *Circle) Reset() {
	*x = Circle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Circle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Circle) ProtoMessage() {}

func (x *Circle) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Circle.ProtoReflect.Descriptor instead.
func (*Circle) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{23}
}

func (x *Circle) GetCenterPt() *Vec2 {
	if x != nil {
		return x.CenterPt
	}
	return nil
}

func (x *Circle) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// Represents an area in the XY plane.
type Area struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Geometry:
	//	*Area_Polygon
	//	*Area_Circle
	Geometry isArea_Geometry `protobuf_oneof:"geometry"`
}

func (x *Area) Reset() {
	*x = Area{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Area) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Area) ProtoMessage() {}

func (x *Area) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Area.ProtoReflect.Descriptor instead.
func (*Area) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{24}
}

func (m *Area) GetGeometry() isArea_Geometry {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (x *Area) GetPolygon() *Polygon {
	if x, ok := x.GetGeometry().(*Area_Polygon); ok {
		return x.Polygon
	}
	return nil
}

func (x *Area) GetCircle() *Circle {
	if x, ok := x.GetGeometry().(*Area_Circle); ok {
		return x.Circle
	}
	return nil
}

type isArea_Geometry interface {
	isArea_Geometry()
}

type Area_Polygon struct {
	Polygon *Polygon `protobuf:"bytes,1,opt,name=polygon,proto3,oneof"`
}

type Area_Circle struct {
	Circle *Circle `protobuf:"bytes,2,opt,name=circle,proto3,oneof"`
}

func (*Area_Polygon) isArea_Geometry() {}

func (*Area_Circle) isArea_Geometry() {}

// Represents a volume of space in an unspecified frame.
type Volume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Geometry:
	//	*Volume_Box
	Geometry isVolume_Geometry `protobuf_oneof:"geometry"`
}

func (x *Volume) Reset() {
	*x = Volume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Volume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Volume) ProtoMessage() {}

func (x *Volume) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Volume.ProtoReflect.Descriptor instead.
func (*Volume) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{25}
}

func (m *Volume) GetGeometry() isVolume_Geometry {
	if m != nil {
		return m.Geometry
	}
	return nil
}

func (x *Volume) GetBox() *Vec3 {
	if x, ok := x.GetGeometry().(*Volume_Box); ok {
		return x.Box
	}
	return nil
}

type isVolume_Geometry interface {
	isVolume_Geometry()
}

type Volume_Box struct {
	Box *Vec3 `protobuf:"bytes,1,opt,name=box,proto3,oneof"` // Dimensions in m, centered on frame origin.
}

func (*Volume_Box) isVolume_Geometry() {}

// Represents bounds on a value, such that lower < value < upper.
// If you do not want to specify one side of the bound, set it to
// an appropriately large (or small) number.
type Bounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lower float64 `protobuf:"fixed64,1,opt,name=lower,proto3" json:"lower,omitempty"`
	Upper float64 `protobuf:"fixed64,2,opt,name=upper,proto3" json:"upper,omitempty"`
}

func (x *Bounds) Reset() {
	*x = Bounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bounds) ProtoMessage() {}

func (x *Bounds) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bounds.ProtoReflect.Descriptor instead.
func (*Bounds) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{26}
}

func (x *Bounds) GetLower() float64 {
	if x != nil {
		return x.Lower
	}
	return 0
}

func (x *Bounds) GetUpper() float64 {
	if x != nil {
		return x.Upper
	}
	return 0
}

// A 2D vector of doubles that uses wrapped values so we can tell which elements are set.
type Vec2Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *Vec2Value) Reset() {
	*x = Vec2Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vec2Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec2Value) ProtoMessage() {}

func (x *Vec2Value) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec2Value.ProtoReflect.Descriptor instead.
func (*Vec2Value) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{27}
}

func (x *Vec2Value) GetX() *wrapperspb.DoubleValue {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Vec2Value) GetY() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Y
	}
	return nil
}

// A 3D vector of doubles that uses wrapped values so we can tell which elements are set.
type Vec3Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
	Z *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *Vec3Value) Reset() {
	*x = Vec3Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vec3Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec3Value) ProtoMessage() {}

func (x *Vec3Value) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec3Value.ProtoReflect.Descriptor instead.
func (*Vec3Value) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{28}
}

func (x *Vec3Value) GetX() *wrapperspb.DoubleValue {
	if x != nil {
		return x.X
	}
	return nil
}

func (x *Vec3Value) GetY() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Y
	}
	return nil
}

func (x *Vec3Value) GetZ() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Z
	}
	return nil
}

// ParentEdge represents the relationship from a child frame to a parent frame.
type FrameTreeSnapshot_ParentEdge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the parent frame. Must be non-empty. If parent_frame_name is
	// not a key in edge_map, it is the root of the tree.
	ParentFrameName string `protobuf:"bytes,1,opt,name=parent_frame_name,json=parentFrameName,proto3" json:"parent_frame_name,omitempty"`
	// Transform representing the pose of the child frame in the parent's frame.
	ParentTformChild *SE3Pose `protobuf:"bytes,2,opt,name=parent_tform_child,json=parentTformChild,proto3" json:"parent_tform_child,omitempty"`
}

func (x *FrameTreeSnapshot_ParentEdge) Reset() {
	*x = FrameTreeSnapshot_ParentEdge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_geometry_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameTreeSnapshot_ParentEdge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameTreeSnapshot_ParentEdge) ProtoMessage() {}

func (x *FrameTreeSnapshot_ParentEdge) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_geometry_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameTreeSnapshot_ParentEdge.ProtoReflect.Descriptor instead.
func (*FrameTreeSnapshot_ParentEdge) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_geometry_proto_rawDescGZIP(), []int{13, 0}
}

func (x *FrameTreeSnapshot_ParentEdge) GetParentFrameName() string {
	if x != nil {
		return x.ParentFrameName
	}
	return ""
}

func (x *FrameTreeSnapshot_ParentEdge) GetParentTformChild() *SE3Pose {
	if x != nil {
		return x.ParentTformChild
	}
	return nil
}

var File_bosdyn_api_geometry_proto protoreflect.FileDescriptor

var file_bosdyn_api_geometry_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x04, 0x56, 0x65, 0x63, 0x32, 0x12,
	0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a,
	0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x22, 0x30, 0x0a, 0x04, 0x56,
	0x65, 0x63, 0x33, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x49, 0x0a,
	0x15, 0x43, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x74, 0x68, 0x65, 0x74, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a, 0x22, 0x44, 0x0a, 0x0a, 0x51, 0x75, 0x61, 0x74,
	0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x7a,
	0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x77, 0x22, 0x59,
	0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x33, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x43, 0x0a, 0x04, 0x51, 0x75, 0x61,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x5f,
	0x0a, 0x03, 0x52, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12,
	0x2e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x33, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x4d, 0x0a, 0x07, 0x53, 0x45, 0x32, 0x50, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x08,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0x51,
	0x0a, 0x0b, 0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a,
	0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52,
	0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6e, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61,
	0x72, 0x22, 0x76, 0x0a, 0x10, 0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x76, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x06, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x6c, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x5f, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x52, 0x06, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x6c, 0x22, 0x6b, 0x0a, 0x07, 0x53, 0x45, 0x33,
	0x50, 0x6f, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x63, 0x0a, 0x0b, 0x53, 0x45, 0x33, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x06, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x12,
	0x2a, 0x0a, 0x07, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65,
	0x63, 0x33, 0x52, 0x07, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x5a, 0x0a, 0x06, 0x57,
	0x72, 0x65, 0x6e, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52,
	0x06, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x11, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x6f, 0x0a,
	0x18, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x54,
	0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x67, 0x65, 0x4d, 0x61, 0x70, 0x1a, 0x7b,
	0x0a, 0x0a, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x1a, 0x71, 0x0a, 0x19, 0x43,
	0x68, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45, 0x64, 0x67, 0x65,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x45,
	0x64, 0x67, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c,
	0x0a, 0x04, 0x42, 0x6f, 0x78, 0x32, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x98, 0x01, 0x0a,
	0x0d, 0x42, 0x6f, 0x78, 0x32, 0x57, 0x69, 0x74, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x78, 0x32, 0x52, 0x03, 0x62,
	0x6f, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x44, 0x0a, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54,
	0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6f, 0x78, 0x22, 0x2c, 0x0a, 0x04, 0x42, 0x6f, 0x78, 0x33, 0x12,
	0x24, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x42, 0x6f, 0x78, 0x33, 0x57, 0x69,
	0x74, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x6f, 0x78, 0x33, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x14, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62,
	0x6f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x11, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6f, 0x78,
	0x22, 0x48, 0x0a, 0x06, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x6c, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x01, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xd5, 0x02, 0x0a, 0x0d, 0x53,
	0x45, 0x33, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x52, 0x06, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x12, 0x25, 0x0a, 0x0c, 0x79, 0x61, 0x77, 0x5f,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x0b, 0x79, 0x61, 0x77, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x19, 0x0a, 0x06, 0x63, 0x6f, 0x76, 0x5f, 0x78, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x58, 0x78, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f,
	0x76, 0x5f, 0x78, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05,
	0x63, 0x6f, 0x76, 0x58, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f, 0x76, 0x5f, 0x78, 0x7a, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x58, 0x7a,
	0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f, 0x76, 0x5f, 0x79, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x59, 0x78, 0x12, 0x19, 0x0a, 0x06, 0x63,
	0x6f, 0x76, 0x5f, 0x79, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x05, 0x63, 0x6f, 0x76, 0x59, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f, 0x76, 0x5f, 0x79, 0x7a,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x59,
	0x7a, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f, 0x76, 0x5f, 0x7a, 0x78, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x76, 0x5a, 0x78, 0x12, 0x19, 0x0a, 0x06,
	0x63, 0x6f, 0x76, 0x5f, 0x7a, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x63, 0x6f, 0x76, 0x5a, 0x79, 0x12, 0x19, 0x0a, 0x06, 0x63, 0x6f, 0x76, 0x5f, 0x7a,
	0x7a, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x5a, 0x7a, 0x22, 0x34, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x79, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x28,
	0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32,
	0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x37, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x79,
	0x67, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x08, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x65,
	0x73, 0x22, 0x7f, 0x0a, 0x15, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67,
	0x6f, 0x6e, 0x52, 0x09, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x4f, 0x0a, 0x06, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x09,
	0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x32, 0x52, 0x08, 0x63, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x50, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x22, 0x71, 0x0a, 0x04, 0x41, 0x72, 0x65, 0x61, 0x12, 0x2f, 0x0a, 0x07, 0x70,
	0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06,
	0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x67, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x22, 0x3a, 0x0a, 0x06, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x48,
	0x00, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x42, 0x0a, 0x0a, 0x08, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x22, 0x34, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x6c, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x75, 0x70, 0x70, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x09, 0x56, 0x65, 0x63, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01,
	0x78, 0x12, 0x2a, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x79, 0x22, 0x8f, 0x01,
	0x0a, 0x09, 0x56, 0x65, 0x63, 0x33, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x78, 0x12, 0x2a, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x01, 0x79, 0x12, 0x2a, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x01, 0x7a, 0x42,
	0x42, 0x42, 0x0d, 0x47, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73,
	0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_geometry_proto_rawDescOnce sync.Once
	file_bosdyn_api_geometry_proto_rawDescData = file_bosdyn_api_geometry_proto_rawDesc
)

func file_bosdyn_api_geometry_proto_rawDescGZIP() []byte {
	file_bosdyn_api_geometry_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_geometry_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_geometry_proto_rawDescData)
	})
	return file_bosdyn_api_geometry_proto_rawDescData
}

var file_bosdyn_api_geometry_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_bosdyn_api_geometry_proto_goTypes = []interface{}{
	(*Vec2)(nil),                         // 0: bosdyn.api.Vec2
	(*Vec3)(nil),                         // 1: bosdyn.api.Vec3
	(*CylindricalCoordinate)(nil),        // 2: bosdyn.api.CylindricalCoordinate
	(*Quaternion)(nil),                   // 3: bosdyn.api.Quaternion
	(*Plane)(nil),                        // 4: bosdyn.api.Plane
	(*Quad)(nil),                         // 5: bosdyn.api.Quad
	(*Ray)(nil),                          // 6: bosdyn.api.Ray
	(*SE2Pose)(nil),                      // 7: bosdyn.api.SE2Pose
	(*SE2Velocity)(nil),                  // 8: bosdyn.api.SE2Velocity
	(*SE2VelocityLimit)(nil),             // 9: bosdyn.api.SE2VelocityLimit
	(*SE3Pose)(nil),                      // 10: bosdyn.api.SE3Pose
	(*SE3Velocity)(nil),                  // 11: bosdyn.api.SE3Velocity
	(*Wrench)(nil),                       // 12: bosdyn.api.Wrench
	(*FrameTreeSnapshot)(nil),            // 13: bosdyn.api.FrameTreeSnapshot
	(*Box2)(nil),                         // 14: bosdyn.api.Box2
	(*Box2WithFrame)(nil),                // 15: bosdyn.api.Box2WithFrame
	(*Box3)(nil),                         // 16: bosdyn.api.Box3
	(*Box3WithFrame)(nil),                // 17: bosdyn.api.Box3WithFrame
	(*Matrix)(nil),                       // 18: bosdyn.api.Matrix
	(*SE3Covariance)(nil),                // 19: bosdyn.api.SE3Covariance
	(*PolyLine)(nil),                     // 20: bosdyn.api.PolyLine
	(*Polygon)(nil),                      // 21: bosdyn.api.Polygon
	(*PolygonWithExclusions)(nil),        // 22: bosdyn.api.PolygonWithExclusions
	(*Circle)(nil),                       // 23: bosdyn.api.Circle
	(*Area)(nil),                         // 24: bosdyn.api.Area
	(*Volume)(nil),                       // 25: bosdyn.api.Volume
	(*Bounds)(nil),                       // 26: bosdyn.api.Bounds
	(*Vec2Value)(nil),                    // 27: bosdyn.api.Vec2Value
	(*Vec3Value)(nil),                    // 28: bosdyn.api.Vec3Value
	(*FrameTreeSnapshot_ParentEdge)(nil), // 29: bosdyn.api.FrameTreeSnapshot.ParentEdge
	nil,                                  // 30: bosdyn.api.FrameTreeSnapshot.ChildToParentEdgeMapEntry
	(*wrapperspb.DoubleValue)(nil),       // 31: google.protobuf.DoubleValue
}
var file_bosdyn_api_geometry_proto_depIdxs = []int32{
	1,  // 0: bosdyn.api.Plane.point:type_name -> bosdyn.api.Vec3
	1,  // 1: bosdyn.api.Plane.normal:type_name -> bosdyn.api.Vec3
	10, // 2: bosdyn.api.Quad.pose:type_name -> bosdyn.api.SE3Pose
	1,  // 3: bosdyn.api.Ray.origin:type_name -> bosdyn.api.Vec3
	1,  // 4: bosdyn.api.Ray.direction:type_name -> bosdyn.api.Vec3
	0,  // 5: bosdyn.api.SE2Pose.position:type_name -> bosdyn.api.Vec2
	0,  // 6: bosdyn.api.SE2Velocity.linear:type_name -> bosdyn.api.Vec2
	8,  // 7: bosdyn.api.SE2VelocityLimit.max_vel:type_name -> bosdyn.api.SE2Velocity
	8,  // 8: bosdyn.api.SE2VelocityLimit.min_vel:type_name -> bosdyn.api.SE2Velocity
	1,  // 9: bosdyn.api.SE3Pose.position:type_name -> bosdyn.api.Vec3
	3,  // 10: bosdyn.api.SE3Pose.rotation:type_name -> bosdyn.api.Quaternion
	1,  // 11: bosdyn.api.SE3Velocity.linear:type_name -> bosdyn.api.Vec3
	1,  // 12: bosdyn.api.SE3Velocity.angular:type_name -> bosdyn.api.Vec3
	1,  // 13: bosdyn.api.Wrench.force:type_name -> bosdyn.api.Vec3
	1,  // 14: bosdyn.api.Wrench.torque:type_name -> bosdyn.api.Vec3
	30, // 15: bosdyn.api.FrameTreeSnapshot.child_to_parent_edge_map:type_name -> bosdyn.api.FrameTreeSnapshot.ChildToParentEdgeMapEntry
	0,  // 16: bosdyn.api.Box2.size:type_name -> bosdyn.api.Vec2
	14, // 17: bosdyn.api.Box2WithFrame.box:type_name -> bosdyn.api.Box2
	10, // 18: bosdyn.api.Box2WithFrame.frame_name_tform_box:type_name -> bosdyn.api.SE3Pose
	1,  // 19: bosdyn.api.Box3.size:type_name -> bosdyn.api.Vec3
	16, // 20: bosdyn.api.Box3WithFrame.box:type_name -> bosdyn.api.Box3
	10, // 21: bosdyn.api.Box3WithFrame.frame_name_tform_box:type_name -> bosdyn.api.SE3Pose
	18, // 22: bosdyn.api.SE3Covariance.matrix:type_name -> bosdyn.api.Matrix
	0,  // 23: bosdyn.api.PolyLine.points:type_name -> bosdyn.api.Vec2
	0,  // 24: bosdyn.api.Polygon.vertexes:type_name -> bosdyn.api.Vec2
	21, // 25: bosdyn.api.PolygonWithExclusions.inclusion:type_name -> bosdyn.api.Polygon
	21, // 26: bosdyn.api.PolygonWithExclusions.exclusions:type_name -> bosdyn.api.Polygon
	0,  // 27: bosdyn.api.Circle.center_pt:type_name -> bosdyn.api.Vec2
	21, // 28: bosdyn.api.Area.polygon:type_name -> bosdyn.api.Polygon
	23, // 29: bosdyn.api.Area.circle:type_name -> bosdyn.api.Circle
	1,  // 30: bosdyn.api.Volume.box:type_name -> bosdyn.api.Vec3
	31, // 31: bosdyn.api.Vec2Value.x:type_name -> google.protobuf.DoubleValue
	31, // 32: bosdyn.api.Vec2Value.y:type_name -> google.protobuf.DoubleValue
	31, // 33: bosdyn.api.Vec3Value.x:type_name -> google.protobuf.DoubleValue
	31, // 34: bosdyn.api.Vec3Value.y:type_name -> google.protobuf.DoubleValue
	31, // 35: bosdyn.api.Vec3Value.z:type_name -> google.protobuf.DoubleValue
	10, // 36: bosdyn.api.FrameTreeSnapshot.ParentEdge.parent_tform_child:type_name -> bosdyn.api.SE3Pose
	29, // 37: bosdyn.api.FrameTreeSnapshot.ChildToParentEdgeMapEntry.value:type_name -> bosdyn.api.FrameTreeSnapshot.ParentEdge
	38, // [38:38] is the sub-list for method output_type
	38, // [38:38] is the sub-list for method input_type
	38, // [38:38] is the sub-list for extension type_name
	38, // [38:38] is the sub-list for extension extendee
	0,  // [0:38] is the sub-list for field type_name
}

func init() { file_bosdyn_api_geometry_proto_init() }
func file_bosdyn_api_geometry_proto_init() {
	if File_bosdyn_api_geometry_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_geometry_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vec2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vec3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CylindricalCoordinate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quaternion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Plane); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quad); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2Pose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2Velocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2VelocityLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE3Pose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE3Velocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Wrench); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTreeSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Box2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Box2WithFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Box3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Box3WithFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Matrix); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE3Covariance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolyLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Polygon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolygonWithExclusions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Circle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Area); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Volume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vec2Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vec3Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_geometry_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameTreeSnapshot_ParentEdge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_geometry_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*Area_Polygon)(nil),
		(*Area_Circle)(nil),
	}
	file_bosdyn_api_geometry_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*Volume_Box)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_geometry_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_geometry_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_geometry_proto_depIdxs,
		MessageInfos:      file_bosdyn_api_geometry_proto_msgTypes,
	}.Build()
	File_bosdyn_api_geometry_proto = out.File
	file_bosdyn_api_geometry_proto_rawDesc = nil
	file_bosdyn_api_geometry_proto_goTypes = nil
	file_bosdyn_api_geometry_proto_depIdxs = nil
}
