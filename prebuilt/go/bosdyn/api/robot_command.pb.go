// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/robot_command.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RobotCommandResponse_Status int32

const (
	RobotCommandResponse_STATUS_UNKNOWN         RobotCommandResponse_Status = 0 // An unknown / unexpected error occurred.
	RobotCommandResponse_STATUS_OK              RobotCommandResponse_Status = 1 // Request was accepted.
	RobotCommandResponse_STATUS_INVALID_REQUEST RobotCommandResponse_Status = 2 // [Programming Error] Request was invalid / malformed in some way.
	RobotCommandResponse_STATUS_UNSUPPORTED     RobotCommandResponse_Status = 3 // [Programming Error] The robot does not understand this command.
	RobotCommandResponse_STATUS_NO_TIMESYNC     RobotCommandResponse_Status = 4 // [Timesync Error] Client has not done timesync with robot.
	RobotCommandResponse_STATUS_EXPIRED         RobotCommandResponse_Status = 5 // [Timesync Error] The command was received after its end_time had already passed.
	RobotCommandResponse_STATUS_TOO_DISTANT     RobotCommandResponse_Status = 6 // [Timesync Error] The command end time was too far in the future.
	RobotCommandResponse_STATUS_NOT_POWERED_ON  RobotCommandResponse_Status = 7 // [Hardware Error] The robot must be powered on to accept a command.
	RobotCommandResponse_STATUS_BEHAVIOR_FAULT  RobotCommandResponse_Status = 9 // [Robot State Error] The robot must not have behavior faults.
	RobotCommandResponse_STATUS_UNKNOWN_FRAME   RobotCommandResponse_Status = 8 // [Frame Error] The frame_name for a command was not a known frame.
)

// Enum value maps for RobotCommandResponse_Status.
var (
	RobotCommandResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_REQUEST",
		3: "STATUS_UNSUPPORTED",
		4: "STATUS_NO_TIMESYNC",
		5: "STATUS_EXPIRED",
		6: "STATUS_TOO_DISTANT",
		7: "STATUS_NOT_POWERED_ON",
		9: "STATUS_BEHAVIOR_FAULT",
		8: "STATUS_UNKNOWN_FRAME",
	}
	RobotCommandResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":         0,
		"STATUS_OK":              1,
		"STATUS_INVALID_REQUEST": 2,
		"STATUS_UNSUPPORTED":     3,
		"STATUS_NO_TIMESYNC":     4,
		"STATUS_EXPIRED":         5,
		"STATUS_TOO_DISTANT":     6,
		"STATUS_NOT_POWERED_ON":  7,
		"STATUS_BEHAVIOR_FAULT":  9,
		"STATUS_UNKNOWN_FRAME":   8,
	}
)

func (x RobotCommandResponse_Status) Enum() *RobotCommandResponse_Status {
	p := new(RobotCommandResponse_Status)
	*p = x
	return p
}

func (x RobotCommandResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobotCommandResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_command_proto_enumTypes[0].Descriptor()
}

func (RobotCommandResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_command_proto_enumTypes[0]
}

func (x RobotCommandResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobotCommandResponse_Status.Descriptor instead.
func (RobotCommandResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{3, 0}
}

type RobotCommandFeedbackResponse_Status int32

const (
	// Status enum is DEPRECATED as of 2.1.0. Behavior execution is in an unknown / unexpected state.
	RobotCommandFeedbackResponse_STATUS_UNKNOWN RobotCommandFeedbackResponse_Status = 0
	// Status enum is DEPRECATED as of 2.1.0. The robot is actively working on the command
	RobotCommandFeedbackResponse_STATUS_PROCESSING RobotCommandFeedbackResponse_Status = 1
	// Status enum is DEPRECATED as of 2.1.0. The command was replaced by a new command
	RobotCommandFeedbackResponse_STATUS_COMMAND_OVERRIDDEN RobotCommandFeedbackResponse_Status = 2
	// Status enum is DEPRECATED as of 2.1.0. The command expired
	RobotCommandFeedbackResponse_STATUS_COMMAND_TIMED_OUT RobotCommandFeedbackResponse_Status = 3
	// Status enum is DEPRECATED as of 2.1.0. The robot is in an unsafe state, and will only respond to known safe commands.
	RobotCommandFeedbackResponse_STATUS_ROBOT_FROZEN RobotCommandFeedbackResponse_Status = 4
)

// Enum value maps for RobotCommandFeedbackResponse_Status.
var (
	RobotCommandFeedbackResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_PROCESSING",
		2: "STATUS_COMMAND_OVERRIDDEN",
		3: "STATUS_COMMAND_TIMED_OUT",
		4: "STATUS_ROBOT_FROZEN",
	}
	RobotCommandFeedbackResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":            0,
		"STATUS_PROCESSING":         1,
		"STATUS_COMMAND_OVERRIDDEN": 2,
		"STATUS_COMMAND_TIMED_OUT":  3,
		"STATUS_ROBOT_FROZEN":       4,
	}
)

func (x RobotCommandFeedbackResponse_Status) Enum() *RobotCommandFeedbackResponse_Status {
	p := new(RobotCommandFeedbackResponse_Status)
	*p = x
	return p
}

func (x RobotCommandFeedbackResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobotCommandFeedbackResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_command_proto_enumTypes[1].Descriptor()
}

func (RobotCommandFeedbackResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_command_proto_enumTypes[1]
}

func (x RobotCommandFeedbackResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobotCommandFeedbackResponse_Status.Descriptor instead.
func (RobotCommandFeedbackResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{5, 0}
}

type ClearBehaviorFaultResponse_Status int32

const (
	// An unknown / unexpected error occurred.
	ClearBehaviorFaultResponse_STATUS_UNKNOWN ClearBehaviorFaultResponse_Status = 0
	// The BehaviorFault has been cleared.
	ClearBehaviorFaultResponse_STATUS_CLEARED ClearBehaviorFaultResponse_Status = 1
	// The BehaviorFault could not be cleared.
	ClearBehaviorFaultResponse_STATUS_NOT_CLEARED ClearBehaviorFaultResponse_Status = 2
)

// Enum value maps for ClearBehaviorFaultResponse_Status.
var (
	ClearBehaviorFaultResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_CLEARED",
		2: "STATUS_NOT_CLEARED",
	}
	ClearBehaviorFaultResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_CLEARED":     1,
		"STATUS_NOT_CLEARED": 2,
	}
)

func (x ClearBehaviorFaultResponse_Status) Enum() *ClearBehaviorFaultResponse_Status {
	p := new(ClearBehaviorFaultResponse_Status)
	*p = x
	return p
}

func (x ClearBehaviorFaultResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClearBehaviorFaultResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_command_proto_enumTypes[2].Descriptor()
}

func (ClearBehaviorFaultResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_command_proto_enumTypes[2]
}

func (x ClearBehaviorFaultResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClearBehaviorFaultResponse_Status.Descriptor instead.
func (ClearBehaviorFaultResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{7, 0}
}

// A command for a robot to execute.
// The server decides if a set of commands is valid for a given robot and configuration.
type RobotCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*RobotCommand_FullBodyCommand
	//	*RobotCommand_SynchronizedCommand
	//	*RobotCommand_MobilityCommand
	Command isRobotCommand_Command `protobuf_oneof:"command"`
}

func (x *RobotCommand) Reset() {
	*x = RobotCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotCommand) ProtoMessage() {}

func (x *RobotCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotCommand.ProtoReflect.Descriptor instead.
func (*RobotCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{0}
}

func (m *RobotCommand) GetCommand() isRobotCommand_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *RobotCommand) GetFullBodyCommand() *FullBodyCommand_Request {
	if x, ok := x.GetCommand().(*RobotCommand_FullBodyCommand); ok {
		return x.FullBodyCommand
	}
	return nil
}

func (x *RobotCommand) GetSynchronizedCommand() *SynchronizedCommand_Request {
	if x, ok := x.GetCommand().(*RobotCommand_SynchronizedCommand); ok {
		return x.SynchronizedCommand
	}
	return nil
}

// Deprecated: Do not use.
func (x *RobotCommand) GetMobilityCommand() *MobilityCommand_Request {
	if x, ok := x.GetCommand().(*RobotCommand_MobilityCommand); ok {
		return x.MobilityCommand
	}
	return nil
}

type isRobotCommand_Command interface {
	isRobotCommand_Command()
}

type RobotCommand_FullBodyCommand struct {
	// Commands which require control of entire robot.
	FullBodyCommand *FullBodyCommand_Request `protobuf:"bytes,1,opt,name=full_body_command,json=fullBodyCommand,proto3,oneof"`
}

type RobotCommand_SynchronizedCommand struct {
	// A synchronized command, for partial or full control of robot.
	SynchronizedCommand *SynchronizedCommand_Request `protobuf:"bytes,3,opt,name=synchronized_command,json=synchronizedCommand,proto3,oneof"`
}

type RobotCommand_MobilityCommand struct {
	// *** Deprecation Warning ***
	// DEPRECATED as of 2.1.0: A mobility command for a robot to execute.
	// The following fields will be deprecated and moved to 'reserved' in a future release.
	//
	// Deprecated: Do not use.
	MobilityCommand *MobilityCommand_Request `protobuf:"bytes,2,opt,name=mobility_command,json=mobilityCommand,proto3,oneof"`
}

func (*RobotCommand_FullBodyCommand) isRobotCommand_Command() {}

func (*RobotCommand_SynchronizedCommand) isRobotCommand_Command() {}

func (*RobotCommand_MobilityCommand) isRobotCommand_Command() {}

// Command specific feedback. Distance to goal, estimated time remaining, probability of
// success, etc. Note that the feedback should directly mirror the command request.
type RobotCommandFeedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*RobotCommandFeedback_FullBodyFeedback
	//	*RobotCommandFeedback_SynchronizedFeedback
	//	*RobotCommandFeedback_MobilityFeedback
	Command isRobotCommandFeedback_Command `protobuf_oneof:"command"`
}

func (x *RobotCommandFeedback) Reset() {
	*x = RobotCommandFeedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotCommandFeedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotCommandFeedback) ProtoMessage() {}

func (x *RobotCommandFeedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotCommandFeedback.ProtoReflect.Descriptor instead.
func (*RobotCommandFeedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{1}
}

func (m *RobotCommandFeedback) GetCommand() isRobotCommandFeedback_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *RobotCommandFeedback) GetFullBodyFeedback() *FullBodyCommand_Feedback {
	if x, ok := x.GetCommand().(*RobotCommandFeedback_FullBodyFeedback); ok {
		return x.FullBodyFeedback
	}
	return nil
}

func (x *RobotCommandFeedback) GetSynchronizedFeedback() *SynchronizedCommand_Feedback {
	if x, ok := x.GetCommand().(*RobotCommandFeedback_SynchronizedFeedback); ok {
		return x.SynchronizedFeedback
	}
	return nil
}

// Deprecated: Do not use.
func (x *RobotCommandFeedback) GetMobilityFeedback() *MobilityCommand_Feedback {
	if x, ok := x.GetCommand().(*RobotCommandFeedback_MobilityFeedback); ok {
		return x.MobilityFeedback
	}
	return nil
}

type isRobotCommandFeedback_Command interface {
	isRobotCommandFeedback_Command()
}

type RobotCommandFeedback_FullBodyFeedback struct {
	// Commands which require control of entire robot.
	FullBodyFeedback *FullBodyCommand_Feedback `protobuf:"bytes,2,opt,name=full_body_feedback,json=fullBodyFeedback,proto3,oneof"`
}

type RobotCommandFeedback_SynchronizedFeedback struct {
	// A synchronized command, for partial or full control of robot.
	SynchronizedFeedback *SynchronizedCommand_Feedback `protobuf:"bytes,3,opt,name=synchronized_feedback,json=synchronizedFeedback,proto3,oneof"`
}

type RobotCommandFeedback_MobilityFeedback struct {
	// *** Deprecation Warning ***
	// DEPRECATED as of 2.1.0: Command to control mobility system of a robot.
	// The following fields will be deprecated and moved to 'reserved' in a future release.
	//
	// Deprecated: Do not use.
	MobilityFeedback *MobilityCommand_Feedback `protobuf:"bytes,1,opt,name=mobility_feedback,json=mobilityFeedback,proto3,oneof"`
}

func (*RobotCommandFeedback_FullBodyFeedback) isRobotCommandFeedback_Command() {}

func (*RobotCommandFeedback_SynchronizedFeedback) isRobotCommandFeedback_Command() {}

func (*RobotCommandFeedback_MobilityFeedback) isRobotCommandFeedback_Command() {}

// A RobotCommand request message includes the lease and command as well as a clock
// identifier to ensure timesync when issuing commands with a fixed length.
type RobotCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot.
	Lease *Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// A command for a robot to execute. A command can be comprised of several subcommands.
	Command *RobotCommand `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
	// Identifier provided by the time sync service to verify time sync between robot and client.
	ClockIdentifier string `protobuf:"bytes,4,opt,name=clock_identifier,json=clockIdentifier,proto3" json:"clock_identifier,omitempty"`
}

func (x *RobotCommandRequest) Reset() {
	*x = RobotCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotCommandRequest) ProtoMessage() {}

func (x *RobotCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotCommandRequest.ProtoReflect.Descriptor instead.
func (*RobotCommandRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{2}
}

func (x *RobotCommandRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotCommandRequest) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *RobotCommandRequest) GetCommand() *RobotCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RobotCommandRequest) GetClockIdentifier() string {
	if x != nil {
		return x.ClockIdentifier
	}
	return ""
}

// The RobotCommand response message contains a robot command id that can be used to poll the
// robot command service for feedback on the state of the command.
type RobotCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Return status for a request.
	Status RobotCommandResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.RobotCommandResponse_Status" json:"status,omitempty"`
	// Human-readable error description.  Not for programmatic analysis.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Unique identifier for the command, If empty, command was not accepted.
	RobotCommandId uint32 `protobuf:"varint,5,opt,name=robot_command_id,json=robotCommandId,proto3" json:"robot_command_id,omitempty"`
}

func (x *RobotCommandResponse) Reset() {
	*x = RobotCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotCommandResponse) ProtoMessage() {}

func (x *RobotCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotCommandResponse.ProtoReflect.Descriptor instead.
func (*RobotCommandResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{3}
}

func (x *RobotCommandResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotCommandResponse) GetLeaseUseResult() *LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *RobotCommandResponse) GetStatus() RobotCommandResponse_Status {
	if x != nil {
		return x.Status
	}
	return RobotCommandResponse_STATUS_UNKNOWN
}

func (x *RobotCommandResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RobotCommandResponse) GetRobotCommandId() uint32 {
	if x != nil {
		return x.RobotCommandId
	}
	return 0
}

// The RobotCommandFeedback request message, which can get the feedback for a specific
// robot command id number.
type RobotCommandFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier for the command, provided by StartRequest.
	RobotCommandId uint32 `protobuf:"varint,2,opt,name=robot_command_id,json=robotCommandId,proto3" json:"robot_command_id,omitempty"`
}

func (x *RobotCommandFeedbackRequest) Reset() {
	*x = RobotCommandFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotCommandFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotCommandFeedbackRequest) ProtoMessage() {}

func (x *RobotCommandFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotCommandFeedbackRequest.ProtoReflect.Descriptor instead.
func (*RobotCommandFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{4}
}

func (x *RobotCommandFeedbackRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotCommandFeedbackRequest) GetRobotCommandId() uint32 {
	if x != nil {
		return x.RobotCommandId
	}
	return 0
}

// The RobotCommandFeedback response message, which contains the progress of the robot command.
type RobotCommandFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *LeaseUseResult `protobuf:"bytes,5,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// DEPRECATED as of 2.1.0: General status whether or not command is still processing.
	//
	// Deprecated: Do not use.
	Status RobotCommandFeedbackResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.RobotCommandFeedbackResponse_Status" json:"status,omitempty"`
	// DEPRECATED as of 2.1.0: Human-readable status message.  Not for programmatic analysis.
	//
	// Deprecated: Do not use.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	// Command specific feedback.
	Feedback *RobotCommandFeedback `protobuf:"bytes,4,opt,name=feedback,proto3" json:"feedback,omitempty"`
}

func (x *RobotCommandFeedbackResponse) Reset() {
	*x = RobotCommandFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotCommandFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotCommandFeedbackResponse) ProtoMessage() {}

func (x *RobotCommandFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotCommandFeedbackResponse.ProtoReflect.Descriptor instead.
func (*RobotCommandFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{5}
}

func (x *RobotCommandFeedbackResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotCommandFeedbackResponse) GetLeaseUseResult() *LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// Deprecated: Do not use.
func (x *RobotCommandFeedbackResponse) GetStatus() RobotCommandFeedbackResponse_Status {
	if x != nil {
		return x.Status
	}
	return RobotCommandFeedbackResponse_STATUS_UNKNOWN
}

// Deprecated: Do not use.
func (x *RobotCommandFeedbackResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RobotCommandFeedbackResponse) GetFeedback() *RobotCommandFeedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

// A ClearBehaviorFault request message has the associated behavior fault id to be cleared.
type ClearBehaviorFaultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot.
	Lease *Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// Unique identifier for the error
	BehaviorFaultId uint32 `protobuf:"varint,3,opt,name=behavior_fault_id,json=behaviorFaultId,proto3" json:"behavior_fault_id,omitempty"`
}

func (x *ClearBehaviorFaultRequest) Reset() {
	*x = ClearBehaviorFaultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearBehaviorFaultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearBehaviorFaultRequest) ProtoMessage() {}

func (x *ClearBehaviorFaultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearBehaviorFaultRequest.ProtoReflect.Descriptor instead.
func (*ClearBehaviorFaultRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{6}
}

func (x *ClearBehaviorFaultRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ClearBehaviorFaultRequest) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *ClearBehaviorFaultRequest) GetBehaviorFaultId() uint32 {
	if x != nil {
		return x.BehaviorFaultId
	}
	return 0
}

// A ClearBehaviorFault response message has status indicating whether the service cleared
// the fault or not.
type ClearBehaviorFaultResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Return status for a request.
	Status ClearBehaviorFaultResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.ClearBehaviorFaultResponse_Status" json:"status,omitempty"`
}

func (x *ClearBehaviorFaultResponse) Reset() {
	*x = ClearBehaviorFaultResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearBehaviorFaultResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearBehaviorFaultResponse) ProtoMessage() {}

func (x *ClearBehaviorFaultResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearBehaviorFaultResponse.ProtoReflect.Descriptor instead.
func (*ClearBehaviorFaultResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_command_proto_rawDescGZIP(), []int{7}
}

func (x *ClearBehaviorFaultResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ClearBehaviorFaultResponse) GetLeaseUseResult() *LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *ClearBehaviorFaultResponse) GetStatus() ClearBehaviorFaultResponse_Status {
	if x != nil {
		return x.Status
	}
	return ClearBehaviorFaultResponse_STATUS_UNKNOWN
}

var File_bosdyn_api_robot_command_proto protoreflect.FileDescriptor

var file_bosdyn_api_robot_command_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x22, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x21, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x6f,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x02, 0x0a, 0x0c,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x51, 0x0a, 0x11,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f,
	0x66, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x5c, 0x0a, 0x14, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x54, 0x0a,
	0x10, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x02, 0x18, 0x01,
	0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xb1,
	0x02, 0x0a, 0x14, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x54, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x10, 0x66, 0x75, 0x6c,
	0x6c, 0x42, 0x6f, 0x64, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5f, 0x0a,
	0x15, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x14, 0x73, 0x79, 0x6e, 0x63, 0x68, 0x72,
	0x6f, 0x6e, 0x69, 0x7a, 0x65, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x57,
	0x0a, 0x11, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x42,
	0x02, 0x18, 0x01, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0xd0, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a,
	0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0x8b, 0x04, 0x0a, 0x14, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xf3, 0x01,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x54, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x10, 0x07, 0x12, 0x19,
	0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56, 0x49, 0x4f,
	0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x10, 0x08, 0x22, 0x7a, 0x0a, 0x1b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22,
	0xcd, 0x03, 0x0a, 0x1c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x22, 0x89, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x56, 0x45, 0x52,
	0x52, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x04, 0x22,
	0xa3, 0x01, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x49, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x48, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c,
	0x45, 0x41, 0x52, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x45, 0x44, 0x10, 0x02, 0x42,
	0x46, 0x42, 0x11, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_robot_command_proto_rawDescOnce sync.Once
	file_bosdyn_api_robot_command_proto_rawDescData = file_bosdyn_api_robot_command_proto_rawDesc
)

func file_bosdyn_api_robot_command_proto_rawDescGZIP() []byte {
	file_bosdyn_api_robot_command_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_robot_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_robot_command_proto_rawDescData)
	})
	return file_bosdyn_api_robot_command_proto_rawDescData
}

var file_bosdyn_api_robot_command_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bosdyn_api_robot_command_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bosdyn_api_robot_command_proto_goTypes = []interface{}{
	(RobotCommandResponse_Status)(0),         // 0: bosdyn.api.RobotCommandResponse.Status
	(RobotCommandFeedbackResponse_Status)(0), // 1: bosdyn.api.RobotCommandFeedbackResponse.Status
	(ClearBehaviorFaultResponse_Status)(0),   // 2: bosdyn.api.ClearBehaviorFaultResponse.Status
	(*RobotCommand)(nil),                     // 3: bosdyn.api.RobotCommand
	(*RobotCommandFeedback)(nil),             // 4: bosdyn.api.RobotCommandFeedback
	(*RobotCommandRequest)(nil),              // 5: bosdyn.api.RobotCommandRequest
	(*RobotCommandResponse)(nil),             // 6: bosdyn.api.RobotCommandResponse
	(*RobotCommandFeedbackRequest)(nil),      // 7: bosdyn.api.RobotCommandFeedbackRequest
	(*RobotCommandFeedbackResponse)(nil),     // 8: bosdyn.api.RobotCommandFeedbackResponse
	(*ClearBehaviorFaultRequest)(nil),        // 9: bosdyn.api.ClearBehaviorFaultRequest
	(*ClearBehaviorFaultResponse)(nil),       // 10: bosdyn.api.ClearBehaviorFaultResponse
	(*FullBodyCommand_Request)(nil),          // 11: bosdyn.api.FullBodyCommand.Request
	(*SynchronizedCommand_Request)(nil),      // 12: bosdyn.api.SynchronizedCommand.Request
	(*MobilityCommand_Request)(nil),          // 13: bosdyn.api.MobilityCommand.Request
	(*FullBodyCommand_Feedback)(nil),         // 14: bosdyn.api.FullBodyCommand.Feedback
	(*SynchronizedCommand_Feedback)(nil),     // 15: bosdyn.api.SynchronizedCommand.Feedback
	(*MobilityCommand_Feedback)(nil),         // 16: bosdyn.api.MobilityCommand.Feedback
	(*RequestHeader)(nil),                    // 17: bosdyn.api.RequestHeader
	(*Lease)(nil),                            // 18: bosdyn.api.Lease
	(*ResponseHeader)(nil),                   // 19: bosdyn.api.ResponseHeader
	(*LeaseUseResult)(nil),                   // 20: bosdyn.api.LeaseUseResult
}
var file_bosdyn_api_robot_command_proto_depIdxs = []int32{
	11, // 0: bosdyn.api.RobotCommand.full_body_command:type_name -> bosdyn.api.FullBodyCommand.Request
	12, // 1: bosdyn.api.RobotCommand.synchronized_command:type_name -> bosdyn.api.SynchronizedCommand.Request
	13, // 2: bosdyn.api.RobotCommand.mobility_command:type_name -> bosdyn.api.MobilityCommand.Request
	14, // 3: bosdyn.api.RobotCommandFeedback.full_body_feedback:type_name -> bosdyn.api.FullBodyCommand.Feedback
	15, // 4: bosdyn.api.RobotCommandFeedback.synchronized_feedback:type_name -> bosdyn.api.SynchronizedCommand.Feedback
	16, // 5: bosdyn.api.RobotCommandFeedback.mobility_feedback:type_name -> bosdyn.api.MobilityCommand.Feedback
	17, // 6: bosdyn.api.RobotCommandRequest.header:type_name -> bosdyn.api.RequestHeader
	18, // 7: bosdyn.api.RobotCommandRequest.lease:type_name -> bosdyn.api.Lease
	3,  // 8: bosdyn.api.RobotCommandRequest.command:type_name -> bosdyn.api.RobotCommand
	19, // 9: bosdyn.api.RobotCommandResponse.header:type_name -> bosdyn.api.ResponseHeader
	20, // 10: bosdyn.api.RobotCommandResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	0,  // 11: bosdyn.api.RobotCommandResponse.status:type_name -> bosdyn.api.RobotCommandResponse.Status
	17, // 12: bosdyn.api.RobotCommandFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	19, // 13: bosdyn.api.RobotCommandFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	20, // 14: bosdyn.api.RobotCommandFeedbackResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	1,  // 15: bosdyn.api.RobotCommandFeedbackResponse.status:type_name -> bosdyn.api.RobotCommandFeedbackResponse.Status
	4,  // 16: bosdyn.api.RobotCommandFeedbackResponse.feedback:type_name -> bosdyn.api.RobotCommandFeedback
	17, // 17: bosdyn.api.ClearBehaviorFaultRequest.header:type_name -> bosdyn.api.RequestHeader
	18, // 18: bosdyn.api.ClearBehaviorFaultRequest.lease:type_name -> bosdyn.api.Lease
	19, // 19: bosdyn.api.ClearBehaviorFaultResponse.header:type_name -> bosdyn.api.ResponseHeader
	20, // 20: bosdyn.api.ClearBehaviorFaultResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	2,  // 21: bosdyn.api.ClearBehaviorFaultResponse.status:type_name -> bosdyn.api.ClearBehaviorFaultResponse.Status
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_bosdyn_api_robot_command_proto_init() }
func file_bosdyn_api_robot_command_proto_init() {
	if File_bosdyn_api_robot_command_proto != nil {
		return
	}
	file_bosdyn_api_full_body_command_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_lease_proto_init()
	file_bosdyn_api_mobility_command_proto_init()
	file_bosdyn_api_synchronized_command_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_robot_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotCommandFeedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotCommandFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotCommandFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearBehaviorFaultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearBehaviorFaultResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_robot_command_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RobotCommand_FullBodyCommand)(nil),
		(*RobotCommand_SynchronizedCommand)(nil),
		(*RobotCommand_MobilityCommand)(nil),
	}
	file_bosdyn_api_robot_command_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RobotCommandFeedback_FullBodyFeedback)(nil),
		(*RobotCommandFeedback_SynchronizedFeedback)(nil),
		(*RobotCommandFeedback_MobilityFeedback)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_robot_command_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_robot_command_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_robot_command_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_robot_command_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_robot_command_proto_msgTypes,
	}.Build()
	File_bosdyn_api_robot_command_proto = out.File
	file_bosdyn_api_robot_command_proto_rawDesc = nil
	file_bosdyn_api_robot_command_proto_goTypes = nil
	file_bosdyn_api_robot_command_proto_depIdxs = nil
}
