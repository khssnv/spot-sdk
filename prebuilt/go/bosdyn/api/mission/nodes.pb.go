// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/mission/nodes.proto

package mission

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	docking "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api/docking"
	graph_nav "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api/graph_nav"
	spot_cam "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api/spot_cam"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Comparison operator.
type Condition_Compare int32

const (
	// Invalid, do not use.
	Condition_COMPARE_UNKNOWN Condition_Compare = 0
	// Equal.
	Condition_COMPARE_EQ Condition_Compare = 1
	// Not equal.
	Condition_COMPARE_NE Condition_Compare = 2
	// Less than.
	Condition_COMPARE_LT Condition_Compare = 3
	// Greater than.
	Condition_COMPARE_GT Condition_Compare = 4
	// Less than or equal.
	Condition_COMPARE_LE Condition_Compare = 5
	// Greater than or equal.
	Condition_COMPARE_GE Condition_Compare = 6
)

// Enum value maps for Condition_Compare.
var (
	Condition_Compare_name = map[int32]string{
		0: "COMPARE_UNKNOWN",
		1: "COMPARE_EQ",
		2: "COMPARE_NE",
		3: "COMPARE_LT",
		4: "COMPARE_GT",
		5: "COMPARE_LE",
		6: "COMPARE_GE",
	}
	Condition_Compare_value = map[string]int32{
		"COMPARE_UNKNOWN": 0,
		"COMPARE_EQ":      1,
		"COMPARE_NE":      2,
		"COMPARE_LT":      3,
		"COMPARE_GT":      4,
		"COMPARE_LE":      5,
		"COMPARE_GE":      6,
	}
)

func (x Condition_Compare) Enum() *Condition_Compare {
	p := new(Condition_Compare)
	*p = x
	return p
}

func (x Condition_Compare) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Compare) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_nodes_proto_enumTypes[0].Descriptor()
}

func (Condition_Compare) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_nodes_proto_enumTypes[0]
}

func (x Condition_Compare) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_Compare.Descriptor instead.
func (Condition_Compare) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{7, 0}
}

// When comparing runtime values in the blackboard, some values might be "stale" (i.e too old).
// This defines how the comparator should behave when a read value is stale.
type Condition_HandleStaleness int32

const (
	Condition_HANDLE_STALE_UNKNOWN         Condition_HandleStaleness = 0 // acts like READ_ANYWAY for backwards compatibility.
	Condition_HANDLE_STALE_READ_ANYWAY     Condition_HandleStaleness = 1 // ignore how stale this data is.
	Condition_HANDLE_STALE_RUN_UNTIL_FRESH Condition_HandleStaleness = 2 // return the RUNNING status until the data being read is not stale.
	Condition_HANDLE_STALE_FAIL            Condition_HandleStaleness = 3 // return FAILURE status if stale data is read.
)

// Enum value maps for Condition_HandleStaleness.
var (
	Condition_HandleStaleness_name = map[int32]string{
		0: "HANDLE_STALE_UNKNOWN",
		1: "HANDLE_STALE_READ_ANYWAY",
		2: "HANDLE_STALE_RUN_UNTIL_FRESH",
		3: "HANDLE_STALE_FAIL",
	}
	Condition_HandleStaleness_value = map[string]int32{
		"HANDLE_STALE_UNKNOWN":         0,
		"HANDLE_STALE_READ_ANYWAY":     1,
		"HANDLE_STALE_RUN_UNTIL_FRESH": 2,
		"HANDLE_STALE_FAIL":            3,
	}
)

func (x Condition_HandleStaleness) Enum() *Condition_HandleStaleness {
	p := new(Condition_HandleStaleness)
	*p = x
	return p
}

func (x Condition_HandleStaleness) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_HandleStaleness) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_nodes_proto_enumTypes[1].Descriptor()
}

func (Condition_HandleStaleness) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_nodes_proto_enumTypes[1]
}

func (x Condition_HandleStaleness) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_HandleStaleness.Descriptor instead.
func (Condition_HandleStaleness) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{7, 1}
}

type DataAcquisition_CompletionBehavior int32

const (
	DataAcquisition_COMPLETE_UNKNOWN DataAcquisition_CompletionBehavior = 0
	// Node is complete after all data has been saved.
	DataAcquisition_COMPLETE_AFTER_SAVED DataAcquisition_CompletionBehavior = 1
	// Node is complete after all data is acquired, but before processing and storage.
	// This allows the robot to continue on with the mission sooner, but
	// it will be unaware of failures in processing or storage.
	DataAcquisition_COMPLETE_AFTER_ACQUIRED DataAcquisition_CompletionBehavior = 2
)

// Enum value maps for DataAcquisition_CompletionBehavior.
var (
	DataAcquisition_CompletionBehavior_name = map[int32]string{
		0: "COMPLETE_UNKNOWN",
		1: "COMPLETE_AFTER_SAVED",
		2: "COMPLETE_AFTER_ACQUIRED",
	}
	DataAcquisition_CompletionBehavior_value = map[string]int32{
		"COMPLETE_UNKNOWN":        0,
		"COMPLETE_AFTER_SAVED":    1,
		"COMPLETE_AFTER_ACQUIRED": 2,
	}
)

func (x DataAcquisition_CompletionBehavior) Enum() *DataAcquisition_CompletionBehavior {
	p := new(DataAcquisition_CompletionBehavior)
	*p = x
	return p
}

func (x DataAcquisition_CompletionBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataAcquisition_CompletionBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_nodes_proto_enumTypes[2].Descriptor()
}

func (DataAcquisition_CompletionBehavior) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_nodes_proto_enumTypes[2]
}

func (x DataAcquisition_CompletionBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataAcquisition_CompletionBehavior.Descriptor instead.
func (DataAcquisition_CompletionBehavior) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{26, 0}
}

// Wrapper for a mission node. Contains the basics common to all mission nodes.
// Specifics of what the node does are contained in the "impl" field.
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name of this node, e.g. "Goto waypoint 1", or "Power On".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Collection of user data associated with this node.
	UserData *UserData `protobuf:"bytes,2,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	// Reference identifier of this node.
	// Set iff another node references this one.
	ReferenceId string `protobuf:"bytes,3,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// Types that are assignable to Type:
	//	*Node_Impl
	//	*Node_NodeReference
	Type isNode_Type `protobuf_oneof:"type"`
	// Defines parameters, used by this node or its children.
	// The "key" in KeyValue is the name of the parameter being defined.
	// The value can be a constant or another parameter value.
	ParameterValues []*KeyValue `protobuf:"bytes,6,rep,name=parameter_values,json=parameterValues,proto3" json:"parameter_values,omitempty"`
	// Overwrites a protobuf field in this node's implementation.
	// The "key" in KeyValue is the name of the field to override.
	// The value to write can be sourced from a constant, or a parameter value.
	Overrides []*KeyValue `protobuf:"bytes,7,rep,name=overrides,proto3" json:"overrides,omitempty"`
	// Declares parameters needed at compile time by this node, or children of this node.
	// This is a way for a node to communicate what parameters its implementation and/or children
	// require, without unpacking the entire subtree.
	Parameters []*VariableDeclaration `protobuf:"bytes,8,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *Node) GetReferenceId() string {
	if x != nil {
		return x.ReferenceId
	}
	return ""
}

func (m *Node) GetType() isNode_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Node) GetImpl() *anypb.Any {
	if x, ok := x.GetType().(*Node_Impl); ok {
		return x.Impl
	}
	return nil
}

func (x *Node) GetNodeReference() string {
	if x, ok := x.GetType().(*Node_NodeReference); ok {
		return x.NodeReference
	}
	return ""
}

func (x *Node) GetParameterValues() []*KeyValue {
	if x != nil {
		return x.ParameterValues
	}
	return nil
}

func (x *Node) GetOverrides() []*KeyValue {
	if x != nil {
		return x.Overrides
	}
	return nil
}

func (x *Node) GetParameters() []*VariableDeclaration {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type isNode_Type interface {
	isNode_Type()
}

type Node_Impl struct {
	// Implementation of this node. For example, this may be a Sequence.
	Impl *anypb.Any `protobuf:"bytes,4,opt,name=impl,proto3,oneof"`
}

type Node_NodeReference struct {
	// Unique identifier of another node. If this is filled out, rather than the "impl", then
	// the referenced node will be used in place of this one.
	NodeReference string `protobuf:"bytes,5,opt,name=node_reference,json=nodeReference,proto3,oneof"`
}

func (*Node_Impl) isNode_Type() {}

func (*Node_NodeReference) isNode_Type() {}

// Run  all children in order until a child fails.
type Sequence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Forces the execution to always begin with the first child.  If false, and
	// the Sequence ran last tick, it will continue with the node it was ticking.
	AlwaysRestart bool `protobuf:"varint,1,opt,name=always_restart,json=alwaysRestart,proto3" json:"always_restart,omitempty"`
	// List of all children to iterate through.
	Children []*Node `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Sequence) Reset() {
	*x = Sequence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sequence) ProtoMessage() {}

func (x *Sequence) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sequence.ProtoReflect.Descriptor instead.
func (*Sequence) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{1}
}

func (x *Sequence) GetAlwaysRestart() bool {
	if x != nil {
		return x.AlwaysRestart
	}
	return false
}

func (x *Sequence) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

// Run all children in order until a child succeeds.
type Selector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Forces the execution to always begin with the first child.  If false, and
	// the Selector ran last tick, it will continue with the node it was ticking.
	AlwaysRestart bool `protobuf:"varint,1,opt,name=always_restart,json=alwaysRestart,proto3" json:"always_restart,omitempty"`
	// List of all children to iterate through.
	Children []*Node `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *Selector) Reset() {
	*x = Selector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selector) ProtoMessage() {}

func (x *Selector) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selector.ProtoReflect.Descriptor instead.
func (*Selector) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{2}
}

func (x *Selector) GetAlwaysRestart() bool {
	if x != nil {
		return x.AlwaysRestart
	}
	return false
}

func (x *Selector) GetChildren() []*Node {
	if x != nil {
		return x.Children
	}
	return nil
}

// Repeat a child node.
type Repeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Start the child node exactly this many times.
	// Note that a value of 1 makes the Repeat node a no-op.
	MaxStarts int32 `protobuf:"varint,1,opt,name=max_starts,json=maxStarts,proto3" json:"max_starts,omitempty"`
	// Child to repeat max_starts times.
	Child *Node `protobuf:"bytes,4,opt,name=child,proto3" json:"child,omitempty"`
	// If set, the node will write the start index to the blackboard.
	StartCounterStateName string `protobuf:"bytes,5,opt,name=start_counter_state_name,json=startCounterStateName,proto3" json:"start_counter_state_name,omitempty"`
}

func (x *Repeat) Reset() {
	*x = Repeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repeat) ProtoMessage() {}

func (x *Repeat) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repeat.ProtoReflect.Descriptor instead.
func (*Repeat) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{3}
}

func (x *Repeat) GetMaxStarts() int32 {
	if x != nil {
		return x.MaxStarts
	}
	return 0
}

func (x *Repeat) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *Repeat) GetStartCounterStateName() string {
	if x != nil {
		return x.StartCounterStateName
	}
	return ""
}

// Retry a child node until it succeeds, or exceeds a number of attempts.
type Retry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only allow this many attempts. Note that a value of 1 makes this Retry node a no-op.
	MaxAttempts int32 `protobuf:"varint,1,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"`
	// Child to retry up to max_attempts.
	Child *Node `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
	// If set, the node will write the attempt index to the blackboard.
	AttemptCounterStateName string `protobuf:"bytes,5,opt,name=attempt_counter_state_name,json=attemptCounterStateName,proto3" json:"attempt_counter_state_name,omitempty"`
}

func (x *Retry) Reset() {
	*x = Retry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Retry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Retry) ProtoMessage() {}

func (x *Retry) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Retry.ProtoReflect.Descriptor instead.
func (*Retry) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{4}
}

func (x *Retry) GetMaxAttempts() int32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

func (x *Retry) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *Retry) GetAttemptCounterStateName() string {
	if x != nil {
		return x.AttemptCounterStateName
	}
	return ""
}

// Run this child for a maximum amount of mission execution time.
// Will exit with child's status if the child finishes early,
// FAILURE if the child remains in RUNNING state for too long
// and no timeout_child is specified, or the status of the
// timeout_child.
type ForDuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum duration of mission execution time.
	Duration *durationpb.Duration `protobuf:"bytes,1,opt,name=duration,proto3" json:"duration,omitempty"`
	// Child to execute for the duration.
	Child *Node `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
	// Optional blackboard variable name.  If specified, this node will define a blackboard
	// variable that its child has access to, and write the number of seconds remaining as
	// a double to the blackboard under this name.
	TimeRemainingName string `protobuf:"bytes,3,opt,name=time_remaining_name,json=timeRemainingName,proto3" json:"time_remaining_name,omitempty"`
	// Optional node that will run if the child times out.  If not specified, this node
	// will return FAILURE when the child times out.  If specified, and the
	// child times out, this node will return the status of the timeout_child.
	// The timeout_child does not respect the original timeout.
	TimeoutChild *Node `protobuf:"bytes,4,opt,name=timeout_child,json=timeoutChild,proto3" json:"timeout_child,omitempty"`
}

func (x *ForDuration) Reset() {
	*x = ForDuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForDuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForDuration) ProtoMessage() {}

func (x *ForDuration) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForDuration.ProtoReflect.Descriptor instead.
func (*ForDuration) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{5}
}

func (x *ForDuration) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ForDuration) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *ForDuration) GetTimeRemainingName() string {
	if x != nil {
		return x.TimeRemainingName
	}
	return ""
}

func (x *ForDuration) GetTimeoutChild() *Node {
	if x != nil {
		return x.TimeoutChild
	}
	return nil
}

// Run two child nodes together, returning the primary child's result when it completes.
type SimpleParallel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary node, whose completion will end the execution of SimpleParallel.
	Primary *Node `protobuf:"bytes,1,opt,name=primary,proto3" json:"primary,omitempty"`
	// Secondary node, which will be ticked as long as the primary is still running.
	Secondary *Node `protobuf:"bytes,2,opt,name=secondary,proto3" json:"secondary,omitempty"`
}

func (x *SimpleParallel) Reset() {
	*x = SimpleParallel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleParallel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleParallel) ProtoMessage() {}

func (x *SimpleParallel) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleParallel.ProtoReflect.Descriptor instead.
func (*SimpleParallel) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{6}
}

func (x *SimpleParallel) GetPrimary() *Node {
	if x != nil {
		return x.Primary
	}
	return nil
}

func (x *SimpleParallel) GetSecondary() *Node {
	if x != nil {
		return x.Secondary
	}
	return nil
}

// Checks a simple comparison statement.
type Condition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Left-hand side of the comparison.
	Lhs *Condition_Operand `protobuf:"bytes,1,opt,name=lhs,proto3" json:"lhs,omitempty"`
	// Right-hand side of the comparison.
	Rhs *Condition_Operand `protobuf:"bytes,2,opt,name=rhs,proto3" json:"rhs,omitempty"`
	// Comparison operator to compare lhs and rhs.
	Operation       Condition_Compare         `protobuf:"varint,5,opt,name=operation,proto3,enum=bosdyn.api.mission.Condition_Compare" json:"operation,omitempty"`
	HandleStaleness Condition_HandleStaleness `protobuf:"varint,6,opt,name=handle_staleness,json=handleStaleness,proto3,enum=bosdyn.api.mission.Condition_HandleStaleness" json:"handle_staleness,omitempty"`
}

func (x *Condition) Reset() {
	*x = Condition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{7}
}

func (x *Condition) GetLhs() *Condition_Operand {
	if x != nil {
		return x.Lhs
	}
	return nil
}

func (x *Condition) GetRhs() *Condition_Operand {
	if x != nil {
		return x.Rhs
	}
	return nil
}

func (x *Condition) GetOperation() Condition_Compare {
	if x != nil {
		return x.Operation
	}
	return Condition_COMPARE_UNKNOWN
}

func (x *Condition) GetHandleStaleness() Condition_HandleStaleness {
	if x != nil {
		return x.HandleStaleness
	}
	return Condition_HANDLE_STALE_UNKNOWN
}

// Get state from the robot.
type BosdynRobotState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Child node. Children will have access to the state gathered by this node.
	Child *Node `protobuf:"bytes,3,opt,name=child,proto3" json:"child,omitempty"`
	// Name of the bosdyn.api.RobotState object in the blackboard. For example, if this is set to
	// "robot", children can look up "robot.power_state.motor_power_state" in the blackboard.
	StateName string `protobuf:"bytes,4,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
}

func (x *BosdynRobotState) Reset() {
	*x = BosdynRobotState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynRobotState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynRobotState) ProtoMessage() {}

func (x *BosdynRobotState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynRobotState.ProtoReflect.Descriptor instead.
func (*BosdynRobotState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{8}
}

func (x *BosdynRobotState) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynRobotState) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynRobotState) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *BosdynRobotState) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

// Get the state of the docking service from the robot.
type BosdynDockState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Child node. Children will have access to the state gathered by this node.
	Child *Node `protobuf:"bytes,3,opt,name=child,proto3" json:"child,omitempty"`
	// Name of the bosdyn.api.DockState object in the blackboard. For example, if this is set to
	// "power_status", children can look up "power_status" in the blackboard.
	StateName string `protobuf:"bytes,4,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
}

func (x *BosdynDockState) Reset() {
	*x = BosdynDockState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynDockState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynDockState) ProtoMessage() {}

func (x *BosdynDockState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynDockState.ProtoReflect.Descriptor instead.
func (*BosdynDockState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{9}
}

func (x *BosdynDockState) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynDockState) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynDockState) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *BosdynDockState) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

// Execute a RobotCommand.
// These nodes will "succeed" once a feedback response is received indicating success. Any commands
// that require an "end time" will have that information set based on the end time of the mission.
type BosdynRobotCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the directory is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The command to execute. See the RobotCommand documentation for details.
	Command *api.RobotCommand `protobuf:"bytes,3,opt,name=command,proto3" json:"command,omitempty"`
}

func (x *BosdynRobotCommand) Reset() {
	*x = BosdynRobotCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynRobotCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynRobotCommand) ProtoMessage() {}

func (x *BosdynRobotCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynRobotCommand.ProtoReflect.Descriptor instead.
func (*BosdynRobotCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{10}
}

func (x *BosdynRobotCommand) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynRobotCommand) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynRobotCommand) GetCommand() *api.RobotCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

// Make a robot power request
type BosdynPowerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The request to make. See the PowerCommandRequest documentation for details.
	Request api.PowerCommandRequest_Request `protobuf:"varint,4,opt,name=request,proto3,enum=bosdyn.api.PowerCommandRequest_Request" json:"request,omitempty"`
}

func (x *BosdynPowerRequest) Reset() {
	*x = BosdynPowerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynPowerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynPowerRequest) ProtoMessage() {}

func (x *BosdynPowerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynPowerRequest.ProtoReflect.Descriptor instead.
func (*BosdynPowerRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{11}
}

func (x *BosdynPowerRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynPowerRequest) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynPowerRequest) GetRequest() api.PowerCommandRequest_Request {
	if x != nil {
		return x.Request
	}
	return api.PowerCommandRequest_Request(0)
}

// Tell the robot to navigate to a waypoint.
type BosdynNavigateTo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// ID of the waypoint to go to.
	DestinationWaypointId string `protobuf:"bytes,3,opt,name=destination_waypoint_id,json=destinationWaypointId,proto3" json:"destination_waypoint_id,omitempty"`
	// Preferences on how to pick the route.
	RouteGenParams *graph_nav.RouteGenParams `protobuf:"bytes,4,opt,name=route_gen_params,json=routeGenParams,proto3" json:"route_gen_params,omitempty"`
	// Parameters that define how to traverse and end the route.
	TravelParams *graph_nav.TravelParams `protobuf:"bytes,5,opt,name=travel_params,json=travelParams,proto3" json:"travel_params,omitempty"`
	// If provided, this will write the last NavigationFeedbackResponse message
	// to a blackboard variable with this name.
	NavigationFeedbackResponseBlackboardKey string `protobuf:"bytes,6,opt,name=navigation_feedback_response_blackboard_key,json=navigationFeedbackResponseBlackboardKey,proto3" json:"navigation_feedback_response_blackboard_key,omitempty"`
	// If provided, this will write the last NavigateToResponse message to
	// a blackboard variable with this name.
	NavigateToResponseBlackboardKey string `protobuf:"bytes,7,opt,name=navigate_to_response_blackboard_key,json=navigateToResponseBlackboardKey,proto3" json:"navigate_to_response_blackboard_key,omitempty"`
}

func (x *BosdynNavigateTo) Reset() {
	*x = BosdynNavigateTo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynNavigateTo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynNavigateTo) ProtoMessage() {}

func (x *BosdynNavigateTo) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynNavigateTo.ProtoReflect.Descriptor instead.
func (*BosdynNavigateTo) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{12}
}

func (x *BosdynNavigateTo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynNavigateTo) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynNavigateTo) GetDestinationWaypointId() string {
	if x != nil {
		return x.DestinationWaypointId
	}
	return ""
}

func (x *BosdynNavigateTo) GetRouteGenParams() *graph_nav.RouteGenParams {
	if x != nil {
		return x.RouteGenParams
	}
	return nil
}

func (x *BosdynNavigateTo) GetTravelParams() *graph_nav.TravelParams {
	if x != nil {
		return x.TravelParams
	}
	return nil
}

func (x *BosdynNavigateTo) GetNavigationFeedbackResponseBlackboardKey() string {
	if x != nil {
		return x.NavigationFeedbackResponseBlackboardKey
	}
	return ""
}

func (x *BosdynNavigateTo) GetNavigateToResponseBlackboardKey() string {
	if x != nil {
		return x.NavigateToResponseBlackboardKey
	}
	return ""
}

// Tell the robot to navigate a route.
type BosdynNavigateRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// A route for the robot to follow.
	Route *graph_nav.Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	// What should the robot do if it is not at the expected point in the route, or the route is
	// blocked.
	RouteFollowParams *graph_nav.RouteFollowingParams `protobuf:"bytes,4,opt,name=route_follow_params,json=routeFollowParams,proto3" json:"route_follow_params,omitempty"`
	// Parameters that define how to traverse and end the route.
	TravelParams *graph_nav.TravelParams `protobuf:"bytes,5,opt,name=travel_params,json=travelParams,proto3" json:"travel_params,omitempty"`
	// If provided, this will write the last NavigationFeedbackResponse message
	// to a blackboard variable with this name.
	NavigationFeedbackResponseBlackboardKey string `protobuf:"bytes,6,opt,name=navigation_feedback_response_blackboard_key,json=navigationFeedbackResponseBlackboardKey,proto3" json:"navigation_feedback_response_blackboard_key,omitempty"`
	// If provided, this will write the last NavigateRouteResponse message to
	// a blackboard variable with this name.
	NavigateRouteResponseBlackboardKey string `protobuf:"bytes,7,opt,name=navigate_route_response_blackboard_key,json=navigateRouteResponseBlackboardKey,proto3" json:"navigate_route_response_blackboard_key,omitempty"`
}

func (x *BosdynNavigateRoute) Reset() {
	*x = BosdynNavigateRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynNavigateRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynNavigateRoute) ProtoMessage() {}

func (x *BosdynNavigateRoute) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynNavigateRoute.ProtoReflect.Descriptor instead.
func (*BosdynNavigateRoute) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{13}
}

func (x *BosdynNavigateRoute) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynNavigateRoute) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynNavigateRoute) GetRoute() *graph_nav.Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *BosdynNavigateRoute) GetRouteFollowParams() *graph_nav.RouteFollowingParams {
	if x != nil {
		return x.RouteFollowParams
	}
	return nil
}

func (x *BosdynNavigateRoute) GetTravelParams() *graph_nav.TravelParams {
	if x != nil {
		return x.TravelParams
	}
	return nil
}

func (x *BosdynNavigateRoute) GetNavigationFeedbackResponseBlackboardKey() string {
	if x != nil {
		return x.NavigationFeedbackResponseBlackboardKey
	}
	return ""
}

func (x *BosdynNavigateRoute) GetNavigateRouteResponseBlackboardKey() string {
	if x != nil {
		return x.NavigateRouteResponseBlackboardKey
	}
	return ""
}

// Get GraphNav state from the robot and save it to the blackboard.
type BosdynGraphNavState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Child node. Children will have access to the state gathered by this node.
	Child *Node `protobuf:"bytes,3,opt,name=child,proto3" json:"child,omitempty"`
	// Name of the bosdyn.api.GetLocalizationStateResponse object in the blackboard. For example,
	// if this is set to "nav", children can look up "nav.localization.waypoint_id" in the
	// blackboard to get the waypoint the robot is localized to.
	StateName string `protobuf:"bytes,4,opt,name=state_name,json=stateName,proto3" json:"state_name,omitempty"`
	// Id of the waypoint that we want the localization to be relative to.
	// If this is empty, the localization will be relative to the waypoint that the
	// robot is currently localized to.
	WaypointId string `protobuf:"bytes,5,opt,name=waypoint_id,json=waypointId,proto3" json:"waypoint_id,omitempty"`
}

func (x *BosdynGraphNavState) Reset() {
	*x = BosdynGraphNavState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynGraphNavState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynGraphNavState) ProtoMessage() {}

func (x *BosdynGraphNavState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynGraphNavState.ProtoReflect.Descriptor instead.
func (*BosdynGraphNavState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{14}
}

func (x *BosdynGraphNavState) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynGraphNavState) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynGraphNavState) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *BosdynGraphNavState) GetStateName() string {
	if x != nil {
		return x.StateName
	}
	return ""
}

func (x *BosdynGraphNavState) GetWaypointId() string {
	if x != nil {
		return x.WaypointId
	}
	return ""
}

// Tell GraphNav to re-localize the robot using a SetLocalizationRequest. This overrides whatever
// the current localization is. This can be useful to reinitialize the system at a known state.
type BosdynGraphNavLocalize struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// If no localization_request is provided, the default options used
	// are FIDUCIAL_INIT_NEAREST (the system will initialize to the nearest fiducial).
	// Otherwise, the options inside the set_localization_request will be used.
	// Note that ko_tform_body in the request will be ignored (it will be recalculated at runtime).
	LocalizationRequest *graph_nav.SetLocalizationRequest `protobuf:"bytes,3,opt,name=localization_request,json=localizationRequest,proto3" json:"localization_request,omitempty"`
}

func (x *BosdynGraphNavLocalize) Reset() {
	*x = BosdynGraphNavLocalize{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynGraphNavLocalize) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynGraphNavLocalize) ProtoMessage() {}

func (x *BosdynGraphNavLocalize) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynGraphNavLocalize.ProtoReflect.Descriptor instead.
func (*BosdynGraphNavLocalize) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{15}
}

func (x *BosdynGraphNavLocalize) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynGraphNavLocalize) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynGraphNavLocalize) GetLocalizationRequest() *graph_nav.SetLocalizationRequest {
	if x != nil {
		return x.LocalizationRequest
	}
	return nil
}

// Record an APIEvent
type BosdynRecordEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine the service is running on.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The event to be logged. Note that everything should be populated except the id, start_time
	// and end_time. The start and end time will be populated by the mission, using the node's start time.
	// The id field shouldn't be set when the start and end times are the same.
	Event *api.Event `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *BosdynRecordEvent) Reset() {
	*x = BosdynRecordEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BosdynRecordEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BosdynRecordEvent) ProtoMessage() {}

func (x *BosdynRecordEvent) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BosdynRecordEvent.ProtoReflect.Descriptor instead.
func (*BosdynRecordEvent) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{16}
}

func (x *BosdynRecordEvent) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *BosdynRecordEvent) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *BosdynRecordEvent) GetEvent() *api.Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// Call out to another system using the RemoteMission service.
type RemoteGrpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Host that is running the directory server. Usually, this is just the robot.
	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	// Name of the service in the directory.
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Timeout of any single RPC. If the timeout is exceeded, the RPC will fail. The mission service
	// treats each failed RPC differently:
	// - EstablishSession: An error is returned in LoadMission.
	// - Tick: The RPC is retried.
	// - Stop: The error is ignored, and the RPC is not retried.
	// Omit for a default of 60 seconds.
	Timeout float32 `protobuf:"fixed32,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Resources that we will need leases on.
	LeaseResources []string `protobuf:"bytes,5,rep,name=lease_resources,json=leaseResources,proto3" json:"lease_resources,omitempty"`
	// The list of variables the remote host should receive.
	// Variables given can be available at either run-time or compile-time.
	// The "key" in KeyValue is the name of the variable as used by the remote system.
	Inputs []*KeyValue `protobuf:"bytes,6,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *RemoteGrpc) Reset() {
	*x = RemoteGrpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteGrpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteGrpc) ProtoMessage() {}

func (x *RemoteGrpc) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteGrpc.ProtoReflect.Descriptor instead.
func (*RemoteGrpc) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{17}
}

func (x *RemoteGrpc) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *RemoteGrpc) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RemoteGrpc) GetTimeout() float32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *RemoteGrpc) GetLeaseResources() []string {
	if x != nil {
		return x.LeaseResources
	}
	return nil
}

func (x *RemoteGrpc) GetInputs() []*KeyValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// When started, begins a sleep timer for X seconds. Returns "success" after the timer elapses,
// "running" otherwise.
type Sleep struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of seconds to sleep for.
	Seconds float32 `protobuf:"fixed32,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	// If this node is stopped, should it restart the timer?
	RestartAfterStop bool `protobuf:"varint,2,opt,name=restart_after_stop,json=restartAfterStop,proto3" json:"restart_after_stop,omitempty"`
}

func (x *Sleep) Reset() {
	*x = Sleep{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sleep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sleep) ProtoMessage() {}

func (x *Sleep) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sleep.ProtoReflect.Descriptor instead.
func (*Sleep) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{18}
}

func (x *Sleep) GetSeconds() float32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Sleep) GetRestartAfterStop() bool {
	if x != nil {
		return x.RestartAfterStop
	}
	return false
}

// Prompt the world at large to answer a question.
// This node represents a request for information from ANY listeners that may be out there.
type Prompt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Should we always re-prompt when this node is started?
	// If false, this node will only ever prompt if it is started and its question is unanswered.
	// This may be used, for example, to ask the user to check the robot after any self-right.
	// If true, this node will prompt whenever it is started.
	// This may be used, for example, to tell the user to perform some one-time action, like open a
	// door for the robot.
	AlwaysReprompt bool `protobuf:"varint,1,opt,name=always_reprompt,json=alwaysReprompt,proto3" json:"always_reprompt,omitempty"`
	// The text of the question itself.  The question text may contain formatted blackboard
	// variables.  Please see the documentation in FormatBlackboard for more information
	// about supported string formats.
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// Metadata describing the source of the question.
	// The answer will be written into the state blackboard with this as the variable name.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// The set of options that can be chosen for this prompt.
	Options []*Prompt_Option `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	// Child node, run after the prompt has been responded to.
	// Children will have access to the answer code provided by the response.
	Child *Node `protobuf:"bytes,5,opt,name=child,proto3" json:"child,omitempty"`
	// Hint that Question posed by this Prompt is meant to be answered by some automated system.
	// See the Question message for details.
	ForAutonomousProcessing bool `protobuf:"varint,6,opt,name=for_autonomous_processing,json=forAutonomousProcessing,proto3" json:"for_autonomous_processing,omitempty"`
}

func (x *Prompt) Reset() {
	*x = Prompt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prompt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prompt) ProtoMessage() {}

func (x *Prompt) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prompt.ProtoReflect.Descriptor instead.
func (*Prompt) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{19}
}

func (x *Prompt) GetAlwaysReprompt() bool {
	if x != nil {
		return x.AlwaysReprompt
	}
	return false
}

func (x *Prompt) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Prompt) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Prompt) GetOptions() []*Prompt_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Prompt) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *Prompt) GetForAutonomousProcessing() bool {
	if x != nil {
		return x.ForAutonomousProcessing
	}
	return false
}

// Point the PTZ to a specified orientation
type SpotCamPtz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the Spot CAM registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The rest of the fields are from bosdyn.api.spot_cam.ptz.SetPtzPositionRequest, see that
	// message for details.
	PtzPosition *spot_cam.PtzPosition `protobuf:"bytes,3,opt,name=ptz_position,json=ptzPosition,proto3" json:"ptz_position,omitempty"`
	// Setting adjust_parameters will enable auto-adjusting the PTZ pan and tilt at playback time,
	// based on where the robot is, relative to the waypoint. Leave empty to disable auto-adjust
	// features.
	AdjustParameters *SpotCamPtz_AdjustParameters `protobuf:"bytes,4,opt,name=adjust_parameters,json=adjustParameters,proto3" json:"adjust_parameters,omitempty"`
}

func (x *SpotCamPtz) Reset() {
	*x = SpotCamPtz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCamPtz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCamPtz) ProtoMessage() {}

func (x *SpotCamPtz) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCamPtz.ProtoReflect.Descriptor instead.
func (*SpotCamPtz) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{20}
}

func (x *SpotCamPtz) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SpotCamPtz) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SpotCamPtz) GetPtzPosition() *spot_cam.PtzPosition {
	if x != nil {
		return x.PtzPosition
	}
	return nil
}

func (x *SpotCamPtz) GetAdjustParameters() *SpotCamPtz_AdjustParameters {
	if x != nil {
		return x.AdjustParameters
	}
	return nil
}

// Store media using the Spot CAM.
type SpotCamStoreMedia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the Spot CAM registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The rest of the fields are from bosdyn.api.spot_cam.logging.StoreRequest, see that message for
	// details.
	Camera *spot_cam.Camera `protobuf:"bytes,3,opt,name=camera,proto3" json:"camera,omitempty"`
	// What type of media should be stored from this action.
	Type spot_cam.Logpoint_RecordType `protobuf:"varint,4,opt,name=type,proto3,enum=bosdyn.api.spot_cam.Logpoint_RecordType" json:"type,omitempty"`
	// Extra metadata to store alongside the captured media.
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *SpotCamStoreMedia) Reset() {
	*x = SpotCamStoreMedia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCamStoreMedia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCamStoreMedia) ProtoMessage() {}

func (x *SpotCamStoreMedia) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCamStoreMedia.ProtoReflect.Descriptor instead.
func (*SpotCamStoreMedia) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{21}
}

func (x *SpotCamStoreMedia) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SpotCamStoreMedia) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SpotCamStoreMedia) GetCamera() *spot_cam.Camera {
	if x != nil {
		return x.Camera
	}
	return nil
}

func (x *SpotCamStoreMedia) GetType() spot_cam.Logpoint_RecordType {
	if x != nil {
		return x.Type
	}
	return spot_cam.Logpoint_RecordType(0)
}

func (x *SpotCamStoreMedia) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

// Set the LEDs to a specified brightness
type SpotCamLed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the Spot CAM registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Brightnesses of the LEDs, from SetLEDBrightnessRequest
	Brightnesses map[int32]float32 `protobuf:"bytes,3,rep,name=brightnesses,proto3" json:"brightnesses,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *SpotCamLed) Reset() {
	*x = SpotCamLed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCamLed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCamLed) ProtoMessage() {}

func (x *SpotCamLed) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCamLed.ProtoReflect.Descriptor instead.
func (*SpotCamLed) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{22}
}

func (x *SpotCamLed) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SpotCamLed) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SpotCamLed) GetBrightnesses() map[int32]float32 {
	if x != nil {
		return x.Brightnesses
	}
	return nil
}

// Reset the autofocus on the Spot CAM PTZ
type SpotCamResetAutofocus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the Spot CAM registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *SpotCamResetAutofocus) Reset() {
	*x = SpotCamResetAutofocus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCamResetAutofocus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCamResetAutofocus) ProtoMessage() {}

func (x *SpotCamResetAutofocus) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCamResetAutofocus.ProtoReflect.Descriptor instead.
func (*SpotCamResetAutofocus) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{23}
}

func (x *SpotCamResetAutofocus) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *SpotCamResetAutofocus) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

type Dock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the docking service is registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// ID of docking station to dock at.
	DockingStationId uint32 `protobuf:"varint,3,opt,name=docking_station_id,json=dockingStationId,proto3" json:"docking_station_id,omitempty"`
	// Optional child node. Children will have access to the status variables gathered by this node.
	// If specified, child node will determine success/failure of this node.
	//
	// DEPRECATED!  Use docking_command_response_blackboard_key and
	// docking_command_feedback_response_blackboard_key instead.
	//
	// Deprecated: Do not use.
	Child *Node `protobuf:"bytes,4,opt,name=child,proto3" json:"child,omitempty"`
	// Name of the command status variable in the blackboard.  This is the status of the docking
	// command request made to the robot.  Please refer to
	// bosdyn.api.docking.DockingCommandResponse.Status for more details.  Children can use this
	// name to look up docking command status in the blackboard. If no name is provided, status will
	// not be available.
	//
	// DEPRECATED!  Use docking_command_response_blackboard_key and
	// docking_command_feedback_response_blackboard_key instead.
	//
	// Deprecated: Do not use.
	CommandStatusName string `protobuf:"bytes,5,opt,name=command_status_name,json=commandStatusName,proto3" json:"command_status_name,omitempty"`
	// Name of the feedback status variable in the blackboard.  This is the feedback provided while
	// docking is in progress.  Please refer to bosdyn.api.docking.DockingCommandFeedbackResponse.Status
	// for a list of possible status values.  Children can use this name to look up docking status
	// in the blackboard. If no name is provided, status will not be available.
	//
	// DEPRECATED!  Use docking_command_response_blackboard_key and
	// docking_command_feedback_response_blackboard_key instead.
	//
	// Deprecated: Do not use.
	FeedbackStatusName string `protobuf:"bytes,6,opt,name=feedback_status_name,json=feedbackStatusName,proto3" json:"feedback_status_name,omitempty"`
	// Defines how we use the "pre-docking" behavior.
	PrepPoseBehavior docking.PrepPoseBehavior `protobuf:"varint,7,opt,name=prep_pose_behavior,json=prepPoseBehavior,proto3,enum=bosdyn.api.docking.PrepPoseBehavior" json:"prep_pose_behavior,omitempty"`
	// If provided, this will write the last DockingCommandFeedbackResponse message
	// to a blackboard variable with this name.
	DockingCommandFeedbackResponseBlackboardKey string `protobuf:"bytes,8,opt,name=docking_command_feedback_response_blackboard_key,json=dockingCommandFeedbackResponseBlackboardKey,proto3" json:"docking_command_feedback_response_blackboard_key,omitempty"`
	// If provided, this will write the last DockingCommandResponse message to
	// a blackboard variable with this name.
	DockingCommandResponseBlackboardKey string `protobuf:"bytes,9,opt,name=docking_command_response_blackboard_key,json=dockingCommandResponseBlackboardKey,proto3" json:"docking_command_response_blackboard_key,omitempty"`
}

func (x *Dock) Reset() {
	*x = Dock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dock) ProtoMessage() {}

func (x *Dock) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dock.ProtoReflect.Descriptor instead.
func (*Dock) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{24}
}

func (x *Dock) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *Dock) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Dock) GetDockingStationId() uint32 {
	if x != nil {
		return x.DockingStationId
	}
	return 0
}

// Deprecated: Do not use.
func (x *Dock) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

// Deprecated: Do not use.
func (x *Dock) GetCommandStatusName() string {
	if x != nil {
		return x.CommandStatusName
	}
	return ""
}

// Deprecated: Do not use.
func (x *Dock) GetFeedbackStatusName() string {
	if x != nil {
		return x.FeedbackStatusName
	}
	return ""
}

func (x *Dock) GetPrepPoseBehavior() docking.PrepPoseBehavior {
	if x != nil {
		return x.PrepPoseBehavior
	}
	return docking.PrepPoseBehavior(0)
}

func (x *Dock) GetDockingCommandFeedbackResponseBlackboardKey() string {
	if x != nil {
		return x.DockingCommandFeedbackResponseBlackboardKey
	}
	return ""
}

func (x *Dock) GetDockingCommandResponseBlackboardKey() string {
	if x != nil {
		return x.DockingCommandResponseBlackboardKey
	}
	return ""
}

// Triggers a StoreMetadataRequest to the data acquisition store.
type StoreMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the data acquisition service is registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// The name of the blackboard variable that holds the associated AcquireDataRequest. The
	// reference ID that this metadata is associated with will be copied from the request.
	AcquireDataRequestName string `protobuf:"bytes,3,opt,name=acquire_data_request_name,json=acquireDataRequestName,proto3" json:"acquire_data_request_name,omitempty"`
	// The name of the metadata object in the blackboard to be stored.
	// The metadata object can be any protobuf message.
	MetadataName string `protobuf:"bytes,5,opt,name=metadata_name,json=metadataName,proto3" json:"metadata_name,omitempty"`
	// The data buffer channel on which to store the metadata.
	MetadataChannel string `protobuf:"bytes,6,opt,name=metadata_channel,json=metadataChannel,proto3" json:"metadata_channel,omitempty"`
}

func (x *StoreMetadata) Reset() {
	*x = StoreMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreMetadata) ProtoMessage() {}

func (x *StoreMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreMetadata.ProtoReflect.Descriptor instead.
func (*StoreMetadata) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{25}
}

func (x *StoreMetadata) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *StoreMetadata) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *StoreMetadata) GetAcquireDataRequestName() string {
	if x != nil {
		return x.AcquireDataRequestName
	}
	return ""
}

func (x *StoreMetadata) GetMetadataName() string {
	if x != nil {
		return x.MetadataName
	}
	return ""
}

func (x *StoreMetadata) GetMetadataChannel() string {
	if x != nil {
		return x.MetadataChannel
	}
	return ""
}

// Trigger the acquisition and storage of data.
type DataAcquisition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the data acquisition service is registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	// Specification of the data and metadata to store.
	Request            *api.AcquireDataRequest            `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`
	CompletionBehavior DataAcquisition_CompletionBehavior `protobuf:"varint,4,opt,name=completion_behavior,json=completionBehavior,proto3,enum=bosdyn.api.mission.DataAcquisition_CompletionBehavior" json:"completion_behavior,omitempty"`
	// Define a format string that will be used together with the blackboard to generate
	// a group name.  Values from the blackboard will replace the keys in braces {}.
	// Example: "telop-{date}", where "date" is a blackboard variable.
	// Example: "{date}_loop_{loop_counter}", where "loop_counter" is a blackboard variable from a Repeat.
	GroupNameFormat string `protobuf:"bytes,5,opt,name=group_name_format,json=groupNameFormat,proto3" json:"group_name_format,omitempty"`
	// If populated, name of the variable in the blackboard in which to store the AcquireDataRequest.
	RequestNameInBlackboard string `protobuf:"bytes,6,opt,name=request_name_in_blackboard,json=requestNameInBlackboard,proto3" json:"request_name_in_blackboard,omitempty"`
}

func (x *DataAcquisition) Reset() {
	*x = DataAcquisition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAcquisition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAcquisition) ProtoMessage() {}

func (x *DataAcquisition) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAcquisition.ProtoReflect.Descriptor instead.
func (*DataAcquisition) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{26}
}

func (x *DataAcquisition) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DataAcquisition) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DataAcquisition) GetRequest() *api.AcquireDataRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *DataAcquisition) GetCompletionBehavior() DataAcquisition_CompletionBehavior {
	if x != nil {
		return x.CompletionBehavior
	}
	return DataAcquisition_COMPLETE_UNKNOWN
}

func (x *DataAcquisition) GetGroupNameFormat() string {
	if x != nil {
		return x.GroupNameFormat
	}
	return ""
}

func (x *DataAcquisition) GetRequestNameInBlackboard() string {
	if x != nil {
		return x.RequestNameInBlackboard
	}
	return ""
}

// Send RetainLease for every Lease the mission service is given via PlayMissionRequest.
// Returns RUNNING while there are more leases to retain, SUCCESS once a lease for each resource has
// been retained, and FAILURE if any one lease cannot be retained.
type RetainLease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service to use.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Host machine of the directory server that the lease service is registered with.
	Host string `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
}

func (x *RetainLease) Reset() {
	*x = RetainLease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetainLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetainLease) ProtoMessage() {}

func (x *RetainLease) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetainLease.ProtoReflect.Descriptor instead.
func (*RetainLease) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{27}
}

func (x *RetainLease) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RetainLease) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// Defines new blackboard variables within the scope of the child. Shadows blackboard
// variables in the parent scope.
type DefineBlackboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of variables that should be defined for this subtree,
	// with initial values.
	BlackboardVariables []*KeyValue `protobuf:"bytes,1,rep,name=blackboard_variables,json=blackboardVariables,proto3" json:"blackboard_variables,omitempty"`
	// The blackboard variables will only persist in the subtree defined by this
	// child node. The child's tick() will be called on the child until it
	// returns either SUCCESS or FAILURE.
	Child *Node `protobuf:"bytes,2,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *DefineBlackboard) Reset() {
	*x = DefineBlackboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefineBlackboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefineBlackboard) ProtoMessage() {}

func (x *DefineBlackboard) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefineBlackboard.ProtoReflect.Descriptor instead.
func (*DefineBlackboard) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{28}
}

func (x *DefineBlackboard) GetBlackboardVariables() []*KeyValue {
	if x != nil {
		return x.BlackboardVariables
	}
	return nil
}

func (x *DefineBlackboard) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

// Sets existing blackboard variables within this scope to specific values, returning SUCCESS.
type SetBlackboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the KeyValue is the name of the blackboard variable.
	// The value will be dereferenced and converted into a value type at runtime
	// inside this node's tick function. For example, if the value is a runtime
	// variable, that variable will be evaluated at tick time, and then stored into
	// the blackboard. If the value is another blackboard variable, that blackboard
	// variable's value will be copied into the variable specified by the key.
	BlackboardVariables []*KeyValue `protobuf:"bytes,1,rep,name=blackboard_variables,json=blackboardVariables,proto3" json:"blackboard_variables,omitempty"`
}

func (x *SetBlackboard) Reset() {
	*x = SetBlackboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetBlackboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetBlackboard) ProtoMessage() {}

func (x *SetBlackboard) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetBlackboard.ProtoReflect.Descriptor instead.
func (*SetBlackboard) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{29}
}

func (x *SetBlackboard) GetBlackboardVariables() []*KeyValue {
	if x != nil {
		return x.BlackboardVariables
	}
	return nil
}

// Sets a blackboard variable to a formatted string, reading from other blackboard vars.
type FormatBlackboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the variable that will be written.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Define a format string that will be used together with the blackboard to generate
	// string value.  Values from the blackboard will replace the keys in braces {}, i.e.
	// {blackboard_variable_name}.  We also allow some string formatting options, namely:
	//
	// 1) Floating point decimal places: {float_variable:.2f}
	// 2) TBD
	//
	// Select examples:
	//
	// Format String: "telop-{date}"
	//    Blackboard: "date" is a blackboard variable with string value: "2021-05-13"
	//        Output: "teleop-2021-05-13"
	//
	// Format String: "{date}_loop_{loop_counter}"
	//    Blackboard: "date" is a blackboard variable with string value: "2021-05-13"
	//    Blackboard: "loop_counter" is a blackboard variable with integer value: "3"
	//        Output: "2021-05-13_loop_3"
	//
	// Format String: "battery charge is: {state.power_state.locomotion_charge_percentage.value}"
	//    Blackboard: "state" is a protobuf message in the blackboard from a BosdynRobotState, and
	//                the power_state submessage has a charge percentage of 30.2148320923085
	//        Output: "battery charge is: 30.2158320923085"
	//
	// Format String: "battery charge is: {state.power_state.locomotion_charge_percentage.value:.2f}"
	//    Blackboard: "state" is a protobuf message in the blackboard from a BosdynRobotState, and
	//                the power_state submessage has a charge percentage of 30.2148320923085
	//        Output: "battery charge is: 30.21"
	//
	// Format String: "the value is {x:.0f}"
	//    Blackboard: "x" is a blackboard variable with float value: "2.71828"
	//        Output: "the value is 3"
	//
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *FormatBlackboard) Reset() {
	*x = FormatBlackboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormatBlackboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormatBlackboard) ProtoMessage() {}

func (x *FormatBlackboard) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormatBlackboard.ProtoReflect.Descriptor instead.
func (*FormatBlackboard) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{30}
}

func (x *FormatBlackboard) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *FormatBlackboard) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// Record a datetime string into the blackboard. Writes the date according to ISO8601 format.
type DateToBlackboard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key of the variable that will be written.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DateToBlackboard) Reset() {
	*x = DateToBlackboard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateToBlackboard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateToBlackboard) ProtoMessage() {}

func (x *DateToBlackboard) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateToBlackboard.ProtoReflect.Descriptor instead.
func (*DateToBlackboard) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{31}
}

func (x *DateToBlackboard) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// Just returns a constant when calling tick().
type ConstantResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This result is always returned when calling tick().
	Result Result `protobuf:"varint,1,opt,name=result,proto3,enum=bosdyn.api.mission.Result" json:"result,omitempty"`
}

func (x *ConstantResult) Reset() {
	*x = ConstantResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstantResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstantResult) ProtoMessage() {}

func (x *ConstantResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstantResult.ProtoReflect.Descriptor instead.
func (*ConstantResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{32}
}

func (x *ConstantResult) GetResult() Result {
	if x != nil {
		return x.Result
	}
	return Result_RESULT_UNKNOWN
}

// This node will run and return the status of the child node.
// If the mission is paused while this node is executing, the child will be
// restarted when the mission is resumed.
type RestartWhenPaused struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child *Node `protobuf:"bytes,1,opt,name=child,proto3" json:"child,omitempty"`
}

func (x *RestartWhenPaused) Reset() {
	*x = RestartWhenPaused{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartWhenPaused) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartWhenPaused) ProtoMessage() {}

func (x *RestartWhenPaused) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartWhenPaused.ProtoReflect.Descriptor instead.
func (*RestartWhenPaused) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{33}
}

func (x *RestartWhenPaused) GetChild() *Node {
	if x != nil {
		return x.Child
	}
	return nil
}

// Options for where to retrieve values from.
type Condition_Operand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Condition_Operand_Var
	//	*Condition_Operand_Const
	Type isCondition_Operand_Type `protobuf_oneof:"type"`
}

func (x *Condition_Operand) Reset() {
	*x = Condition_Operand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Condition_Operand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_Operand) ProtoMessage() {}

func (x *Condition_Operand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_Operand.ProtoReflect.Descriptor instead.
func (*Condition_Operand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{7, 0}
}

func (m *Condition_Operand) GetType() isCondition_Operand_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Condition_Operand) GetVar() *VariableDeclaration {
	if x, ok := x.GetType().(*Condition_Operand_Var); ok {
		return x.Var
	}
	return nil
}

func (x *Condition_Operand) GetConst() *ConstantValue {
	if x, ok := x.GetType().(*Condition_Operand_Const); ok {
		return x.Const
	}
	return nil
}

type isCondition_Operand_Type interface {
	isCondition_Operand_Type()
}

type Condition_Operand_Var struct {
	// Reference an existing variable.
	Var *VariableDeclaration `protobuf:"bytes,1,opt,name=var,proto3,oneof"`
}

type Condition_Operand_Const struct {
	// Use a constant value.
	Const *ConstantValue `protobuf:"bytes,2,opt,name=const,proto3,oneof"`
}

func (*Condition_Operand_Var) isCondition_Operand_Type() {}

func (*Condition_Operand_Const) isCondition_Operand_Type() {}

// Data about the options to choose from.
type Prompt_Option struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Text associated with this option. Should be displayed to the user.
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// Numeric code corresponding to this option. Passed as part of the answer.
	AnswerCode int64 `protobuf:"varint,2,opt,name=answer_code,json=answerCode,proto3" json:"answer_code,omitempty"`
}

func (x *Prompt_Option) Reset() {
	*x = Prompt_Option{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prompt_Option) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prompt_Option) ProtoMessage() {}

func (x *Prompt_Option) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prompt_Option.ProtoReflect.Descriptor instead.
func (*Prompt_Option) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{19, 0}
}

func (x *Prompt_Option) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Prompt_Option) GetAnswerCode() int64 {
	if x != nil {
		return x.AnswerCode
	}
	return 0
}

type SpotCamPtz_AdjustParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Variable name to retrieve the graph nav state from.
	LocalizationVarname string `protobuf:"bytes,4,opt,name=localization_varname,json=localizationVarname,proto3" json:"localization_varname,omitempty"`
	// Waypoint ID where this PTZ configuration was originally set up.
	WaypointId string `protobuf:"bytes,5,opt,name=waypoint_id,json=waypointId,proto3" json:"waypoint_id,omitempty"`
	// Pose of body in waypoint frame at the time this PTZ configuration was originally set up.
	WaypointTformBody *api.SE3Pose `protobuf:"bytes,6,opt,name=waypoint_tform_body,json=waypointTformBody,proto3" json:"waypoint_tform_body,omitempty"`
}

func (x *SpotCamPtz_AdjustParameters) Reset() {
	*x = SpotCamPtz_AdjustParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCamPtz_AdjustParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCamPtz_AdjustParameters) ProtoMessage() {}

func (x *SpotCamPtz_AdjustParameters) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_nodes_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCamPtz_AdjustParameters.ProtoReflect.Descriptor instead.
func (*SpotCamPtz_AdjustParameters) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_nodes_proto_rawDescGZIP(), []int{20, 0}
}

func (x *SpotCamPtz_AdjustParameters) GetLocalizationVarname() string {
	if x != nil {
		return x.LocalizationVarname
	}
	return ""
}

func (x *SpotCamPtz_AdjustParameters) GetWaypointId() string {
	if x != nil {
		return x.WaypointId
	}
	return ""
}

func (x *SpotCamPtz_AdjustParameters) GetWaypointTformBody() *api.SE3Pose {
	if x != nil {
		return x.WaypointTformBody
	}
	return nil
}

var File_bosdyn_api_mission_nodes_proto protoreflect.FileDescriptor

var file_bosdyn_api_mission_nodes_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61,
	0x6d, 0x2f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f,
	0x63, 0x61, 0x6d, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70,
	0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2f, 0x70, 0x74, 0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x6e, 0x61, 0x76, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3,
	0x03, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x69, 0x6d, 0x70,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52,
	0x04, 0x69, 0x6d, 0x70, 0x6c, 0x12, 0x27, 0x0a, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x47,
	0x0a, 0x10, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x67, 0x0a, 0x08, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x67, 0x0a,
	0x08, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x34, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73,
	0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x05, 0x52, 0x65,
	0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x61, 0x74, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0xe3, 0x01, 0x0a, 0x0b, 0x46, 0x6f, 0x72, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x7c, 0x0a, 0x0e, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x07, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x36, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x22, 0xad, 0x05, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x03, 0x6c, 0x68, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x03, 0x6c, 0x68, 0x73, 0x12, 0x37,
	0x0a, 0x03, 0x72, 0x68, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x52, 0x03, 0x72, 0x68, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x10,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x0f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x1a, 0x89, 0x01, 0x0a, 0x07, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x76, 0x61, 0x72, 0x12,
	0x39, 0x0a, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x05, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x7e, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x45, 0x51,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4e, 0x45,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x54,
	0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x47, 0x54,
	0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x45,
	0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x47, 0x45,
	0x10, 0x06, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1c, 0x0a, 0x18, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x57, 0x41, 0x59, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45, 0x5f, 0x52,
	0x55, 0x4e, 0x5f, 0x55, 0x4e, 0x54, 0x49, 0x4c, 0x5f, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x02,
	0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x03, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x0f, 0x42, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x44, 0x6f, 0x63,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x7f, 0x0a, 0x12,
	0x42, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x8e, 0x01,
	0x0a, 0x12, 0x42, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x07, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xc6,
	0x03, 0x0a, 0x10, 0x42, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x54, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73,
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x67, 0x65, 0x6e, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5c, 0x0a, 0x2b, 0x6e,
	0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63,
	0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x27, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c, 0x61, 0x63,
	0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x4c, 0x0a, 0x23, 0x6e, 0x61, 0x76,
	0x69, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1f, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x22, 0xd6, 0x03, 0x0a, 0x13, 0x42, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5c,
	0x0a, 0x2b, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x27, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x52, 0x0a, 0x26,
	0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x22, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79,
	0x22, 0xbc, 0x01, 0x0a, 0x13, 0x42, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68,
	0x4e, 0x61, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0xb0, 0x01, 0x0a, 0x16, 0x42, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4e,
	0x61, 0x76, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x5f, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x13, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x73, 0x0a, 0x11, 0x42, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x27,
	0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x47, 0x72, 0x70, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x4f, 0x0a, 0x05, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x22, 0xc5, 0x02, 0x0a, 0x06, 0x50, 0x72, 0x6f, 0x6d,
	0x70, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x5f, 0x72, 0x65, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x6c, 0x77,
	0x61, 0x79, 0x73, 0x52, 0x65, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72,
	0x6f, 0x6d, 0x70, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63,
	0x68, 0x69, 0x6c, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x1a, 0x3d, 0x0a, 0x06, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x22,
	0x94, 0x03, 0x0a, 0x0a, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x61, 0x6d, 0x50, 0x74, 0x7a, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0c, 0x70, 0x74, 0x7a, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61,
	0x6d, 0x2e, 0x50, 0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70,
	0x74, 0x7a, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x11, 0x61, 0x64,
	0x6a, 0x75, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43,
	0x61, 0x6d, 0x50, 0x74, 0x7a, 0x2e, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x10, 0x61, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x31, 0x0a,
	0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x43, 0x0a, 0x13, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50,
	0x6f, 0x73, 0x65, 0x52, 0x11, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x66, 0x6f,
	0x72, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x6f, 0x74, 0x43,
	0x61, 0x6d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x52, 0x06, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x61, 0x6d, 0x2e, 0x4c, 0x6f, 0x67,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xda, 0x01, 0x0a, 0x0a, 0x53, 0x70, 0x6f,
	0x74, 0x43, 0x61, 0x6d, 0x4c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x54,
	0x0a, 0x0c, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x61,
	0x6d, 0x4c, 0x65, 0x64, 0x2e, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4e, 0x0a, 0x15, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x75, 0x74, 0x6f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x9a, 0x04, 0x0a, 0x04, 0x44, 0x6f, 0x63, 0x6b, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x32, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x14, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x52, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x65, 0x0a, 0x30, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x2b, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x27,
	0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x23, 0x64,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x22, 0xd1, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x19, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xb7, 0x03, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x13, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x61, 0x0a,
	0x12, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x41, 0x56, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x44, 0x0a, 0x0b, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x14, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x22, 0x60, 0x0a, 0x0d,
	0x53, 0x65, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x4f, 0x0a,
	0x14, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x62, 0x6f, 0x61, 0x72, 0x64, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x3c,
	0x0a, 0x10, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x24, 0x0a, 0x10,
	0x44, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x62, 0x6f, 0x61, 0x72, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x44, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x43, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x57, 0x68, 0x65, 0x6e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x42, 0x47, 0x42,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73,
	0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_mission_nodes_proto_rawDescOnce sync.Once
	file_bosdyn_api_mission_nodes_proto_rawDescData = file_bosdyn_api_mission_nodes_proto_rawDesc
)

func file_bosdyn_api_mission_nodes_proto_rawDescGZIP() []byte {
	file_bosdyn_api_mission_nodes_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_mission_nodes_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_mission_nodes_proto_rawDescData)
	})
	return file_bosdyn_api_mission_nodes_proto_rawDescData
}

var file_bosdyn_api_mission_nodes_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bosdyn_api_mission_nodes_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_bosdyn_api_mission_nodes_proto_goTypes = []interface{}{
	(Condition_Compare)(0),                   // 0: bosdyn.api.mission.Condition.Compare
	(Condition_HandleStaleness)(0),           // 1: bosdyn.api.mission.Condition.HandleStaleness
	(DataAcquisition_CompletionBehavior)(0),  // 2: bosdyn.api.mission.DataAcquisition.CompletionBehavior
	(*Node)(nil),                             // 3: bosdyn.api.mission.Node
	(*Sequence)(nil),                         // 4: bosdyn.api.mission.Sequence
	(*Selector)(nil),                         // 5: bosdyn.api.mission.Selector
	(*Repeat)(nil),                           // 6: bosdyn.api.mission.Repeat
	(*Retry)(nil),                            // 7: bosdyn.api.mission.Retry
	(*ForDuration)(nil),                      // 8: bosdyn.api.mission.ForDuration
	(*SimpleParallel)(nil),                   // 9: bosdyn.api.mission.SimpleParallel
	(*Condition)(nil),                        // 10: bosdyn.api.mission.Condition
	(*BosdynRobotState)(nil),                 // 11: bosdyn.api.mission.BosdynRobotState
	(*BosdynDockState)(nil),                  // 12: bosdyn.api.mission.BosdynDockState
	(*BosdynRobotCommand)(nil),               // 13: bosdyn.api.mission.BosdynRobotCommand
	(*BosdynPowerRequest)(nil),               // 14: bosdyn.api.mission.BosdynPowerRequest
	(*BosdynNavigateTo)(nil),                 // 15: bosdyn.api.mission.BosdynNavigateTo
	(*BosdynNavigateRoute)(nil),              // 16: bosdyn.api.mission.BosdynNavigateRoute
	(*BosdynGraphNavState)(nil),              // 17: bosdyn.api.mission.BosdynGraphNavState
	(*BosdynGraphNavLocalize)(nil),           // 18: bosdyn.api.mission.BosdynGraphNavLocalize
	(*BosdynRecordEvent)(nil),                // 19: bosdyn.api.mission.BosdynRecordEvent
	(*RemoteGrpc)(nil),                       // 20: bosdyn.api.mission.RemoteGrpc
	(*Sleep)(nil),                            // 21: bosdyn.api.mission.Sleep
	(*Prompt)(nil),                           // 22: bosdyn.api.mission.Prompt
	(*SpotCamPtz)(nil),                       // 23: bosdyn.api.mission.SpotCamPtz
	(*SpotCamStoreMedia)(nil),                // 24: bosdyn.api.mission.SpotCamStoreMedia
	(*SpotCamLed)(nil),                       // 25: bosdyn.api.mission.SpotCamLed
	(*SpotCamResetAutofocus)(nil),            // 26: bosdyn.api.mission.SpotCamResetAutofocus
	(*Dock)(nil),                             // 27: bosdyn.api.mission.Dock
	(*StoreMetadata)(nil),                    // 28: bosdyn.api.mission.StoreMetadata
	(*DataAcquisition)(nil),                  // 29: bosdyn.api.mission.DataAcquisition
	(*RetainLease)(nil),                      // 30: bosdyn.api.mission.RetainLease
	(*DefineBlackboard)(nil),                 // 31: bosdyn.api.mission.DefineBlackboard
	(*SetBlackboard)(nil),                    // 32: bosdyn.api.mission.SetBlackboard
	(*FormatBlackboard)(nil),                 // 33: bosdyn.api.mission.FormatBlackboard
	(*DateToBlackboard)(nil),                 // 34: bosdyn.api.mission.DateToBlackboard
	(*ConstantResult)(nil),                   // 35: bosdyn.api.mission.ConstantResult
	(*RestartWhenPaused)(nil),                // 36: bosdyn.api.mission.RestartWhenPaused
	(*Condition_Operand)(nil),                // 37: bosdyn.api.mission.Condition.Operand
	(*Prompt_Option)(nil),                    // 38: bosdyn.api.mission.Prompt.Option
	(*SpotCamPtz_AdjustParameters)(nil),      // 39: bosdyn.api.mission.SpotCamPtz.AdjustParameters
	nil,                                      // 40: bosdyn.api.mission.SpotCamLed.BrightnessesEntry
	(*UserData)(nil),                         // 41: bosdyn.api.mission.UserData
	(*anypb.Any)(nil),                        // 42: google.protobuf.Any
	(*KeyValue)(nil),                         // 43: bosdyn.api.mission.KeyValue
	(*VariableDeclaration)(nil),              // 44: bosdyn.api.mission.VariableDeclaration
	(*durationpb.Duration)(nil),              // 45: google.protobuf.Duration
	(*api.RobotCommand)(nil),                 // 46: bosdyn.api.RobotCommand
	(api.PowerCommandRequest_Request)(0),     // 47: bosdyn.api.PowerCommandRequest.Request
	(*graph_nav.RouteGenParams)(nil),         // 48: bosdyn.api.graph_nav.RouteGenParams
	(*graph_nav.TravelParams)(nil),           // 49: bosdyn.api.graph_nav.TravelParams
	(*graph_nav.Route)(nil),                  // 50: bosdyn.api.graph_nav.Route
	(*graph_nav.RouteFollowingParams)(nil),   // 51: bosdyn.api.graph_nav.RouteFollowingParams
	(*graph_nav.SetLocalizationRequest)(nil), // 52: bosdyn.api.graph_nav.SetLocalizationRequest
	(*api.Event)(nil),                        // 53: bosdyn.api.Event
	(*spot_cam.PtzPosition)(nil),             // 54: bosdyn.api.spot_cam.PtzPosition
	(*spot_cam.Camera)(nil),                  // 55: bosdyn.api.spot_cam.Camera
	(spot_cam.Logpoint_RecordType)(0),        // 56: bosdyn.api.spot_cam.Logpoint.RecordType
	(docking.PrepPoseBehavior)(0),            // 57: bosdyn.api.docking.PrepPoseBehavior
	(*api.AcquireDataRequest)(nil),           // 58: bosdyn.api.AcquireDataRequest
	(Result)(0),                              // 59: bosdyn.api.mission.Result
	(*ConstantValue)(nil),                    // 60: bosdyn.api.mission.ConstantValue
	(*api.SE3Pose)(nil),                      // 61: bosdyn.api.SE3Pose
}
var file_bosdyn_api_mission_nodes_proto_depIdxs = []int32{
	41, // 0: bosdyn.api.mission.Node.user_data:type_name -> bosdyn.api.mission.UserData
	42, // 1: bosdyn.api.mission.Node.impl:type_name -> google.protobuf.Any
	43, // 2: bosdyn.api.mission.Node.parameter_values:type_name -> bosdyn.api.mission.KeyValue
	43, // 3: bosdyn.api.mission.Node.overrides:type_name -> bosdyn.api.mission.KeyValue
	44, // 4: bosdyn.api.mission.Node.parameters:type_name -> bosdyn.api.mission.VariableDeclaration
	3,  // 5: bosdyn.api.mission.Sequence.children:type_name -> bosdyn.api.mission.Node
	3,  // 6: bosdyn.api.mission.Selector.children:type_name -> bosdyn.api.mission.Node
	3,  // 7: bosdyn.api.mission.Repeat.child:type_name -> bosdyn.api.mission.Node
	3,  // 8: bosdyn.api.mission.Retry.child:type_name -> bosdyn.api.mission.Node
	45, // 9: bosdyn.api.mission.ForDuration.duration:type_name -> google.protobuf.Duration
	3,  // 10: bosdyn.api.mission.ForDuration.child:type_name -> bosdyn.api.mission.Node
	3,  // 11: bosdyn.api.mission.ForDuration.timeout_child:type_name -> bosdyn.api.mission.Node
	3,  // 12: bosdyn.api.mission.SimpleParallel.primary:type_name -> bosdyn.api.mission.Node
	3,  // 13: bosdyn.api.mission.SimpleParallel.secondary:type_name -> bosdyn.api.mission.Node
	37, // 14: bosdyn.api.mission.Condition.lhs:type_name -> bosdyn.api.mission.Condition.Operand
	37, // 15: bosdyn.api.mission.Condition.rhs:type_name -> bosdyn.api.mission.Condition.Operand
	0,  // 16: bosdyn.api.mission.Condition.operation:type_name -> bosdyn.api.mission.Condition.Compare
	1,  // 17: bosdyn.api.mission.Condition.handle_staleness:type_name -> bosdyn.api.mission.Condition.HandleStaleness
	3,  // 18: bosdyn.api.mission.BosdynRobotState.child:type_name -> bosdyn.api.mission.Node
	3,  // 19: bosdyn.api.mission.BosdynDockState.child:type_name -> bosdyn.api.mission.Node
	46, // 20: bosdyn.api.mission.BosdynRobotCommand.command:type_name -> bosdyn.api.RobotCommand
	47, // 21: bosdyn.api.mission.BosdynPowerRequest.request:type_name -> bosdyn.api.PowerCommandRequest.Request
	48, // 22: bosdyn.api.mission.BosdynNavigateTo.route_gen_params:type_name -> bosdyn.api.graph_nav.RouteGenParams
	49, // 23: bosdyn.api.mission.BosdynNavigateTo.travel_params:type_name -> bosdyn.api.graph_nav.TravelParams
	50, // 24: bosdyn.api.mission.BosdynNavigateRoute.route:type_name -> bosdyn.api.graph_nav.Route
	51, // 25: bosdyn.api.mission.BosdynNavigateRoute.route_follow_params:type_name -> bosdyn.api.graph_nav.RouteFollowingParams
	49, // 26: bosdyn.api.mission.BosdynNavigateRoute.travel_params:type_name -> bosdyn.api.graph_nav.TravelParams
	3,  // 27: bosdyn.api.mission.BosdynGraphNavState.child:type_name -> bosdyn.api.mission.Node
	52, // 28: bosdyn.api.mission.BosdynGraphNavLocalize.localization_request:type_name -> bosdyn.api.graph_nav.SetLocalizationRequest
	53, // 29: bosdyn.api.mission.BosdynRecordEvent.event:type_name -> bosdyn.api.Event
	43, // 30: bosdyn.api.mission.RemoteGrpc.inputs:type_name -> bosdyn.api.mission.KeyValue
	38, // 31: bosdyn.api.mission.Prompt.options:type_name -> bosdyn.api.mission.Prompt.Option
	3,  // 32: bosdyn.api.mission.Prompt.child:type_name -> bosdyn.api.mission.Node
	54, // 33: bosdyn.api.mission.SpotCamPtz.ptz_position:type_name -> bosdyn.api.spot_cam.PtzPosition
	39, // 34: bosdyn.api.mission.SpotCamPtz.adjust_parameters:type_name -> bosdyn.api.mission.SpotCamPtz.AdjustParameters
	55, // 35: bosdyn.api.mission.SpotCamStoreMedia.camera:type_name -> bosdyn.api.spot_cam.Camera
	56, // 36: bosdyn.api.mission.SpotCamStoreMedia.type:type_name -> bosdyn.api.spot_cam.Logpoint.RecordType
	40, // 37: bosdyn.api.mission.SpotCamLed.brightnesses:type_name -> bosdyn.api.mission.SpotCamLed.BrightnessesEntry
	3,  // 38: bosdyn.api.mission.Dock.child:type_name -> bosdyn.api.mission.Node
	57, // 39: bosdyn.api.mission.Dock.prep_pose_behavior:type_name -> bosdyn.api.docking.PrepPoseBehavior
	58, // 40: bosdyn.api.mission.DataAcquisition.request:type_name -> bosdyn.api.AcquireDataRequest
	2,  // 41: bosdyn.api.mission.DataAcquisition.completion_behavior:type_name -> bosdyn.api.mission.DataAcquisition.CompletionBehavior
	43, // 42: bosdyn.api.mission.DefineBlackboard.blackboard_variables:type_name -> bosdyn.api.mission.KeyValue
	3,  // 43: bosdyn.api.mission.DefineBlackboard.child:type_name -> bosdyn.api.mission.Node
	43, // 44: bosdyn.api.mission.SetBlackboard.blackboard_variables:type_name -> bosdyn.api.mission.KeyValue
	59, // 45: bosdyn.api.mission.ConstantResult.result:type_name -> bosdyn.api.mission.Result
	3,  // 46: bosdyn.api.mission.RestartWhenPaused.child:type_name -> bosdyn.api.mission.Node
	44, // 47: bosdyn.api.mission.Condition.Operand.var:type_name -> bosdyn.api.mission.VariableDeclaration
	60, // 48: bosdyn.api.mission.Condition.Operand.const:type_name -> bosdyn.api.mission.ConstantValue
	61, // 49: bosdyn.api.mission.SpotCamPtz.AdjustParameters.waypoint_tform_body:type_name -> bosdyn.api.SE3Pose
	50, // [50:50] is the sub-list for method output_type
	50, // [50:50] is the sub-list for method input_type
	50, // [50:50] is the sub-list for extension type_name
	50, // [50:50] is the sub-list for extension extendee
	0,  // [0:50] is the sub-list for field type_name
}

func init() { file_bosdyn_api_mission_nodes_proto_init() }
func file_bosdyn_api_mission_nodes_proto_init() {
	if File_bosdyn_api_mission_nodes_proto != nil {
		return
	}
	file_bosdyn_api_mission_util_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_mission_nodes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sequence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Retry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForDuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleParallel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynRobotState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynDockState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynRobotCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynPowerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynNavigateTo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynNavigateRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynGraphNavState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynGraphNavLocalize); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BosdynRecordEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteGrpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sleep); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prompt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCamPtz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCamStoreMedia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCamLed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCamResetAutofocus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAcquisition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetainLease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefineBlackboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetBlackboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormatBlackboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateToBlackboard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstantResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartWhenPaused); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Condition_Operand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prompt_Option); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_nodes_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCamPtz_AdjustParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_mission_nodes_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Node_Impl)(nil),
		(*Node_NodeReference)(nil),
	}
	file_bosdyn_api_mission_nodes_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*Condition_Operand_Var)(nil),
		(*Condition_Operand_Const)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_mission_nodes_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_mission_nodes_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_mission_nodes_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_mission_nodes_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_mission_nodes_proto_msgTypes,
	}.Build()
	File_bosdyn_api_mission_nodes_proto = out.File
	file_bosdyn_api_mission_nodes_proto_rawDesc = nil
	file_bosdyn_api_mission_nodes_proto_goTypes = nil
	file_bosdyn_api_mission_nodes_proto_depIdxs = nil
}
