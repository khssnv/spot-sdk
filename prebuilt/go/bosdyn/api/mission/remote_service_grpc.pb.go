// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/mission/remote_service.proto

package mission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteMissionServiceClient is the client API for RemoteMissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteMissionServiceClient interface {
	// Call this once at mission load time, once for each node that references this remote service.
	EstablishSession(ctx context.Context, in *EstablishSessionRequest, opts ...grpc.CallOption) (*EstablishSessionResponse, error)
	// Call this every time the RemoteGrpc node is ticked.
	Tick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error)
	// Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
	// in this cycle. Signals that the next tick will be a restart, rather than a continuation.
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	// Tells the service it can forget any data associated with the given session ID.
	// Should be called once for every EstablishSession call.
	TeardownSession(ctx context.Context, in *TeardownSessionRequest, opts ...grpc.CallOption) (*TeardownSessionResponse, error)
}

type remoteMissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteMissionServiceClient(cc grpc.ClientConnInterface) RemoteMissionServiceClient {
	return &remoteMissionServiceClient{cc}
}

func (c *remoteMissionServiceClient) EstablishSession(ctx context.Context, in *EstablishSessionRequest, opts ...grpc.CallOption) (*EstablishSessionResponse, error) {
	out := new(EstablishSessionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.RemoteMissionService/EstablishSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteMissionServiceClient) Tick(ctx context.Context, in *TickRequest, opts ...grpc.CallOption) (*TickResponse, error) {
	out := new(TickResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.RemoteMissionService/Tick", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteMissionServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.RemoteMissionService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteMissionServiceClient) TeardownSession(ctx context.Context, in *TeardownSessionRequest, opts ...grpc.CallOption) (*TeardownSessionResponse, error) {
	out := new(TeardownSessionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.RemoteMissionService/TeardownSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteMissionServiceServer is the server API for RemoteMissionService service.
// All implementations must embed UnimplementedRemoteMissionServiceServer
// for forward compatibility
type RemoteMissionServiceServer interface {
	// Call this once at mission load time, once for each node that references this remote service.
	EstablishSession(context.Context, *EstablishSessionRequest) (*EstablishSessionResponse, error)
	// Call this every time the RemoteGrpc node is ticked.
	Tick(context.Context, *TickRequest) (*TickResponse, error)
	// Call this every time the RemoteGrpc node WAS ticked in the previous cycle, but was NOT ticked
	// in this cycle. Signals that the next tick will be a restart, rather than a continuation.
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	// Tells the service it can forget any data associated with the given session ID.
	// Should be called once for every EstablishSession call.
	TeardownSession(context.Context, *TeardownSessionRequest) (*TeardownSessionResponse, error)
	mustEmbedUnimplementedRemoteMissionServiceServer()
}

// UnimplementedRemoteMissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteMissionServiceServer struct {
}

func (UnimplementedRemoteMissionServiceServer) EstablishSession(context.Context, *EstablishSessionRequest) (*EstablishSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstablishSession not implemented")
}
func (UnimplementedRemoteMissionServiceServer) Tick(context.Context, *TickRequest) (*TickResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tick not implemented")
}
func (UnimplementedRemoteMissionServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedRemoteMissionServiceServer) TeardownSession(context.Context, *TeardownSessionRequest) (*TeardownSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TeardownSession not implemented")
}
func (UnimplementedRemoteMissionServiceServer) mustEmbedUnimplementedRemoteMissionServiceServer() {}

// UnsafeRemoteMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteMissionServiceServer will
// result in compilation errors.
type UnsafeRemoteMissionServiceServer interface {
	mustEmbedUnimplementedRemoteMissionServiceServer()
}

func RegisterRemoteMissionServiceServer(s grpc.ServiceRegistrar, srv RemoteMissionServiceServer) {
	s.RegisterService(&RemoteMissionService_ServiceDesc, srv)
}

func _RemoteMissionService_EstablishSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstablishSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteMissionServiceServer).EstablishSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.RemoteMissionService/EstablishSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteMissionServiceServer).EstablishSession(ctx, req.(*EstablishSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteMissionService_Tick_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteMissionServiceServer).Tick(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.RemoteMissionService/Tick",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteMissionServiceServer).Tick(ctx, req.(*TickRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteMissionService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteMissionServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.RemoteMissionService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteMissionServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteMissionService_TeardownSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TeardownSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteMissionServiceServer).TeardownSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.RemoteMissionService/TeardownSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteMissionServiceServer).TeardownSession(ctx, req.(*TeardownSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteMissionService_ServiceDesc is the grpc.ServiceDesc for RemoteMissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteMissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.mission.RemoteMissionService",
	HandlerType: (*RemoteMissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EstablishSession",
			Handler:    _RemoteMissionService_EstablishSession_Handler,
		},
		{
			MethodName: "Tick",
			Handler:    _RemoteMissionService_Tick_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _RemoteMissionService_Stop_Handler,
		},
		{
			MethodName: "TeardownSession",
			Handler:    _RemoteMissionService_TeardownSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/mission/remote_service.proto",
}
