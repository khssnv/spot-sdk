// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/mission/remote.proto

package mission

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible results of establishing a session.
type EstablishSessionResponse_Status int32

const (
	// Status unknown/unset.
	EstablishSessionResponse_STATUS_UNKNOWN EstablishSessionResponse_Status = 0
	// Provided inputs / outputs are compatible.
	EstablishSessionResponse_STATUS_OK EstablishSessionResponse_Status = 1
	// Remote service needs leases on additional resources.
	// If set, the missing_lease_resources field should contain the resources needed but not
	// provided.
	EstablishSessionResponse_STATUS_MISSING_LEASES EstablishSessionResponse_Status = 2
	// Remote service needs additional inputs.
	EstablishSessionResponse_STATUS_MISSING_INPUTS EstablishSessionResponse_Status = 3
)

// Enum value maps for EstablishSessionResponse_Status.
var (
	EstablishSessionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_MISSING_LEASES",
		3: "STATUS_MISSING_INPUTS",
	}
	EstablishSessionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":        0,
		"STATUS_OK":             1,
		"STATUS_MISSING_LEASES": 2,
		"STATUS_MISSING_INPUTS": 3,
	}
)

func (x EstablishSessionResponse_Status) Enum() *EstablishSessionResponse_Status {
	p := new(EstablishSessionResponse_Status)
	*p = x
	return p
}

func (x EstablishSessionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EstablishSessionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_remote_proto_enumTypes[0].Descriptor()
}

func (EstablishSessionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_remote_proto_enumTypes[0]
}

func (x EstablishSessionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EstablishSessionResponse_Status.Descriptor instead.
func (EstablishSessionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{1, 0}
}

// Possible results from the node. The FAILURE, RUNNING, and SUCCESS statuses map to the
// behavior tree terms, all others indicate an error in the TickRequest.
type TickResponse_Status int32

const (
	// Invalid; do not use.
	TickResponse_STATUS_UNKNOWN TickResponse_Status = 0
	// Node completed but failed.
	TickResponse_STATUS_FAILURE TickResponse_Status = 1
	// Node is processing and may finish in a future tick.
	TickResponse_STATUS_RUNNING TickResponse_Status = 2
	// Node completed and succeeded.
	TickResponse_STATUS_SUCCESS TickResponse_Status = 3
	// The request provided an invalid session ID.
	TickResponse_STATUS_INVALID_SESSION_ID TickResponse_Status = 4
	// The request was missing required leases.
	TickResponse_STATUS_MISSING_LEASES TickResponse_Status = 5
	// The request was missing required inputs.
	TickResponse_STATUS_MISSING_INPUTS TickResponse_Status = 6
)

// Enum value maps for TickResponse_Status.
var (
	TickResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_FAILURE",
		2: "STATUS_RUNNING",
		3: "STATUS_SUCCESS",
		4: "STATUS_INVALID_SESSION_ID",
		5: "STATUS_MISSING_LEASES",
		6: "STATUS_MISSING_INPUTS",
	}
	TickResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":            0,
		"STATUS_FAILURE":            1,
		"STATUS_RUNNING":            2,
		"STATUS_SUCCESS":            3,
		"STATUS_INVALID_SESSION_ID": 4,
		"STATUS_MISSING_LEASES":     5,
		"STATUS_MISSING_INPUTS":     6,
	}
)

func (x TickResponse_Status) Enum() *TickResponse_Status {
	p := new(TickResponse_Status)
	*p = x
	return p
}

func (x TickResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TickResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_remote_proto_enumTypes[1].Descriptor()
}

func (TickResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_remote_proto_enumTypes[1]
}

func (x TickResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TickResponse_Status.Descriptor instead.
func (TickResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{3, 0}
}

// Possible results for a StopRequest.
type StopResponse_Status int32

const (
	// Status unknown/unset.
	StopResponse_STATUS_UNKNOWN StopResponse_Status = 0
	// Service stopped.
	StopResponse_STATUS_OK StopResponse_Status = 1
	// The request provided an invalid session ID.
	StopResponse_STATUS_INVALID_SESSION_ID StopResponse_Status = 2
)

// Enum value maps for StopResponse_Status.
var (
	StopResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_SESSION_ID",
	}
	StopResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":            0,
		"STATUS_OK":                 1,
		"STATUS_INVALID_SESSION_ID": 2,
	}
)

func (x StopResponse_Status) Enum() *StopResponse_Status {
	p := new(StopResponse_Status)
	*p = x
	return p
}

func (x StopResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_remote_proto_enumTypes[2].Descriptor()
}

func (StopResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_remote_proto_enumTypes[2]
}

func (x StopResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopResponse_Status.Descriptor instead.
func (StopResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{5, 0}
}

// Possible results of ending a session.
type TeardownSessionResponse_Status int32

const (
	// Status unknown/unset.
	TeardownSessionResponse_STATUS_UNKNOWN TeardownSessionResponse_Status = 0
	// Session was torn down -- servicer has probably wiped all associated data / state.
	TeardownSessionResponse_STATUS_OK TeardownSessionResponse_Status = 1
	// The request provided an invalid session ID.
	// This may mean the session was already torn down.
	TeardownSessionResponse_STATUS_INVALID_SESSION_ID TeardownSessionResponse_Status = 2
)

// Enum value maps for TeardownSessionResponse_Status.
var (
	TeardownSessionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_SESSION_ID",
	}
	TeardownSessionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":            0,
		"STATUS_OK":                 1,
		"STATUS_INVALID_SESSION_ID": 2,
	}
)

func (x TeardownSessionResponse_Status) Enum() *TeardownSessionResponse_Status {
	p := new(TeardownSessionResponse_Status)
	*p = x
	return p
}

func (x TeardownSessionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TeardownSessionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_remote_proto_enumTypes[3].Descriptor()
}

func (TeardownSessionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_remote_proto_enumTypes[3]
}

func (x TeardownSessionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TeardownSessionResponse_Status.Descriptor instead.
func (TeardownSessionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{7, 0}
}

// Information to initialize a session to the remote service
// for a particular mission node.
type EstablishSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// All leases that the remote service may need.
	Leases []*api.Lease `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
	// Use this to provide other data (e.g. from the blackboard).
	// The RemoteGrpc node will provide the name of the node automatically.
	Inputs []*VariableDeclaration `protobuf:"bytes,3,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *EstablishSessionRequest) Reset() {
	*x = EstablishSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishSessionRequest) ProtoMessage() {}

func (x *EstablishSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishSessionRequest.ProtoReflect.Descriptor instead.
func (*EstablishSessionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{0}
}

func (x *EstablishSessionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EstablishSessionRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *EstablishSessionRequest) GetInputs() []*VariableDeclaration {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Provide the id to use for the particular mission node to tick this remote service.
type EstablishSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of this establish session request.
	Status EstablishSessionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.EstablishSessionResponse_Status" json:"status,omitempty"`
	// On success, contains an ID for this session.
	SessionId string `protobuf:"bytes,3,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// Need to provide leases on these resources.
	MissingLeaseResources []string `protobuf:"bytes,4,rep,name=missing_lease_resources,json=missingLeaseResources,proto3" json:"missing_lease_resources,omitempty"`
	// Details about how any leases were used.
	// Allowed to be empty, if leases were not actually used.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,5,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
	// The inputs required by the contacted node that were not mentioned in the request.
	MissingInputs []*VariableDeclaration `protobuf:"bytes,6,rep,name=missing_inputs,json=missingInputs,proto3" json:"missing_inputs,omitempty"`
}

func (x *EstablishSessionResponse) Reset() {
	*x = EstablishSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstablishSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstablishSessionResponse) ProtoMessage() {}

func (x *EstablishSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstablishSessionResponse.ProtoReflect.Descriptor instead.
func (*EstablishSessionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{1}
}

func (x *EstablishSessionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *EstablishSessionResponse) GetStatus() EstablishSessionResponse_Status {
	if x != nil {
		return x.Status
	}
	return EstablishSessionResponse_STATUS_UNKNOWN
}

func (x *EstablishSessionResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EstablishSessionResponse) GetMissingLeaseResources() []string {
	if x != nil {
		return x.MissingLeaseResources
	}
	return nil
}

func (x *EstablishSessionResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

func (x *EstablishSessionResponse) GetMissingInputs() []*VariableDeclaration {
	if x != nil {
		return x.MissingInputs
	}
	return nil
}

// Request that the remote tick itself for a particular node in the mission.
type TickRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Session ID as returned by the EstablishSessionResponse.
	// Used to guarantee coherence between a single client and a servicer.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// All leases that the remote service may need.
	Leases []*api.Lease `protobuf:"bytes,3,rep,name=leases,proto3" json:"leases,omitempty"`
	// Inputs provided to the servicer.
	Inputs []*KeyValue `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *TickRequest) Reset() {
	*x = TickRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickRequest) ProtoMessage() {}

func (x *TickRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickRequest.ProtoReflect.Descriptor instead.
func (*TickRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{2}
}

func (x *TickRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TickRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TickRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *TickRequest) GetInputs() []*KeyValue {
	if x != nil {
		return x.Inputs
	}
	return nil
}

// Response with the results of the tick.
// Remote services should strive to return quickly, even if only returning RUNNING.
type TickResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of the current tick.
	Status TickResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.mission.TickResponse_Status" json:"status,omitempty"`
	// Need to provide leases on these resources.
	MissingLeaseResources []string `protobuf:"bytes,4,rep,name=missing_lease_resources,json=missingLeaseResources,proto3" json:"missing_lease_resources,omitempty"`
	// Details about how any leases were used.
	// Allowed to be empty, if leases were not actually used.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,5,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
	// Filled out when status is STATUS_MISSING_INPUTS, indicating what inputs were not in the
	// request.
	MissingInputs []*VariableDeclaration `protobuf:"bytes,7,rep,name=missing_inputs,json=missingInputs,proto3" json:"missing_inputs,omitempty"`
	// If you need to report other error details, you can use this field.
	ErrorMessage string `protobuf:"bytes,8,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *TickResponse) Reset() {
	*x = TickResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TickResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickResponse) ProtoMessage() {}

func (x *TickResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickResponse.ProtoReflect.Descriptor instead.
func (*TickResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{3}
}

func (x *TickResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TickResponse) GetStatus() TickResponse_Status {
	if x != nil {
		return x.Status
	}
	return TickResponse_STATUS_UNKNOWN
}

func (x *TickResponse) GetMissingLeaseResources() []string {
	if x != nil {
		return x.MissingLeaseResources
	}
	return nil
}

func (x *TickResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

func (x *TickResponse) GetMissingInputs() []*VariableDeclaration {
	if x != nil {
		return x.MissingInputs
	}
	return nil
}

func (x *TickResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Used to stop a node that was previously ticked, so that it knows that
// the next Tick represents a restart rather than a continuation.
type StopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Session ID as returned by the EstablishSessionResponse.
	// Used to guarantee coherence between a single client and a servicer.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *StopRequest) Reset() {
	*x = StopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRequest) ProtoMessage() {}

func (x *StopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRequest.ProtoReflect.Descriptor instead.
func (*StopRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{4}
}

func (x *StopRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Results of attempting to stop a remote node.
type StopResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of the stop request.
	Status StopResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.StopResponse_Status" json:"status,omitempty"`
}

func (x *StopResponse) Reset() {
	*x = StopResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopResponse) ProtoMessage() {}

func (x *StopResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopResponse.ProtoReflect.Descriptor instead.
func (*StopResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{5}
}

func (x *StopResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopResponse) GetStatus() StopResponse_Status {
	if x != nil {
		return x.Status
	}
	return StopResponse_STATUS_UNKNOWN
}

// End the session originally established by an EstablishSessionRequest.
type TeardownSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Session ID as returned by the EstablishSessionResponse.
	// Used to guarantee coherence between a single client and a servicer.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *TeardownSessionRequest) Reset() {
	*x = TeardownSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeardownSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeardownSessionRequest) ProtoMessage() {}

func (x *TeardownSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeardownSessionRequest.ProtoReflect.Descriptor instead.
func (*TeardownSessionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{6}
}

func (x *TeardownSessionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TeardownSessionRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

// Results of ending a session.
type TeardownSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The result of a TeardownSessionRequest.
	Status TeardownSessionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.TeardownSessionResponse_Status" json:"status,omitempty"`
}

func (x *TeardownSessionResponse) Reset() {
	*x = TeardownSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_remote_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeardownSessionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeardownSessionResponse) ProtoMessage() {}

func (x *TeardownSessionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_remote_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeardownSessionResponse.ProtoReflect.Descriptor instead.
func (*TeardownSessionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_remote_proto_rawDescGZIP(), []int{7}
}

func (x *TeardownSessionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TeardownSessionResponse) GetStatus() TeardownSessionResponse_Status {
	if x != nil {
		return x.Status
	}
	return TeardownSessionResponse_STATUS_UNKNOWN
}

var File_bosdyn_api_mission_remote_proto protoreflect.FileDescriptor

var file_bosdyn_api_mission_remote_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb8, 0x01, 0x0a, 0x17, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12,
	0x3f, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x22, 0xed, 0x03, 0x0a, 0x18, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x17, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a,
	0x0e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x22, 0x61, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x41,
	0x53, 0x45, 0x53, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x10, 0x03,
	0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x22, 0xa8, 0x04, 0x0a, 0x0c, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x69,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x0e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xad,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x53, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x53, 0x10, 0x06, 0x22, 0x5f,
	0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22,
	0xcf, 0x01, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10,
	0x02, 0x22, 0x6a, 0x0a, 0x16, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0xe5, 0x01,
	0x0a, 0x17, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x61, 0x72, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x44, 0x10, 0x02, 0x42, 0x48, 0x42, 0x0b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_mission_remote_proto_rawDescOnce sync.Once
	file_bosdyn_api_mission_remote_proto_rawDescData = file_bosdyn_api_mission_remote_proto_rawDesc
)

func file_bosdyn_api_mission_remote_proto_rawDescGZIP() []byte {
	file_bosdyn_api_mission_remote_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_mission_remote_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_mission_remote_proto_rawDescData)
	})
	return file_bosdyn_api_mission_remote_proto_rawDescData
}

var file_bosdyn_api_mission_remote_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bosdyn_api_mission_remote_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bosdyn_api_mission_remote_proto_goTypes = []interface{}{
	(EstablishSessionResponse_Status)(0), // 0: bosdyn.api.mission.EstablishSessionResponse.Status
	(TickResponse_Status)(0),             // 1: bosdyn.api.mission.TickResponse.Status
	(StopResponse_Status)(0),             // 2: bosdyn.api.mission.StopResponse.Status
	(TeardownSessionResponse_Status)(0),  // 3: bosdyn.api.mission.TeardownSessionResponse.Status
	(*EstablishSessionRequest)(nil),      // 4: bosdyn.api.mission.EstablishSessionRequest
	(*EstablishSessionResponse)(nil),     // 5: bosdyn.api.mission.EstablishSessionResponse
	(*TickRequest)(nil),                  // 6: bosdyn.api.mission.TickRequest
	(*TickResponse)(nil),                 // 7: bosdyn.api.mission.TickResponse
	(*StopRequest)(nil),                  // 8: bosdyn.api.mission.StopRequest
	(*StopResponse)(nil),                 // 9: bosdyn.api.mission.StopResponse
	(*TeardownSessionRequest)(nil),       // 10: bosdyn.api.mission.TeardownSessionRequest
	(*TeardownSessionResponse)(nil),      // 11: bosdyn.api.mission.TeardownSessionResponse
	(*api.RequestHeader)(nil),            // 12: bosdyn.api.RequestHeader
	(*api.Lease)(nil),                    // 13: bosdyn.api.Lease
	(*VariableDeclaration)(nil),          // 14: bosdyn.api.mission.VariableDeclaration
	(*api.ResponseHeader)(nil),           // 15: bosdyn.api.ResponseHeader
	(*api.LeaseUseResult)(nil),           // 16: bosdyn.api.LeaseUseResult
	(*KeyValue)(nil),                     // 17: bosdyn.api.mission.KeyValue
}
var file_bosdyn_api_mission_remote_proto_depIdxs = []int32{
	12, // 0: bosdyn.api.mission.EstablishSessionRequest.header:type_name -> bosdyn.api.RequestHeader
	13, // 1: bosdyn.api.mission.EstablishSessionRequest.leases:type_name -> bosdyn.api.Lease
	14, // 2: bosdyn.api.mission.EstablishSessionRequest.inputs:type_name -> bosdyn.api.mission.VariableDeclaration
	15, // 3: bosdyn.api.mission.EstablishSessionResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 4: bosdyn.api.mission.EstablishSessionResponse.status:type_name -> bosdyn.api.mission.EstablishSessionResponse.Status
	16, // 5: bosdyn.api.mission.EstablishSessionResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	14, // 6: bosdyn.api.mission.EstablishSessionResponse.missing_inputs:type_name -> bosdyn.api.mission.VariableDeclaration
	12, // 7: bosdyn.api.mission.TickRequest.header:type_name -> bosdyn.api.RequestHeader
	13, // 8: bosdyn.api.mission.TickRequest.leases:type_name -> bosdyn.api.Lease
	17, // 9: bosdyn.api.mission.TickRequest.inputs:type_name -> bosdyn.api.mission.KeyValue
	15, // 10: bosdyn.api.mission.TickResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 11: bosdyn.api.mission.TickResponse.status:type_name -> bosdyn.api.mission.TickResponse.Status
	16, // 12: bosdyn.api.mission.TickResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	14, // 13: bosdyn.api.mission.TickResponse.missing_inputs:type_name -> bosdyn.api.mission.VariableDeclaration
	12, // 14: bosdyn.api.mission.StopRequest.header:type_name -> bosdyn.api.RequestHeader
	15, // 15: bosdyn.api.mission.StopResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 16: bosdyn.api.mission.StopResponse.status:type_name -> bosdyn.api.mission.StopResponse.Status
	12, // 17: bosdyn.api.mission.TeardownSessionRequest.header:type_name -> bosdyn.api.RequestHeader
	15, // 18: bosdyn.api.mission.TeardownSessionResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 19: bosdyn.api.mission.TeardownSessionResponse.status:type_name -> bosdyn.api.mission.TeardownSessionResponse.Status
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_bosdyn_api_mission_remote_proto_init() }
func file_bosdyn_api_mission_remote_proto_init() {
	if File_bosdyn_api_mission_remote_proto != nil {
		return
	}
	file_bosdyn_api_mission_util_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_mission_remote_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_remote_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EstablishSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_remote_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_remote_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TickResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_remote_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_remote_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_remote_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeardownSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_remote_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeardownSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_mission_remote_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_mission_remote_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_mission_remote_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_mission_remote_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_mission_remote_proto_msgTypes,
	}.Build()
	File_bosdyn_api_mission_remote_proto = out.File
	file_bosdyn_api_mission_remote_proto_rawDesc = nil
	file_bosdyn_api_mission_remote_proto_goTypes = nil
	file_bosdyn_api_mission_remote_proto_depIdxs = nil
}
