// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/mission/mission.proto

package mission

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible overall status states of the mission.
type State_Status int32

const (
	// Invalid status, do not use.
	State_STATUS_UNKNOWN State_Status = 0
	// The mission has failed due to a node failure.
	State_STATUS_FAILURE State_Status = 1
	// The mission is still running.
	State_STATUS_RUNNING State_Status = 2
	// The mission succeeded!
	State_STATUS_SUCCESS State_Status = 3
	// Execution has been paused.
	State_STATUS_PAUSED State_Status = 4
	// The mission service itself encountered an unexpected error, outside of a node failing.
	State_STATUS_ERROR State_Status = 5
	// No mission has been loaded.
	State_STATUS_NONE State_Status = 6
	// The mission was stopped before completion.
	State_STATUS_STOPPED State_Status = 7
)

// Enum value maps for State_Status.
var (
	State_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_FAILURE",
		2: "STATUS_RUNNING",
		3: "STATUS_SUCCESS",
		4: "STATUS_PAUSED",
		5: "STATUS_ERROR",
		6: "STATUS_NONE",
		7: "STATUS_STOPPED",
	}
	State_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"STATUS_FAILURE": 1,
		"STATUS_RUNNING": 2,
		"STATUS_SUCCESS": 3,
		"STATUS_PAUSED":  4,
		"STATUS_ERROR":   5,
		"STATUS_NONE":    6,
		"STATUS_STOPPED": 7,
	}
)

func (x State_Status) Enum() *State_Status {
	p := new(State_Status)
	*p = x
	return p
}

func (x State_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_mission_proto_enumTypes[0].Descriptor()
}

func (State_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_mission_proto_enumTypes[0]
}

func (x State_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State_Status.Descriptor instead.
func (State_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{2, 0}
}

// Possible results for answering a question.
type AnswerQuestionResponse_Status int32

const (
	// Invalid; do not use.
	AnswerQuestionResponse_STATUS_UNKNOWN AnswerQuestionResponse_Status = 0
	// Answer accepted.
	AnswerQuestionResponse_STATUS_OK AnswerQuestionResponse_Status = 1
	// Question ID is not valid / unknown by the mission service.
	AnswerQuestionResponse_STATUS_INVALID_QUESTION_ID AnswerQuestionResponse_Status = 2
	// Answer code is not applicable for the question indicated.
	AnswerQuestionResponse_STATUS_INVALID_CODE AnswerQuestionResponse_Status = 3
	// Question was already answered.
	AnswerQuestionResponse_STATUS_ALREADY_ANSWERED AnswerQuestionResponse_Status = 4
)

// Enum value maps for AnswerQuestionResponse_Status.
var (
	AnswerQuestionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_QUESTION_ID",
		3: "STATUS_INVALID_CODE",
		4: "STATUS_ALREADY_ANSWERED",
	}
	AnswerQuestionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":             0,
		"STATUS_OK":                  1,
		"STATUS_INVALID_QUESTION_ID": 2,
		"STATUS_INVALID_CODE":        3,
		"STATUS_ALREADY_ANSWERED":    4,
	}
)

func (x AnswerQuestionResponse_Status) Enum() *AnswerQuestionResponse_Status {
	p := new(AnswerQuestionResponse_Status)
	*p = x
	return p
}

func (x AnswerQuestionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnswerQuestionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_mission_proto_enumTypes[1].Descriptor()
}

func (AnswerQuestionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_mission_proto_enumTypes[1]
}

func (x AnswerQuestionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnswerQuestionResponse_Status.Descriptor instead.
func (AnswerQuestionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{5, 0}
}

// Possible results for a play request.
type PlayMissionResponse_Status int32

const (
	// Invalid status, do not use.
	PlayMissionResponse_STATUS_UNKNOWN PlayMissionResponse_Status = 0
	// Mission is playing, or the mission has already completed.
	// Use GetStateResponse to tell the difference.
	PlayMissionResponse_STATUS_OK PlayMissionResponse_Status = 1
	// Call LoadMission first.
	PlayMissionResponse_STATUS_NO_MISSION PlayMissionResponse_Status = 2
)

// Enum value maps for PlayMissionResponse_Status.
var (
	PlayMissionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_NO_MISSION",
	}
	PlayMissionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":    0,
		"STATUS_OK":         1,
		"STATUS_NO_MISSION": 2,
	}
)

func (x PlayMissionResponse_Status) Enum() *PlayMissionResponse_Status {
	p := new(PlayMissionResponse_Status)
	*p = x
	return p
}

func (x PlayMissionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayMissionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_mission_proto_enumTypes[2].Descriptor()
}

func (PlayMissionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_mission_proto_enumTypes[2]
}

func (x PlayMissionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayMissionResponse_Status.Descriptor instead.
func (PlayMissionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{11, 0}
}

// Possible results of requesting a restart.
type RestartMissionResponse_Status int32

const (
	// Invalid status, do not use.
	RestartMissionResponse_STATUS_UNKNOWN RestartMissionResponse_Status = 0
	// Mission has restarted.
	RestartMissionResponse_STATUS_OK RestartMissionResponse_Status = 1
	// Call LoadMission first.
	RestartMissionResponse_STATUS_NO_MISSION RestartMissionResponse_Status = 2
	// Validation failed.
	RestartMissionResponse_STATUS_VALIDATE_ERROR RestartMissionResponse_Status = 3
)

// Enum value maps for RestartMissionResponse_Status.
var (
	RestartMissionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_NO_MISSION",
		3: "STATUS_VALIDATE_ERROR",
	}
	RestartMissionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":        0,
		"STATUS_OK":             1,
		"STATUS_NO_MISSION":     2,
		"STATUS_VALIDATE_ERROR": 3,
	}
)

func (x RestartMissionResponse_Status) Enum() *RestartMissionResponse_Status {
	p := new(RestartMissionResponse_Status)
	*p = x
	return p
}

func (x RestartMissionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RestartMissionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_mission_proto_enumTypes[3].Descriptor()
}

func (RestartMissionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_mission_proto_enumTypes[3]
}

func (x RestartMissionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RestartMissionResponse_Status.Descriptor instead.
func (RestartMissionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{13, 0}
}

// Possible results of loading a mission.
type LoadMissionResponse_Status int32

const (
	// Invalid status, do not use.
	LoadMissionResponse_STATUS_UNKNOWN LoadMissionResponse_Status = 0
	// The mission was loaded successfully.
	LoadMissionResponse_STATUS_OK LoadMissionResponse_Status = 1
	// Load-time compilation failed. The mission was malformed.
	LoadMissionResponse_STATUS_COMPILE_ERROR LoadMissionResponse_Status = 2
	// Load-time validation failed. Some part of the mission was unable to initialize.
	LoadMissionResponse_STATUS_VALIDATE_ERROR LoadMissionResponse_Status = 3
)

// Enum value maps for LoadMissionResponse_Status.
var (
	LoadMissionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_COMPILE_ERROR",
		3: "STATUS_VALIDATE_ERROR",
	}
	LoadMissionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":        0,
		"STATUS_OK":             1,
		"STATUS_COMPILE_ERROR":  2,
		"STATUS_VALIDATE_ERROR": 3,
	}
)

func (x LoadMissionResponse_Status) Enum() *LoadMissionResponse_Status {
	p := new(LoadMissionResponse_Status)
	*p = x
	return p
}

func (x LoadMissionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadMissionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_mission_proto_enumTypes[4].Descriptor()
}

func (LoadMissionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_mission_proto_enumTypes[4]
}

func (x LoadMissionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadMissionResponse_Status.Descriptor instead.
func (LoadMissionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{15, 0}
}

// Possible results of a pause request.
type PauseMissionResponse_Status int32

const (
	// Invalid status, do not use.
	PauseMissionResponse_STATUS_UNKNOWN PauseMissionResponse_Status = 0
	// Mission is paused or finished running.
	PauseMissionResponse_STATUS_OK PauseMissionResponse_Status = 1
	// No mission has started playing.
	// NOT returned when two PauseMissionRequests are received back-to-back. In that case,
	// you will get STATUS_OK.
	PauseMissionResponse_STATUS_NO_MISSION_PLAYING PauseMissionResponse_Status = 2
)

// Enum value maps for PauseMissionResponse_Status.
var (
	PauseMissionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_NO_MISSION_PLAYING",
	}
	PauseMissionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":            0,
		"STATUS_OK":                 1,
		"STATUS_NO_MISSION_PLAYING": 2,
	}
)

func (x PauseMissionResponse_Status) Enum() *PauseMissionResponse_Status {
	p := new(PauseMissionResponse_Status)
	*p = x
	return p
}

func (x PauseMissionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PauseMissionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_mission_proto_enumTypes[5].Descriptor()
}

func (PauseMissionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_mission_proto_enumTypes[5]
}

func (x PauseMissionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PauseMissionResponse_Status.Descriptor instead.
func (PauseMissionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{19, 0}
}

// Possible results of a stop request.
type StopMissionResponse_Status int32

const (
	// Invalid status, do not use.
	StopMissionResponse_STATUS_UNKNOWN StopMissionResponse_Status = 0
	// Mission is stopped/complete.
	// The mission state may be in any of the "complete states", e.g. if the mission completed
	// successfully before this RPC took effect, the mission will report STATUS_SUCCESS and not
	// STATUS_STOPPED.
	StopMissionResponse_STATUS_OK StopMissionResponse_Status = 1
	// No mission has started playing.
	// NOT returned if the mission is already stopped. In that case, you will get STATUS_OK.
	StopMissionResponse_STATUS_NO_MISSION_PLAYING StopMissionResponse_Status = 2
)

// Enum value maps for StopMissionResponse_Status.
var (
	StopMissionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_NO_MISSION_PLAYING",
	}
	StopMissionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":            0,
		"STATUS_OK":                 1,
		"STATUS_NO_MISSION_PLAYING": 2,
	}
)

func (x StopMissionResponse_Status) Enum() *StopMissionResponse_Status {
	p := new(StopMissionResponse_Status)
	*p = x
	return p
}

func (x StopMissionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopMissionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_mission_mission_proto_enumTypes[6].Descriptor()
}

func (StopMissionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_mission_mission_proto_enumTypes[6]
}

func (x StopMissionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopMissionResponse_Status.Descriptor instead.
func (StopMissionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{21, 0}
}

// Get the state of the mission.
type GetStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Upper bound on the node state to retrieve, inclusive. Leave unset for the latest data.
	HistoryUpperTickBound *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=history_upper_tick_bound,json=historyUpperTickBound,proto3" json:"history_upper_tick_bound,omitempty"`
	// Specify the lower bound of per-node state history to retrieve.
	// The service may not remember all the state you ask for. In this case, all of the state
	// available between the specified bounds will be returned.
	// This is optional -- if left unset, you will get exactly one set of per-node state.
	//
	// Types that are assignable to LowerBound:
	//	*GetStateRequest_HistoryLowerTickBound
	//	*GetStateRequest_HistoryPastTicks
	LowerBound isGetStateRequest_LowerBound `protobuf_oneof:"lower_bound"`
}

func (x *GetStateRequest) Reset() {
	*x = GetStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateRequest) ProtoMessage() {}

func (x *GetStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateRequest.ProtoReflect.Descriptor instead.
func (*GetStateRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{0}
}

func (x *GetStateRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStateRequest) GetHistoryUpperTickBound() *wrapperspb.Int64Value {
	if x != nil {
		return x.HistoryUpperTickBound
	}
	return nil
}

func (m *GetStateRequest) GetLowerBound() isGetStateRequest_LowerBound {
	if m != nil {
		return m.LowerBound
	}
	return nil
}

func (x *GetStateRequest) GetHistoryLowerTickBound() int64 {
	if x, ok := x.GetLowerBound().(*GetStateRequest_HistoryLowerTickBound); ok {
		return x.HistoryLowerTickBound
	}
	return 0
}

func (x *GetStateRequest) GetHistoryPastTicks() int64 {
	if x, ok := x.GetLowerBound().(*GetStateRequest_HistoryPastTicks); ok {
		return x.HistoryPastTicks
	}
	return 0
}

type isGetStateRequest_LowerBound interface {
	isGetStateRequest_LowerBound()
}

type GetStateRequest_HistoryLowerTickBound struct {
	// Tick counter for the lower bound of per-node state to retrieve.
	HistoryLowerTickBound int64 `protobuf:"varint,3,opt,name=history_lower_tick_bound,json=historyLowerTickBound,proto3,oneof"`
}

type GetStateRequest_HistoryPastTicks struct {
	// Number of ticks to look into the past from the upper bound.
	HistoryPastTicks int64 `protobuf:"varint,4,opt,name=history_past_ticks,json=historyPastTicks,proto3,oneof"`
}

func (*GetStateRequest_HistoryLowerTickBound) isGetStateRequest_LowerBound() {}

func (*GetStateRequest_HistoryPastTicks) isGetStateRequest_LowerBound() {}

// Response to a GetStateRequest.
type GetStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The requested mission state.
	State *State `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *GetStateResponse) Reset() {
	*x = GetStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStateResponse) ProtoMessage() {}

func (x *GetStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStateResponse.ProtoReflect.Descriptor instead.
func (*GetStateResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{1}
}

func (x *GetStateResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStateResponse) GetState() *State {
	if x != nil {
		return x.State
	}
	return nil
}

// State of the mission service.
type State struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// What questions are outstanding?
	Questions []*Question `protobuf:"bytes,1,rep,name=questions,proto3" json:"questions,omitempty"`
	// History of questions that have been answered.
	// The server will set some limit on the available history.
	AnsweredQuestions []*State_AnsweredQuestion `protobuf:"bytes,2,rep,name=answered_questions,json=answeredQuestions,proto3" json:"answered_questions,omitempty"`
	// Node states ordered from newest to oldest.
	// history[0] will always be the data from this tick.
	History []*State_NodeStatesAtTick `protobuf:"bytes,3,rep,name=history,proto3" json:"history,omitempty"`
	// Current status of the mission.
	Status State_Status `protobuf:"varint,4,opt,name=status,proto3,enum=bosdyn.api.mission.State_Status" json:"status,omitempty"`
	// Describes the unexpected error encountered by the mission service.
	// Only filled out if STATUS_ERROR is set.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// The mission's tick counter when this state was generated.
	// -1 indicates no mission has been started.
	TickCounter int64 `protobuf:"varint,6,opt,name=tick_counter,json=tickCounter,proto3" json:"tick_counter,omitempty"`
	// The mission's ID.
	// -1 indicates no mission has been loaded.
	MissionId int64 `protobuf:"varint,7,opt,name=mission_id,json=missionId,proto3" json:"mission_id,omitempty"`
}

func (x *State) Reset() {
	*x = State{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State) ProtoMessage() {}

func (x *State) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State.ProtoReflect.Descriptor instead.
func (*State) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{2}
}

func (x *State) GetQuestions() []*Question {
	if x != nil {
		return x.Questions
	}
	return nil
}

func (x *State) GetAnsweredQuestions() []*State_AnsweredQuestion {
	if x != nil {
		return x.AnsweredQuestions
	}
	return nil
}

func (x *State) GetHistory() []*State_NodeStatesAtTick {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *State) GetStatus() State_Status {
	if x != nil {
		return x.Status
	}
	return State_STATUS_UNKNOWN
}

func (x *State) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *State) GetTickCounter() int64 {
	if x != nil {
		return x.TickCounter
	}
	return 0
}

func (x *State) GetMissionId() int64 {
	if x != nil {
		return x.MissionId
	}
	return 0
}

// A question posed by a Prompt node, or by the internal operation of another node.
type Question struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of this question, unique across all missions executing on a single host.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// What's asking the question. Should be unique in the active mission.
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// The text of the question itself.
	Text string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	// Options to choose from.
	// Uses the submessage from the "prompt" node message.
	Options []*Prompt_Option `protobuf:"bytes,4,rep,name=options,proto3" json:"options,omitempty"`
	// Set to true if this question was meant to be answered by some automated system, not a
	// human. Clients should usually avoid generating a UI element to ask such a question.
	ForAutonomousProcessing bool `protobuf:"varint,5,opt,name=for_autonomous_processing,json=forAutonomousProcessing,proto3" json:"for_autonomous_processing,omitempty"`
}

func (x *Question) Reset() {
	*x = Question{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Question) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Question) ProtoMessage() {}

func (x *Question) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Question.ProtoReflect.Descriptor instead.
func (*Question) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{3}
}

func (x *Question) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Question) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Question) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Question) GetOptions() []*Prompt_Option {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Question) GetForAutonomousProcessing() bool {
	if x != nil {
		return x.ForAutonomousProcessing
	}
	return false
}

// Answer one of the outstanding questions.
type AnswerQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Identifier of the question being answered.
	QuestionId int64 `protobuf:"varint,2,opt,name=question_id,json=questionId,proto3" json:"question_id,omitempty"`
	// The answer_code from the Question, corresponding to the user's choice.
	Code int64 `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *AnswerQuestionRequest) Reset() {
	*x = AnswerQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerQuestionRequest) ProtoMessage() {}

func (x *AnswerQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerQuestionRequest.ProtoReflect.Descriptor instead.
func (*AnswerQuestionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{4}
}

func (x *AnswerQuestionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AnswerQuestionRequest) GetQuestionId() int64 {
	if x != nil {
		return x.QuestionId
	}
	return 0
}

func (x *AnswerQuestionRequest) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Response from the server after a client has answered one of its questions.
type AnswerQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The result of the AnswerQuestionRequest.
	Status AnswerQuestionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.AnswerQuestionResponse_Status" json:"status,omitempty"`
}

func (x *AnswerQuestionResponse) Reset() {
	*x = AnswerQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnswerQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnswerQuestionResponse) ProtoMessage() {}

func (x *AnswerQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnswerQuestionResponse.ProtoReflect.Descriptor instead.
func (*AnswerQuestionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{5}
}

func (x *AnswerQuestionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AnswerQuestionResponse) GetStatus() AnswerQuestionResponse_Status {
	if x != nil {
		return x.Status
	}
	return AnswerQuestionResponse_STATUS_UNKNOWN
}

// Static information about the mission. Used to interpret the mission state.
type MissionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mission ID assigned by the server.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The root node of the mission.
	Root *NodeInfo `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
}

func (x *MissionInfo) Reset() {
	*x = MissionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MissionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissionInfo) ProtoMessage() {}

func (x *MissionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissionInfo.ProtoReflect.Descriptor instead.
func (*MissionInfo) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{6}
}

func (x *MissionInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MissionInfo) GetRoot() *NodeInfo {
	if x != nil {
		return x.Root
	}
	return nil
}

// Provides children and metadata of a single node within the mission.
type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique to each node within the LOADED mission.
	// Not guaranteed to be consistent between loads of the same mission.
	// Used to identify the nodes in the State message.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Human-readable name of this node, e.g. "Goto waypoint 1", or "Power On".
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Any UserData that was associated with this node.
	UserData *UserData `protobuf:"bytes,3,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	// Info on all children of this node, if any are present.
	Children []*NodeInfo `protobuf:"bytes,4,rep,name=children,proto3" json:"children,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{7}
}

func (x *NodeInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeInfo) GetUserData() *UserData {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *NodeInfo) GetChildren() []*NodeInfo {
	if x != nil {
		return x.Children
	}
	return nil
}

// General message describing a node that has failed, for example as part of a PlayMission or
// LoadMission RPC.
type FailedNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-readable name of this node, e.g. "Goto waypoint 1", or "Power On".
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The reason why this node failed. May not be provided by all nodes.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// The type of node, e.g. "bosdyn.api.mission.Sequence". May not be provided by all nodes.
	ImplTypename string `protobuf:"bytes,3,opt,name=impl_typename,json=implTypename,proto3" json:"impl_typename,omitempty"`
}

func (x *FailedNode) Reset() {
	*x = FailedNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedNode) ProtoMessage() {}

func (x *FailedNode) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedNode.ProtoReflect.Descriptor instead.
func (*FailedNode) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{8}
}

func (x *FailedNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FailedNode) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *FailedNode) GetImplTypename() string {
	if x != nil {
		return x.ImplTypename
	}
	return ""
}

// A request to play the currently loaded mission for a fixed amount of time.
type PlayMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Run the mission until this time.
	// Pause the mission at that time if we have not received a new PlayMissionRequest.
	// This ensures the mission stops relatively quickly if there is an unexpected client drop-out.
	// Clients should regularly send PlayMissionRequests with a pause_time that reflects how often
	// they expect to check in with the mission service.
	PauseTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=pause_time,json=pauseTime,proto3" json:"pause_time,omitempty"`
	// Leases that the mission will need, plus the lease on the mission service.
	Leases []*api.Lease `protobuf:"bytes,4,rep,name=leases,proto3" json:"leases,omitempty"`
	// Settings active until the next PlayMission or RestartMission request.
	Settings *PlaySettings `protobuf:"bytes,5,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *PlayMissionRequest) Reset() {
	*x = PlayMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayMissionRequest) ProtoMessage() {}

func (x *PlayMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayMissionRequest.ProtoReflect.Descriptor instead.
func (*PlayMissionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{9}
}

func (x *PlayMissionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlayMissionRequest) GetPauseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PauseTime
	}
	return nil
}

func (x *PlayMissionRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *PlayMissionRequest) GetSettings() *PlaySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// "Global" settings to use while a mission is running.
// Some of these settings are not globally applicable. For example, the velocity_limit
// does not change the speed at which the robot poses the body.
type PlaySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Velocity limits on the robot motion. Example use: limit velocity in "navigate to" nodes.
	VelocityLimit *api.SE2VelocityLimit `protobuf:"bytes,1,opt,name=velocity_limit,json=velocityLimit,proto3" json:"velocity_limit,omitempty"`
	// Disable directed exploration to bypass blocked path sections
	DisableDirectedExploration bool `protobuf:"varint,2,opt,name=disable_directed_exploration,json=disableDirectedExploration,proto3" json:"disable_directed_exploration,omitempty"`
	// Disable alternate-route-finding; overrides the per-edge setting in the map.
	DisableAlternateRouteFinding bool `protobuf:"varint,3,opt,name=disable_alternate_route_finding,json=disableAlternateRouteFinding,proto3" json:"disable_alternate_route_finding,omitempty"`
}

func (x *PlaySettings) Reset() {
	*x = PlaySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlaySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlaySettings) ProtoMessage() {}

func (x *PlaySettings) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlaySettings.ProtoReflect.Descriptor instead.
func (*PlaySettings) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{10}
}

func (x *PlaySettings) GetVelocityLimit() *api.SE2VelocityLimit {
	if x != nil {
		return x.VelocityLimit
	}
	return nil
}

func (x *PlaySettings) GetDisableDirectedExploration() bool {
	if x != nil {
		return x.DisableDirectedExploration
	}
	return false
}

func (x *PlaySettings) GetDisableAlternateRouteFinding() bool {
	if x != nil {
		return x.DisableAlternateRouteFinding
	}
	return false
}

// The PlayMission response message will return the status of the play mission request.
type PlayMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The result of the play request.
	Status PlayMissionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.PlayMissionResponse_Status" json:"status,omitempty"`
	// Results from any leases that may have been provided with the play request.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,3,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
}

func (x *PlayMissionResponse) Reset() {
	*x = PlayMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayMissionResponse) ProtoMessage() {}

func (x *PlayMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayMissionResponse.ProtoReflect.Descriptor instead.
func (*PlayMissionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{11}
}

func (x *PlayMissionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PlayMissionResponse) GetStatus() PlayMissionResponse_Status {
	if x != nil {
		return x.Status
	}
	return PlayMissionResponse_STATUS_UNKNOWN
}

func (x *PlayMissionResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

// A request to restart the currently loaded mission.
type RestartMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Run the mission until this time.
	// Pause the mission at that time if we have not received a new PlayMissionRequest.
	// This ensures the mission stops relatively quickly if there is an unexpected client drop-out.
	// Clients should regularly send PlayMissionRequests with a pause_time that reflects how often
	// they expect to check in with the mission service.
	PauseTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=pause_time,json=pauseTime,proto3" json:"pause_time,omitempty"`
	// Leases that the mission will need, plus the lease on the mission service.
	Leases []*api.Lease `protobuf:"bytes,3,rep,name=leases,proto3" json:"leases,omitempty"`
	// Settings active until the next PlayMission or RestartMission request.
	Settings *PlaySettings `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *RestartMissionRequest) Reset() {
	*x = RestartMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartMissionRequest) ProtoMessage() {}

func (x *RestartMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartMissionRequest.ProtoReflect.Descriptor instead.
func (*RestartMissionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{12}
}

func (x *RestartMissionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RestartMissionRequest) GetPauseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.PauseTime
	}
	return nil
}

func (x *RestartMissionRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *RestartMissionRequest) GetSettings() *PlaySettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

// The RestartMission response includes the status and any failed nodes for the request.
type RestartMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The result of the restart request.
	Status RestartMissionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.RestartMissionResponse_Status" json:"status,omitempty"`
	// Results from any leases that may have been used.
	// As part of mission validation, some of the non-mission leases may have been used.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,3,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
	// If certain nodes failed validation, they will be reported back in this field.
	FailedNodes []*FailedNode `protobuf:"bytes,4,rep,name=failed_nodes,json=failedNodes,proto3" json:"failed_nodes,omitempty"`
}

func (x *RestartMissionResponse) Reset() {
	*x = RestartMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestartMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestartMissionResponse) ProtoMessage() {}

func (x *RestartMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestartMissionResponse.ProtoReflect.Descriptor instead.
func (*RestartMissionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{13}
}

func (x *RestartMissionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RestartMissionResponse) GetStatus() RestartMissionResponse_Status {
	if x != nil {
		return x.Status
	}
	return RestartMissionResponse_STATUS_UNKNOWN
}

func (x *RestartMissionResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

func (x *RestartMissionResponse) GetFailedNodes() []*FailedNode {
	if x != nil {
		return x.FailedNodes
	}
	return nil
}

// The LoadMission request specifies a root node for the mission that should be used.
type LoadMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Root node of the mission to load.
	Root *Node `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// Leases that will be needed to validate the mission.
	Leases []*api.Lease `protobuf:"bytes,3,rep,name=leases,proto3" json:"leases,omitempty"`
}

func (x *LoadMissionRequest) Reset() {
	*x = LoadMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadMissionRequest) ProtoMessage() {}

func (x *LoadMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadMissionRequest.ProtoReflect.Descriptor instead.
func (*LoadMissionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{14}
}

func (x *LoadMissionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LoadMissionRequest) GetRoot() *Node {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *LoadMissionRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

// The LoadMission response returns the mission info generated by the service if successfully loaded, and
// a status and other inforamtion if the request fails.
type LoadMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of loading the mission.
	Status LoadMissionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.LoadMissionResponse_Status" json:"status,omitempty"`
	// Results from any leases that may have been used.
	// As part of mission validation, some of the non-mission leases may have been used.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,3,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
	// Provides the structure of the mission. Set when loading succeeds.
	MissionInfo *MissionInfo `protobuf:"bytes,4,opt,name=mission_info,json=missionInfo,proto3" json:"mission_info,omitempty"`
	// If certain nodes failed compilation or validation, they will be reported back in this field.
	FailedNodes []*FailedNode `protobuf:"bytes,5,rep,name=failed_nodes,json=failedNodes,proto3" json:"failed_nodes,omitempty"`
}

func (x *LoadMissionResponse) Reset() {
	*x = LoadMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadMissionResponse) ProtoMessage() {}

func (x *LoadMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadMissionResponse.ProtoReflect.Descriptor instead.
func (*LoadMissionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{15}
}

func (x *LoadMissionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *LoadMissionResponse) GetStatus() LoadMissionResponse_Status {
	if x != nil {
		return x.Status
	}
	return LoadMissionResponse_STATUS_UNKNOWN
}

func (x *LoadMissionResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

func (x *LoadMissionResponse) GetMissionInfo() *MissionInfo {
	if x != nil {
		return x.MissionInfo
	}
	return nil
}

func (x *LoadMissionResponse) GetFailedNodes() []*FailedNode {
	if x != nil {
		return x.FailedNodes
	}
	return nil
}

// Request mission information.
// This covers information that stays static until a new mission is loaded.
type GetInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetInfoRequest) Reset() {
	*x = GetInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoRequest) ProtoMessage() {}

func (x *GetInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoRequest.ProtoReflect.Descriptor instead.
func (*GetInfoRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{16}
}

func (x *GetInfoRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Provides the currently loaded mission's information.
type GetInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Description of the loaded mission's structure.
	// Unset if no mission has been successfully loaded.
	MissionInfo *MissionInfo `protobuf:"bytes,2,opt,name=mission_info,json=missionInfo,proto3" json:"mission_info,omitempty"`
}

func (x *GetInfoResponse) Reset() {
	*x = GetInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetInfoResponse) ProtoMessage() {}

func (x *GetInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetInfoResponse.ProtoReflect.Descriptor instead.
func (*GetInfoResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{17}
}

func (x *GetInfoResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetInfoResponse) GetMissionInfo() *MissionInfo {
	if x != nil {
		return x.MissionInfo
	}
	return nil
}

// The PauseMission request message will pause the mission that is currently executing, if there is one.
type PauseMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Lease on the mission service.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *PauseMissionRequest) Reset() {
	*x = PauseMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseMissionRequest) ProtoMessage() {}

func (x *PauseMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseMissionRequest.ProtoReflect.Descriptor instead.
func (*PauseMissionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{18}
}

func (x *PauseMissionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PauseMissionRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The PauseMission response message will return the status of the request.
type PauseMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of the pause request.
	Status PauseMissionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.PauseMissionResponse_Status" json:"status,omitempty"`
	// Result of the lease in the pause request.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,3,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *PauseMissionResponse) Reset() {
	*x = PauseMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PauseMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PauseMissionResponse) ProtoMessage() {}

func (x *PauseMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PauseMissionResponse.ProtoReflect.Descriptor instead.
func (*PauseMissionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{19}
}

func (x *PauseMissionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PauseMissionResponse) GetStatus() PauseMissionResponse_Status {
	if x != nil {
		return x.Status
	}
	return PauseMissionResponse_STATUS_UNKNOWN
}

func (x *PauseMissionResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// The StopMission request message will fully stop the mission.
type StopMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Lease on the mission service.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *StopMissionRequest) Reset() {
	*x = StopMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMissionRequest) ProtoMessage() {}

func (x *StopMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMissionRequest.ProtoReflect.Descriptor instead.
func (*StopMissionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{20}
}

func (x *StopMissionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopMissionRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The StopMission response message will return the status of the request.
type StopMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of the stop request.
	Status StopMissionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.mission.StopMissionResponse_Status" json:"status,omitempty"`
	// Result of the lease in the stop request.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,3,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *StopMissionResponse) Reset() {
	*x = StopMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopMissionResponse) ProtoMessage() {}

func (x *StopMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopMissionResponse.ProtoReflect.Descriptor instead.
func (*StopMissionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{21}
}

func (x *StopMissionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopMissionResponse) GetStatus() StopMissionResponse_Status {
	if x != nil {
		return x.Status
	}
	return StopMissionResponse_STATUS_UNKNOWN
}

func (x *StopMissionResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// For requesting the mission as it was loaded in LoadMission.
type GetMissionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetMissionRequest) Reset() {
	*x = GetMissionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMissionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMissionRequest) ProtoMessage() {}

func (x *GetMissionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMissionRequest.ProtoReflect.Descriptor instead.
func (*GetMissionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{22}
}

func (x *GetMissionRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Responding with the mission as it was loaded in LoadMission.
type GetMissionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Root node of the mission loaded.
	// Unset if no mission has been loaded.
	Root *Node `protobuf:"bytes,2,opt,name=root,proto3" json:"root,omitempty"`
	// Mission ID as reported in MissionInfo. -1 if no mission has been loaded.
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMissionResponse) Reset() {
	*x = GetMissionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMissionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMissionResponse) ProtoMessage() {}

func (x *GetMissionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMissionResponse.ProtoReflect.Descriptor instead.
func (*GetMissionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{23}
}

func (x *GetMissionResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetMissionResponse) GetRoot() *Node {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *GetMissionResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// A question that has been answered already.
type State_AnsweredQuestion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The question that this state information is related to.
	Question *Question `protobuf:"bytes,1,opt,name=question,proto3" json:"question,omitempty"`
	// The answer that was provided.
	AcceptedAnswerCode int64 `protobuf:"varint,2,opt,name=accepted_answer_code,json=acceptedAnswerCode,proto3" json:"accepted_answer_code,omitempty"`
}

func (x *State_AnsweredQuestion) Reset() {
	*x = State_AnsweredQuestion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_AnsweredQuestion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_AnsweredQuestion) ProtoMessage() {}

func (x *State_AnsweredQuestion) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_AnsweredQuestion.ProtoReflect.Descriptor instead.
func (*State_AnsweredQuestion) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{2, 0}
}

func (x *State_AnsweredQuestion) GetQuestion() *Question {
	if x != nil {
		return x.Question
	}
	return nil
}

func (x *State_AnsweredQuestion) GetAcceptedAnswerCode() int64 {
	if x != nil {
		return x.AcceptedAnswerCode
	}
	return 0
}

type State_NodeStatesAtTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tick counter when this state was produced.
	TickCounter int64 `protobuf:"varint,1,opt,name=tick_counter,json=tickCounter,proto3" json:"tick_counter,omitempty"`
	// Time at which this tick started, in host time basis.
	TickStartTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=tick_start_timestamp,json=tickStartTimestamp,proto3" json:"tick_start_timestamp,omitempty"`
	// At this tick, the state of every node that was ticked, in the order they were ticked.
	NodeStates []*State_NodeStatesAtTick_NodeState `protobuf:"bytes,3,rep,name=node_states,json=nodeStates,proto3" json:"node_states,omitempty"`
}

func (x *State_NodeStatesAtTick) Reset() {
	*x = State_NodeStatesAtTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_NodeStatesAtTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_NodeStatesAtTick) ProtoMessage() {}

func (x *State_NodeStatesAtTick) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_NodeStatesAtTick.ProtoReflect.Descriptor instead.
func (*State_NodeStatesAtTick) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{2, 1}
}

func (x *State_NodeStatesAtTick) GetTickCounter() int64 {
	if x != nil {
		return x.TickCounter
	}
	return 0
}

func (x *State_NodeStatesAtTick) GetTickStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.TickStartTimestamp
	}
	return nil
}

func (x *State_NodeStatesAtTick) GetNodeStates() []*State_NodeStatesAtTick_NodeState {
	if x != nil {
		return x.NodeStates
	}
	return nil
}

type State_NodeStatesAtTick_NodeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The result of this node's tick.
	Result Result `protobuf:"varint,1,opt,name=result,proto3,enum=bosdyn.api.mission.Result" json:"result,omitempty"`
	// May be set when the 'result' is RESULT_FAILURE or RESULT_ERROR, this describes why
	// the node failed. Not all nodes will have an error explaining why they failed.
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// ID from NodeInfo.
	Id int64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *State_NodeStatesAtTick_NodeState) Reset() {
	*x = State_NodeStatesAtTick_NodeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_mission_mission_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *State_NodeStatesAtTick_NodeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*State_NodeStatesAtTick_NodeState) ProtoMessage() {}

func (x *State_NodeStatesAtTick_NodeState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_mission_mission_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use State_NodeStatesAtTick_NodeState.ProtoReflect.Descriptor instead.
func (*State_NodeStatesAtTick_NodeState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_mission_mission_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *State_NodeStatesAtTick_NodeState) GetResult() Result {
	if x != nil {
		return x.Result
	}
	return Result_RESULT_UNKNOWN
}

func (x *State_NodeStatesAtTick_NodeState) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *State_NodeStatesAtTick_NodeState) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_bosdyn_api_mission_mission_proto protoreflect.FileDescriptor

var file_bosdyn_api_mission_mission_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x75, 0x74, 0x69, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x94, 0x02, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x18, 0x68, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x55, 0x70, 0x70, 0x65, 0x72, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x39, 0x0a, 0x18, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x15, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x4c, 0x6f, 0x77, 0x65,
	0x72, 0x54, 0x69, 0x63, 0x6b, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x68, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x50, 0x61, 0x73, 0x74, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x6c, 0x6f,
	0x77, 0x65, 0x72, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0xdf, 0x07, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x09,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x61, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x65, 0x64, 0x5f, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x11, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x41, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63,
	0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x1a, 0x7e, 0x0a, 0x10, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x65, 0x64, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x38, 0x0a, 0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65,
	0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xc1, 0x02, 0x0a, 0x10,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x41, 0x74, 0x54, 0x69, 0x63, 0x6b,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x14, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x12, 0x74,
	0x69, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x55, 0x0a, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x41, 0x74, 0x54, 0x69,
	0x63, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x6e, 0x6f,
	0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x65, 0x0a, 0x09, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xa2, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x55, 0x53, 0x45, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x06,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x07, 0x22, 0xbf, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3b, 0x0a,
	0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x66, 0x6f,
	0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x66,
	0x6f, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x6e, 0x6f, 0x6d, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x7f, 0x0a, 0x15, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x71, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x9b, 0x02, 0x0a, 0x16, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x81, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x51, 0x55, 0x45, 0x53, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x41, 0x4e, 0x53, 0x57, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x04, 0x22, 0x4f, 0x0a, 0x0b, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x22, 0xa3, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0x5b, 0x0a, 0x0a,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x70, 0x6c, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x70,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xeb, 0x01, 0x0a, 0x12, 0x50, 0x6c,
	0x61, 0x79, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0xdc, 0x01, 0x0a, 0x0c, 0x50, 0x6c, 0x61, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45,
	0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x0d,
	0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x40, 0x0a,
	0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x45, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x9d, 0x02, 0x0a, 0x13, 0x50, 0x6c, 0x61, 0x79, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x22, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x22, 0xee, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x61, 0x75, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29,
	0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x81, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x5d, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xa0, 0x01, 0x0a, 0x12,
	0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x72,
	0x6f, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22, 0xc2,
	0x03, 0x0a, 0x13, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41,
	0x0a, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x60, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x49, 0x4c, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x03, 0x22, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x42, 0x0a, 0x0c, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x22, 0x71, 0x0a, 0x13, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xa5, 0x02, 0x0a, 0x14, 0x50, 0x61, 0x75, 0x73,
	0x65, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x75, 0x73, 0x65, 0x4d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a,
	0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22,
	0x70, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0xa3, 0x02, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x4a, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x4c,
	0x41, 0x59, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x86, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x42, 0x49, 0x42, 0x0c, 0x4d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_mission_mission_proto_rawDescOnce sync.Once
	file_bosdyn_api_mission_mission_proto_rawDescData = file_bosdyn_api_mission_mission_proto_rawDesc
)

func file_bosdyn_api_mission_mission_proto_rawDescGZIP() []byte {
	file_bosdyn_api_mission_mission_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_mission_mission_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_mission_mission_proto_rawDescData)
	})
	return file_bosdyn_api_mission_mission_proto_rawDescData
}

var file_bosdyn_api_mission_mission_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_bosdyn_api_mission_mission_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_bosdyn_api_mission_mission_proto_goTypes = []interface{}{
	(State_Status)(0),                        // 0: bosdyn.api.mission.State.Status
	(AnswerQuestionResponse_Status)(0),       // 1: bosdyn.api.mission.AnswerQuestionResponse.Status
	(PlayMissionResponse_Status)(0),          // 2: bosdyn.api.mission.PlayMissionResponse.Status
	(RestartMissionResponse_Status)(0),       // 3: bosdyn.api.mission.RestartMissionResponse.Status
	(LoadMissionResponse_Status)(0),          // 4: bosdyn.api.mission.LoadMissionResponse.Status
	(PauseMissionResponse_Status)(0),         // 5: bosdyn.api.mission.PauseMissionResponse.Status
	(StopMissionResponse_Status)(0),          // 6: bosdyn.api.mission.StopMissionResponse.Status
	(*GetStateRequest)(nil),                  // 7: bosdyn.api.mission.GetStateRequest
	(*GetStateResponse)(nil),                 // 8: bosdyn.api.mission.GetStateResponse
	(*State)(nil),                            // 9: bosdyn.api.mission.State
	(*Question)(nil),                         // 10: bosdyn.api.mission.Question
	(*AnswerQuestionRequest)(nil),            // 11: bosdyn.api.mission.AnswerQuestionRequest
	(*AnswerQuestionResponse)(nil),           // 12: bosdyn.api.mission.AnswerQuestionResponse
	(*MissionInfo)(nil),                      // 13: bosdyn.api.mission.MissionInfo
	(*NodeInfo)(nil),                         // 14: bosdyn.api.mission.NodeInfo
	(*FailedNode)(nil),                       // 15: bosdyn.api.mission.FailedNode
	(*PlayMissionRequest)(nil),               // 16: bosdyn.api.mission.PlayMissionRequest
	(*PlaySettings)(nil),                     // 17: bosdyn.api.mission.PlaySettings
	(*PlayMissionResponse)(nil),              // 18: bosdyn.api.mission.PlayMissionResponse
	(*RestartMissionRequest)(nil),            // 19: bosdyn.api.mission.RestartMissionRequest
	(*RestartMissionResponse)(nil),           // 20: bosdyn.api.mission.RestartMissionResponse
	(*LoadMissionRequest)(nil),               // 21: bosdyn.api.mission.LoadMissionRequest
	(*LoadMissionResponse)(nil),              // 22: bosdyn.api.mission.LoadMissionResponse
	(*GetInfoRequest)(nil),                   // 23: bosdyn.api.mission.GetInfoRequest
	(*GetInfoResponse)(nil),                  // 24: bosdyn.api.mission.GetInfoResponse
	(*PauseMissionRequest)(nil),              // 25: bosdyn.api.mission.PauseMissionRequest
	(*PauseMissionResponse)(nil),             // 26: bosdyn.api.mission.PauseMissionResponse
	(*StopMissionRequest)(nil),               // 27: bosdyn.api.mission.StopMissionRequest
	(*StopMissionResponse)(nil),              // 28: bosdyn.api.mission.StopMissionResponse
	(*GetMissionRequest)(nil),                // 29: bosdyn.api.mission.GetMissionRequest
	(*GetMissionResponse)(nil),               // 30: bosdyn.api.mission.GetMissionResponse
	(*State_AnsweredQuestion)(nil),           // 31: bosdyn.api.mission.State.AnsweredQuestion
	(*State_NodeStatesAtTick)(nil),           // 32: bosdyn.api.mission.State.NodeStatesAtTick
	(*State_NodeStatesAtTick_NodeState)(nil), // 33: bosdyn.api.mission.State.NodeStatesAtTick.NodeState
	(*api.RequestHeader)(nil),                // 34: bosdyn.api.RequestHeader
	(*wrapperspb.Int64Value)(nil),            // 35: google.protobuf.Int64Value
	(*api.ResponseHeader)(nil),               // 36: bosdyn.api.ResponseHeader
	(*Prompt_Option)(nil),                    // 37: bosdyn.api.mission.Prompt.Option
	(*UserData)(nil),                         // 38: bosdyn.api.mission.UserData
	(*timestamppb.Timestamp)(nil),            // 39: google.protobuf.Timestamp
	(*api.Lease)(nil),                        // 40: bosdyn.api.Lease
	(*api.SE2VelocityLimit)(nil),             // 41: bosdyn.api.SE2VelocityLimit
	(*api.LeaseUseResult)(nil),               // 42: bosdyn.api.LeaseUseResult
	(*Node)(nil),                             // 43: bosdyn.api.mission.Node
	(Result)(0),                              // 44: bosdyn.api.mission.Result
}
var file_bosdyn_api_mission_mission_proto_depIdxs = []int32{
	34, // 0: bosdyn.api.mission.GetStateRequest.header:type_name -> bosdyn.api.RequestHeader
	35, // 1: bosdyn.api.mission.GetStateRequest.history_upper_tick_bound:type_name -> google.protobuf.Int64Value
	36, // 2: bosdyn.api.mission.GetStateResponse.header:type_name -> bosdyn.api.ResponseHeader
	9,  // 3: bosdyn.api.mission.GetStateResponse.state:type_name -> bosdyn.api.mission.State
	10, // 4: bosdyn.api.mission.State.questions:type_name -> bosdyn.api.mission.Question
	31, // 5: bosdyn.api.mission.State.answered_questions:type_name -> bosdyn.api.mission.State.AnsweredQuestion
	32, // 6: bosdyn.api.mission.State.history:type_name -> bosdyn.api.mission.State.NodeStatesAtTick
	0,  // 7: bosdyn.api.mission.State.status:type_name -> bosdyn.api.mission.State.Status
	37, // 8: bosdyn.api.mission.Question.options:type_name -> bosdyn.api.mission.Prompt.Option
	34, // 9: bosdyn.api.mission.AnswerQuestionRequest.header:type_name -> bosdyn.api.RequestHeader
	36, // 10: bosdyn.api.mission.AnswerQuestionResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 11: bosdyn.api.mission.AnswerQuestionResponse.status:type_name -> bosdyn.api.mission.AnswerQuestionResponse.Status
	14, // 12: bosdyn.api.mission.MissionInfo.root:type_name -> bosdyn.api.mission.NodeInfo
	38, // 13: bosdyn.api.mission.NodeInfo.user_data:type_name -> bosdyn.api.mission.UserData
	14, // 14: bosdyn.api.mission.NodeInfo.children:type_name -> bosdyn.api.mission.NodeInfo
	34, // 15: bosdyn.api.mission.PlayMissionRequest.header:type_name -> bosdyn.api.RequestHeader
	39, // 16: bosdyn.api.mission.PlayMissionRequest.pause_time:type_name -> google.protobuf.Timestamp
	40, // 17: bosdyn.api.mission.PlayMissionRequest.leases:type_name -> bosdyn.api.Lease
	17, // 18: bosdyn.api.mission.PlayMissionRequest.settings:type_name -> bosdyn.api.mission.PlaySettings
	41, // 19: bosdyn.api.mission.PlaySettings.velocity_limit:type_name -> bosdyn.api.SE2VelocityLimit
	36, // 20: bosdyn.api.mission.PlayMissionResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 21: bosdyn.api.mission.PlayMissionResponse.status:type_name -> bosdyn.api.mission.PlayMissionResponse.Status
	42, // 22: bosdyn.api.mission.PlayMissionResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	34, // 23: bosdyn.api.mission.RestartMissionRequest.header:type_name -> bosdyn.api.RequestHeader
	39, // 24: bosdyn.api.mission.RestartMissionRequest.pause_time:type_name -> google.protobuf.Timestamp
	40, // 25: bosdyn.api.mission.RestartMissionRequest.leases:type_name -> bosdyn.api.Lease
	17, // 26: bosdyn.api.mission.RestartMissionRequest.settings:type_name -> bosdyn.api.mission.PlaySettings
	36, // 27: bosdyn.api.mission.RestartMissionResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 28: bosdyn.api.mission.RestartMissionResponse.status:type_name -> bosdyn.api.mission.RestartMissionResponse.Status
	42, // 29: bosdyn.api.mission.RestartMissionResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	15, // 30: bosdyn.api.mission.RestartMissionResponse.failed_nodes:type_name -> bosdyn.api.mission.FailedNode
	34, // 31: bosdyn.api.mission.LoadMissionRequest.header:type_name -> bosdyn.api.RequestHeader
	43, // 32: bosdyn.api.mission.LoadMissionRequest.root:type_name -> bosdyn.api.mission.Node
	40, // 33: bosdyn.api.mission.LoadMissionRequest.leases:type_name -> bosdyn.api.Lease
	36, // 34: bosdyn.api.mission.LoadMissionResponse.header:type_name -> bosdyn.api.ResponseHeader
	4,  // 35: bosdyn.api.mission.LoadMissionResponse.status:type_name -> bosdyn.api.mission.LoadMissionResponse.Status
	42, // 36: bosdyn.api.mission.LoadMissionResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	13, // 37: bosdyn.api.mission.LoadMissionResponse.mission_info:type_name -> bosdyn.api.mission.MissionInfo
	15, // 38: bosdyn.api.mission.LoadMissionResponse.failed_nodes:type_name -> bosdyn.api.mission.FailedNode
	34, // 39: bosdyn.api.mission.GetInfoRequest.header:type_name -> bosdyn.api.RequestHeader
	36, // 40: bosdyn.api.mission.GetInfoResponse.header:type_name -> bosdyn.api.ResponseHeader
	13, // 41: bosdyn.api.mission.GetInfoResponse.mission_info:type_name -> bosdyn.api.mission.MissionInfo
	34, // 42: bosdyn.api.mission.PauseMissionRequest.header:type_name -> bosdyn.api.RequestHeader
	40, // 43: bosdyn.api.mission.PauseMissionRequest.lease:type_name -> bosdyn.api.Lease
	36, // 44: bosdyn.api.mission.PauseMissionResponse.header:type_name -> bosdyn.api.ResponseHeader
	5,  // 45: bosdyn.api.mission.PauseMissionResponse.status:type_name -> bosdyn.api.mission.PauseMissionResponse.Status
	42, // 46: bosdyn.api.mission.PauseMissionResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	34, // 47: bosdyn.api.mission.StopMissionRequest.header:type_name -> bosdyn.api.RequestHeader
	40, // 48: bosdyn.api.mission.StopMissionRequest.lease:type_name -> bosdyn.api.Lease
	36, // 49: bosdyn.api.mission.StopMissionResponse.header:type_name -> bosdyn.api.ResponseHeader
	6,  // 50: bosdyn.api.mission.StopMissionResponse.status:type_name -> bosdyn.api.mission.StopMissionResponse.Status
	42, // 51: bosdyn.api.mission.StopMissionResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	34, // 52: bosdyn.api.mission.GetMissionRequest.header:type_name -> bosdyn.api.RequestHeader
	36, // 53: bosdyn.api.mission.GetMissionResponse.header:type_name -> bosdyn.api.ResponseHeader
	43, // 54: bosdyn.api.mission.GetMissionResponse.root:type_name -> bosdyn.api.mission.Node
	10, // 55: bosdyn.api.mission.State.AnsweredQuestion.question:type_name -> bosdyn.api.mission.Question
	39, // 56: bosdyn.api.mission.State.NodeStatesAtTick.tick_start_timestamp:type_name -> google.protobuf.Timestamp
	33, // 57: bosdyn.api.mission.State.NodeStatesAtTick.node_states:type_name -> bosdyn.api.mission.State.NodeStatesAtTick.NodeState
	44, // 58: bosdyn.api.mission.State.NodeStatesAtTick.NodeState.result:type_name -> bosdyn.api.mission.Result
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_bosdyn_api_mission_mission_proto_init() }
func file_bosdyn_api_mission_mission_proto_init() {
	if File_bosdyn_api_mission_mission_proto != nil {
		return
	}
	file_bosdyn_api_mission_nodes_proto_init()
	file_bosdyn_api_mission_util_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_mission_mission_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Question); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnswerQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MissionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlaySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestartMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PauseMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMissionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMissionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_AnsweredQuestion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_NodeStatesAtTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_mission_mission_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*State_NodeStatesAtTick_NodeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_mission_mission_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*GetStateRequest_HistoryLowerTickBound)(nil),
		(*GetStateRequest_HistoryPastTicks)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_mission_mission_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_mission_mission_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_mission_mission_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_mission_mission_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_mission_mission_proto_msgTypes,
	}.Build()
	File_bosdyn_api_mission_mission_proto = out.File
	file_bosdyn_api_mission_mission_proto_rawDesc = nil
	file_bosdyn_api_mission_mission_proto_goTypes = nil
	file_bosdyn_api_mission_mission_proto_depIdxs = nil
}
