// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/mission/mission_service.proto

package mission

import (
	context "context"
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MissionServiceClient is the client API for MissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MissionServiceClient interface {
	// Load a mission to run later.
	LoadMission(ctx context.Context, in *LoadMissionRequest, opts ...grpc.CallOption) (*LoadMissionResponse, error)
	// Alternative loading method for large missions, that allows you to break the
	// mission up into multiple streamed requests.  The data chunks should deserialize
	// into a LoadMissionRequest
	LoadMissionAsChunks(ctx context.Context, opts ...grpc.CallOption) (MissionService_LoadMissionAsChunksClient, error)
	// Start executing a loaded mission.
	// Will not restart a mission that has run to completion. Use RestartMission to do that.
	PlayMission(ctx context.Context, in *PlayMissionRequest, opts ...grpc.CallOption) (*PlayMissionResponse, error)
	// Pause mission execution.
	PauseMission(ctx context.Context, in *PauseMissionRequest, opts ...grpc.CallOption) (*PauseMissionResponse, error)
	// Stop a running mission.
	// Must use RestartMission, not PlayMission, to begin from the beginning.
	StopMission(ctx context.Context, in *StopMissionRequest, opts ...grpc.CallOption) (*StopMissionResponse, error)
	// Start executing a loaded mission from the beginning.
	// Does not need to be called after LoadMission.
	RestartMission(ctx context.Context, in *RestartMissionRequest, opts ...grpc.CallOption) (*RestartMissionResponse, error)
	// Get the state of the mission.
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
	// Get static information regarding the mission. Used to interpret mission state.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// Download the mission as it was uploaded to the service.
	GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error)
	// Specify an answer to the question asked by the mission.
	AnswerQuestion(ctx context.Context, in *AnswerQuestionRequest, opts ...grpc.CallOption) (*AnswerQuestionResponse, error)
}

type missionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMissionServiceClient(cc grpc.ClientConnInterface) MissionServiceClient {
	return &missionServiceClient{cc}
}

func (c *missionServiceClient) LoadMission(ctx context.Context, in *LoadMissionRequest, opts ...grpc.CallOption) (*LoadMissionResponse, error) {
	out := new(LoadMissionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/LoadMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) LoadMissionAsChunks(ctx context.Context, opts ...grpc.CallOption) (MissionService_LoadMissionAsChunksClient, error) {
	stream, err := c.cc.NewStream(ctx, &MissionService_ServiceDesc.Streams[0], "/bosdyn.api.mission.MissionService/LoadMissionAsChunks", opts...)
	if err != nil {
		return nil, err
	}
	x := &missionServiceLoadMissionAsChunksClient{stream}
	return x, nil
}

type MissionService_LoadMissionAsChunksClient interface {
	Send(*api.DataChunk) error
	CloseAndRecv() (*LoadMissionResponse, error)
	grpc.ClientStream
}

type missionServiceLoadMissionAsChunksClient struct {
	grpc.ClientStream
}

func (x *missionServiceLoadMissionAsChunksClient) Send(m *api.DataChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *missionServiceLoadMissionAsChunksClient) CloseAndRecv() (*LoadMissionResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(LoadMissionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *missionServiceClient) PlayMission(ctx context.Context, in *PlayMissionRequest, opts ...grpc.CallOption) (*PlayMissionResponse, error) {
	out := new(PlayMissionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/PlayMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) PauseMission(ctx context.Context, in *PauseMissionRequest, opts ...grpc.CallOption) (*PauseMissionResponse, error) {
	out := new(PauseMissionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/PauseMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) StopMission(ctx context.Context, in *StopMissionRequest, opts ...grpc.CallOption) (*StopMissionResponse, error) {
	out := new(StopMissionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/StopMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) RestartMission(ctx context.Context, in *RestartMissionRequest, opts ...grpc.CallOption) (*RestartMissionResponse, error) {
	out := new(RestartMissionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/RestartMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/GetState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/GetInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) GetMission(ctx context.Context, in *GetMissionRequest, opts ...grpc.CallOption) (*GetMissionResponse, error) {
	out := new(GetMissionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/GetMission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *missionServiceClient) AnswerQuestion(ctx context.Context, in *AnswerQuestionRequest, opts ...grpc.CallOption) (*AnswerQuestionResponse, error) {
	out := new(AnswerQuestionResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.mission.MissionService/AnswerQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MissionServiceServer is the server API for MissionService service.
// All implementations must embed UnimplementedMissionServiceServer
// for forward compatibility
type MissionServiceServer interface {
	// Load a mission to run later.
	LoadMission(context.Context, *LoadMissionRequest) (*LoadMissionResponse, error)
	// Alternative loading method for large missions, that allows you to break the
	// mission up into multiple streamed requests.  The data chunks should deserialize
	// into a LoadMissionRequest
	LoadMissionAsChunks(MissionService_LoadMissionAsChunksServer) error
	// Start executing a loaded mission.
	// Will not restart a mission that has run to completion. Use RestartMission to do that.
	PlayMission(context.Context, *PlayMissionRequest) (*PlayMissionResponse, error)
	// Pause mission execution.
	PauseMission(context.Context, *PauseMissionRequest) (*PauseMissionResponse, error)
	// Stop a running mission.
	// Must use RestartMission, not PlayMission, to begin from the beginning.
	StopMission(context.Context, *StopMissionRequest) (*StopMissionResponse, error)
	// Start executing a loaded mission from the beginning.
	// Does not need to be called after LoadMission.
	RestartMission(context.Context, *RestartMissionRequest) (*RestartMissionResponse, error)
	// Get the state of the mission.
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	// Get static information regarding the mission. Used to interpret mission state.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// Download the mission as it was uploaded to the service.
	GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error)
	// Specify an answer to the question asked by the mission.
	AnswerQuestion(context.Context, *AnswerQuestionRequest) (*AnswerQuestionResponse, error)
	mustEmbedUnimplementedMissionServiceServer()
}

// UnimplementedMissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMissionServiceServer struct {
}

func (UnimplementedMissionServiceServer) LoadMission(context.Context, *LoadMissionRequest) (*LoadMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMission not implemented")
}
func (UnimplementedMissionServiceServer) LoadMissionAsChunks(MissionService_LoadMissionAsChunksServer) error {
	return status.Errorf(codes.Unimplemented, "method LoadMissionAsChunks not implemented")
}
func (UnimplementedMissionServiceServer) PlayMission(context.Context, *PlayMissionRequest) (*PlayMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlayMission not implemented")
}
func (UnimplementedMissionServiceServer) PauseMission(context.Context, *PauseMissionRequest) (*PauseMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseMission not implemented")
}
func (UnimplementedMissionServiceServer) StopMission(context.Context, *StopMissionRequest) (*StopMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopMission not implemented")
}
func (UnimplementedMissionServiceServer) RestartMission(context.Context, *RestartMissionRequest) (*RestartMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartMission not implemented")
}
func (UnimplementedMissionServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedMissionServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedMissionServiceServer) GetMission(context.Context, *GetMissionRequest) (*GetMissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMission not implemented")
}
func (UnimplementedMissionServiceServer) AnswerQuestion(context.Context, *AnswerQuestionRequest) (*AnswerQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerQuestion not implemented")
}
func (UnimplementedMissionServiceServer) mustEmbedUnimplementedMissionServiceServer() {}

// UnsafeMissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MissionServiceServer will
// result in compilation errors.
type UnsafeMissionServiceServer interface {
	mustEmbedUnimplementedMissionServiceServer()
}

func RegisterMissionServiceServer(s grpc.ServiceRegistrar, srv MissionServiceServer) {
	s.RegisterService(&MissionService_ServiceDesc, srv)
}

func _MissionService_LoadMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).LoadMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/LoadMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).LoadMission(ctx, req.(*LoadMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_LoadMissionAsChunks_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MissionServiceServer).LoadMissionAsChunks(&missionServiceLoadMissionAsChunksServer{stream})
}

type MissionService_LoadMissionAsChunksServer interface {
	SendAndClose(*LoadMissionResponse) error
	Recv() (*api.DataChunk, error)
	grpc.ServerStream
}

type missionServiceLoadMissionAsChunksServer struct {
	grpc.ServerStream
}

func (x *missionServiceLoadMissionAsChunksServer) SendAndClose(m *LoadMissionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *missionServiceLoadMissionAsChunksServer) Recv() (*api.DataChunk, error) {
	m := new(api.DataChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MissionService_PlayMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).PlayMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/PlayMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).PlayMission(ctx, req.(*PlayMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_PauseMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PauseMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).PauseMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/PauseMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).PauseMission(ctx, req.(*PauseMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_StopMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).StopMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/StopMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).StopMission(ctx, req.(*StopMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_RestartMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).RestartMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/RestartMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).RestartMission(ctx, req.(*RestartMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/GetState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/GetInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_GetMission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).GetMission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/GetMission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).GetMission(ctx, req.(*GetMissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MissionService_AnswerQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnswerQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MissionServiceServer).AnswerQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.mission.MissionService/AnswerQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MissionServiceServer).AnswerQuestion(ctx, req.(*AnswerQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MissionService_ServiceDesc is the grpc.ServiceDesc for MissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.mission.MissionService",
	HandlerType: (*MissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadMission",
			Handler:    _MissionService_LoadMission_Handler,
		},
		{
			MethodName: "PlayMission",
			Handler:    _MissionService_PlayMission_Handler,
		},
		{
			MethodName: "PauseMission",
			Handler:    _MissionService_PauseMission_Handler,
		},
		{
			MethodName: "StopMission",
			Handler:    _MissionService_StopMission_Handler,
		},
		{
			MethodName: "RestartMission",
			Handler:    _MissionService_RestartMission_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _MissionService_GetState_Handler,
		},
		{
			MethodName: "GetInfo",
			Handler:    _MissionService_GetInfo_Handler,
		},
		{
			MethodName: "GetMission",
			Handler:    _MissionService_GetMission_Handler,
		},
		{
			MethodName: "AnswerQuestion",
			Handler:    _MissionService_AnswerQuestion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoadMissionAsChunks",
			Handler:       _MissionService_LoadMissionAsChunks_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "bosdyn/api/mission/mission_service.proto",
}
