// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/time_sync_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeSyncServiceClient is the client API for TimeSyncService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeSyncServiceClient interface {
	// See the exchange documentation in time_sync.proto. This call makes one client/server
	// round trip toward clock synchronization.
	TimeSyncUpdate(ctx context.Context, in *TimeSyncUpdateRequest, opts ...grpc.CallOption) (*TimeSyncUpdateResponse, error)
}

type timeSyncServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeSyncServiceClient(cc grpc.ClientConnInterface) TimeSyncServiceClient {
	return &timeSyncServiceClient{cc}
}

func (c *timeSyncServiceClient) TimeSyncUpdate(ctx context.Context, in *TimeSyncUpdateRequest, opts ...grpc.CallOption) (*TimeSyncUpdateResponse, error) {
	out := new(TimeSyncUpdateResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.TimeSyncService/TimeSyncUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeSyncServiceServer is the server API for TimeSyncService service.
// All implementations must embed UnimplementedTimeSyncServiceServer
// for forward compatibility
type TimeSyncServiceServer interface {
	// See the exchange documentation in time_sync.proto. This call makes one client/server
	// round trip toward clock synchronization.
	TimeSyncUpdate(context.Context, *TimeSyncUpdateRequest) (*TimeSyncUpdateResponse, error)
	mustEmbedUnimplementedTimeSyncServiceServer()
}

// UnimplementedTimeSyncServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTimeSyncServiceServer struct {
}

func (UnimplementedTimeSyncServiceServer) TimeSyncUpdate(context.Context, *TimeSyncUpdateRequest) (*TimeSyncUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeSyncUpdate not implemented")
}
func (UnimplementedTimeSyncServiceServer) mustEmbedUnimplementedTimeSyncServiceServer() {}

// UnsafeTimeSyncServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeSyncServiceServer will
// result in compilation errors.
type UnsafeTimeSyncServiceServer interface {
	mustEmbedUnimplementedTimeSyncServiceServer()
}

func RegisterTimeSyncServiceServer(s grpc.ServiceRegistrar, srv TimeSyncServiceServer) {
	s.RegisterService(&TimeSyncService_ServiceDesc, srv)
}

func _TimeSyncService_TimeSyncUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimeSyncUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeSyncServiceServer).TimeSyncUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.TimeSyncService/TimeSyncUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeSyncServiceServer).TimeSyncUpdate(ctx, req.(*TimeSyncUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeSyncService_ServiceDesc is the grpc.ServiceDesc for TimeSyncService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeSyncService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.TimeSyncService",
	HandlerType: (*TimeSyncServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TimeSyncUpdate",
			Handler:    _TimeSyncService_TimeSyncUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/time_sync_service.proto",
}
