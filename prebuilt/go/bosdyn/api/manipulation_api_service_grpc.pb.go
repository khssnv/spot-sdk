// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/manipulation_api_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManipulationApiServiceClient is the client API for ManipulationApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManipulationApiServiceClient interface {
	ManipulationApi(ctx context.Context, in *ManipulationApiRequest, opts ...grpc.CallOption) (*ManipulationApiResponse, error)
	ManipulationApiFeedback(ctx context.Context, in *ManipulationApiFeedbackRequest, opts ...grpc.CallOption) (*ManipulationApiFeedbackResponse, error)
	OverrideGrasp(ctx context.Context, in *ApiGraspOverrideRequest, opts ...grpc.CallOption) (*ApiGraspOverrideResponse, error)
}

type manipulationApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManipulationApiServiceClient(cc grpc.ClientConnInterface) ManipulationApiServiceClient {
	return &manipulationApiServiceClient{cc}
}

func (c *manipulationApiServiceClient) ManipulationApi(ctx context.Context, in *ManipulationApiRequest, opts ...grpc.CallOption) (*ManipulationApiResponse, error) {
	out := new(ManipulationApiResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.ManipulationApiService/ManipulationApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manipulationApiServiceClient) ManipulationApiFeedback(ctx context.Context, in *ManipulationApiFeedbackRequest, opts ...grpc.CallOption) (*ManipulationApiFeedbackResponse, error) {
	out := new(ManipulationApiFeedbackResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.ManipulationApiService/ManipulationApiFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manipulationApiServiceClient) OverrideGrasp(ctx context.Context, in *ApiGraspOverrideRequest, opts ...grpc.CallOption) (*ApiGraspOverrideResponse, error) {
	out := new(ApiGraspOverrideResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.ManipulationApiService/OverrideGrasp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManipulationApiServiceServer is the server API for ManipulationApiService service.
// All implementations must embed UnimplementedManipulationApiServiceServer
// for forward compatibility
type ManipulationApiServiceServer interface {
	ManipulationApi(context.Context, *ManipulationApiRequest) (*ManipulationApiResponse, error)
	ManipulationApiFeedback(context.Context, *ManipulationApiFeedbackRequest) (*ManipulationApiFeedbackResponse, error)
	OverrideGrasp(context.Context, *ApiGraspOverrideRequest) (*ApiGraspOverrideResponse, error)
	mustEmbedUnimplementedManipulationApiServiceServer()
}

// UnimplementedManipulationApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManipulationApiServiceServer struct {
}

func (UnimplementedManipulationApiServiceServer) ManipulationApi(context.Context, *ManipulationApiRequest) (*ManipulationApiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManipulationApi not implemented")
}
func (UnimplementedManipulationApiServiceServer) ManipulationApiFeedback(context.Context, *ManipulationApiFeedbackRequest) (*ManipulationApiFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManipulationApiFeedback not implemented")
}
func (UnimplementedManipulationApiServiceServer) OverrideGrasp(context.Context, *ApiGraspOverrideRequest) (*ApiGraspOverrideResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OverrideGrasp not implemented")
}
func (UnimplementedManipulationApiServiceServer) mustEmbedUnimplementedManipulationApiServiceServer() {
}

// UnsafeManipulationApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManipulationApiServiceServer will
// result in compilation errors.
type UnsafeManipulationApiServiceServer interface {
	mustEmbedUnimplementedManipulationApiServiceServer()
}

func RegisterManipulationApiServiceServer(s grpc.ServiceRegistrar, srv ManipulationApiServiceServer) {
	s.RegisterService(&ManipulationApiService_ServiceDesc, srv)
}

func _ManipulationApiService_ManipulationApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulationApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManipulationApiServiceServer).ManipulationApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.ManipulationApiService/ManipulationApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManipulationApiServiceServer).ManipulationApi(ctx, req.(*ManipulationApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManipulationApiService_ManipulationApiFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManipulationApiFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManipulationApiServiceServer).ManipulationApiFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.ManipulationApiService/ManipulationApiFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManipulationApiServiceServer).ManipulationApiFeedback(ctx, req.(*ManipulationApiFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManipulationApiService_OverrideGrasp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiGraspOverrideRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManipulationApiServiceServer).OverrideGrasp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.ManipulationApiService/OverrideGrasp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManipulationApiServiceServer).OverrideGrasp(ctx, req.(*ApiGraspOverrideRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ManipulationApiService_ServiceDesc is the grpc.ServiceDesc for ManipulationApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManipulationApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.ManipulationApiService",
	HandlerType: (*ManipulationApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ManipulationApi",
			Handler:    _ManipulationApiService_ManipulationApi_Handler,
		},
		{
			MethodName: "ManipulationApiFeedback",
			Handler:    _ManipulationApiService_ManipulationApiFeedback_Handler,
		},
		{
			MethodName: "OverrideGrasp",
			Handler:    _ManipulationApiService_OverrideGrasp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/manipulation_api_service.proto",
}
