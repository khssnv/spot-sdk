// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/manipulation_api.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GraspPositionConstraint int32

const (
	GraspPositionConstraint_GRASP_POSITION_CONSTRAINT_UNKNOWN                GraspPositionConstraint = 0
	GraspPositionConstraint_GRASP_POSITION_CONSTRAINT_NORMAL                 GraspPositionConstraint = 1
	GraspPositionConstraint_GRASP_POSITION_CONSTRAINT_FIXED_AT_USER_POSITION GraspPositionConstraint = 2
)

// Enum value maps for GraspPositionConstraint.
var (
	GraspPositionConstraint_name = map[int32]string{
		0: "GRASP_POSITION_CONSTRAINT_UNKNOWN",
		1: "GRASP_POSITION_CONSTRAINT_NORMAL",
		2: "GRASP_POSITION_CONSTRAINT_FIXED_AT_USER_POSITION",
	}
	GraspPositionConstraint_value = map[string]int32{
		"GRASP_POSITION_CONSTRAINT_UNKNOWN":                0,
		"GRASP_POSITION_CONSTRAINT_NORMAL":                 1,
		"GRASP_POSITION_CONSTRAINT_FIXED_AT_USER_POSITION": 2,
	}
)

func (x GraspPositionConstraint) Enum() *GraspPositionConstraint {
	p := new(GraspPositionConstraint)
	*p = x
	return p
}

func (x GraspPositionConstraint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GraspPositionConstraint) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_manipulation_api_proto_enumTypes[0].Descriptor()
}

func (GraspPositionConstraint) Type() protoreflect.EnumType {
	return &file_bosdyn_api_manipulation_api_proto_enumTypes[0]
}

func (x GraspPositionConstraint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GraspPositionConstraint.Descriptor instead.
func (GraspPositionConstraint) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{0}
}

type ManipulationFeedbackState int32

const (
	ManipulationFeedbackState_MANIP_STATE_UNKNOWN                    ManipulationFeedbackState = 0
	ManipulationFeedbackState_MANIP_STATE_DONE                       ManipulationFeedbackState = 1
	ManipulationFeedbackState_MANIP_STATE_SEARCHING_FOR_GRASP        ManipulationFeedbackState = 2
	ManipulationFeedbackState_MANIP_STATE_MOVING_TO_GRASP            ManipulationFeedbackState = 3
	ManipulationFeedbackState_MANIP_STATE_GRASPING_OBJECT            ManipulationFeedbackState = 4
	ManipulationFeedbackState_MANIP_STATE_PLACING_OBJECT             ManipulationFeedbackState = 5
	ManipulationFeedbackState_MANIP_STATE_GRASP_SUCCEEDED            ManipulationFeedbackState = 6
	ManipulationFeedbackState_MANIP_STATE_GRASP_FAILED               ManipulationFeedbackState = 7
	ManipulationFeedbackState_MANIP_STATE_GRASP_PLANNING_SUCCEEDED   ManipulationFeedbackState = 11
	ManipulationFeedbackState_MANIP_STATE_GRASP_PLANNING_NO_SOLUTION ManipulationFeedbackState = 8
	// Note: if you are experiencing raycast failures during grasping, consider using a different
	// grasping call that does not require the robot to automatically walk up to the grasp.
	ManipulationFeedbackState_MANIP_STATE_GRASP_FAILED_TO_RAYCAST_INTO_MAP ManipulationFeedbackState = 9
	// The grasp planner is waiting for the gaze to have the target object not on the edge of the
	// camera view.  If you are seeing this in an automatic mode, the robot will soon retarget the
	// grasp for you.  If you are seeing this in a non-auto mode, you'll need to change your gaze
	// to have the target object more in the center of the hand-camera's view.
	ManipulationFeedbackState_MANIP_STATE_GRASP_PLANNING_WAITING_DATA_AT_EDGE ManipulationFeedbackState = 13
	ManipulationFeedbackState_MANIP_STATE_WALKING_TO_OBJECT                   ManipulationFeedbackState = 10
	ManipulationFeedbackState_MANIP_STATE_ATTEMPTING_RAYCASTING               ManipulationFeedbackState = 12
	ManipulationFeedbackState_MANIP_STATE_MOVING_TO_PLACE                     ManipulationFeedbackState = 14
	ManipulationFeedbackState_MANIP_STATE_PLACE_FAILED_TO_RAYCAST_INTO_MAP    ManipulationFeedbackState = 15
	ManipulationFeedbackState_MANIP_STATE_PLACE_SUCCEEDED                     ManipulationFeedbackState = 16
	ManipulationFeedbackState_MANIP_STATE_PLACE_FAILED                        ManipulationFeedbackState = 17
)

// Enum value maps for ManipulationFeedbackState.
var (
	ManipulationFeedbackState_name = map[int32]string{
		0:  "MANIP_STATE_UNKNOWN",
		1:  "MANIP_STATE_DONE",
		2:  "MANIP_STATE_SEARCHING_FOR_GRASP",
		3:  "MANIP_STATE_MOVING_TO_GRASP",
		4:  "MANIP_STATE_GRASPING_OBJECT",
		5:  "MANIP_STATE_PLACING_OBJECT",
		6:  "MANIP_STATE_GRASP_SUCCEEDED",
		7:  "MANIP_STATE_GRASP_FAILED",
		11: "MANIP_STATE_GRASP_PLANNING_SUCCEEDED",
		8:  "MANIP_STATE_GRASP_PLANNING_NO_SOLUTION",
		9:  "MANIP_STATE_GRASP_FAILED_TO_RAYCAST_INTO_MAP",
		13: "MANIP_STATE_GRASP_PLANNING_WAITING_DATA_AT_EDGE",
		10: "MANIP_STATE_WALKING_TO_OBJECT",
		12: "MANIP_STATE_ATTEMPTING_RAYCASTING",
		14: "MANIP_STATE_MOVING_TO_PLACE",
		15: "MANIP_STATE_PLACE_FAILED_TO_RAYCAST_INTO_MAP",
		16: "MANIP_STATE_PLACE_SUCCEEDED",
		17: "MANIP_STATE_PLACE_FAILED",
	}
	ManipulationFeedbackState_value = map[string]int32{
		"MANIP_STATE_UNKNOWN":                             0,
		"MANIP_STATE_DONE":                                1,
		"MANIP_STATE_SEARCHING_FOR_GRASP":                 2,
		"MANIP_STATE_MOVING_TO_GRASP":                     3,
		"MANIP_STATE_GRASPING_OBJECT":                     4,
		"MANIP_STATE_PLACING_OBJECT":                      5,
		"MANIP_STATE_GRASP_SUCCEEDED":                     6,
		"MANIP_STATE_GRASP_FAILED":                        7,
		"MANIP_STATE_GRASP_PLANNING_SUCCEEDED":            11,
		"MANIP_STATE_GRASP_PLANNING_NO_SOLUTION":          8,
		"MANIP_STATE_GRASP_FAILED_TO_RAYCAST_INTO_MAP":    9,
		"MANIP_STATE_GRASP_PLANNING_WAITING_DATA_AT_EDGE": 13,
		"MANIP_STATE_WALKING_TO_OBJECT":                   10,
		"MANIP_STATE_ATTEMPTING_RAYCASTING":               12,
		"MANIP_STATE_MOVING_TO_PLACE":                     14,
		"MANIP_STATE_PLACE_FAILED_TO_RAYCAST_INTO_MAP":    15,
		"MANIP_STATE_PLACE_SUCCEEDED":                     16,
		"MANIP_STATE_PLACE_FAILED":                        17,
	}
)

func (x ManipulationFeedbackState) Enum() *ManipulationFeedbackState {
	p := new(ManipulationFeedbackState)
	*p = x
	return p
}

func (x ManipulationFeedbackState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManipulationFeedbackState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_manipulation_api_proto_enumTypes[1].Descriptor()
}

func (ManipulationFeedbackState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_manipulation_api_proto_enumTypes[1]
}

func (x ManipulationFeedbackState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManipulationFeedbackState.Descriptor instead.
func (ManipulationFeedbackState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{1}
}

type ManipulationCameraSource int32

const (
	ManipulationCameraSource_MANIPULATION_CAMERA_SOURCE_UNKNOWN ManipulationCameraSource = 0
	ManipulationCameraSource_MANIPULATION_CAMERA_SOURCE_STEREO  ManipulationCameraSource = 1
	ManipulationCameraSource_MANIPULATION_CAMERA_SOURCE_HAND    ManipulationCameraSource = 2
)

// Enum value maps for ManipulationCameraSource.
var (
	ManipulationCameraSource_name = map[int32]string{
		0: "MANIPULATION_CAMERA_SOURCE_UNKNOWN",
		1: "MANIPULATION_CAMERA_SOURCE_STEREO",
		2: "MANIPULATION_CAMERA_SOURCE_HAND",
	}
	ManipulationCameraSource_value = map[string]int32{
		"MANIPULATION_CAMERA_SOURCE_UNKNOWN": 0,
		"MANIPULATION_CAMERA_SOURCE_STEREO":  1,
		"MANIPULATION_CAMERA_SOURCE_HAND":    2,
	}
)

func (x ManipulationCameraSource) Enum() *ManipulationCameraSource {
	p := new(ManipulationCameraSource)
	*p = x
	return p
}

func (x ManipulationCameraSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManipulationCameraSource) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_manipulation_api_proto_enumTypes[2].Descriptor()
}

func (ManipulationCameraSource) Type() protoreflect.EnumType {
	return &file_bosdyn_api_manipulation_api_proto_enumTypes[2]
}

func (x ManipulationCameraSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManipulationCameraSource.Descriptor instead.
func (ManipulationCameraSource) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{2}
}

// Configure automatic walking and gazing at the target.
type WalkGazeMode int32

const (
	WalkGazeMode_PICK_WALK_GAZE_UNKNOWN WalkGazeMode = 0
	// Default, walk to the target and gaze at it automatically
	WalkGazeMode_PICK_AUTO_WALK_AND_GAZE WalkGazeMode = 1
	// Don't move the robot base, but automatically look at the grasp target.
	WalkGazeMode_PICK_AUTO_GAZE WalkGazeMode = 2
	// No automatic gazing or walking. Note: if you choose this option, the target location
	// must not be near the edges or off the screen on the hand camera's view.
	WalkGazeMode_PICK_NO_AUTO_WALK_OR_GAZE WalkGazeMode = 3
	// Only plan for the grasp, don't move the robot.  Since we won't move
	// the robot, the target location must not be near the edges or out of
	// the hand camera's view.  The robot must be located near the object.
	// (Equivalent conditions as for success with PICK_NO_AUTO_WALK_OR_GAZE)
	WalkGazeMode_PICK_PLAN_ONLY WalkGazeMode = 4
)

// Enum value maps for WalkGazeMode.
var (
	WalkGazeMode_name = map[int32]string{
		0: "PICK_WALK_GAZE_UNKNOWN",
		1: "PICK_AUTO_WALK_AND_GAZE",
		2: "PICK_AUTO_GAZE",
		3: "PICK_NO_AUTO_WALK_OR_GAZE",
		4: "PICK_PLAN_ONLY",
	}
	WalkGazeMode_value = map[string]int32{
		"PICK_WALK_GAZE_UNKNOWN":    0,
		"PICK_AUTO_WALK_AND_GAZE":   1,
		"PICK_AUTO_GAZE":            2,
		"PICK_NO_AUTO_WALK_OR_GAZE": 3,
		"PICK_PLAN_ONLY":            4,
	}
)

func (x WalkGazeMode) Enum() *WalkGazeMode {
	p := new(WalkGazeMode)
	*p = x
	return p
}

func (x WalkGazeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WalkGazeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_manipulation_api_proto_enumTypes[3].Descriptor()
}

func (WalkGazeMode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_manipulation_api_proto_enumTypes[3]
}

func (x WalkGazeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WalkGazeMode.Descriptor instead.
func (WalkGazeMode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{3}
}

type ApiGraspOverride_Override int32

const (
	ApiGraspOverride_OVERRIDE_UNKNOWN     ApiGraspOverride_Override = 0
	ApiGraspOverride_OVERRIDE_HOLDING     ApiGraspOverride_Override = 1
	ApiGraspOverride_OVERRIDE_NOT_HOLDING ApiGraspOverride_Override = 2
)

// Enum value maps for ApiGraspOverride_Override.
var (
	ApiGraspOverride_Override_name = map[int32]string{
		0: "OVERRIDE_UNKNOWN",
		1: "OVERRIDE_HOLDING",
		2: "OVERRIDE_NOT_HOLDING",
	}
	ApiGraspOverride_Override_value = map[string]int32{
		"OVERRIDE_UNKNOWN":     0,
		"OVERRIDE_HOLDING":     1,
		"OVERRIDE_NOT_HOLDING": 2,
	}
)

func (x ApiGraspOverride_Override) Enum() *ApiGraspOverride_Override {
	p := new(ApiGraspOverride_Override)
	*p = x
	return p
}

func (x ApiGraspOverride_Override) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApiGraspOverride_Override) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_manipulation_api_proto_enumTypes[4].Descriptor()
}

func (ApiGraspOverride_Override) Type() protoreflect.EnumType {
	return &file_bosdyn_api_manipulation_api_proto_enumTypes[4]
}

func (x ApiGraspOverride_Override) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApiGraspOverride_Override.Descriptor instead.
func (ApiGraspOverride_Override) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{15, 0}
}

type WalkToObjectRayInWorld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Position of the start of the ray (see PickObjectRayInWorld for detailed comments.)
	RayStartRtFrame *Vec3 `protobuf:"bytes,1,opt,name=ray_start_rt_frame,json=rayStartRtFrame,proto3" json:"ray_start_rt_frame,omitempty"`
	// Position of the end of the ray.
	RayEndRtFrame *Vec3 `protobuf:"bytes,2,opt,name=ray_end_rt_frame,json=rayEndRtFrame,proto3" json:"ray_end_rt_frame,omitempty"`
	// Name of the frame that the above parameters are expressed in.
	FrameName string `protobuf:"bytes,3,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// Optional offset distance for the robot to stand from the object's location.  The robot will
	// walk forwards or backwards from where it is so that its center of mass is this distance from
	// the object. \
	// If unset, we use a reasonable default value.
	OffsetDistance *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=offset_distance,json=offsetDistance,proto3" json:"offset_distance,omitempty"`
}

func (x *WalkToObjectRayInWorld) Reset() {
	*x = WalkToObjectRayInWorld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalkToObjectRayInWorld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalkToObjectRayInWorld) ProtoMessage() {}

func (x *WalkToObjectRayInWorld) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalkToObjectRayInWorld.ProtoReflect.Descriptor instead.
func (*WalkToObjectRayInWorld) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{0}
}

func (x *WalkToObjectRayInWorld) GetRayStartRtFrame() *Vec3 {
	if x != nil {
		return x.RayStartRtFrame
	}
	return nil
}

func (x *WalkToObjectRayInWorld) GetRayEndRtFrame() *Vec3 {
	if x != nil {
		return x.RayEndRtFrame
	}
	return nil
}

func (x *WalkToObjectRayInWorld) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *WalkToObjectRayInWorld) GetOffsetDistance() *wrapperspb.FloatValue {
	if x != nil {
		return x.OffsetDistance
	}
	return nil
}

type WalkToObjectInImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Walk to an object that is at a pixel location in an image.
	PixelXy *Vec2 `protobuf:"bytes,1,opt,name=pixel_xy,json=pixelXy,proto3" json:"pixel_xy,omitempty"`
	// A tree-based collection of transformations, which will include the transformations to each image's
	// sensor in addition to transformations to the common frames ("vision", "body", "odom").
	// All transforms within the snapshot are at the acquistion time of the image.
	TransformsSnapshotForCamera *FrameTreeSnapshot `protobuf:"bytes,2,opt,name=transforms_snapshot_for_camera,json=transformsSnapshotForCamera,proto3" json:"transforms_snapshot_for_camera,omitempty"`
	// The frame name for the image's sensor source. This will be included in the transform snapshot.
	FrameNameImageSensor string `protobuf:"bytes,3,opt,name=frame_name_image_sensor,json=frameNameImageSensor,proto3" json:"frame_name_image_sensor,omitempty"`
	// Camera model.
	CameraModel *ImageSource_PinholeModel `protobuf:"bytes,4,opt,name=camera_model,json=cameraModel,proto3" json:"camera_model,omitempty"`
	// Optional offset distance for the robot to stand from the object's location.  The robot will
	// walk forwards or backwards from where it is so that its center of mass is this distance from
	// the object. \
	// If unset, we use a reasonable default value.
	OffsetDistance *wrapperspb.FloatValue `protobuf:"bytes,5,opt,name=offset_distance,json=offsetDistance,proto3" json:"offset_distance,omitempty"`
}

func (x *WalkToObjectInImage) Reset() {
	*x = WalkToObjectInImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalkToObjectInImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalkToObjectInImage) ProtoMessage() {}

func (x *WalkToObjectInImage) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalkToObjectInImage.ProtoReflect.Descriptor instead.
func (*WalkToObjectInImage) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{1}
}

func (x *WalkToObjectInImage) GetPixelXy() *Vec2 {
	if x != nil {
		return x.PixelXy
	}
	return nil
}

func (x *WalkToObjectInImage) GetTransformsSnapshotForCamera() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshotForCamera
	}
	return nil
}

func (x *WalkToObjectInImage) GetFrameNameImageSensor() string {
	if x != nil {
		return x.FrameNameImageSensor
	}
	return ""
}

func (x *WalkToObjectInImage) GetCameraModel() *ImageSource_PinholeModel {
	if x != nil {
		return x.CameraModel
	}
	return nil
}

func (x *WalkToObjectInImage) GetOffsetDistance() *wrapperspb.FloatValue {
	if x != nil {
		return x.OffsetDistance
	}
	return nil
}

type PickObjectRayInWorld struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cast a ray in the world and pick the first object found along the ray. \
	// This is the lowest-level grasping message; all other grasp options internally use this
	// message to trigger a grasp. \
	// Example:
	//  You see the object you are interested in with the gripper's camera.  To grasp it, you
	//  cast a ray from the camera out to 4 meters (well past the object). \
	//  To do this you'd set: \
	//      ray_start_rt_frame: camera's position \
	//      ray_end_rt_frame: camera's position + unit vector along ray of interest * 4 meters
	RayStartRtFrame *Vec3 `protobuf:"bytes,1,opt,name=ray_start_rt_frame,json=rayStartRtFrame,proto3" json:"ray_start_rt_frame,omitempty"`
	RayEndRtFrame   *Vec3 `protobuf:"bytes,2,opt,name=ray_end_rt_frame,json=rayEndRtFrame,proto3" json:"ray_end_rt_frame,omitempty"`
	// Name of the frame the above parameters are represented in.
	FrameName string `protobuf:"bytes,6,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// Optional parameters for the grasp.
	GraspParams *GraspParams `protobuf:"bytes,10,opt,name=grasp_params,json=graspParams,proto3" json:"grasp_params,omitempty"`
	// Configure if the robot should automatically walk and/or gaze at the target object before
	// performing the grasp. \
	// 1. If you haven't moved the robot or deployed the arm, use PICK_AUTO_WALK_AND_GAZE \
	// 2. If you have moved to the location you want to pick from, but haven't yet deployed the arm,
	//    use PICK_AUTO_GAZE. \
	// 3. If you have already moved the robot and have the hand looking at your target object, use
	//    PICK_NO_AUTO_WALK_OR_GAZE. \
	// If you are seeing issues with "MANIP_STATE_GRASP_FAILED_TO_RAYCAST_INTO_MAP," that means that
	// the automatic system cannot find your object when trying to automatically walk to it, so
	// consider using PICK_AUTO_GAZE or PICK_NO_AUTO_WALK_OR_GAZE.
	WalkGazeMode WalkGazeMode `protobuf:"varint,4,opt,name=walk_gaze_mode,json=walkGazeMode,proto3,enum=bosdyn.api.WalkGazeMode" json:"walk_gaze_mode,omitempty"`
}

func (x *PickObjectRayInWorld) Reset() {
	*x = PickObjectRayInWorld{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickObjectRayInWorld) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickObjectRayInWorld) ProtoMessage() {}

func (x *PickObjectRayInWorld) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickObjectRayInWorld.ProtoReflect.Descriptor instead.
func (*PickObjectRayInWorld) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{2}
}

func (x *PickObjectRayInWorld) GetRayStartRtFrame() *Vec3 {
	if x != nil {
		return x.RayStartRtFrame
	}
	return nil
}

func (x *PickObjectRayInWorld) GetRayEndRtFrame() *Vec3 {
	if x != nil {
		return x.RayEndRtFrame
	}
	return nil
}

func (x *PickObjectRayInWorld) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *PickObjectRayInWorld) GetGraspParams() *GraspParams {
	if x != nil {
		return x.GraspParams
	}
	return nil
}

func (x *PickObjectRayInWorld) GetWalkGazeMode() WalkGazeMode {
	if x != nil {
		return x.WalkGazeMode
	}
	return WalkGazeMode_PICK_WALK_GAZE_UNKNOWN
}

type PickObjectExecutePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PickObjectExecutePlan) Reset() {
	*x = PickObjectExecutePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickObjectExecutePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickObjectExecutePlan) ProtoMessage() {}

func (x *PickObjectExecutePlan) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickObjectExecutePlan.ProtoReflect.Descriptor instead.
func (*PickObjectExecutePlan) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{3}
}

type PickObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the frame you want to give your input in.
	FrameName string `protobuf:"bytes,1,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// Pickup an object at the location, given in the frame named above.
	ObjectRtFrame *Vec3 `protobuf:"bytes,2,opt,name=object_rt_frame,json=objectRtFrame,proto3" json:"object_rt_frame,omitempty"`
	// Optional parameters for the grasp.
	GraspParams *GraspParams `protobuf:"bytes,3,opt,name=grasp_params,json=graspParams,proto3" json:"grasp_params,omitempty"`
}

func (x *PickObject) Reset() {
	*x = PickObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickObject) ProtoMessage() {}

func (x *PickObject) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickObject.ProtoReflect.Descriptor instead.
func (*PickObject) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{4}
}

func (x *PickObject) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *PickObject) GetObjectRtFrame() *Vec3 {
	if x != nil {
		return x.ObjectRtFrame
	}
	return nil
}

func (x *PickObject) GetGraspParams() *GraspParams {
	if x != nil {
		return x.GraspParams
	}
	return nil
}

type PickObjectInImage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Pickup an object that is at a pixel location in an image.
	PixelXy *Vec2 `protobuf:"bytes,1,opt,name=pixel_xy,json=pixelXy,proto3" json:"pixel_xy,omitempty"`
	// A tree-based collection of transformations, which will include the transformations to each image's
	// sensor in addition to transformations to the common frames ("vision", "body", "odom").
	// All transforms within the snapshot are at the acquistion time of the image.
	TransformsSnapshotForCamera *FrameTreeSnapshot `protobuf:"bytes,2,opt,name=transforms_snapshot_for_camera,json=transformsSnapshotForCamera,proto3" json:"transforms_snapshot_for_camera,omitempty"`
	// The frame name for the image's sensor source. This must be included in the transform snapshot.
	FrameNameImageSensor string `protobuf:"bytes,3,opt,name=frame_name_image_sensor,json=frameNameImageSensor,proto3" json:"frame_name_image_sensor,omitempty"`
	// Camera model.
	CameraModel *ImageSource_PinholeModel `protobuf:"bytes,4,opt,name=camera_model,json=cameraModel,proto3" json:"camera_model,omitempty"`
	// Optional parameters for the grasp.
	GraspParams *GraspParams `protobuf:"bytes,10,opt,name=grasp_params,json=graspParams,proto3" json:"grasp_params,omitempty"`
	// Automatic walking / gazing configuration.
	// See detailed comment in the PickObjectRayInWorld message.
	WalkGazeMode WalkGazeMode `protobuf:"varint,9,opt,name=walk_gaze_mode,json=walkGazeMode,proto3,enum=bosdyn.api.WalkGazeMode" json:"walk_gaze_mode,omitempty"`
}

func (x *PickObjectInImage) Reset() {
	*x = PickObjectInImage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PickObjectInImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PickObjectInImage) ProtoMessage() {}

func (x *PickObjectInImage) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PickObjectInImage.ProtoReflect.Descriptor instead.
func (*PickObjectInImage) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{5}
}

func (x *PickObjectInImage) GetPixelXy() *Vec2 {
	if x != nil {
		return x.PixelXy
	}
	return nil
}

func (x *PickObjectInImage) GetTransformsSnapshotForCamera() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshotForCamera
	}
	return nil
}

func (x *PickObjectInImage) GetFrameNameImageSensor() string {
	if x != nil {
		return x.FrameNameImageSensor
	}
	return ""
}

func (x *PickObjectInImage) GetCameraModel() *ImageSource_PinholeModel {
	if x != nil {
		return x.CameraModel
	}
	return nil
}

func (x *PickObjectInImage) GetGraspParams() *GraspParams {
	if x != nil {
		return x.GraspParams
	}
	return nil
}

func (x *PickObjectInImage) GetWalkGazeMode() WalkGazeMode {
	if x != nil {
		return x.WalkGazeMode
	}
	return WalkGazeMode_PICK_WALK_GAZE_UNKNOWN
}

type GraspParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Where the grasp is on the hand.  Set to 0 to be a (default) palm grasp, where the object will
	// be pressed against the gripper's palm plate.  Set to 1.0 to be a fingertip grasp, where the
	// robot will try to pick up the target with just the tip of its fingers. \
	// Intermediate values move the grasp location between the two extremes.
	GraspPalmToFingertip float32 `protobuf:"fixed32,1,opt,name=grasp_palm_to_fingertip,json=graspPalmToFingertip,proto3" json:"grasp_palm_to_fingertip,omitempty"`
	// Frame name for the frame that the constraints in allowable_orientation are expressed in.
	GraspParamsFrameName string `protobuf:"bytes,2,opt,name=grasp_params_frame_name,json=graspParamsFrameName,proto3" json:"grasp_params_frame_name,omitempty"`
	// Optional constraints about the orientation of the grasp.  This field lets you specify things
	// like "only do a top down grasp," "grasp only from this direction," or "grasp with the gripper
	// upside-down."  If you don't pass anything, the robot will automatically search for a good
	// grasp orientation.
	AllowableOrientation []*AllowableOrientation `protobuf:"bytes,3,rep,name=allowable_orientation,json=allowableOrientation,proto3" json:"allowable_orientation,omitempty"`
	// Optional parameter on how much the robot is allowed to move the grasp from where the user
	// requested.  Set this to be GRASP_POSITION_CONSTRAINT_FIXED_AT_USER_POSITION to get a grasp
	// that is at the exact position you requested, but has less or no automatic grasp selection
	// help in position.
	PositionConstraint GraspPositionConstraint `protobuf:"varint,4,opt,name=position_constraint,json=positionConstraint,proto3,enum=bosdyn.api.GraspPositionConstraint" json:"position_constraint,omitempty"`
	// Optional hint about which camera was used to generate the target points.  The robot will
	// attempt to correct for calibration error between the arm and the body cameras.
	ManipulationCameraSource ManipulationCameraSource `protobuf:"varint,5,opt,name=manipulation_camera_source,json=manipulationCameraSource,proto3,enum=bosdyn.api.ManipulationCameraSource" json:"manipulation_camera_source,omitempty"`
}

func (x *GraspParams) Reset() {
	*x = GraspParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GraspParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GraspParams) ProtoMessage() {}

func (x *GraspParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GraspParams.ProtoReflect.Descriptor instead.
func (*GraspParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{6}
}

func (x *GraspParams) GetGraspPalmToFingertip() float32 {
	if x != nil {
		return x.GraspPalmToFingertip
	}
	return 0
}

func (x *GraspParams) GetGraspParamsFrameName() string {
	if x != nil {
		return x.GraspParamsFrameName
	}
	return ""
}

func (x *GraspParams) GetAllowableOrientation() []*AllowableOrientation {
	if x != nil {
		return x.AllowableOrientation
	}
	return nil
}

func (x *GraspParams) GetPositionConstraint() GraspPositionConstraint {
	if x != nil {
		return x.PositionConstraint
	}
	return GraspPositionConstraint_GRASP_POSITION_CONSTRAINT_UNKNOWN
}

func (x *GraspParams) GetManipulationCameraSource() ManipulationCameraSource {
	if x != nil {
		return x.ManipulationCameraSource
	}
	return ManipulationCameraSource_MANIPULATION_CAMERA_SOURCE_UNKNOWN
}

// Allowable orientation allow you to specify vectors that the different axes of the robot's
// gripper will be aligned with in the final grasp pose. \
//
// Frame: \
//  In stow position, +X is to the front of the gripper, pointing forward. \
//                    +Y is out of the side of the gripper going to the robot's left \
//                    +Z is straight up towards the sky \
//
// Here, you can supply vectors that you want the gripper to be aligned with at the final grasp
// position.  For example, if you wanted to grasp a cup, you'd wouldn't want a top-down grasp.
// So you might specify: \
//      frame_name = "vision" (so that Z is gravity aligned) \
//       VectorAlignmentWithTolerance: \
//          axis_to_on_gripper_ewrt_gripper = Vec3(0, 0, 1)  <--- we want to control the
//                                                                gripper's z-axis. \
//
//          axis_to_align_with_ewrt_frame = Vec3(0, 0, 1)  <--- ...and we want that axis to be
//                                                                 straight up \
//          tolerance_z = 0.52  <--- 30 degrees \
//    This will ensure that the z-axis of the gripper is pointed within 30 degrees of vertical
//    so that your grasp won't be top-down (which would need the z-axis of the gripper to be
//    pointed at the horizon). \
//
// You can also specify more than one AllowableOrientation to give the system multiple options.
// For example, you could specify that you're OK with either a z-up or z-down version of the cup
// grasp, allowing the gripper roll 180 from the stow position to grasp the cup.
type AllowableOrientation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Constraint:
	//	*AllowableOrientation_RotationWithTolerance
	//	*AllowableOrientation_VectorAlignmentWithTolerance
	//	*AllowableOrientation_SqueezeGrasp
	Constraint isAllowableOrientation_Constraint `protobuf_oneof:"constraint"`
}

func (x *AllowableOrientation) Reset() {
	*x = AllowableOrientation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllowableOrientation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllowableOrientation) ProtoMessage() {}

func (x *AllowableOrientation) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllowableOrientation.ProtoReflect.Descriptor instead.
func (*AllowableOrientation) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{7}
}

func (m *AllowableOrientation) GetConstraint() isAllowableOrientation_Constraint {
	if m != nil {
		return m.Constraint
	}
	return nil
}

func (x *AllowableOrientation) GetRotationWithTolerance() *RotationWithTolerance {
	if x, ok := x.GetConstraint().(*AllowableOrientation_RotationWithTolerance); ok {
		return x.RotationWithTolerance
	}
	return nil
}

func (x *AllowableOrientation) GetVectorAlignmentWithTolerance() *VectorAlignmentWithTolerance {
	if x, ok := x.GetConstraint().(*AllowableOrientation_VectorAlignmentWithTolerance); ok {
		return x.VectorAlignmentWithTolerance
	}
	return nil
}

func (x *AllowableOrientation) GetSqueezeGrasp() *SqueezeGrasp {
	if x, ok := x.GetConstraint().(*AllowableOrientation_SqueezeGrasp); ok {
		return x.SqueezeGrasp
	}
	return nil
}

type isAllowableOrientation_Constraint interface {
	isAllowableOrientation_Constraint()
}

type AllowableOrientation_RotationWithTolerance struct {
	RotationWithTolerance *RotationWithTolerance `protobuf:"bytes,1,opt,name=rotation_with_tolerance,json=rotationWithTolerance,proto3,oneof"`
}

type AllowableOrientation_VectorAlignmentWithTolerance struct {
	VectorAlignmentWithTolerance *VectorAlignmentWithTolerance `protobuf:"bytes,2,opt,name=vector_alignment_with_tolerance,json=vectorAlignmentWithTolerance,proto3,oneof"`
}

type AllowableOrientation_SqueezeGrasp struct {
	SqueezeGrasp *SqueezeGrasp `protobuf:"bytes,3,opt,name=squeeze_grasp,json=squeezeGrasp,proto3,oneof"`
}

func (*AllowableOrientation_RotationWithTolerance) isAllowableOrientation_Constraint() {}

func (*AllowableOrientation_VectorAlignmentWithTolerance) isAllowableOrientation_Constraint() {}

func (*AllowableOrientation_SqueezeGrasp) isAllowableOrientation_Constraint() {}

type RotationWithTolerance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RotationEwrtFrame *Quaternion `protobuf:"bytes,1,opt,name=rotation_ewrt_frame,json=rotationEwrtFrame,proto3" json:"rotation_ewrt_frame,omitempty"`
	ThresholdRadians  float32     `protobuf:"fixed32,2,opt,name=threshold_radians,json=thresholdRadians,proto3" json:"threshold_radians,omitempty"`
}

func (x *RotationWithTolerance) Reset() {
	*x = RotationWithTolerance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotationWithTolerance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotationWithTolerance) ProtoMessage() {}

func (x *RotationWithTolerance) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotationWithTolerance.ProtoReflect.Descriptor instead.
func (*RotationWithTolerance) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{8}
}

func (x *RotationWithTolerance) GetRotationEwrtFrame() *Quaternion {
	if x != nil {
		return x.RotationEwrtFrame
	}
	return nil
}

func (x *RotationWithTolerance) GetThresholdRadians() float32 {
	if x != nil {
		return x.ThresholdRadians
	}
	return 0
}

type VectorAlignmentWithTolerance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Axis on the gripper that you want to align.  For example, to align the front of the gripper
	// to be straight down, you'd use: \
	//      axis_on_gripper_ewrt_gripper = Vec3(1, 0, 0) \
	//      axis_to_align_with_ewrt_frame = Vec3(0, 0, -1)   (in the "vision" frame) \
	AxisOnGripperEwrtGripper *Vec3   `protobuf:"bytes,1,opt,name=axis_on_gripper_ewrt_gripper,json=axisOnGripperEwrtGripper,proto3" json:"axis_on_gripper_ewrt_gripper,omitempty"`
	AxisToAlignWithEwrtFrame *Vec3   `protobuf:"bytes,2,opt,name=axis_to_align_with_ewrt_frame,json=axisToAlignWithEwrtFrame,proto3" json:"axis_to_align_with_ewrt_frame,omitempty"`
	ThresholdRadians         float32 `protobuf:"fixed32,3,opt,name=threshold_radians,json=thresholdRadians,proto3" json:"threshold_radians,omitempty"`
}

func (x *VectorAlignmentWithTolerance) Reset() {
	*x = VectorAlignmentWithTolerance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorAlignmentWithTolerance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorAlignmentWithTolerance) ProtoMessage() {}

func (x *VectorAlignmentWithTolerance) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorAlignmentWithTolerance.ProtoReflect.Descriptor instead.
func (*VectorAlignmentWithTolerance) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{9}
}

func (x *VectorAlignmentWithTolerance) GetAxisOnGripperEwrtGripper() *Vec3 {
	if x != nil {
		return x.AxisOnGripperEwrtGripper
	}
	return nil
}

func (x *VectorAlignmentWithTolerance) GetAxisToAlignWithEwrtFrame() *Vec3 {
	if x != nil {
		return x.AxisToAlignWithEwrtFrame
	}
	return nil
}

func (x *VectorAlignmentWithTolerance) GetThresholdRadians() float32 {
	if x != nil {
		return x.ThresholdRadians
	}
	return 0
}

type SqueezeGrasp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqueezeGraspDisallowed bool `protobuf:"varint,1,opt,name=squeeze_grasp_disallowed,json=squeezeGraspDisallowed,proto3" json:"squeeze_grasp_disallowed,omitempty"`
}

func (x *SqueezeGrasp) Reset() {
	*x = SqueezeGrasp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqueezeGrasp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqueezeGrasp) ProtoMessage() {}

func (x *SqueezeGrasp) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqueezeGrasp.ProtoReflect.Descriptor instead.
func (*SqueezeGrasp) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{10}
}

func (x *SqueezeGrasp) GetSqueezeGraspDisallowed() bool {
	if x != nil {
		return x.SqueezeGraspDisallowed
	}
	return false
}

type ManipulationApiFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier for the command, provided by ManipulationApiResponse.
	ManipulationCmdId int32 `protobuf:"varint,2,opt,name=manipulation_cmd_id,json=manipulationCmdId,proto3" json:"manipulation_cmd_id,omitempty"`
}

func (x *ManipulationApiFeedbackRequest) Reset() {
	*x = ManipulationApiFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulationApiFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulationApiFeedbackRequest) ProtoMessage() {}

func (x *ManipulationApiFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulationApiFeedbackRequest.ProtoReflect.Descriptor instead.
func (*ManipulationApiFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{11}
}

func (x *ManipulationApiFeedbackRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ManipulationApiFeedbackRequest) GetManipulationCmdId() int32 {
	if x != nil {
		return x.ManipulationCmdId
	}
	return 0
}

type ManipulationApiFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The unique identifier for the ManipulationApiFeedbackRequest.
	ManipulationCmdId int32                     `protobuf:"varint,4,opt,name=manipulation_cmd_id,json=manipulationCmdId,proto3" json:"manipulation_cmd_id,omitempty"`
	CurrentState      ManipulationFeedbackState `protobuf:"varint,2,opt,name=current_state,json=currentState,proto3,enum=bosdyn.api.ManipulationFeedbackState" json:"current_state,omitempty"`
	// Data from the manipulation system: \
	// "walkto_raycast_intersection": \
	//      If you sent a WalkToObject request, we raycast in the world to intersect your pixel/ray
	//      with the world.  The point of intersection is included in this transform snapshot
	//      with the name "walkto_raycast_intersection". \
	// "grasp_planning_solution": \
	//      If you requested a grasp plan, this frame will contain the planning solution if
	//      available.  This will be the pose of the "hand" frame at the completion of the grasp. \
	// "gripper_nearest_object": \
	//      If the range camera in the hand senses an object, this frame will have the position of
	//      the nearest object.  This is useful for getting a ballpark range measurement.
	TransformsSnapshotManipulationData *FrameTreeSnapshot `protobuf:"bytes,3,opt,name=transforms_snapshot_manipulation_data,json=transformsSnapshotManipulationData,proto3" json:"transforms_snapshot_manipulation_data,omitempty"`
}

func (x *ManipulationApiFeedbackResponse) Reset() {
	*x = ManipulationApiFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulationApiFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulationApiFeedbackResponse) ProtoMessage() {}

func (x *ManipulationApiFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulationApiFeedbackResponse.ProtoReflect.Descriptor instead.
func (*ManipulationApiFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{12}
}

func (x *ManipulationApiFeedbackResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ManipulationApiFeedbackResponse) GetManipulationCmdId() int32 {
	if x != nil {
		return x.ManipulationCmdId
	}
	return 0
}

func (x *ManipulationApiFeedbackResponse) GetCurrentState() ManipulationFeedbackState {
	if x != nil {
		return x.CurrentState
	}
	return ManipulationFeedbackState_MANIP_STATE_UNKNOWN
}

func (x *ManipulationApiFeedbackResponse) GetTransformsSnapshotManipulationData() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshotManipulationData
	}
	return nil
}

type ManipulationApiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// ID of the manipulation command either just issued or that we are providing feedback for.
	ManipulationCmdId int32 `protobuf:"varint,5,opt,name=manipulation_cmd_id,json=manipulationCmdId,proto3" json:"manipulation_cmd_id,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *LeaseUseResult `protobuf:"bytes,6,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *ManipulationApiResponse) Reset() {
	*x = ManipulationApiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulationApiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulationApiResponse) ProtoMessage() {}

func (x *ManipulationApiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulationApiResponse.ProtoReflect.Descriptor instead.
func (*ManipulationApiResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{13}
}

func (x *ManipulationApiResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ManipulationApiResponse) GetManipulationCmdId() int32 {
	if x != nil {
		return x.ManipulationCmdId
	}
	return 0
}

func (x *ManipulationApiResponse) GetLeaseUseResult() *LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

type ManipulationApiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Common request header.
	// The Lease to show ownership of the robot.
	Lease *Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// Types that are assignable to ManipulationCmd:
	//	*ManipulationApiRequest_WalkToObjectRayInWorld
	//	*ManipulationApiRequest_WalkToObjectInImage
	//	*ManipulationApiRequest_PickObject
	//	*ManipulationApiRequest_PickObjectInImage
	//	*ManipulationApiRequest_PickObjectRayInWorld
	//	*ManipulationApiRequest_PickObjectExecutePlan
	ManipulationCmd isManipulationApiRequest_ManipulationCmd `protobuf_oneof:"manipulation_cmd"`
}

func (x *ManipulationApiRequest) Reset() {
	*x = ManipulationApiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulationApiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulationApiRequest) ProtoMessage() {}

func (x *ManipulationApiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulationApiRequest.ProtoReflect.Descriptor instead.
func (*ManipulationApiRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{14}
}

func (x *ManipulationApiRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ManipulationApiRequest) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (m *ManipulationApiRequest) GetManipulationCmd() isManipulationApiRequest_ManipulationCmd {
	if m != nil {
		return m.ManipulationCmd
	}
	return nil
}

func (x *ManipulationApiRequest) GetWalkToObjectRayInWorld() *WalkToObjectRayInWorld {
	if x, ok := x.GetManipulationCmd().(*ManipulationApiRequest_WalkToObjectRayInWorld); ok {
		return x.WalkToObjectRayInWorld
	}
	return nil
}

func (x *ManipulationApiRequest) GetWalkToObjectInImage() *WalkToObjectInImage {
	if x, ok := x.GetManipulationCmd().(*ManipulationApiRequest_WalkToObjectInImage); ok {
		return x.WalkToObjectInImage
	}
	return nil
}

func (x *ManipulationApiRequest) GetPickObject() *PickObject {
	if x, ok := x.GetManipulationCmd().(*ManipulationApiRequest_PickObject); ok {
		return x.PickObject
	}
	return nil
}

func (x *ManipulationApiRequest) GetPickObjectInImage() *PickObjectInImage {
	if x, ok := x.GetManipulationCmd().(*ManipulationApiRequest_PickObjectInImage); ok {
		return x.PickObjectInImage
	}
	return nil
}

func (x *ManipulationApiRequest) GetPickObjectRayInWorld() *PickObjectRayInWorld {
	if x, ok := x.GetManipulationCmd().(*ManipulationApiRequest_PickObjectRayInWorld); ok {
		return x.PickObjectRayInWorld
	}
	return nil
}

func (x *ManipulationApiRequest) GetPickObjectExecutePlan() *PickObjectExecutePlan {
	if x, ok := x.GetManipulationCmd().(*ManipulationApiRequest_PickObjectExecutePlan); ok {
		return x.PickObjectExecutePlan
	}
	return nil
}

type isManipulationApiRequest_ManipulationCmd interface {
	isManipulationApiRequest_ManipulationCmd()
}

type ManipulationApiRequest_WalkToObjectRayInWorld struct {
	// Walk to an object with a raycast in to the world
	WalkToObjectRayInWorld *WalkToObjectRayInWorld `protobuf:"bytes,12,opt,name=walk_to_object_ray_in_world,json=walkToObjectRayInWorld,proto3,oneof"`
}

type ManipulationApiRequest_WalkToObjectInImage struct {
	// Walk to an object at a pixel location in an image.
	WalkToObjectInImage *WalkToObjectInImage `protobuf:"bytes,13,opt,name=walk_to_object_in_image,json=walkToObjectInImage,proto3,oneof"`
}

type ManipulationApiRequest_PickObject struct {
	// Pick up an object.
	PickObject *PickObject `protobuf:"bytes,10,opt,name=pick_object,json=pickObject,proto3,oneof"`
}

type ManipulationApiRequest_PickObjectInImage struct {
	// Pick up an object at a pixel location in an image.
	PickObjectInImage *PickObjectInImage `protobuf:"bytes,11,opt,name=pick_object_in_image,json=pickObjectInImage,proto3,oneof"`
}

type ManipulationApiRequest_PickObjectRayInWorld struct {
	// Pick up an object based on a ray in 3D space.  This is the lowest-level, most
	// configurable object picking command.
	PickObjectRayInWorld *PickObjectRayInWorld `protobuf:"bytes,4,opt,name=pick_object_ray_in_world,json=pickObjectRayInWorld,proto3,oneof"`
}

type ManipulationApiRequest_PickObjectExecutePlan struct {
	// Execute a previously planned pick.
	PickObjectExecutePlan *PickObjectExecutePlan `protobuf:"bytes,14,opt,name=pick_object_execute_plan,json=pickObjectExecutePlan,proto3,oneof"`
}

func (*ManipulationApiRequest_WalkToObjectRayInWorld) isManipulationApiRequest_ManipulationCmd() {}

func (*ManipulationApiRequest_WalkToObjectInImage) isManipulationApiRequest_ManipulationCmd() {}

func (*ManipulationApiRequest_PickObject) isManipulationApiRequest_ManipulationCmd() {}

func (*ManipulationApiRequest_PickObjectInImage) isManipulationApiRequest_ManipulationCmd() {}

func (*ManipulationApiRequest_PickObjectRayInWorld) isManipulationApiRequest_ManipulationCmd() {}

func (*ManipulationApiRequest_PickObjectExecutePlan) isManipulationApiRequest_ManipulationCmd() {}

// Use this message to assert the ground truth about grasping.
// Grasping is usually detected automatically by the robot. If the client wishes to override the
// robot's determination of grasp status, send an ApiGraspOverride message with either:
// OVERRIDE_HOLDING, indicating the gripper is holding something, or
// OVERRIDE_NOT_HOLDING, indicating the gripper is not holding
// anything.
type ApiGraspOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverrideRequest ApiGraspOverride_Override `protobuf:"varint,1,opt,name=override_request,json=overrideRequest,proto3,enum=bosdyn.api.ApiGraspOverride_Override" json:"override_request,omitempty"`
}

func (x *ApiGraspOverride) Reset() {
	*x = ApiGraspOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiGraspOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiGraspOverride) ProtoMessage() {}

func (x *ApiGraspOverride) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiGraspOverride.ProtoReflect.Descriptor instead.
func (*ApiGraspOverride) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{15}
}

func (x *ApiGraspOverride) GetOverrideRequest() ApiGraspOverride_Override {
	if x != nil {
		return x.OverrideRequest
	}
	return ApiGraspOverride_OVERRIDE_UNKNOWN
}

// Use this message to assert properties about the grasped item.
// By default, the robot will assume all grasped items are not carriable.
type ApiGraspedCarryStateOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OverrideRequest ManipulatorState_CarryState `protobuf:"varint,1,opt,name=override_request,json=overrideRequest,proto3,enum=bosdyn.api.ManipulatorState_CarryState" json:"override_request,omitempty"`
}

func (x *ApiGraspedCarryStateOverride) Reset() {
	*x = ApiGraspedCarryStateOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiGraspedCarryStateOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiGraspedCarryStateOverride) ProtoMessage() {}

func (x *ApiGraspedCarryStateOverride) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiGraspedCarryStateOverride.ProtoReflect.Descriptor instead.
func (*ApiGraspedCarryStateOverride) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{16}
}

func (x *ApiGraspedCarryStateOverride) GetOverrideRequest() ManipulatorState_CarryState {
	if x != nil {
		return x.OverrideRequest
	}
	return ManipulatorState_CARRY_STATE_UNKNOWN
}

type ApiGraspOverrideRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header           *RequestHeader    `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	ApiGraspOverride *ApiGraspOverride `protobuf:"bytes,4,opt,name=api_grasp_override,json=apiGraspOverride,proto3" json:"api_grasp_override,omitempty"`
	// If the grasp override is set to NOT_HOLDING, setting a carry_state_override
	// message will cause the request to be rejected as malformed.
	CarryStateOverride *ApiGraspedCarryStateOverride `protobuf:"bytes,2,opt,name=carry_state_override,json=carryStateOverride,proto3" json:"carry_state_override,omitempty"`
}

func (x *ApiGraspOverrideRequest) Reset() {
	*x = ApiGraspOverrideRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiGraspOverrideRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiGraspOverrideRequest) ProtoMessage() {}

func (x *ApiGraspOverrideRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiGraspOverrideRequest.ProtoReflect.Descriptor instead.
func (*ApiGraspOverrideRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{17}
}

func (x *ApiGraspOverrideRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ApiGraspOverrideRequest) GetApiGraspOverride() *ApiGraspOverride {
	if x != nil {
		return x.ApiGraspOverride
	}
	return nil
}

func (x *ApiGraspOverrideRequest) GetCarryStateOverride() *ApiGraspedCarryStateOverride {
	if x != nil {
		return x.CarryStateOverride
	}
	return nil
}

type ApiGraspOverrideResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ApiGraspOverrideResponse) Reset() {
	*x = ApiGraspOverrideResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiGraspOverrideResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiGraspOverrideResponse) ProtoMessage() {}

func (x *ApiGraspOverrideResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_manipulation_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiGraspOverrideResponse.ProtoReflect.Descriptor instead.
func (*ApiGraspOverrideResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_manipulation_api_proto_rawDescGZIP(), []int{18}
}

func (x *ApiGraspOverrideResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

var File_bosdyn_api_manipulation_api_proto protoreflect.FileDescriptor

var file_bosdyn_api_manipulation_api_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x61, 0x6e,
	0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a,
	0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d,
	0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x16, 0x57, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x61, 0x79, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x12,
	0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x0f, 0x72, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x52, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x72,
	0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x0d, 0x72, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x52,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xec, 0x02, 0x0a, 0x13,
	0x57, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x78, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x07, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x58, 0x79,
	0x12, 0x62, 0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x68, 0x6f,
	0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x44, 0x0a, 0x0f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x64,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xc9, 0x02, 0x0a, 0x14, 0x50,
	0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x79, 0x49, 0x6e, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x12, 0x3d, 0x0a, 0x12, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x33, 0x52, 0x0f, 0x72, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x39, 0x0a, 0x10, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x0d,
	0x72, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x52, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c,
	0x67, 0x72, 0x61, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x72, 0x61, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x67, 0x72, 0x61,
	0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6b,
	0x5f, 0x67, 0x61, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61,
	0x6c, 0x6b, 0x47, 0x61, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6b,
	0x47, 0x61, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09,
	0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0x17, 0x0a, 0x15, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x22,
	0xb9, 0x01, 0x0a, 0x0a, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x73, 0x70,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x73, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x73, 0x70, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a,
	0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0xb8, 0x03, 0x0a, 0x11,
	0x50, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x08, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x78, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x07, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x58, 0x79, 0x12, 0x62,
	0x0a, 0x1e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x63, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x3a, 0x0a, 0x0c, 0x67, 0x72, 0x61, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x3e,
	0x0a, 0x0e, 0x77, 0x61, 0x6c, 0x6b, 0x5f, 0x67, 0x61, 0x7a, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6b, 0x47, 0x61, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0c, 0x77, 0x61, 0x6c, 0x6b, 0x47, 0x61, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x4a, 0x04,
	0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x22, 0x8c, 0x03, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x73, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x67, 0x72, 0x61, 0x73, 0x70, 0x5f,
	0x70, 0x61, 0x6c, 0x6d, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x74, 0x69,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x67, 0x72, 0x61, 0x73, 0x70, 0x50, 0x61,
	0x6c, 0x6d, 0x54, 0x6f, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x74, 0x69, 0x70, 0x12, 0x35, 0x0a,
	0x17, 0x67, 0x72, 0x61, 0x73, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14,
	0x67, 0x72, 0x61, 0x73, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x13, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x61, 0x73, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x12, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x12, 0x62, 0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x18, 0x6d, 0x61, 0x6e,
	0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5b,
	0x0a, 0x17, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f,
	0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e,
	0x63, 0x65, 0x48, 0x00, 0x52, 0x15, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69,
	0x74, 0x68, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x1f, 0x76,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x1c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x0d, 0x73, 0x71, 0x75, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x73, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x71, 0x75, 0x65, 0x65, 0x7a, 0x65, 0x47, 0x72, 0x61, 0x73, 0x70, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x71, 0x75, 0x65, 0x65, 0x7a, 0x65, 0x47, 0x72, 0x61, 0x73, 0x70, 0x42,
	0x0c, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0x8c, 0x01,
	0x0a, 0x15, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x13, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x77, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x51, 0x75, 0x61, 0x74, 0x65, 0x72, 0x6e, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x77, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12,
	0x2b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x61, 0x64,
	0x69, 0x61, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x22, 0xf0, 0x01, 0x0a,
	0x1c, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x50, 0x0a,
	0x1c, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x5f, 0x65, 0x77, 0x72, 0x74, 0x5f, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x18, 0x61, 0x78, 0x69, 0x73, 0x4f, 0x6e, 0x47, 0x72, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x45, 0x77, 0x72, 0x74, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x51, 0x0a, 0x1d, 0x61, 0x78, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x65, 0x77, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x18, 0x61, 0x78, 0x69, 0x73, 0x54, 0x6f,
	0x41, 0x6c, 0x69, 0x67, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x45, 0x77, 0x72, 0x74, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x72, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x74,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x52, 0x61, 0x64, 0x69, 0x61, 0x6e, 0x73, 0x22,
	0x48, 0x0a, 0x0c, 0x53, 0x71, 0x75, 0x65, 0x65, 0x7a, 0x65, 0x47, 0x72, 0x61, 0x73, 0x70, 0x12,
	0x38, 0x0a, 0x18, 0x73, 0x71, 0x75, 0x65, 0x65, 0x7a, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x73, 0x70,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x16, 0x73, 0x71, 0x75, 0x65, 0x65, 0x7a, 0x65, 0x47, 0x72, 0x61, 0x73, 0x70, 0x44,
	0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x22, 0x83, 0x01, 0x0a, 0x1e, 0x4d, 0x61,
	0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x6d, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61,
	0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x22,
	0xc3, 0x02, 0x0a, 0x1f, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x70, 0x69, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x69, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x6e, 0x69,
	0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x70, 0x0a, 0x25, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x22, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd5, 0x01, 0x0a, 0x17, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6d, 0x64, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0x9d, 0x05,
	0x0a, 0x16, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x1b, 0x77, 0x61, 0x6c, 0x6b, 0x5f, 0x74, 0x6f, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x61, 0x79, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x48, 0x00, 0x52,
	0x16, 0x77, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x79,
	0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x57, 0x0a, 0x17, 0x77, 0x61, 0x6c, 0x6b, 0x5f,
	0x74, 0x6f, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x6c, 0x6b, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x49, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13, 0x77, 0x61, 0x6c,
	0x6b, 0x54, 0x6f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x50, 0x0a, 0x14, 0x70,
	0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x11, 0x70, 0x69, 0x63, 0x6b,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a,
	0x18, 0x70, 0x69, 0x63, 0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x63,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x61, 0x79, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x48, 0x00, 0x52, 0x14, 0x70, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x61, 0x79, 0x49, 0x6e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x12, 0x5c, 0x0a, 0x18, 0x70, 0x69, 0x63,
	0x6b, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x15, 0x70, 0x69, 0x63, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x12, 0x0a, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x70,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6d, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22, 0xb6, 0x01,
	0x0a, 0x10, 0x41, 0x70, 0x69, 0x47, 0x72, 0x61, 0x73, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x12, 0x50, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70, 0x69, 0x47, 0x72, 0x61,
	0x73, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x50, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49,
	0x44, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x4f, 0x4c,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0x72, 0x0a, 0x1c, 0x41, 0x70, 0x69, 0x47, 0x72, 0x61,
	0x73, 0x70, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x52, 0x0a, 0x10, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69,
	0x64, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61,
	0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x61, 0x72, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xf4, 0x01, 0x0a, 0x17, 0x41,
	0x70, 0x69, 0x47, 0x72, 0x61, 0x73, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x61, 0x70, 0x69,
	0x5f, 0x67, 0x72, 0x61, 0x73, 0x70, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x70, 0x69, 0x47, 0x72, 0x61, 0x73, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x52, 0x10, 0x61, 0x70, 0x69, 0x47, 0x72, 0x61, 0x73, 0x70, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x63, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x70, 0x69, 0x47, 0x72, 0x61, 0x73, 0x70, 0x65, 0x64, 0x43, 0x61, 0x72, 0x72, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x12, 0x63,
	0x61, 0x72, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64,
	0x65, 0x22, 0x4e, 0x0a, 0x18, 0x41, 0x70, 0x69, 0x47, 0x72, 0x61, 0x73, 0x70, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2a, 0x9c, 0x01, 0x0a, 0x17, 0x47, 0x72, 0x61, 0x73, 0x70, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a,
	0x21, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x50, 0x4f,
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e,
	0x54, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x34, 0x0a, 0x30, 0x47, 0x52,
	0x41, 0x53, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x41, 0x54,
	0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x2a, 0xa9, 0x05, 0x0a, 0x19, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x13, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x41, 0x4e, 0x49, 0x50,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x23, 0x0a,
	0x1f, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x41,
	0x52, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50,
	0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x41, 0x53,
	0x50, 0x10, 0x03, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x42, 0x4a, 0x45,
	0x43, 0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45,
	0x44, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x07, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x0b, 0x12, 0x2a, 0x0a,
	0x26, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x41,
	0x53, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x5f, 0x53,
	0x4f, 0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x08, 0x12, 0x30, 0x0a, 0x2c, 0x4d, 0x41, 0x4e,
	0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x41, 0x59, 0x43, 0x41, 0x53, 0x54,
	0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x09, 0x12, 0x33, 0x0a, 0x2f, 0x4d,
	0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x41, 0x54, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x0d,
	0x12, 0x21, 0x0a, 0x1d, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x57, 0x41, 0x4c, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43,
	0x54, 0x10, 0x0a, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x45, 0x4d, 0x50, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x41,
	0x59, 0x43, 0x41, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41,
	0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x4e, 0x47,
	0x5f, 0x54, 0x4f, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x0e, 0x12, 0x30, 0x0a, 0x2c, 0x4d,
	0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41, 0x43, 0x45,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x41, 0x59, 0x43, 0x41,
	0x53, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0f, 0x12, 0x1f, 0x0a,
	0x1b, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c, 0x41,
	0x43, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10, 0x10, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4c,
	0x41, 0x43, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x2a, 0x8e, 0x01, 0x0a,
	0x18, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x41, 0x4e,
	0x49, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x25, 0x0a, 0x21, 0x4d, 0x41, 0x4e, 0x49, 0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f,
	0x53, 0x54, 0x45, 0x52, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x4e, 0x49,
	0x50, 0x55, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x02, 0x2a, 0x8e, 0x01,
	0x0a, 0x0c, 0x57, 0x61, 0x6c, 0x6b, 0x47, 0x61, 0x7a, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x49, 0x43, 0x4b, 0x5f, 0x57, 0x41, 0x4c, 0x4b, 0x5f, 0x47, 0x41, 0x5a, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x57, 0x41, 0x4c, 0x4b, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x47, 0x41, 0x5a, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x49, 0x43, 0x4b, 0x5f,
	0x41, 0x55, 0x54, 0x4f, 0x5f, 0x47, 0x41, 0x5a, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50,
	0x49, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x57, 0x41, 0x4c, 0x4b,
	0x5f, 0x4f, 0x52, 0x5f, 0x47, 0x41, 0x5a, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x49,
	0x43, 0x4b, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x42, 0x49,
	0x42, 0x14, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bosdyn_api_manipulation_api_proto_rawDescOnce sync.Once
	file_bosdyn_api_manipulation_api_proto_rawDescData = file_bosdyn_api_manipulation_api_proto_rawDesc
)

func file_bosdyn_api_manipulation_api_proto_rawDescGZIP() []byte {
	file_bosdyn_api_manipulation_api_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_manipulation_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_manipulation_api_proto_rawDescData)
	})
	return file_bosdyn_api_manipulation_api_proto_rawDescData
}

var file_bosdyn_api_manipulation_api_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bosdyn_api_manipulation_api_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_bosdyn_api_manipulation_api_proto_goTypes = []interface{}{
	(GraspPositionConstraint)(0),            // 0: bosdyn.api.GraspPositionConstraint
	(ManipulationFeedbackState)(0),          // 1: bosdyn.api.ManipulationFeedbackState
	(ManipulationCameraSource)(0),           // 2: bosdyn.api.ManipulationCameraSource
	(WalkGazeMode)(0),                       // 3: bosdyn.api.WalkGazeMode
	(ApiGraspOverride_Override)(0),          // 4: bosdyn.api.ApiGraspOverride.Override
	(*WalkToObjectRayInWorld)(nil),          // 5: bosdyn.api.WalkToObjectRayInWorld
	(*WalkToObjectInImage)(nil),             // 6: bosdyn.api.WalkToObjectInImage
	(*PickObjectRayInWorld)(nil),            // 7: bosdyn.api.PickObjectRayInWorld
	(*PickObjectExecutePlan)(nil),           // 8: bosdyn.api.PickObjectExecutePlan
	(*PickObject)(nil),                      // 9: bosdyn.api.PickObject
	(*PickObjectInImage)(nil),               // 10: bosdyn.api.PickObjectInImage
	(*GraspParams)(nil),                     // 11: bosdyn.api.GraspParams
	(*AllowableOrientation)(nil),            // 12: bosdyn.api.AllowableOrientation
	(*RotationWithTolerance)(nil),           // 13: bosdyn.api.RotationWithTolerance
	(*VectorAlignmentWithTolerance)(nil),    // 14: bosdyn.api.VectorAlignmentWithTolerance
	(*SqueezeGrasp)(nil),                    // 15: bosdyn.api.SqueezeGrasp
	(*ManipulationApiFeedbackRequest)(nil),  // 16: bosdyn.api.ManipulationApiFeedbackRequest
	(*ManipulationApiFeedbackResponse)(nil), // 17: bosdyn.api.ManipulationApiFeedbackResponse
	(*ManipulationApiResponse)(nil),         // 18: bosdyn.api.ManipulationApiResponse
	(*ManipulationApiRequest)(nil),          // 19: bosdyn.api.ManipulationApiRequest
	(*ApiGraspOverride)(nil),                // 20: bosdyn.api.ApiGraspOverride
	(*ApiGraspedCarryStateOverride)(nil),    // 21: bosdyn.api.ApiGraspedCarryStateOverride
	(*ApiGraspOverrideRequest)(nil),         // 22: bosdyn.api.ApiGraspOverrideRequest
	(*ApiGraspOverrideResponse)(nil),        // 23: bosdyn.api.ApiGraspOverrideResponse
	(*Vec3)(nil),                            // 24: bosdyn.api.Vec3
	(*wrapperspb.FloatValue)(nil),           // 25: google.protobuf.FloatValue
	(*Vec2)(nil),                            // 26: bosdyn.api.Vec2
	(*FrameTreeSnapshot)(nil),               // 27: bosdyn.api.FrameTreeSnapshot
	(*ImageSource_PinholeModel)(nil),        // 28: bosdyn.api.ImageSource.PinholeModel
	(*Quaternion)(nil),                      // 29: bosdyn.api.Quaternion
	(*RequestHeader)(nil),                   // 30: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),                  // 31: bosdyn.api.ResponseHeader
	(*LeaseUseResult)(nil),                  // 32: bosdyn.api.LeaseUseResult
	(*Lease)(nil),                           // 33: bosdyn.api.Lease
	(ManipulatorState_CarryState)(0),        // 34: bosdyn.api.ManipulatorState.CarryState
}
var file_bosdyn_api_manipulation_api_proto_depIdxs = []int32{
	24, // 0: bosdyn.api.WalkToObjectRayInWorld.ray_start_rt_frame:type_name -> bosdyn.api.Vec3
	24, // 1: bosdyn.api.WalkToObjectRayInWorld.ray_end_rt_frame:type_name -> bosdyn.api.Vec3
	25, // 2: bosdyn.api.WalkToObjectRayInWorld.offset_distance:type_name -> google.protobuf.FloatValue
	26, // 3: bosdyn.api.WalkToObjectInImage.pixel_xy:type_name -> bosdyn.api.Vec2
	27, // 4: bosdyn.api.WalkToObjectInImage.transforms_snapshot_for_camera:type_name -> bosdyn.api.FrameTreeSnapshot
	28, // 5: bosdyn.api.WalkToObjectInImage.camera_model:type_name -> bosdyn.api.ImageSource.PinholeModel
	25, // 6: bosdyn.api.WalkToObjectInImage.offset_distance:type_name -> google.protobuf.FloatValue
	24, // 7: bosdyn.api.PickObjectRayInWorld.ray_start_rt_frame:type_name -> bosdyn.api.Vec3
	24, // 8: bosdyn.api.PickObjectRayInWorld.ray_end_rt_frame:type_name -> bosdyn.api.Vec3
	11, // 9: bosdyn.api.PickObjectRayInWorld.grasp_params:type_name -> bosdyn.api.GraspParams
	3,  // 10: bosdyn.api.PickObjectRayInWorld.walk_gaze_mode:type_name -> bosdyn.api.WalkGazeMode
	24, // 11: bosdyn.api.PickObject.object_rt_frame:type_name -> bosdyn.api.Vec3
	11, // 12: bosdyn.api.PickObject.grasp_params:type_name -> bosdyn.api.GraspParams
	26, // 13: bosdyn.api.PickObjectInImage.pixel_xy:type_name -> bosdyn.api.Vec2
	27, // 14: bosdyn.api.PickObjectInImage.transforms_snapshot_for_camera:type_name -> bosdyn.api.FrameTreeSnapshot
	28, // 15: bosdyn.api.PickObjectInImage.camera_model:type_name -> bosdyn.api.ImageSource.PinholeModel
	11, // 16: bosdyn.api.PickObjectInImage.grasp_params:type_name -> bosdyn.api.GraspParams
	3,  // 17: bosdyn.api.PickObjectInImage.walk_gaze_mode:type_name -> bosdyn.api.WalkGazeMode
	12, // 18: bosdyn.api.GraspParams.allowable_orientation:type_name -> bosdyn.api.AllowableOrientation
	0,  // 19: bosdyn.api.GraspParams.position_constraint:type_name -> bosdyn.api.GraspPositionConstraint
	2,  // 20: bosdyn.api.GraspParams.manipulation_camera_source:type_name -> bosdyn.api.ManipulationCameraSource
	13, // 21: bosdyn.api.AllowableOrientation.rotation_with_tolerance:type_name -> bosdyn.api.RotationWithTolerance
	14, // 22: bosdyn.api.AllowableOrientation.vector_alignment_with_tolerance:type_name -> bosdyn.api.VectorAlignmentWithTolerance
	15, // 23: bosdyn.api.AllowableOrientation.squeeze_grasp:type_name -> bosdyn.api.SqueezeGrasp
	29, // 24: bosdyn.api.RotationWithTolerance.rotation_ewrt_frame:type_name -> bosdyn.api.Quaternion
	24, // 25: bosdyn.api.VectorAlignmentWithTolerance.axis_on_gripper_ewrt_gripper:type_name -> bosdyn.api.Vec3
	24, // 26: bosdyn.api.VectorAlignmentWithTolerance.axis_to_align_with_ewrt_frame:type_name -> bosdyn.api.Vec3
	30, // 27: bosdyn.api.ManipulationApiFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	31, // 28: bosdyn.api.ManipulationApiFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 29: bosdyn.api.ManipulationApiFeedbackResponse.current_state:type_name -> bosdyn.api.ManipulationFeedbackState
	27, // 30: bosdyn.api.ManipulationApiFeedbackResponse.transforms_snapshot_manipulation_data:type_name -> bosdyn.api.FrameTreeSnapshot
	31, // 31: bosdyn.api.ManipulationApiResponse.header:type_name -> bosdyn.api.ResponseHeader
	32, // 32: bosdyn.api.ManipulationApiResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	30, // 33: bosdyn.api.ManipulationApiRequest.header:type_name -> bosdyn.api.RequestHeader
	33, // 34: bosdyn.api.ManipulationApiRequest.lease:type_name -> bosdyn.api.Lease
	5,  // 35: bosdyn.api.ManipulationApiRequest.walk_to_object_ray_in_world:type_name -> bosdyn.api.WalkToObjectRayInWorld
	6,  // 36: bosdyn.api.ManipulationApiRequest.walk_to_object_in_image:type_name -> bosdyn.api.WalkToObjectInImage
	9,  // 37: bosdyn.api.ManipulationApiRequest.pick_object:type_name -> bosdyn.api.PickObject
	10, // 38: bosdyn.api.ManipulationApiRequest.pick_object_in_image:type_name -> bosdyn.api.PickObjectInImage
	7,  // 39: bosdyn.api.ManipulationApiRequest.pick_object_ray_in_world:type_name -> bosdyn.api.PickObjectRayInWorld
	8,  // 40: bosdyn.api.ManipulationApiRequest.pick_object_execute_plan:type_name -> bosdyn.api.PickObjectExecutePlan
	4,  // 41: bosdyn.api.ApiGraspOverride.override_request:type_name -> bosdyn.api.ApiGraspOverride.Override
	34, // 42: bosdyn.api.ApiGraspedCarryStateOverride.override_request:type_name -> bosdyn.api.ManipulatorState.CarryState
	30, // 43: bosdyn.api.ApiGraspOverrideRequest.header:type_name -> bosdyn.api.RequestHeader
	20, // 44: bosdyn.api.ApiGraspOverrideRequest.api_grasp_override:type_name -> bosdyn.api.ApiGraspOverride
	21, // 45: bosdyn.api.ApiGraspOverrideRequest.carry_state_override:type_name -> bosdyn.api.ApiGraspedCarryStateOverride
	31, // 46: bosdyn.api.ApiGraspOverrideResponse.header:type_name -> bosdyn.api.ResponseHeader
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_bosdyn_api_manipulation_api_proto_init() }
func file_bosdyn_api_manipulation_api_proto_init() {
	if File_bosdyn_api_manipulation_api_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_image_proto_init()
	file_bosdyn_api_lease_proto_init()
	file_bosdyn_api_robot_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_manipulation_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalkToObjectRayInWorld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalkToObjectInImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickObjectRayInWorld); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickObjectExecutePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PickObjectInImage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GraspParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllowableOrientation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotationWithTolerance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorAlignmentWithTolerance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqueezeGrasp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManipulationApiFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManipulationApiFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManipulationApiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManipulationApiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiGraspOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiGraspedCarryStateOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiGraspOverrideRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_manipulation_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiGraspOverrideResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_manipulation_api_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*AllowableOrientation_RotationWithTolerance)(nil),
		(*AllowableOrientation_VectorAlignmentWithTolerance)(nil),
		(*AllowableOrientation_SqueezeGrasp)(nil),
	}
	file_bosdyn_api_manipulation_api_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*ManipulationApiRequest_WalkToObjectRayInWorld)(nil),
		(*ManipulationApiRequest_WalkToObjectInImage)(nil),
		(*ManipulationApiRequest_PickObject)(nil),
		(*ManipulationApiRequest_PickObjectInImage)(nil),
		(*ManipulationApiRequest_PickObjectRayInWorld)(nil),
		(*ManipulationApiRequest_PickObjectExecutePlan)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_manipulation_api_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_manipulation_api_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_manipulation_api_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_manipulation_api_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_manipulation_api_proto_msgTypes,
	}.Build()
	File_bosdyn_api_manipulation_api_proto = out.File
	file_bosdyn_api_manipulation_api_proto_rawDesc = nil
	file_bosdyn_api_manipulation_api_proto_goTypes = nil
	file_bosdyn_api_manipulation_api_proto_depIdxs = nil
}
