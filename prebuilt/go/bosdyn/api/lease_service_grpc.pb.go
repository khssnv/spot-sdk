// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/lease_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LeaseServiceClient is the client API for LeaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaseServiceClient interface {
	// Acquire a lease to a specific resource if the resource is available.
	AcquireLease(ctx context.Context, in *AcquireLeaseRequest, opts ...grpc.CallOption) (*AcquireLeaseResponse, error)
	// Take a lease for a specific resource even if another client has a lease.
	TakeLease(ctx context.Context, in *TakeLeaseRequest, opts ...grpc.CallOption) (*TakeLeaseResponse, error)
	// Return a lease to the LeaseService.
	ReturnLease(ctx context.Context, in *ReturnLeaseRequest, opts ...grpc.CallOption) (*ReturnLeaseResponse, error)
	// List state of all leases managed by the LeaseService.
	ListLeases(ctx context.Context, in *ListLeasesRequest, opts ...grpc.CallOption) (*ListLeasesResponse, error)
	// Retain possession of a lease.
	RetainLease(ctx context.Context, in *RetainLeaseRequest, opts ...grpc.CallOption) (*RetainLeaseResponse, error)
}

type leaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaseServiceClient(cc grpc.ClientConnInterface) LeaseServiceClient {
	return &leaseServiceClient{cc}
}

func (c *leaseServiceClient) AcquireLease(ctx context.Context, in *AcquireLeaseRequest, opts ...grpc.CallOption) (*AcquireLeaseResponse, error) {
	out := new(AcquireLeaseResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.LeaseService/AcquireLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) TakeLease(ctx context.Context, in *TakeLeaseRequest, opts ...grpc.CallOption) (*TakeLeaseResponse, error) {
	out := new(TakeLeaseResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.LeaseService/TakeLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) ReturnLease(ctx context.Context, in *ReturnLeaseRequest, opts ...grpc.CallOption) (*ReturnLeaseResponse, error) {
	out := new(ReturnLeaseResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.LeaseService/ReturnLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) ListLeases(ctx context.Context, in *ListLeasesRequest, opts ...grpc.CallOption) (*ListLeasesResponse, error) {
	out := new(ListLeasesResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.LeaseService/ListLeases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *leaseServiceClient) RetainLease(ctx context.Context, in *RetainLeaseRequest, opts ...grpc.CallOption) (*RetainLeaseResponse, error) {
	out := new(RetainLeaseResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.LeaseService/RetainLease", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaseServiceServer is the server API for LeaseService service.
// All implementations must embed UnimplementedLeaseServiceServer
// for forward compatibility
type LeaseServiceServer interface {
	// Acquire a lease to a specific resource if the resource is available.
	AcquireLease(context.Context, *AcquireLeaseRequest) (*AcquireLeaseResponse, error)
	// Take a lease for a specific resource even if another client has a lease.
	TakeLease(context.Context, *TakeLeaseRequest) (*TakeLeaseResponse, error)
	// Return a lease to the LeaseService.
	ReturnLease(context.Context, *ReturnLeaseRequest) (*ReturnLeaseResponse, error)
	// List state of all leases managed by the LeaseService.
	ListLeases(context.Context, *ListLeasesRequest) (*ListLeasesResponse, error)
	// Retain possession of a lease.
	RetainLease(context.Context, *RetainLeaseRequest) (*RetainLeaseResponse, error)
	mustEmbedUnimplementedLeaseServiceServer()
}

// UnimplementedLeaseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaseServiceServer struct {
}

func (UnimplementedLeaseServiceServer) AcquireLease(context.Context, *AcquireLeaseRequest) (*AcquireLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcquireLease not implemented")
}
func (UnimplementedLeaseServiceServer) TakeLease(context.Context, *TakeLeaseRequest) (*TakeLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeLease not implemented")
}
func (UnimplementedLeaseServiceServer) ReturnLease(context.Context, *ReturnLeaseRequest) (*ReturnLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnLease not implemented")
}
func (UnimplementedLeaseServiceServer) ListLeases(context.Context, *ListLeasesRequest) (*ListLeasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLeases not implemented")
}
func (UnimplementedLeaseServiceServer) RetainLease(context.Context, *RetainLeaseRequest) (*RetainLeaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetainLease not implemented")
}
func (UnimplementedLeaseServiceServer) mustEmbedUnimplementedLeaseServiceServer() {}

// UnsafeLeaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaseServiceServer will
// result in compilation errors.
type UnsafeLeaseServiceServer interface {
	mustEmbedUnimplementedLeaseServiceServer()
}

func RegisterLeaseServiceServer(s grpc.ServiceRegistrar, srv LeaseServiceServer) {
	s.RegisterService(&LeaseService_ServiceDesc, srv)
}

func _LeaseService_AcquireLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).AcquireLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.LeaseService/AcquireLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).AcquireLease(ctx, req.(*AcquireLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_TakeLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).TakeLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.LeaseService/TakeLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).TakeLease(ctx, req.(*TakeLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_ReturnLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReturnLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).ReturnLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.LeaseService/ReturnLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).ReturnLease(ctx, req.(*ReturnLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_ListLeases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLeasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).ListLeases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.LeaseService/ListLeases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).ListLeases(ctx, req.(*ListLeasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LeaseService_RetainLease_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetainLeaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaseServiceServer).RetainLease(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.LeaseService/RetainLease",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaseServiceServer).RetainLease(ctx, req.(*RetainLeaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaseService_ServiceDesc is the grpc.ServiceDesc for LeaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.LeaseService",
	HandlerType: (*LeaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcquireLease",
			Handler:    _LeaseService_AcquireLease_Handler,
		},
		{
			MethodName: "TakeLease",
			Handler:    _LeaseService_TakeLease_Handler,
		},
		{
			MethodName: "ReturnLease",
			Handler:    _LeaseService_ReturnLease_Handler,
		},
		{
			MethodName: "ListLeases",
			Handler:    _LeaseService_ListLeases_Handler,
		},
		{
			MethodName: "RetainLease",
			Handler:    _LeaseService_RetainLease_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/lease_service.proto",
}
