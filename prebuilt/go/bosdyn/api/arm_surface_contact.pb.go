// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/arm_surface_contact.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// If an axis is set to position mode (default), read desired from SE3Trajectory command.
// If mode is set to force, use the "press_force_percentage" field to determine force.
type ArmSurfaceContact_Request_AxisMode int32

const (
	ArmSurfaceContact_Request_AXIS_MODE_POSITION ArmSurfaceContact_Request_AxisMode = 0
	ArmSurfaceContact_Request_AXIS_MODE_FORCE    ArmSurfaceContact_Request_AxisMode = 1
)

// Enum value maps for ArmSurfaceContact_Request_AxisMode.
var (
	ArmSurfaceContact_Request_AxisMode_name = map[int32]string{
		0: "AXIS_MODE_POSITION",
		1: "AXIS_MODE_FORCE",
	}
	ArmSurfaceContact_Request_AxisMode_value = map[string]int32{
		"AXIS_MODE_POSITION": 0,
		"AXIS_MODE_FORCE":    1,
	}
)

func (x ArmSurfaceContact_Request_AxisMode) Enum() *ArmSurfaceContact_Request_AxisMode {
	p := new(ArmSurfaceContact_Request_AxisMode)
	*p = x
	return p
}

func (x ArmSurfaceContact_Request_AxisMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmSurfaceContact_Request_AxisMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_surface_contact_proto_enumTypes[0].Descriptor()
}

func (ArmSurfaceContact_Request_AxisMode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_surface_contact_proto_enumTypes[0]
}

func (x ArmSurfaceContact_Request_AxisMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmSurfaceContact_Request_AxisMode.Descriptor instead.
func (ArmSurfaceContact_Request_AxisMode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_surface_contact_proto_rawDescGZIP(), []int{0, 0, 0}
}

// Parameters for controlling admittance.  By default, the robot will
// stop moving the arm when it encounters resistance.  You can control that reaction to
// make the robot stiffer or less stiff by changing the parameters.
type ArmSurfaceContact_Request_AdmittanceSetting int32

const (
	ArmSurfaceContact_Request_ADMITTANCE_SETTING_UNKNOWN    ArmSurfaceContact_Request_AdmittanceSetting = 0
	ArmSurfaceContact_Request_ADMITTANCE_SETTING_OFF        ArmSurfaceContact_Request_AdmittanceSetting = 1 // No admittance.
	ArmSurfaceContact_Request_ADMITTANCE_SETTING_NORMAL     ArmSurfaceContact_Request_AdmittanceSetting = 2 // Normal reaction to touching things in the world
	ArmSurfaceContact_Request_ADMITTANCE_SETTING_LOOSE      ArmSurfaceContact_Request_AdmittanceSetting = 3 // Robot will not push very hard against objects
	ArmSurfaceContact_Request_ADMITTANCE_SETTING_STIFF      ArmSurfaceContact_Request_AdmittanceSetting = 4 // Robot will push hard against the world
	ArmSurfaceContact_Request_ADMITTANCE_SETTING_VERY_STIFF ArmSurfaceContact_Request_AdmittanceSetting = 5 // Robot will push very hard against the world
)

// Enum value maps for ArmSurfaceContact_Request_AdmittanceSetting.
var (
	ArmSurfaceContact_Request_AdmittanceSetting_name = map[int32]string{
		0: "ADMITTANCE_SETTING_UNKNOWN",
		1: "ADMITTANCE_SETTING_OFF",
		2: "ADMITTANCE_SETTING_NORMAL",
		3: "ADMITTANCE_SETTING_LOOSE",
		4: "ADMITTANCE_SETTING_STIFF",
		5: "ADMITTANCE_SETTING_VERY_STIFF",
	}
	ArmSurfaceContact_Request_AdmittanceSetting_value = map[string]int32{
		"ADMITTANCE_SETTING_UNKNOWN":    0,
		"ADMITTANCE_SETTING_OFF":        1,
		"ADMITTANCE_SETTING_NORMAL":     2,
		"ADMITTANCE_SETTING_LOOSE":      3,
		"ADMITTANCE_SETTING_STIFF":      4,
		"ADMITTANCE_SETTING_VERY_STIFF": 5,
	}
)

func (x ArmSurfaceContact_Request_AdmittanceSetting) Enum() *ArmSurfaceContact_Request_AdmittanceSetting {
	p := new(ArmSurfaceContact_Request_AdmittanceSetting)
	*p = x
	return p
}

func (x ArmSurfaceContact_Request_AdmittanceSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmSurfaceContact_Request_AdmittanceSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_surface_contact_proto_enumTypes[1].Descriptor()
}

func (ArmSurfaceContact_Request_AdmittanceSetting) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_surface_contact_proto_enumTypes[1]
}

func (x ArmSurfaceContact_Request_AdmittanceSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmSurfaceContact_Request_AdmittanceSetting.Descriptor instead.
func (ArmSurfaceContact_Request_AdmittanceSetting) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_surface_contact_proto_rawDescGZIP(), []int{0, 0, 1}
}

// ArmSurfaceContact lets you accurately move the robot's arm in the world while having some ability
// to perform force control.  This mode is useful for drawing, wiping, and other similar behaviors.
//
// The message is similar to the ArmCartesianCommand message, which you can look at for additional
// details.
type ArmSurfaceContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmSurfaceContact) Reset() {
	*x = ArmSurfaceContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_surface_contact_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmSurfaceContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmSurfaceContact) ProtoMessage() {}

func (x *ArmSurfaceContact) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_surface_contact_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmSurfaceContact.ProtoReflect.Descriptor instead.
func (*ArmSurfaceContact) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_surface_contact_proto_rawDescGZIP(), []int{0}
}

type ArmSurfaceContact_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root frame is used to set the optional task frame that all trajectories are
	// specified with respect to.  If the optional task frame is left un-specified it defaults
	// to the identity transform and the root frame becomes the task frame.
	RootFrameName string `protobuf:"bytes,25,opt,name=root_frame_name,json=rootFrameName,proto3" json:"root_frame_name,omitempty"`
	// The tool pose relative to the parent link (wrist).
	// Defaults to
	//    [0.19557 0 0]
	//    [1 0 0 0]
	// a frame with it's origin slightly in front of the gripper's palm plate aligned with wrists orientation.
	WristTformTool *SE3Pose `protobuf:"bytes,6,opt,name=wrist_tform_tool,json=wristTformTool,proto3" json:"wrist_tform_tool,omitempty"`
	// The fields below are specified in this optional task frame.  If unset int defaults
	// to the identity transform and all quantities are therefore expressed in the root_frame_name.
	RootTformTask *SE3Pose `protobuf:"bytes,26,opt,name=root_tform_task,json=rootTformTask,proto3" json:"root_tform_task,omitempty"`
	// A 3D pose trajectory for the tool expressed in the task frame, e.g. task_T_tool.
	// This pose trajectory is optional if requesting a pure wrench at the end-effector,
	// otherwise required for position or mixed force/position end-effector requests.
	PoseTrajectoryInTask *SE3Trajectory `protobuf:"bytes,2,opt,name=pose_trajectory_in_task,json=poseTrajectoryInTask,proto3" json:"pose_trajectory_in_task,omitempty"`
	// Optional Maximum acceleration magnitude of the end-effector.
	// Valid ranges (0, 20]
	MaximumAcceleration *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=maximum_acceleration,json=maximumAcceleration,proto3" json:"maximum_acceleration,omitempty"`
	// Optional Maximum linear velocity magnitude of the end-effector. (m/s)
	MaxLinearVelocity *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=max_linear_velocity,json=maxLinearVelocity,proto3" json:"max_linear_velocity,omitempty"`
	// Optional Maximum angular velocity magnitude of the end-effector. (rad/s)
	MaxAngularVelocity *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=max_angular_velocity,json=maxAngularVelocity,proto3" json:"max_angular_velocity,omitempty"`
	// Maximum allowable tracking error of the tool frame from the desired trajectory
	// before the arm will stop moving and cancel the rest of the trajectory. When this limit is exceeded, the
	// hand will stay at the pose it was at when it exceeded the tracking error, and any other part of the
	// trajectory specified in the rest of this message will be ignored.
	// max position tracking error in meters
	MaxPosTrackingError *wrapperspb.DoubleValue `protobuf:"bytes,18,opt,name=max_pos_tracking_error,json=maxPosTrackingError,proto3" json:"max_pos_tracking_error,omitempty"`
	// max orientation tracking error in radians
	MaxRotTrackingError *wrapperspb.DoubleValue `protobuf:"bytes,19,opt,name=max_rot_tracking_error,json=maxRotTrackingError,proto3" json:"max_rot_tracking_error,omitempty"`
	// Set a "preferred joint configuration" for this trajectory. When near a singularity, the robot will move towards
	// the specified pose. If no pose is provided (ie no value is set for this oneof), a default one will be
	// chosen. If the user wishes to explicitly tell the robot to not prefer any pose, (useful if doing a
	// local move, and the user wants to avoid large joint motions) they should set ignore_joint_configuration
	// to be true. The robot's behavior around singularities will then be to simply minimize joint velocity,
	// resulting in the robot coming in and out of the singularity with similar joint angles
	//
	// Types that are assignable to JointConfiguration:
	//	*ArmSurfaceContact_Request_ForceRemainNearCurrentJointConfiguration
	//	*ArmSurfaceContact_Request_PreferredJointConfiguration
	JointConfiguration isArmSurfaceContact_Request_JointConfiguration `protobuf_oneof:"joint_configuration"`
	XAxis              ArmSurfaceContact_Request_AxisMode             `protobuf:"varint,8,opt,name=x_axis,json=xAxis,proto3,enum=bosdyn.api.ArmSurfaceContact_Request_AxisMode" json:"x_axis,omitempty"`
	YAxis              ArmSurfaceContact_Request_AxisMode             `protobuf:"varint,9,opt,name=y_axis,json=yAxis,proto3,enum=bosdyn.api.ArmSurfaceContact_Request_AxisMode" json:"y_axis,omitempty"`
	ZAxis              ArmSurfaceContact_Request_AxisMode             `protobuf:"varint,10,opt,name=z_axis,json=zAxis,proto3,enum=bosdyn.api.ArmSurfaceContact_Request_AxisMode" json:"z_axis,omitempty"`
	// Amount of force to use on each axis, from 0 (no force) to 1.0 (maximum force), can also
	// be negative.  Full range: [-1.0, 1.0]
	PressForcePercentage *Vec3 `protobuf:"bytes,12,opt,name=press_force_percentage,json=pressForcePercentage,proto3" json:"press_force_percentage,omitempty"`
	// Admittance settings for each axis in the admittance frame.
	XyAdmittance ArmSurfaceContact_Request_AdmittanceSetting `protobuf:"varint,21,opt,name=xy_admittance,json=xyAdmittance,proto3,enum=bosdyn.api.ArmSurfaceContact_Request_AdmittanceSetting" json:"xy_admittance,omitempty"`
	ZAdmittance  ArmSurfaceContact_Request_AdmittanceSetting `protobuf:"varint,22,opt,name=z_admittance,json=zAdmittance,proto3,enum=bosdyn.api.ArmSurfaceContact_Request_AdmittanceSetting" json:"z_admittance,omitempty"`
	// Cross term, making force in the XY axis cause movement in the z-axis.
	// By default is OFF
	// Setting this value will make the arm move in the negative Z-axis whenever it feels force in
	// the XY axis.
	XyToZCrossTermAdmittance ArmSurfaceContact_Request_AdmittanceSetting `protobuf:"varint,17,opt,name=xy_to_z_cross_term_admittance,json=xyToZCrossTermAdmittance,proto3,enum=bosdyn.api.ArmSurfaceContact_Request_AdmittanceSetting" json:"xy_to_z_cross_term_admittance,omitempty"`
	// Specifies a force that the body should expect to feel.  This allows the robot to "lean into"
	// an external force.  Be careful using this field, because if you lie to the robot, it can
	// fall over.
	BiasForceEwrtBody *Vec3 `protobuf:"bytes,20,opt,name=bias_force_ewrt_body,json=biasForceEwrtBody,proto3" json:"bias_force_ewrt_body,omitempty"`
	// Gripper control
	GripperCommand *ClawGripperCommand_Request `protobuf:"bytes,23,opt,name=gripper_command,json=gripperCommand,proto3" json:"gripper_command,omitempty"`
	// Set to true to have robot is walk around to follow the hand.
	IsRobotFollowingHand bool `protobuf:"varint,24,opt,name=is_robot_following_hand,json=isRobotFollowingHand,proto3" json:"is_robot_following_hand,omitempty"`
}

func (x *ArmSurfaceContact_Request) Reset() {
	*x = ArmSurfaceContact_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_surface_contact_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmSurfaceContact_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmSurfaceContact_Request) ProtoMessage() {}

func (x *ArmSurfaceContact_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_surface_contact_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmSurfaceContact_Request.ProtoReflect.Descriptor instead.
func (*ArmSurfaceContact_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_surface_contact_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ArmSurfaceContact_Request) GetRootFrameName() string {
	if x != nil {
		return x.RootFrameName
	}
	return ""
}

func (x *ArmSurfaceContact_Request) GetWristTformTool() *SE3Pose {
	if x != nil {
		return x.WristTformTool
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetRootTformTask() *SE3Pose {
	if x != nil {
		return x.RootTformTask
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetPoseTrajectoryInTask() *SE3Trajectory {
	if x != nil {
		return x.PoseTrajectoryInTask
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetMaximumAcceleration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumAcceleration
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetMaxLinearVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLinearVelocity
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetMaxAngularVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxAngularVelocity
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetMaxPosTrackingError() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxPosTrackingError
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetMaxRotTrackingError() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxRotTrackingError
	}
	return nil
}

func (m *ArmSurfaceContact_Request) GetJointConfiguration() isArmSurfaceContact_Request_JointConfiguration {
	if m != nil {
		return m.JointConfiguration
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetForceRemainNearCurrentJointConfiguration() bool {
	if x, ok := x.GetJointConfiguration().(*ArmSurfaceContact_Request_ForceRemainNearCurrentJointConfiguration); ok {
		return x.ForceRemainNearCurrentJointConfiguration
	}
	return false
}

func (x *ArmSurfaceContact_Request) GetPreferredJointConfiguration() *ArmJointPosition {
	if x, ok := x.GetJointConfiguration().(*ArmSurfaceContact_Request_PreferredJointConfiguration); ok {
		return x.PreferredJointConfiguration
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetXAxis() ArmSurfaceContact_Request_AxisMode {
	if x != nil {
		return x.XAxis
	}
	return ArmSurfaceContact_Request_AXIS_MODE_POSITION
}

func (x *ArmSurfaceContact_Request) GetYAxis() ArmSurfaceContact_Request_AxisMode {
	if x != nil {
		return x.YAxis
	}
	return ArmSurfaceContact_Request_AXIS_MODE_POSITION
}

func (x *ArmSurfaceContact_Request) GetZAxis() ArmSurfaceContact_Request_AxisMode {
	if x != nil {
		return x.ZAxis
	}
	return ArmSurfaceContact_Request_AXIS_MODE_POSITION
}

func (x *ArmSurfaceContact_Request) GetPressForcePercentage() *Vec3 {
	if x != nil {
		return x.PressForcePercentage
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetXyAdmittance() ArmSurfaceContact_Request_AdmittanceSetting {
	if x != nil {
		return x.XyAdmittance
	}
	return ArmSurfaceContact_Request_ADMITTANCE_SETTING_UNKNOWN
}

func (x *ArmSurfaceContact_Request) GetZAdmittance() ArmSurfaceContact_Request_AdmittanceSetting {
	if x != nil {
		return x.ZAdmittance
	}
	return ArmSurfaceContact_Request_ADMITTANCE_SETTING_UNKNOWN
}

func (x *ArmSurfaceContact_Request) GetXyToZCrossTermAdmittance() ArmSurfaceContact_Request_AdmittanceSetting {
	if x != nil {
		return x.XyToZCrossTermAdmittance
	}
	return ArmSurfaceContact_Request_ADMITTANCE_SETTING_UNKNOWN
}

func (x *ArmSurfaceContact_Request) GetBiasForceEwrtBody() *Vec3 {
	if x != nil {
		return x.BiasForceEwrtBody
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetGripperCommand() *ClawGripperCommand_Request {
	if x != nil {
		return x.GripperCommand
	}
	return nil
}

func (x *ArmSurfaceContact_Request) GetIsRobotFollowingHand() bool {
	if x != nil {
		return x.IsRobotFollowingHand
	}
	return false
}

type isArmSurfaceContact_Request_JointConfiguration interface {
	isArmSurfaceContact_Request_JointConfiguration()
}

type ArmSurfaceContact_Request_ForceRemainNearCurrentJointConfiguration struct {
	ForceRemainNearCurrentJointConfiguration bool `protobuf:"varint,15,opt,name=force_remain_near_current_joint_configuration,json=forceRemainNearCurrentJointConfiguration,proto3,oneof"`
}

type ArmSurfaceContact_Request_PreferredJointConfiguration struct {
	PreferredJointConfiguration *ArmJointPosition `protobuf:"bytes,16,opt,name=preferred_joint_configuration,json=preferredJointConfiguration,proto3,oneof"`
}

func (*ArmSurfaceContact_Request_ForceRemainNearCurrentJointConfiguration) isArmSurfaceContact_Request_JointConfiguration() {
}

func (*ArmSurfaceContact_Request_PreferredJointConfiguration) isArmSurfaceContact_Request_JointConfiguration() {
}

type ArmSurfaceContact_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmSurfaceContact_Feedback) Reset() {
	*x = ArmSurfaceContact_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_surface_contact_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmSurfaceContact_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmSurfaceContact_Feedback) ProtoMessage() {}

func (x *ArmSurfaceContact_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_surface_contact_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmSurfaceContact_Feedback.ProtoReflect.Descriptor instead.
func (*ArmSurfaceContact_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_surface_contact_proto_rawDescGZIP(), []int{0, 1}
}

var File_bosdyn_api_arm_surface_contact_proto protoreflect.FileDescriptor

var file_bosdyn_api_arm_surface_contact_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x6d,
	0x5f, 0x73, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x0f, 0x0a, 0x11, 0x41,
	0x72, 0x6d, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x1a, 0xa3, 0x0f, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f,
	0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x10, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50,
	0x6f, 0x73, 0x65, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x73, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x6f, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x61, 0x73, 0x6b,
	0x12, 0x50, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x45, 0x33, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x70, 0x6f,
	0x73, 0x65, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x4f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x63,
	0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11,
	0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x4e, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d,
	0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x13, 0x6d, 0x61, 0x78, 0x50, 0x6f, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x51, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x74, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x2d, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x28, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x61,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x1d, 0x70, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1b, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45,
	0x0a, 0x06, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x53,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x78, 0x41, 0x78, 0x69, 0x73, 0x12, 0x45, 0x0a, 0x06, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x78, 0x69,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x79, 0x41, 0x78, 0x69, 0x73, 0x12, 0x45, 0x0a, 0x06,
	0x7a, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x53, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x7a, 0x41,
	0x78, 0x69, 0x73, 0x12, 0x46, 0x0a, 0x16, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x73, 0x46, 0x6f, 0x72, 0x63,
	0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x0d, 0x78,
	0x79, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x72, 0x6d, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x78, 0x79, 0x41,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0c, 0x7a, 0x5f, 0x61,
	0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d,
	0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x7a, 0x41, 0x64, 0x6d, 0x69, 0x74,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x1d, 0x78, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x7a,
	0x5f, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x5f, 0x61, 0x64, 0x6d, 0x69,
	0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x53, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x18, 0x78, 0x79, 0x54, 0x6f, 0x5a, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x54, 0x65, 0x72, 0x6d, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x41, 0x0a, 0x14, 0x62, 0x69, 0x61, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x77,
	0x72, 0x74, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52,
	0x11, 0x62, 0x69, 0x61, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x45, 0x77, 0x72, 0x74, 0x42, 0x6f,
	0x64, 0x79, 0x12, 0x4f, 0x0a, 0x0f, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x77, 0x47, 0x72, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x52, 0x0e, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f,
	0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x46, 0x6f, 0x6c,
	0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x48, 0x61, 0x6e, 0x64, 0x22, 0x37, 0x0a, 0x08, 0x41, 0x78,
	0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x10, 0x01, 0x22, 0xcd, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x6d, 0x69, 0x74, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x44, 0x4d,
	0x49, 0x54, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x44, 0x4d,
	0x49, 0x54, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x44, 0x4d, 0x49, 0x54, 0x54, 0x41,
	0x4e, 0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x4d, 0x49, 0x54, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x4f, 0x4f, 0x53, 0x45,
	0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x44, 0x4d, 0x49, 0x54, 0x54, 0x41, 0x4e, 0x43, 0x45,
	0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x49, 0x46, 0x46, 0x10, 0x04,
	0x12, 0x21, 0x0a, 0x1d, 0x41, 0x44, 0x4d, 0x49, 0x54, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53,
	0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x49, 0x46,
	0x46, 0x10, 0x05, 0x42, 0x15, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x42, 0x4b, 0x42, 0x16, 0x41, 0x72, 0x6d, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f,
	0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c,
	0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_arm_surface_contact_proto_rawDescOnce sync.Once
	file_bosdyn_api_arm_surface_contact_proto_rawDescData = file_bosdyn_api_arm_surface_contact_proto_rawDesc
)

func file_bosdyn_api_arm_surface_contact_proto_rawDescGZIP() []byte {
	file_bosdyn_api_arm_surface_contact_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_arm_surface_contact_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_arm_surface_contact_proto_rawDescData)
	})
	return file_bosdyn_api_arm_surface_contact_proto_rawDescData
}

var file_bosdyn_api_arm_surface_contact_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bosdyn_api_arm_surface_contact_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_bosdyn_api_arm_surface_contact_proto_goTypes = []interface{}{
	(ArmSurfaceContact_Request_AxisMode)(0),          // 0: bosdyn.api.ArmSurfaceContact.Request.AxisMode
	(ArmSurfaceContact_Request_AdmittanceSetting)(0), // 1: bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting
	(*ArmSurfaceContact)(nil),                        // 2: bosdyn.api.ArmSurfaceContact
	(*ArmSurfaceContact_Request)(nil),                // 3: bosdyn.api.ArmSurfaceContact.Request
	(*ArmSurfaceContact_Feedback)(nil),               // 4: bosdyn.api.ArmSurfaceContact.Feedback
	(*SE3Pose)(nil),                                  // 5: bosdyn.api.SE3Pose
	(*SE3Trajectory)(nil),                            // 6: bosdyn.api.SE3Trajectory
	(*wrapperspb.DoubleValue)(nil),                   // 7: google.protobuf.DoubleValue
	(*ArmJointPosition)(nil),                         // 8: bosdyn.api.ArmJointPosition
	(*Vec3)(nil),                                     // 9: bosdyn.api.Vec3
	(*ClawGripperCommand_Request)(nil),               // 10: bosdyn.api.ClawGripperCommand.Request
}
var file_bosdyn_api_arm_surface_contact_proto_depIdxs = []int32{
	5,  // 0: bosdyn.api.ArmSurfaceContact.Request.wrist_tform_tool:type_name -> bosdyn.api.SE3Pose
	5,  // 1: bosdyn.api.ArmSurfaceContact.Request.root_tform_task:type_name -> bosdyn.api.SE3Pose
	6,  // 2: bosdyn.api.ArmSurfaceContact.Request.pose_trajectory_in_task:type_name -> bosdyn.api.SE3Trajectory
	7,  // 3: bosdyn.api.ArmSurfaceContact.Request.maximum_acceleration:type_name -> google.protobuf.DoubleValue
	7,  // 4: bosdyn.api.ArmSurfaceContact.Request.max_linear_velocity:type_name -> google.protobuf.DoubleValue
	7,  // 5: bosdyn.api.ArmSurfaceContact.Request.max_angular_velocity:type_name -> google.protobuf.DoubleValue
	7,  // 6: bosdyn.api.ArmSurfaceContact.Request.max_pos_tracking_error:type_name -> google.protobuf.DoubleValue
	7,  // 7: bosdyn.api.ArmSurfaceContact.Request.max_rot_tracking_error:type_name -> google.protobuf.DoubleValue
	8,  // 8: bosdyn.api.ArmSurfaceContact.Request.preferred_joint_configuration:type_name -> bosdyn.api.ArmJointPosition
	0,  // 9: bosdyn.api.ArmSurfaceContact.Request.x_axis:type_name -> bosdyn.api.ArmSurfaceContact.Request.AxisMode
	0,  // 10: bosdyn.api.ArmSurfaceContact.Request.y_axis:type_name -> bosdyn.api.ArmSurfaceContact.Request.AxisMode
	0,  // 11: bosdyn.api.ArmSurfaceContact.Request.z_axis:type_name -> bosdyn.api.ArmSurfaceContact.Request.AxisMode
	9,  // 12: bosdyn.api.ArmSurfaceContact.Request.press_force_percentage:type_name -> bosdyn.api.Vec3
	1,  // 13: bosdyn.api.ArmSurfaceContact.Request.xy_admittance:type_name -> bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting
	1,  // 14: bosdyn.api.ArmSurfaceContact.Request.z_admittance:type_name -> bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting
	1,  // 15: bosdyn.api.ArmSurfaceContact.Request.xy_to_z_cross_term_admittance:type_name -> bosdyn.api.ArmSurfaceContact.Request.AdmittanceSetting
	9,  // 16: bosdyn.api.ArmSurfaceContact.Request.bias_force_ewrt_body:type_name -> bosdyn.api.Vec3
	10, // 17: bosdyn.api.ArmSurfaceContact.Request.gripper_command:type_name -> bosdyn.api.ClawGripperCommand.Request
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_bosdyn_api_arm_surface_contact_proto_init() }
func file_bosdyn_api_arm_surface_contact_proto_init() {
	if File_bosdyn_api_arm_surface_contact_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_gripper_command_proto_init()
	file_bosdyn_api_trajectory_proto_init()
	file_bosdyn_api_arm_command_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_arm_surface_contact_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmSurfaceContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_surface_contact_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmSurfaceContact_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_surface_contact_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmSurfaceContact_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_arm_surface_contact_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ArmSurfaceContact_Request_ForceRemainNearCurrentJointConfiguration)(nil),
		(*ArmSurfaceContact_Request_PreferredJointConfiguration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_arm_surface_contact_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_arm_surface_contact_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_arm_surface_contact_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_arm_surface_contact_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_arm_surface_contact_proto_msgTypes,
	}.Build()
	File_bosdyn_api_arm_surface_contact_proto = out.File
	file_bosdyn_api_arm_surface_contact_proto_rawDesc = nil
	file_bosdyn_api_arm_surface_contact_proto_goTypes = nil
	file_bosdyn_api_arm_surface_contact_proto_depIdxs = nil
}
