// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/robot_state.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PowerState_MotorPowerState int32

const (
	// Unknown motor power state. Do not use this field.
	//
	// Deprecated: Do not use.
	PowerState_STATE_UNKNOWN             PowerState_MotorPowerState = 0
	PowerState_MOTOR_POWER_STATE_UNKNOWN PowerState_MotorPowerState = 0
	// Motors are off, the robot is safe to approach.
	//
	// Deprecated: Do not use.
	PowerState_STATE_OFF             PowerState_MotorPowerState = 1
	PowerState_MOTOR_POWER_STATE_OFF PowerState_MotorPowerState = 1
	// The motors are powered.
	//
	// Deprecated: Do not use.
	PowerState_STATE_ON             PowerState_MotorPowerState = 2
	PowerState_MOTOR_POWER_STATE_ON PowerState_MotorPowerState = 2
	// The robot has received an ON command, and is turning on.
	//
	// Deprecated: Do not use.
	PowerState_STATE_POWERING_ON             PowerState_MotorPowerState = 3
	PowerState_MOTOR_POWER_STATE_POWERING_ON PowerState_MotorPowerState = 3
	// In the process of powering down, not yet safe to approach.
	//
	// Deprecated: Do not use.
	PowerState_STATE_POWERING_OFF             PowerState_MotorPowerState = 4
	PowerState_MOTOR_POWER_STATE_POWERING_OFF PowerState_MotorPowerState = 4
	// The robot is in an error state and must be powered off before attempting to re-power.
	//
	// Deprecated: Do not use.
	PowerState_STATE_ERROR             PowerState_MotorPowerState = 5
	PowerState_MOTOR_POWER_STATE_ERROR PowerState_MotorPowerState = 5
)

// Enum value maps for PowerState_MotorPowerState.
var (
	PowerState_MotorPowerState_name = map[int32]string{
		0: "STATE_UNKNOWN",
		// Duplicate value: 0: "MOTOR_POWER_STATE_UNKNOWN",
		1: "STATE_OFF",
		// Duplicate value: 1: "MOTOR_POWER_STATE_OFF",
		2: "STATE_ON",
		// Duplicate value: 2: "MOTOR_POWER_STATE_ON",
		3: "STATE_POWERING_ON",
		// Duplicate value: 3: "MOTOR_POWER_STATE_POWERING_ON",
		4: "STATE_POWERING_OFF",
		// Duplicate value: 4: "MOTOR_POWER_STATE_POWERING_OFF",
		5: "STATE_ERROR",
		// Duplicate value: 5: "MOTOR_POWER_STATE_ERROR",
	}
	PowerState_MotorPowerState_value = map[string]int32{
		"STATE_UNKNOWN":                  0,
		"MOTOR_POWER_STATE_UNKNOWN":      0,
		"STATE_OFF":                      1,
		"MOTOR_POWER_STATE_OFF":          1,
		"STATE_ON":                       2,
		"MOTOR_POWER_STATE_ON":           2,
		"STATE_POWERING_ON":              3,
		"MOTOR_POWER_STATE_POWERING_ON":  3,
		"STATE_POWERING_OFF":             4,
		"MOTOR_POWER_STATE_POWERING_OFF": 4,
		"STATE_ERROR":                    5,
		"MOTOR_POWER_STATE_ERROR":        5,
	}
)

func (x PowerState_MotorPowerState) Enum() *PowerState_MotorPowerState {
	p := new(PowerState_MotorPowerState)
	*p = x
	return p
}

func (x PowerState_MotorPowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState_MotorPowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[0].Descriptor()
}

func (PowerState_MotorPowerState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[0]
}

func (x PowerState_MotorPowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState_MotorPowerState.Descriptor instead.
func (PowerState_MotorPowerState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{3, 0}
}

// State describing if robot is connected to shore (wall) power. Robot can't be powered on
// while on shore power
type PowerState_ShorePowerState int32

const (
	// Unknown shore power state. Do not use.
	//
	// Deprecated: Do not use.
	PowerState_STATE_UNKNOWN_SHORE_POWER PowerState_ShorePowerState = 0
	PowerState_SHORE_POWER_STATE_UNKNOWN PowerState_ShorePowerState = 0
	// The robot is connected to shore power. The robot will not power on while connected to
	// shore power.
	//
	// Deprecated: Do not use.
	PowerState_STATE_ON_SHORE_POWER PowerState_ShorePowerState = 1
	PowerState_SHORE_POWER_STATE_ON PowerState_ShorePowerState = 1
	// The robot is disconnected from shore power and motors can be powered up.
	//
	// Deprecated: Do not use.
	PowerState_STATE_OFF_SHORE_POWER PowerState_ShorePowerState = 2
	PowerState_SHORE_POWER_STATE_OFF PowerState_ShorePowerState = 2
)

// Enum value maps for PowerState_ShorePowerState.
var (
	PowerState_ShorePowerState_name = map[int32]string{
		0: "STATE_UNKNOWN_SHORE_POWER",
		// Duplicate value: 0: "SHORE_POWER_STATE_UNKNOWN",
		1: "STATE_ON_SHORE_POWER",
		// Duplicate value: 1: "SHORE_POWER_STATE_ON",
		2: "STATE_OFF_SHORE_POWER",
		// Duplicate value: 2: "SHORE_POWER_STATE_OFF",
	}
	PowerState_ShorePowerState_value = map[string]int32{
		"STATE_UNKNOWN_SHORE_POWER": 0,
		"SHORE_POWER_STATE_UNKNOWN": 0,
		"STATE_ON_SHORE_POWER":      1,
		"SHORE_POWER_STATE_ON":      1,
		"STATE_OFF_SHORE_POWER":     2,
		"SHORE_POWER_STATE_OFF":     2,
	}
)

func (x PowerState_ShorePowerState) Enum() *PowerState_ShorePowerState {
	p := new(PowerState_ShorePowerState)
	*p = x
	return p
}

func (x PowerState_ShorePowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState_ShorePowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[1].Descriptor()
}

func (PowerState_ShorePowerState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[1]
}

func (x PowerState_ShorePowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState_ShorePowerState.Descriptor instead.
func (PowerState_ShorePowerState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{3, 1}
}

// State describing if the robot has power.
type PowerState_RobotPowerState int32

const (
	// Unknown robot power state. Do not use this field.
	PowerState_ROBOT_POWER_STATE_UNKNOWN PowerState_RobotPowerState = 0
	// The robot is powered on.
	PowerState_ROBOT_POWER_STATE_ON PowerState_RobotPowerState = 1
	// The robot does not have power.
	// Impossible to get this response, as the robot cannot respond if it is powered off.
	PowerState_ROBOT_POWER_STATE_OFF PowerState_RobotPowerState = 2
)

// Enum value maps for PowerState_RobotPowerState.
var (
	PowerState_RobotPowerState_name = map[int32]string{
		0: "ROBOT_POWER_STATE_UNKNOWN",
		1: "ROBOT_POWER_STATE_ON",
		2: "ROBOT_POWER_STATE_OFF",
	}
	PowerState_RobotPowerState_value = map[string]int32{
		"ROBOT_POWER_STATE_UNKNOWN": 0,
		"ROBOT_POWER_STATE_ON":      1,
		"ROBOT_POWER_STATE_OFF":     2,
	}
)

func (x PowerState_RobotPowerState) Enum() *PowerState_RobotPowerState {
	p := new(PowerState_RobotPowerState)
	*p = x
	return p
}

func (x PowerState_RobotPowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState_RobotPowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[2].Descriptor()
}

func (PowerState_RobotPowerState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[2]
}

func (x PowerState_RobotPowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState_RobotPowerState.Descriptor instead.
func (PowerState_RobotPowerState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{3, 2}
}

// State describing if the payload port has power.
type PowerState_PayloadPortsPowerState int32

const (
	// Unknown payload port power state. Do not use this field.
	PowerState_PAYLOAD_PORTS_POWER_STATE_UNKNOWN PowerState_PayloadPortsPowerState = 0
	// The payload port is powered on.
	PowerState_PAYLOAD_PORTS_POWER_STATE_ON PowerState_PayloadPortsPowerState = 1
	// The payload port does not have power.
	PowerState_PAYLOAD_PORTS_POWER_STATE_OFF PowerState_PayloadPortsPowerState = 2
)

// Enum value maps for PowerState_PayloadPortsPowerState.
var (
	PowerState_PayloadPortsPowerState_name = map[int32]string{
		0: "PAYLOAD_PORTS_POWER_STATE_UNKNOWN",
		1: "PAYLOAD_PORTS_POWER_STATE_ON",
		2: "PAYLOAD_PORTS_POWER_STATE_OFF",
	}
	PowerState_PayloadPortsPowerState_value = map[string]int32{
		"PAYLOAD_PORTS_POWER_STATE_UNKNOWN": 0,
		"PAYLOAD_PORTS_POWER_STATE_ON":      1,
		"PAYLOAD_PORTS_POWER_STATE_OFF":     2,
	}
)

func (x PowerState_PayloadPortsPowerState) Enum() *PowerState_PayloadPortsPowerState {
	p := new(PowerState_PayloadPortsPowerState)
	*p = x
	return p
}

func (x PowerState_PayloadPortsPowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState_PayloadPortsPowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[3].Descriptor()
}

func (PowerState_PayloadPortsPowerState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[3]
}

func (x PowerState_PayloadPortsPowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState_PayloadPortsPowerState.Descriptor instead.
func (PowerState_PayloadPortsPowerState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{3, 3}
}

// State describing if the robot Wi-Fi router has power.
type PowerState_WifiRadioPowerState int32

const (
	// Unknown radio power state. Do not use this field.
	PowerState_WIFI_RADIO_POWER_STATE_UNKNOWN PowerState_WifiRadioPowerState = 0
	// The radio is powered on.
	PowerState_WIFI_RADIO_POWER_STATE_ON PowerState_WifiRadioPowerState = 1
	// The radio does not have power.
	PowerState_WIFI_RADIO_POWER_STATE_OFF PowerState_WifiRadioPowerState = 2
)

// Enum value maps for PowerState_WifiRadioPowerState.
var (
	PowerState_WifiRadioPowerState_name = map[int32]string{
		0: "WIFI_RADIO_POWER_STATE_UNKNOWN",
		1: "WIFI_RADIO_POWER_STATE_ON",
		2: "WIFI_RADIO_POWER_STATE_OFF",
	}
	PowerState_WifiRadioPowerState_value = map[string]int32{
		"WIFI_RADIO_POWER_STATE_UNKNOWN": 0,
		"WIFI_RADIO_POWER_STATE_ON":      1,
		"WIFI_RADIO_POWER_STATE_OFF":     2,
	}
)

func (x PowerState_WifiRadioPowerState) Enum() *PowerState_WifiRadioPowerState {
	p := new(PowerState_WifiRadioPowerState)
	*p = x
	return p
}

func (x PowerState_WifiRadioPowerState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerState_WifiRadioPowerState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[4].Descriptor()
}

func (PowerState_WifiRadioPowerState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[4]
}

func (x PowerState_WifiRadioPowerState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerState_WifiRadioPowerState.Descriptor instead.
func (PowerState_WifiRadioPowerState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{3, 4}
}

type SystemFault_Severity int32

const (
	// Unknown severity
	SystemFault_SEVERITY_UNKNOWN SystemFault_Severity = 0
	// No hardware problem
	SystemFault_SEVERITY_INFO SystemFault_Severity = 1
	// Robot performance may be degraded
	SystemFault_SEVERITY_WARN SystemFault_Severity = 2
	// Critical fault
	SystemFault_SEVERITY_CRITICAL SystemFault_Severity = 3
)

// Enum value maps for SystemFault_Severity.
var (
	SystemFault_Severity_name = map[int32]string{
		0: "SEVERITY_UNKNOWN",
		1: "SEVERITY_INFO",
		2: "SEVERITY_WARN",
		3: "SEVERITY_CRITICAL",
	}
	SystemFault_Severity_value = map[string]int32{
		"SEVERITY_UNKNOWN":  0,
		"SEVERITY_INFO":     1,
		"SEVERITY_WARN":     2,
		"SEVERITY_CRITICAL": 3,
	}
)

func (x SystemFault_Severity) Enum() *SystemFault_Severity {
	p := new(SystemFault_Severity)
	*p = x
	return p
}

func (x SystemFault_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemFault_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[5].Descriptor()
}

func (SystemFault_Severity) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[5]
}

func (x SystemFault_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemFault_Severity.Descriptor instead.
func (SystemFault_Severity) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{5, 0}
}

type EStopState_Type int32

const (
	// Unknown type of E-Stop. Do not use this field.
	EStopState_TYPE_UNKNOWN EStopState_Type = 0
	// E-Stop is a physical button
	EStopState_TYPE_HARDWARE EStopState_Type = 1
	// E-Stop is a software process
	EStopState_TYPE_SOFTWARE EStopState_Type = 2
)

// Enum value maps for EStopState_Type.
var (
	EStopState_Type_name = map[int32]string{
		0: "TYPE_UNKNOWN",
		1: "TYPE_HARDWARE",
		2: "TYPE_SOFTWARE",
	}
	EStopState_Type_value = map[string]int32{
		"TYPE_UNKNOWN":  0,
		"TYPE_HARDWARE": 1,
		"TYPE_SOFTWARE": 2,
	}
)

func (x EStopState_Type) Enum() *EStopState_Type {
	p := new(EStopState_Type)
	*p = x
	return p
}

func (x EStopState_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStopState_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[6].Descriptor()
}

func (EStopState_Type) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[6]
}

func (x EStopState_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EStopState_Type.Descriptor instead.
func (EStopState_Type) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{6, 0}
}

type EStopState_State int32

const (
	// No E-Stop information is present. Only happens in an error case.
	EStopState_STATE_UNKNOWN EStopState_State = 0
	// E-Stop is active -- robot cannot power its actuators.
	EStopState_STATE_ESTOPPED EStopState_State = 1
	// E-Stop is released -- robot may be able to power its actuators.
	EStopState_STATE_NOT_ESTOPPED EStopState_State = 2
)

// Enum value maps for EStopState_State.
var (
	EStopState_State_name = map[int32]string{
		0: "STATE_UNKNOWN",
		1: "STATE_ESTOPPED",
		2: "STATE_NOT_ESTOPPED",
	}
	EStopState_State_value = map[string]int32{
		"STATE_UNKNOWN":      0,
		"STATE_ESTOPPED":     1,
		"STATE_NOT_ESTOPPED": 2,
	}
)

func (x EStopState_State) Enum() *EStopState_State {
	p := new(EStopState_State)
	*p = x
	return p
}

func (x EStopState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EStopState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[7].Descriptor()
}

func (EStopState_State) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[7]
}

func (x EStopState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EStopState_State.Descriptor instead.
func (EStopState_State) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{6, 1}
}

type BatteryState_Status int32

const (
	// The battery is in an unknown / unexpected state.
	BatteryState_STATUS_UNKNOWN BatteryState_Status = 0
	// The battery is not plugged in or otherwise not talking.
	BatteryState_STATUS_MISSING BatteryState_Status = 1
	// The battery is plugged in to shore power and charging.
	BatteryState_STATUS_CHARGING BatteryState_Status = 2
	// The battery is not plugged into shore power and discharging.
	BatteryState_STATUS_DISCHARGING BatteryState_Status = 3
	// The battery was just plugged in and is booting up= 3;
	BatteryState_STATUS_BOOTING BatteryState_Status = 4
)

// Enum value maps for BatteryState_Status.
var (
	BatteryState_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_MISSING",
		2: "STATUS_CHARGING",
		3: "STATUS_DISCHARGING",
		4: "STATUS_BOOTING",
	}
	BatteryState_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_MISSING":     1,
		"STATUS_CHARGING":    2,
		"STATUS_DISCHARGING": 3,
		"STATUS_BOOTING":     4,
	}
)

func (x BatteryState_Status) Enum() *BatteryState_Status {
	p := new(BatteryState_Status)
	*p = x
	return p
}

func (x BatteryState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[8].Descriptor()
}

func (BatteryState_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[8]
}

func (x BatteryState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryState_Status.Descriptor instead.
func (BatteryState_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{7, 0}
}

type BehaviorFault_Cause int32

const (
	// Unknown cause of error
	BehaviorFault_CAUSE_UNKNOWN BehaviorFault_Cause = 0
	// Error caused by mobility failure or fall
	BehaviorFault_CAUSE_FALL BehaviorFault_Cause = 1
	// Error caused by robot hardware malfunction
	BehaviorFault_CAUSE_HARDWARE BehaviorFault_Cause = 2
	/// A lease has timed out
	BehaviorFault_CAUSE_LEASE_TIMEOUT BehaviorFault_Cause = 3
)

// Enum value maps for BehaviorFault_Cause.
var (
	BehaviorFault_Cause_name = map[int32]string{
		0: "CAUSE_UNKNOWN",
		1: "CAUSE_FALL",
		2: "CAUSE_HARDWARE",
		3: "CAUSE_LEASE_TIMEOUT",
	}
	BehaviorFault_Cause_value = map[string]int32{
		"CAUSE_UNKNOWN":       0,
		"CAUSE_FALL":          1,
		"CAUSE_HARDWARE":      2,
		"CAUSE_LEASE_TIMEOUT": 3,
	}
)

func (x BehaviorFault_Cause) Enum() *BehaviorFault_Cause {
	p := new(BehaviorFault_Cause)
	*p = x
	return p
}

func (x BehaviorFault_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BehaviorFault_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[9].Descriptor()
}

func (BehaviorFault_Cause) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[9]
}

func (x BehaviorFault_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BehaviorFault_Cause.Descriptor instead.
func (BehaviorFault_Cause) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{11, 0}
}

type BehaviorFault_Status int32

const (
	// Unknown clearable status
	BehaviorFault_STATUS_UNKNOWN BehaviorFault_Status = 0
	// Fault is clearable
	BehaviorFault_STATUS_CLEARABLE BehaviorFault_Status = 1
	// Fault is currently not clearable
	BehaviorFault_STATUS_UNCLEARABLE BehaviorFault_Status = 2
)

// Enum value maps for BehaviorFault_Status.
var (
	BehaviorFault_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_CLEARABLE",
		2: "STATUS_UNCLEARABLE",
	}
	BehaviorFault_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_CLEARABLE":   1,
		"STATUS_UNCLEARABLE": 2,
	}
)

func (x BehaviorFault_Status) Enum() *BehaviorFault_Status {
	p := new(BehaviorFault_Status)
	*p = x
	return p
}

func (x BehaviorFault_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BehaviorFault_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[10].Descriptor()
}

func (BehaviorFault_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[10]
}

func (x BehaviorFault_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BehaviorFault_Status.Descriptor instead.
func (BehaviorFault_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{11, 1}
}

type WiFiState_Mode int32

const (
	// The robot's comms state is unknown, or no user requested mode.
	WiFiState_MODE_UNKNOWN WiFiState_Mode = 0
	// The robot is acting as an access point.
	WiFiState_MODE_ACCESS_POINT WiFiState_Mode = 1
	// The robot is connected to a network.
	WiFiState_MODE_CLIENT WiFiState_Mode = 2
)

// Enum value maps for WiFiState_Mode.
var (
	WiFiState_Mode_name = map[int32]string{
		0: "MODE_UNKNOWN",
		1: "MODE_ACCESS_POINT",
		2: "MODE_CLIENT",
	}
	WiFiState_Mode_value = map[string]int32{
		"MODE_UNKNOWN":      0,
		"MODE_ACCESS_POINT": 1,
		"MODE_CLIENT":       2,
	}
)

func (x WiFiState_Mode) Enum() *WiFiState_Mode {
	p := new(WiFiState_Mode)
	*p = x
	return p
}

func (x WiFiState_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WiFiState_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[11].Descriptor()
}

func (WiFiState_Mode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[11]
}

func (x WiFiState_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WiFiState_Mode.Descriptor instead.
func (WiFiState_Mode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{14, 0}
}

type FootState_Contact int32

const (
	// Unknown contact. Do not use.
	FootState_CONTACT_UNKNOWN FootState_Contact = 0
	// The foot is currently in contact with the ground.
	FootState_CONTACT_MADE FootState_Contact = 1
	// The foot is not in contact with the ground.
	FootState_CONTACT_LOST FootState_Contact = 2
)

// Enum value maps for FootState_Contact.
var (
	FootState_Contact_name = map[int32]string{
		0: "CONTACT_UNKNOWN",
		1: "CONTACT_MADE",
		2: "CONTACT_LOST",
	}
	FootState_Contact_value = map[string]int32{
		"CONTACT_UNKNOWN": 0,
		"CONTACT_MADE":    1,
		"CONTACT_LOST":    2,
	}
)

func (x FootState_Contact) Enum() *FootState_Contact {
	p := new(FootState_Contact)
	*p = x
	return p
}

func (x FootState_Contact) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FootState_Contact) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[12].Descriptor()
}

func (FootState_Contact) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[12]
}

func (x FootState_Contact) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FootState_Contact.Descriptor instead.
func (FootState_Contact) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{15, 0}
}

type ManipulatorState_StowState int32

const (
	ManipulatorState_STOWSTATE_UNKNOWN  ManipulatorState_StowState = 0
	ManipulatorState_STOWSTATE_STOWED   ManipulatorState_StowState = 1
	ManipulatorState_STOWSTATE_DEPLOYED ManipulatorState_StowState = 2
)

// Enum value maps for ManipulatorState_StowState.
var (
	ManipulatorState_StowState_name = map[int32]string{
		0: "STOWSTATE_UNKNOWN",
		1: "STOWSTATE_STOWED",
		2: "STOWSTATE_DEPLOYED",
	}
	ManipulatorState_StowState_value = map[string]int32{
		"STOWSTATE_UNKNOWN":  0,
		"STOWSTATE_STOWED":   1,
		"STOWSTATE_DEPLOYED": 2,
	}
)

func (x ManipulatorState_StowState) Enum() *ManipulatorState_StowState {
	p := new(ManipulatorState_StowState)
	*p = x
	return p
}

func (x ManipulatorState_StowState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManipulatorState_StowState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[13].Descriptor()
}

func (ManipulatorState_StowState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[13]
}

func (x ManipulatorState_StowState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManipulatorState_StowState.Descriptor instead.
func (ManipulatorState_StowState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{16, 0}
}

// The stowing behavior is modified as a function of the Carry State.  If holding an item, the
// stowing behavior will be modified as follows:
//  NOT_CARRIABLE - The arm will not stow, instead entering stop
//  CARRIABLE - The arm will not stow, instead entering stop
//  CARRIABLE_AND_STOWABLE - The arm will stow while continuing to grasp the item
// The comms loss behavior of the arm is also modified as follows:
//  NOT_CARRIABLE - The arm will release the item and stow
//  CARRIABLE - The arm will not stow, instead entering stop
//  CARRIABLE_AND_STOWABLE - The arm will stow while continuing to grasp the item
type ManipulatorState_CarryState int32

const (
	ManipulatorState_CARRY_STATE_UNKNOWN                ManipulatorState_CarryState = 0
	ManipulatorState_CARRY_STATE_NOT_CARRIABLE          ManipulatorState_CarryState = 1
	ManipulatorState_CARRY_STATE_CARRIABLE              ManipulatorState_CarryState = 2
	ManipulatorState_CARRY_STATE_CARRIABLE_AND_STOWABLE ManipulatorState_CarryState = 3
)

// Enum value maps for ManipulatorState_CarryState.
var (
	ManipulatorState_CarryState_name = map[int32]string{
		0: "CARRY_STATE_UNKNOWN",
		1: "CARRY_STATE_NOT_CARRIABLE",
		2: "CARRY_STATE_CARRIABLE",
		3: "CARRY_STATE_CARRIABLE_AND_STOWABLE",
	}
	ManipulatorState_CarryState_value = map[string]int32{
		"CARRY_STATE_UNKNOWN":                0,
		"CARRY_STATE_NOT_CARRIABLE":          1,
		"CARRY_STATE_CARRIABLE":              2,
		"CARRY_STATE_CARRIABLE_AND_STOWABLE": 3,
	}
)

func (x ManipulatorState_CarryState) Enum() *ManipulatorState_CarryState {
	p := new(ManipulatorState_CarryState)
	*p = x
	return p
}

func (x ManipulatorState_CarryState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManipulatorState_CarryState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[14].Descriptor()
}

func (ManipulatorState_CarryState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[14]
}

func (x ManipulatorState_CarryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManipulatorState_CarryState.Descriptor instead.
func (ManipulatorState_CarryState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{16, 1}
}

// If the robot is stopped due to being impaired, this is the reason why.
type RobotImpairedState_ImpairedStatus int32

const (
	// Unknown/unexpected error.
	RobotImpairedState_IMPAIRED_STATUS_UNKNOWN RobotImpairedState_ImpairedStatus = 0
	// The robot is able to drive.
	RobotImpairedState_IMPAIRED_STATUS_OK RobotImpairedState_ImpairedStatus = 1
	// The autonomous system does not have any data from the robot state service.
	RobotImpairedState_IMPAIRED_STATUS_NO_ROBOT_DATA RobotImpairedState_ImpairedStatus = 2
	// There is a system fault which caused the robot to stop. See system_fault for details.
	RobotImpairedState_IMPAIRED_STATUS_SYSTEM_FAULT RobotImpairedState_ImpairedStatus = 3
	// The robot's motors are not powered on.
	RobotImpairedState_IMPAIRED_STATUS_NO_MOTOR_POWER RobotImpairedState_ImpairedStatus = 4
	// The autonomous system is expected to have a remote point cloud (e.g. a LIDAR), but this is not working.
	RobotImpairedState_IMPAIRED_STATUS_REMOTE_CLOUDS_NOT_WORKING RobotImpairedState_ImpairedStatus = 5
	// A remote service the autonomous system depends on is not working.
	RobotImpairedState_IMPAIRED_STATUS_SERVICE_FAULT RobotImpairedState_ImpairedStatus = 6
	// A behavior fault caused the robot to stop. See behavior_faults for details.
	RobotImpairedState_IMPAIRED_STATUS_BEHAVIOR_FAULT RobotImpairedState_ImpairedStatus = 7
)

// Enum value maps for RobotImpairedState_ImpairedStatus.
var (
	RobotImpairedState_ImpairedStatus_name = map[int32]string{
		0: "IMPAIRED_STATUS_UNKNOWN",
		1: "IMPAIRED_STATUS_OK",
		2: "IMPAIRED_STATUS_NO_ROBOT_DATA",
		3: "IMPAIRED_STATUS_SYSTEM_FAULT",
		4: "IMPAIRED_STATUS_NO_MOTOR_POWER",
		5: "IMPAIRED_STATUS_REMOTE_CLOUDS_NOT_WORKING",
		6: "IMPAIRED_STATUS_SERVICE_FAULT",
		7: "IMPAIRED_STATUS_BEHAVIOR_FAULT",
	}
	RobotImpairedState_ImpairedStatus_value = map[string]int32{
		"IMPAIRED_STATUS_UNKNOWN":                   0,
		"IMPAIRED_STATUS_OK":                        1,
		"IMPAIRED_STATUS_NO_ROBOT_DATA":             2,
		"IMPAIRED_STATUS_SYSTEM_FAULT":              3,
		"IMPAIRED_STATUS_NO_MOTOR_POWER":            4,
		"IMPAIRED_STATUS_REMOTE_CLOUDS_NOT_WORKING": 5,
		"IMPAIRED_STATUS_SERVICE_FAULT":             6,
		"IMPAIRED_STATUS_BEHAVIOR_FAULT":            7,
	}
)

func (x RobotImpairedState_ImpairedStatus) Enum() *RobotImpairedState_ImpairedStatus {
	p := new(RobotImpairedState_ImpairedStatus)
	*p = x
	return p
}

func (x RobotImpairedState_ImpairedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobotImpairedState_ImpairedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_robot_state_proto_enumTypes[15].Descriptor()
}

func (RobotImpairedState_ImpairedStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_robot_state_proto_enumTypes[15]
}

func (x RobotImpairedState_ImpairedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobotImpairedState_ImpairedStatus.Descriptor instead.
func (RobotImpairedState_ImpairedStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{26, 0}
}

// Kinematic model of the robot skeleton.
type Skeleton struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of links that make up the robot skeleton.
	Links []*Skeleton_Link `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty"`
	// URDF description of the robot skeleton.
	Urdf string `protobuf:"bytes,3,opt,name=urdf,proto3" json:"urdf,omitempty"`
}

func (x *Skeleton) Reset() {
	*x = Skeleton{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skeleton) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skeleton) ProtoMessage() {}

func (x *Skeleton) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skeleton.ProtoReflect.Descriptor instead.
func (*Skeleton) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{0}
}

func (x *Skeleton) GetLinks() []*Skeleton_Link {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Skeleton) GetUrdf() string {
	if x != nil {
		return x.Urdf
	}
	return ""
}

// Robot Hardware Configuration, described with the robot skeleton.
type HardwareConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot link and joint description.
	Skeleton                           *Skeleton `protobuf:"bytes,1,opt,name=skeleton,proto3" json:"skeleton,omitempty"`
	CanPowerCommandRequestOffRobot     bool      `protobuf:"varint,2,opt,name=can_power_command_request_off_robot,json=canPowerCommandRequestOffRobot,proto3" json:"can_power_command_request_off_robot,omitempty"`             // Turn off the robot. Same as physical switch.
	CanPowerCommandRequestCycleRobot   bool      `protobuf:"varint,3,opt,name=can_power_command_request_cycle_robot,json=canPowerCommandRequestCycleRobot,proto3" json:"can_power_command_request_cycle_robot,omitempty"`       // Power cycle the robot. Same as physical switch.
	CanPowerCommandRequestPayloadPorts bool      `protobuf:"varint,4,opt,name=can_power_command_request_payload_ports,json=canPowerCommandRequestPayloadPorts,proto3" json:"can_power_command_request_payload_ports,omitempty"` // Control power to the payload ports.
	CanPowerCommandRequestWifiRadio    bool      `protobuf:"varint,5,opt,name=can_power_command_request_wifi_radio,json=canPowerCommandRequestWifiRadio,proto3" json:"can_power_command_request_wifi_radio,omitempty"`          // Control power to the hardware Wi-Fi radio.
}

func (x *HardwareConfiguration) Reset() {
	*x = HardwareConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HardwareConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HardwareConfiguration) ProtoMessage() {}

func (x *HardwareConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HardwareConfiguration.ProtoReflect.Descriptor instead.
func (*HardwareConfiguration) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{1}
}

func (x *HardwareConfiguration) GetSkeleton() *Skeleton {
	if x != nil {
		return x.Skeleton
	}
	return nil
}

func (x *HardwareConfiguration) GetCanPowerCommandRequestOffRobot() bool {
	if x != nil {
		return x.CanPowerCommandRequestOffRobot
	}
	return false
}

func (x *HardwareConfiguration) GetCanPowerCommandRequestCycleRobot() bool {
	if x != nil {
		return x.CanPowerCommandRequestCycleRobot
	}
	return false
}

func (x *HardwareConfiguration) GetCanPowerCommandRequestPayloadPorts() bool {
	if x != nil {
		return x.CanPowerCommandRequestPayloadPorts
	}
	return false
}

func (x *HardwareConfiguration) GetCanPowerCommandRequestWifiRadio() bool {
	if x != nil {
		return x.CanPowerCommandRequestWifiRadio
	}
	return false
}

// The current state of the robot.
type RobotState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Power state (e.g. motor power).
	PowerState *PowerState `protobuf:"bytes,1,opt,name=power_state,json=powerState,proto3" json:"power_state,omitempty"`
	// Battery state (e.g. charge, temperature, current).
	BatteryStates []*BatteryState `protobuf:"bytes,2,rep,name=battery_states,json=batteryStates,proto3" json:"battery_states,omitempty"`
	// Communication state (e.g. type of comms network).
	CommsStates []*CommsState `protobuf:"bytes,3,rep,name=comms_states,json=commsStates,proto3" json:"comms_states,omitempty"`
	// Different system faults for the robot.
	SystemFaultState *SystemFaultState `protobuf:"bytes,4,opt,name=system_fault_state,json=systemFaultState,proto3" json:"system_fault_state,omitempty"`
	// Because there may be multiple E-Stops, and because E-Stops may be supplied with payloads,
	// this is a repeated field instead of a hardcoded list.
	EstopStates []*EStopState `protobuf:"bytes,5,rep,name=estop_states,json=estopStates,proto3" json:"estop_states,omitempty"`
	// Kinematic state of the robot (e.g. positions, velocities, other frame information).
	KinematicState *KinematicState `protobuf:"bytes,6,opt,name=kinematic_state,json=kinematicState,proto3" json:"kinematic_state,omitempty"`
	// Robot behavior fault state.
	BehaviorFaultState *BehaviorFaultState `protobuf:"bytes,7,opt,name=behavior_fault_state,json=behaviorFaultState,proto3" json:"behavior_fault_state,omitempty"`
	// The foot states (and contact information).
	FootState []*FootState `protobuf:"bytes,8,rep,name=foot_state,json=footState,proto3" json:"foot_state,omitempty"`
	/// State of the manipulator, only populated if an arm is attached to the robot.
	ManipulatorState *ManipulatorState `protobuf:"bytes,11,opt,name=manipulator_state,json=manipulatorState,proto3" json:"manipulator_state,omitempty"`
	// Service faults for services registered with the robot.
	ServiceFaultState *ServiceFaultState `protobuf:"bytes,10,opt,name=service_fault_state,json=serviceFaultState,proto3" json:"service_fault_state,omitempty"`
}

func (x *RobotState) Reset() {
	*x = RobotState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotState) ProtoMessage() {}

func (x *RobotState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotState.ProtoReflect.Descriptor instead.
func (*RobotState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{2}
}

func (x *RobotState) GetPowerState() *PowerState {
	if x != nil {
		return x.PowerState
	}
	return nil
}

func (x *RobotState) GetBatteryStates() []*BatteryState {
	if x != nil {
		return x.BatteryStates
	}
	return nil
}

func (x *RobotState) GetCommsStates() []*CommsState {
	if x != nil {
		return x.CommsStates
	}
	return nil
}

func (x *RobotState) GetSystemFaultState() *SystemFaultState {
	if x != nil {
		return x.SystemFaultState
	}
	return nil
}

func (x *RobotState) GetEstopStates() []*EStopState {
	if x != nil {
		return x.EstopStates
	}
	return nil
}

func (x *RobotState) GetKinematicState() *KinematicState {
	if x != nil {
		return x.KinematicState
	}
	return nil
}

func (x *RobotState) GetBehaviorFaultState() *BehaviorFaultState {
	if x != nil {
		return x.BehaviorFaultState
	}
	return nil
}

func (x *RobotState) GetFootState() []*FootState {
	if x != nil {
		return x.FootState
	}
	return nil
}

func (x *RobotState) GetManipulatorState() *ManipulatorState {
	if x != nil {
		return x.ManipulatorState
	}
	return nil
}

func (x *RobotState) GetServiceFaultState() *ServiceFaultState {
	if x != nil {
		return x.ServiceFaultState
	}
	return nil
}

// The power state for the robot.
// If a robot is not in the POWER OFF state, if is not safe to approach.
// The robot must not be E-Stopped to enter the POWER_ON state.
type PowerState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot clock timestamp corresponding to these readings.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The motor power state of the robot.
	MotorPowerState PowerState_MotorPowerState `protobuf:"varint,2,opt,name=motor_power_state,json=motorPowerState,proto3,enum=bosdyn.api.PowerState_MotorPowerState" json:"motor_power_state,omitempty"`
	// The shore power state of the robot.
	ShorePowerState PowerState_ShorePowerState `protobuf:"varint,3,opt,name=shore_power_state,json=shorePowerState,proto3,enum=bosdyn.api.PowerState_ShorePowerState" json:"shore_power_state,omitempty"`
	// The payload ports power state of the robot.
	RobotPowerState PowerState_RobotPowerState `protobuf:"varint,6,opt,name=robot_power_state,json=robotPowerState,proto3,enum=bosdyn.api.PowerState_RobotPowerState" json:"robot_power_state,omitempty"`
	// The payload ports power state of the robot.
	PayloadPortsPowerState PowerState_PayloadPortsPowerState `protobuf:"varint,7,opt,name=payload_ports_power_state,json=payloadPortsPowerState,proto3,enum=bosdyn.api.PowerState_PayloadPortsPowerState" json:"payload_ports_power_state,omitempty"`
	// The hardware radio power state of the robot.
	WifiRadioPowerState PowerState_WifiRadioPowerState `protobuf:"varint,9,opt,name=wifi_radio_power_state,json=wifiRadioPowerState,proto3,enum=bosdyn.api.PowerState_WifiRadioPowerState" json:"wifi_radio_power_state,omitempty"`
	// Number from 0 (empty) to 100 (full) indicating the estimated state of charge.
	// This field provides a summary of the BatteryStates that provide power for motor and/or
	// base compute power, both of which are required for locomotion.
	LocomotionChargePercentage *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=locomotion_charge_percentage,json=locomotionChargePercentage,proto3" json:"locomotion_charge_percentage,omitempty"`
	// An estimate of remaining runtime. Note that this field might not be populated.
	// This field provides a summary of the BatteryStates that provide power for motor and/or
	// base compute power, both of which are required for locomotion.
	LocomotionEstimatedRuntime *durationpb.Duration `protobuf:"bytes,5,opt,name=locomotion_estimated_runtime,json=locomotionEstimatedRuntime,proto3" json:"locomotion_estimated_runtime,omitempty"`
}

func (x *PowerState) Reset() {
	*x = PowerState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerState) ProtoMessage() {}

func (x *PowerState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerState.ProtoReflect.Descriptor instead.
func (*PowerState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{3}
}

func (x *PowerState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *PowerState) GetMotorPowerState() PowerState_MotorPowerState {
	if x != nil {
		return x.MotorPowerState
	}
	return PowerState_STATE_UNKNOWN
}

func (x *PowerState) GetShorePowerState() PowerState_ShorePowerState {
	if x != nil {
		return x.ShorePowerState
	}
	return PowerState_STATE_UNKNOWN_SHORE_POWER
}

func (x *PowerState) GetRobotPowerState() PowerState_RobotPowerState {
	if x != nil {
		return x.RobotPowerState
	}
	return PowerState_ROBOT_POWER_STATE_UNKNOWN
}

func (x *PowerState) GetPayloadPortsPowerState() PowerState_PayloadPortsPowerState {
	if x != nil {
		return x.PayloadPortsPowerState
	}
	return PowerState_PAYLOAD_PORTS_POWER_STATE_UNKNOWN
}

func (x *PowerState) GetWifiRadioPowerState() PowerState_WifiRadioPowerState {
	if x != nil {
		return x.WifiRadioPowerState
	}
	return PowerState_WIFI_RADIO_POWER_STATE_UNKNOWN
}

func (x *PowerState) GetLocomotionChargePercentage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.LocomotionChargePercentage
	}
	return nil
}

func (x *PowerState) GetLocomotionEstimatedRuntime() *durationpb.Duration {
	if x != nil {
		return x.LocomotionEstimatedRuntime
	}
	return nil
}

// The current state of each system fault the robot is experiencing.
// An "active" fault indicates a hardware/software currently on the robot.
// A "historical" fault indicates a, now cleared, hardware/software problem.
// Historical faults are useful to diagnose robot behavior subject to intermittent failed states.
type SystemFaultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently active faults
	Faults []*SystemFault `protobuf:"bytes,1,rep,name=faults,proto3" json:"faults,omitempty"`
	// Inactive faults that cleared within the last 10 minutes
	HistoricalFaults []*SystemFault `protobuf:"bytes,2,rep,name=historical_faults,json=historicalFaults,proto3" json:"historical_faults,omitempty"`
	// Aggregated fault data.
	// This provides a very quick way of determining if there any
	// "battery" or "vision" faults above a certain severity level.
	Aggregated map[string]SystemFault_Severity `protobuf:"bytes,3,rep,name=aggregated,proto3" json:"aggregated,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=bosdyn.api.SystemFault_Severity"`
}

func (x *SystemFaultState) Reset() {
	*x = SystemFaultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemFaultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemFaultState) ProtoMessage() {}

func (x *SystemFaultState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemFaultState.ProtoReflect.Descriptor instead.
func (*SystemFaultState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{4}
}

func (x *SystemFaultState) GetFaults() []*SystemFault {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *SystemFaultState) GetHistoricalFaults() []*SystemFault {
	if x != nil {
		return x.HistoricalFaults
	}
	return nil
}

func (x *SystemFaultState) GetAggregated() map[string]SystemFault_Severity {
	if x != nil {
		return x.Aggregated
	}
	return nil
}

// The current system faults for a robot.
// A fault is an indicator of a hardware or software problem on the robot. An
// active fault may indicate the robot may fail to comply with a user request.
// The exact response a fault may vary, but possible responses include: failure
// to enable motor power, loss of perception enabled behavior, or triggering a
// fault recovery behavior on robot.
type SystemFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the fault.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Time of robot local clock at fault onset.
	OnsetTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=onset_timestamp,json=onsetTimestamp,proto3" json:"onset_timestamp,omitempty"`
	// Time elapsed since onset of the fault.
	Duration *durationpb.Duration `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	// Error code returned by a fault. The exact interpretation of the fault code
	// is unique to each variety of fault on the robot. The code is useful for
	// Boston Dynamics support staff to diagnose hardware/software issues on
	// robot.
	Code int32 `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	// Fault UID
	Uid uint64 `protobuf:"varint,8,opt,name=uid,proto3" json:"uid,omitempty"`
	// User visible description of the fault (and possibly remedies.)
	ErrorMessage string `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Fault attributes
	// Each fault may be flagged with attribute metadata (strings in this case.)
	// These attributes are useful to communicate that a particular fault may
	// have significant effect on robot operations. Some potential attributes
	// may be "robot", "imu", "vision", or "battery". These attributes would let
	// us flag a fault as indicating a problem with the base robot hardware,
	// gyro, perception system, or battery respectively. A fault may have, zero,
	// one, or more attributes attached to it, i.e. a "battery" fault may also
	// be considered a "robot" fault.
	Attributes []string `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty"`
	// Fault severity, how bad is the fault?
	// The severity level will have some indication of the potential robot
	// response to the fault. For example, a fault marked with "battery"
	// attribute and severity level SEVERITY_WARN may indicate a low battery
	// state of charge. However a "battery" fault with severity level
	// SEVERITY_CRITICAL likely means the robot is going to shutdown
	// immediately.
	Severity SystemFault_Severity `protobuf:"varint,7,opt,name=severity,proto3,enum=bosdyn.api.SystemFault_Severity" json:"severity,omitempty"`
}

func (x *SystemFault) Reset() {
	*x = SystemFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemFault) ProtoMessage() {}

func (x *SystemFault) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemFault.ProtoReflect.Descriptor instead.
func (*SystemFault) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{5}
}

func (x *SystemFault) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SystemFault) GetOnsetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.OnsetTimestamp
	}
	return nil
}

func (x *SystemFault) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SystemFault) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SystemFault) GetUid() uint64 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *SystemFault) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *SystemFault) GetAttributes() []string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *SystemFault) GetSeverity() SystemFault_Severity {
	if x != nil {
		return x.Severity
	}
	return SystemFault_SEVERITY_UNKNOWN
}

// The robot's current E-Stop states and endpoints.
// A typical robot has several different E-Stops, all which must be "NOT_ESTOPPED"
// in order to run the robot.
type EStopState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot clock timestamp corresponding to these readings.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Name of the E-Stop
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// What kind of E-Stop this message describes.
	Type EStopState_Type `protobuf:"varint,3,opt,name=type,proto3,enum=bosdyn.api.EStopState_Type" json:"type,omitempty"`
	// The state of the E-Stop (is it E-Stopped or not?)
	State EStopState_State `protobuf:"varint,4,opt,name=state,proto3,enum=bosdyn.api.EStopState_State" json:"state,omitempty"`
	// Optional description of E-Stop status.
	StateDescription string `protobuf:"bytes,5,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
}

func (x *EStopState) Reset() {
	*x = EStopState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EStopState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EStopState) ProtoMessage() {}

func (x *EStopState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EStopState.ProtoReflect.Descriptor instead.
func (*EStopState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{6}
}

func (x *EStopState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EStopState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EStopState) GetType() EStopState_Type {
	if x != nil {
		return x.Type
	}
	return EStopState_TYPE_UNKNOWN
}

func (x *EStopState) GetState() EStopState_State {
	if x != nil {
		return x.State
	}
	return EStopState_STATE_UNKNOWN
}

func (x *EStopState) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

// The battery state for the robot. This includes information about the charge or the
// battery temperature.
type BatteryState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot clock timestamp corresponding to these readings.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// An identifier for this battery (could be a serial number or a name. subject to change).
	Identifier string `protobuf:"bytes,2,opt,name=identifier,proto3" json:"identifier,omitempty"`
	// Number from 0 (empty) to 100 (full) indicating the estimated state of charge of the battery.
	ChargePercentage *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=charge_percentage,json=chargePercentage,proto3" json:"charge_percentage,omitempty"`
	// An estimate of remaining runtime. Note that this field might not be populated.
	EstimatedRuntime *durationpb.Duration `protobuf:"bytes,4,opt,name=estimated_runtime,json=estimatedRuntime,proto3" json:"estimated_runtime,omitempty"`
	// Measured current into (charging, positive) or out of (discharging, negative) the battery in
	// Amps.
	Current *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=current,proto3" json:"current,omitempty"`
	// Measured voltage of the entire battery in Volts.
	Voltage *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=voltage,proto3" json:"voltage,omitempty"`
	// Measured temperature measurements of battery, in Celsius.
	// Temperatures may be measured in many locations across the battery.
	Temperatures []float64 `protobuf:"fixed64,7,rep,packed,name=temperatures,proto3" json:"temperatures,omitempty"`
	// Current state of the battery.
	Status BatteryState_Status `protobuf:"varint,8,opt,name=status,proto3,enum=bosdyn.api.BatteryState_Status" json:"status,omitempty"`
}

func (x *BatteryState) Reset() {
	*x = BatteryState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryState) ProtoMessage() {}

func (x *BatteryState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryState.ProtoReflect.Descriptor instead.
func (*BatteryState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{7}
}

func (x *BatteryState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *BatteryState) GetIdentifier() string {
	if x != nil {
		return x.Identifier
	}
	return ""
}

func (x *BatteryState) GetChargePercentage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ChargePercentage
	}
	return nil
}

func (x *BatteryState) GetEstimatedRuntime() *durationpb.Duration {
	if x != nil {
		return x.EstimatedRuntime
	}
	return nil
}

func (x *BatteryState) GetCurrent() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *BatteryState) GetVoltage() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Voltage
	}
	return nil
}

func (x *BatteryState) GetTemperatures() []float64 {
	if x != nil {
		return x.Temperatures
	}
	return nil
}

func (x *BatteryState) GetStatus() BatteryState_Status {
	if x != nil {
		return x.Status
	}
	return BatteryState_STATUS_UNKNOWN
}

// The kinematic state of the robot describes the current estimated positions of the robot body and joints throughout the world.
// It includes a transform snapshot of the robot’s current known frames as well as joint states and the velocity of the body.
type KinematicState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Joint state of all robot joints.
	JointStates []*JointState `protobuf:"bytes,2,rep,name=joint_states,json=jointStates,proto3" json:"joint_states,omitempty"`
	// Robot clock timestamp corresponding to these readings.
	AcquisitionTimestamp *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=acquisition_timestamp,json=acquisitionTimestamp,proto3" json:"acquisition_timestamp,omitempty"`
	// A tree-based collection of transformations, which will include the transformations to the
	// robot body ("body") in addition to transformations to the common frames ("world", "dr") and
	// ground plane estimate "gpe".
	// All transforms within the snapshot are at the acquisition time of kinematic state.
	TransformsSnapshot *FrameTreeSnapshot `protobuf:"bytes,31,opt,name=transforms_snapshot,json=transformsSnapshot,proto3" json:"transforms_snapshot,omitempty"`
	// Velocity of the body frame with respect to vision frame and expressed in vision frame.
	// The linear velocity is applied at the origin of the body frame.
	VelocityOfBodyInVision *SE3Velocity `protobuf:"bytes,8,opt,name=velocity_of_body_in_vision,json=velocityOfBodyInVision,proto3" json:"velocity_of_body_in_vision,omitempty"`
	// Velocity of the body frame with respect to odom frame and expressed in odom frame.
	// Again, the linear velocity is applied at the origin of the body frame.
	VelocityOfBodyInOdom *SE3Velocity `protobuf:"bytes,12,opt,name=velocity_of_body_in_odom,json=velocityOfBodyInOdom,proto3" json:"velocity_of_body_in_odom,omitempty"`
}

func (x *KinematicState) Reset() {
	*x = KinematicState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KinematicState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KinematicState) ProtoMessage() {}

func (x *KinematicState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KinematicState.ProtoReflect.Descriptor instead.
func (*KinematicState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{8}
}

func (x *KinematicState) GetJointStates() []*JointState {
	if x != nil {
		return x.JointStates
	}
	return nil
}

func (x *KinematicState) GetAcquisitionTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.AcquisitionTimestamp
	}
	return nil
}

func (x *KinematicState) GetTransformsSnapshot() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshot
	}
	return nil
}

func (x *KinematicState) GetVelocityOfBodyInVision() *SE3Velocity {
	if x != nil {
		return x.VelocityOfBodyInVision
	}
	return nil
}

func (x *KinematicState) GetVelocityOfBodyInOdom() *SE3Velocity {
	if x != nil {
		return x.VelocityOfBodyInOdom
	}
	return nil
}

// Proto containing the state of a joint on the robot. This can be used with the robot skeleton to
// update the current view of the robot.
type JointState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This name maps directly to the joints in the URDF.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// This is typically an angle in radians as joints are typically revolute. However, for
	// translational joints this could be a distance in meters.
	Position *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=position,proto3" json:"position,omitempty"`
	// The joint velocity in [m/s].
	Velocity *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// The joint acceleration in [m/s^2].
	Acceleration *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=acceleration,proto3" json:"acceleration,omitempty"`
	// This is typically a torque in Newton meters as joints are typically revolute. However, for
	// translational joints this could be a force in Newtons.
	Load *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=load,proto3" json:"load,omitempty"`
}

func (x *JointState) Reset() {
	*x = JointState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JointState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JointState) ProtoMessage() {}

func (x *JointState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JointState.ProtoReflect.Descriptor instead.
func (*JointState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{9}
}

func (x *JointState) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JointState) GetPosition() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *JointState) GetVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *JointState) GetAcceleration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Acceleration
	}
	return nil
}

func (x *JointState) GetLoad() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Load
	}
	return nil
}

// This describes any current behaviror faults on the robot, which would block any robot commands
// from going through. These can be cleared using the ClearBehaviorFault rpc in the robot command
// service.
type BehaviorFaultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current errors potentially blocking commands on robot
	Faults []*BehaviorFault `protobuf:"bytes,1,rep,name=faults,proto3" json:"faults,omitempty"`
}

func (x *BehaviorFaultState) Reset() {
	*x = BehaviorFaultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BehaviorFaultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BehaviorFaultState) ProtoMessage() {}

func (x *BehaviorFaultState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BehaviorFaultState.ProtoReflect.Descriptor instead.
func (*BehaviorFaultState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{10}
}

func (x *BehaviorFaultState) GetFaults() []*BehaviorFault {
	if x != nil {
		return x.Faults
	}
	return nil
}

// The details of what the behavior fault consistents of, and the id for the fault. The unique
// behavior_fault_id can be used to clear the fault in robot command service ClearBehaviorFault rpc.
type BehaviorFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Behavior fault unique id
	BehaviorFaultId uint32 `protobuf:"varint,1,opt,name=behavior_fault_id,json=behaviorFaultId,proto3" json:"behavior_fault_id,omitempty"`
	// Time of robot local clock at time of the error
	OnsetTimestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=onset_timestamp,json=onsetTimestamp,proto3" json:"onset_timestamp,omitempty"`
	// The potential cause of the fault.
	Cause BehaviorFault_Cause `protobuf:"varint,3,opt,name=cause,proto3,enum=bosdyn.api.BehaviorFault_Cause" json:"cause,omitempty"`
	// Information about the status/what can be done with the fault.
	Status BehaviorFault_Status `protobuf:"varint,4,opt,name=status,proto3,enum=bosdyn.api.BehaviorFault_Status" json:"status,omitempty"`
}

func (x *BehaviorFault) Reset() {
	*x = BehaviorFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BehaviorFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BehaviorFault) ProtoMessage() {}

func (x *BehaviorFault) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BehaviorFault.ProtoReflect.Descriptor instead.
func (*BehaviorFault) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{11}
}

func (x *BehaviorFault) GetBehaviorFaultId() uint32 {
	if x != nil {
		return x.BehaviorFaultId
	}
	return 0
}

func (x *BehaviorFault) GetOnsetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.OnsetTimestamp
	}
	return nil
}

func (x *BehaviorFault) GetCause() BehaviorFault_Cause {
	if x != nil {
		return x.Cause
	}
	return BehaviorFault_CAUSE_UNKNOWN
}

func (x *BehaviorFault) GetStatus() BehaviorFault_Status {
	if x != nil {
		return x.Status
	}
	return BehaviorFault_STATUS_UNKNOWN
}

// Key robot metrics (e.g., Gait cycles (count), distance walked, time moving, etc...).
type RobotMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot timestamp corresponding to these metrics.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Key tracked robot metrics, such as distance walked, runtime, etc.
	Metrics []*Parameter `protobuf:"bytes,2,rep,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *RobotMetrics) Reset() {
	*x = RobotMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotMetrics) ProtoMessage() {}

func (x *RobotMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotMetrics.ProtoReflect.Descriptor instead.
func (*RobotMetrics) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{12}
}

func (x *RobotMetrics) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *RobotMetrics) GetMetrics() []*Parameter {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// The current comms information, including what comms the robot is using and the current status
// of the comms network.
type CommsState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Robot timestamp corresponding to these readings.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Types that are assignable to State:
	//	*CommsState_WifiState
	State isCommsState_State `protobuf_oneof:"state"`
}

func (x *CommsState) Reset() {
	*x = CommsState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommsState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommsState) ProtoMessage() {}

func (x *CommsState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommsState.ProtoReflect.Descriptor instead.
func (*CommsState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{13}
}

func (x *CommsState) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (m *CommsState) GetState() isCommsState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *CommsState) GetWifiState() *WiFiState {
	if x, ok := x.GetState().(*CommsState_WifiState); ok {
		return x.WifiState
	}
	return nil
}

type isCommsState_State interface {
	isCommsState_State()
}

type CommsState_WifiState struct {
	// The communication state is WiFi.
	WifiState *WiFiState `protobuf:"bytes,2,opt,name=wifi_state,json=wifiState,proto3,oneof"`
}

func (*CommsState_WifiState) isCommsState_State() {}

type WiFiState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current WiFi mode.
	CurrentMode WiFiState_Mode `protobuf:"varint,1,opt,name=current_mode,json=currentMode,proto3,enum=bosdyn.api.WiFiState_Mode" json:"current_mode,omitempty"`
	// Essid of robot (master mode) or connected network.
	Essid string `protobuf:"bytes,2,opt,name=essid,proto3" json:"essid,omitempty"`
}

func (x *WiFiState) Reset() {
	*x = WiFiState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WiFiState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WiFiState) ProtoMessage() {}

func (x *WiFiState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WiFiState.ProtoReflect.Descriptor instead.
func (*WiFiState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{14}
}

func (x *WiFiState) GetCurrentMode() WiFiState_Mode {
	if x != nil {
		return x.CurrentMode
	}
	return WiFiState_MODE_UNKNOWN
}

func (x *WiFiState) GetEssid() string {
	if x != nil {
		return x.Essid
	}
	return ""
}

// Information about the foot positions and contact state, on a per-foot basis.
type FootState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The foot position described relative to the body.
	FootPositionRtBody *Vec3 `protobuf:"bytes,1,opt,name=foot_position_rt_body,json=footPositionRtBody,proto3" json:"foot_position_rt_body,omitempty"`
	// Is the foot in contact with the ground?
	Contact FootState_Contact       `protobuf:"varint,2,opt,name=contact,proto3,enum=bosdyn.api.FootState_Contact" json:"contact,omitempty"`
	Terrain *FootState_TerrainState `protobuf:"bytes,3,opt,name=terrain,proto3" json:"terrain,omitempty"`
}

func (x *FootState) Reset() {
	*x = FootState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootState) ProtoMessage() {}

func (x *FootState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootState.ProtoReflect.Descriptor instead.
func (*FootState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{15}
}

func (x *FootState) GetFootPositionRtBody() *Vec3 {
	if x != nil {
		return x.FootPositionRtBody
	}
	return nil
}

func (x *FootState) GetContact() FootState_Contact {
	if x != nil {
		return x.Contact
	}
	return FootState_CONTACT_UNKNOWN
}

func (x *FootState) GetTerrain() *FootState_TerrainState {
	if x != nil {
		return x.Terrain
	}
	return nil
}

/// Additional state published if an arm is attached to the robot.
type ManipulatorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How open the gripper is, measured in percent.
	// 0 = fully closed, 100 = fully open.
	GripperOpenPercentage float64 `protobuf:"fixed64,12,opt,name=gripper_open_percentage,json=gripperOpenPercentage,proto3" json:"gripper_open_percentage,omitempty"`
	/// Will be true if the gripper is holding an item, false otherwise.
	IsGripperHoldingItem bool `protobuf:"varint,6,opt,name=is_gripper_holding_item,json=isGripperHoldingItem,proto3" json:"is_gripper_holding_item,omitempty"`
	// The estimated force on the end-effector expressed in the hand frame.
	EstimatedEndEffectorForceInHand *Vec3 `protobuf:"bytes,13,opt,name=estimated_end_effector_force_in_hand,json=estimatedEndEffectorForceInHand,proto3" json:"estimated_end_effector_force_in_hand,omitempty"`
	/// Information on if the arm is stowed, or deployed.
	StowState ManipulatorState_StowState `protobuf:"varint,9,opt,name=stow_state,json=stowState,proto3,enum=bosdyn.api.ManipulatorState_StowState" json:"stow_state,omitempty"`
	// Velocity of the hand frame with respect to vision frame and expressed in vision frame.
	// The linear velocity is applied at the origin of the hand frame.
	VelocityOfHandInVision *SE3Velocity `protobuf:"bytes,14,opt,name=velocity_of_hand_in_vision,json=velocityOfHandInVision,proto3" json:"velocity_of_hand_in_vision,omitempty"`
	// Velocity of the hand frame with respect to odom frame and expressed in odom frame.
	// Again, the linear velocity is applied at the origin of the hand frame.
	VelocityOfHandInOdom *SE3Velocity                `protobuf:"bytes,15,opt,name=velocity_of_hand_in_odom,json=velocityOfHandInOdom,proto3" json:"velocity_of_hand_in_odom,omitempty"`
	CarryState           ManipulatorState_CarryState `protobuf:"varint,16,opt,name=carry_state,json=carryState,proto3,enum=bosdyn.api.ManipulatorState_CarryState" json:"carry_state,omitempty"`
}

func (x *ManipulatorState) Reset() {
	*x = ManipulatorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManipulatorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManipulatorState) ProtoMessage() {}

func (x *ManipulatorState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManipulatorState.ProtoReflect.Descriptor instead.
func (*ManipulatorState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{16}
}

func (x *ManipulatorState) GetGripperOpenPercentage() float64 {
	if x != nil {
		return x.GripperOpenPercentage
	}
	return 0
}

func (x *ManipulatorState) GetIsGripperHoldingItem() bool {
	if x != nil {
		return x.IsGripperHoldingItem
	}
	return false
}

func (x *ManipulatorState) GetEstimatedEndEffectorForceInHand() *Vec3 {
	if x != nil {
		return x.EstimatedEndEffectorForceInHand
	}
	return nil
}

func (x *ManipulatorState) GetStowState() ManipulatorState_StowState {
	if x != nil {
		return x.StowState
	}
	return ManipulatorState_STOWSTATE_UNKNOWN
}

func (x *ManipulatorState) GetVelocityOfHandInVision() *SE3Velocity {
	if x != nil {
		return x.VelocityOfHandInVision
	}
	return nil
}

func (x *ManipulatorState) GetVelocityOfHandInOdom() *SE3Velocity {
	if x != nil {
		return x.VelocityOfHandInOdom
	}
	return nil
}

func (x *ManipulatorState) GetCarryState() ManipulatorState_CarryState {
	if x != nil {
		return x.CarryState
	}
	return ManipulatorState_CARRY_STATE_UNKNOWN
}

// The current state of each service fault the robot is experiencing.
// An "active" fault indicates a fault currently in a service.
// A "historical" fault indicates a, now cleared, service problem.
type ServiceFaultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently active faults
	Faults []*ServiceFault `protobuf:"bytes,1,rep,name=faults,proto3" json:"faults,omitempty"`
	// Service faults that have been cleared. Acts as a ring buffer with size of 50.
	HistoricalFaults []*ServiceFault `protobuf:"bytes,2,rep,name=historical_faults,json=historicalFaults,proto3" json:"historical_faults,omitempty"`
	// Aggregated service fault data. Maps attribute string to highest severity level
	// of any active fault containing that attribute string.
	// This provides a very quick way of determining if there any "locomotion" or
	// "vision" faults above a certain severity level.
	Aggregated map[string]ServiceFault_Severity `protobuf:"bytes,3,rep,name=aggregated,proto3" json:"aggregated,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=bosdyn.api.ServiceFault_Severity"`
}

func (x *ServiceFaultState) Reset() {
	*x = ServiceFaultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceFaultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceFaultState) ProtoMessage() {}

func (x *ServiceFaultState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceFaultState.ProtoReflect.Descriptor instead.
func (*ServiceFaultState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{17}
}

func (x *ServiceFaultState) GetFaults() []*ServiceFault {
	if x != nil {
		return x.Faults
	}
	return nil
}

func (x *ServiceFaultState) GetHistoricalFaults() []*ServiceFault {
	if x != nil {
		return x.HistoricalFaults
	}
	return nil
}

func (x *ServiceFaultState) GetAggregated() map[string]ServiceFault_Severity {
	if x != nil {
		return x.Aggregated
	}
	return nil
}

// The RobotState request message to get the current state of the robot.
type RobotStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RobotStateRequest) Reset() {
	*x = RobotStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotStateRequest) ProtoMessage() {}

func (x *RobotStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotStateRequest.ProtoReflect.Descriptor instead.
func (*RobotStateRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{18}
}

func (x *RobotStateRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The RobotState response message, which returns the robot state information from the time
// the request was received.
type RobotStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The requested RobotState.
	RobotState *RobotState `protobuf:"bytes,2,opt,name=robot_state,json=robotState,proto3" json:"robot_state,omitempty"`
}

func (x *RobotStateResponse) Reset() {
	*x = RobotStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotStateResponse) ProtoMessage() {}

func (x *RobotStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotStateResponse.ProtoReflect.Descriptor instead.
func (*RobotStateResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{19}
}

func (x *RobotStateResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotStateResponse) GetRobotState() *RobotState {
	if x != nil {
		return x.RobotState
	}
	return nil
}

// The RobotMetrics request message to get metrics and parameters from the robot.
type RobotMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RobotMetricsRequest) Reset() {
	*x = RobotMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotMetricsRequest) ProtoMessage() {}

func (x *RobotMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotMetricsRequest.ProtoReflect.Descriptor instead.
func (*RobotMetricsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{20}
}

func (x *RobotMetricsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The RobotMetrics response message, which returns the metrics information from the time
// the request was received.
type RobotMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The requested robot metrics.
	RobotMetrics *RobotMetrics `protobuf:"bytes,2,opt,name=robot_metrics,json=robotMetrics,proto3" json:"robot_metrics,omitempty"`
}

func (x *RobotMetricsResponse) Reset() {
	*x = RobotMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotMetricsResponse) ProtoMessage() {}

func (x *RobotMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotMetricsResponse.ProtoReflect.Descriptor instead.
func (*RobotMetricsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{21}
}

func (x *RobotMetricsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotMetricsResponse) GetRobotMetrics() *RobotMetrics {
	if x != nil {
		return x.RobotMetrics
	}
	return nil
}

// The RobotHardwareConfiguration request message to get hardware configuration, described
// by the robot skeleton and urdf.
type RobotHardwareConfigurationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *RobotHardwareConfigurationRequest) Reset() {
	*x = RobotHardwareConfigurationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotHardwareConfigurationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotHardwareConfigurationRequest) ProtoMessage() {}

func (x *RobotHardwareConfigurationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotHardwareConfigurationRequest.ProtoReflect.Descriptor instead.
func (*RobotHardwareConfigurationRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{22}
}

func (x *RobotHardwareConfigurationRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The RobotHardwareConfiguration response message, which returns the hardware config from the time
// the request was received.
type RobotHardwareConfigurationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The requested RobotState.
	HardwareConfiguration *HardwareConfiguration `protobuf:"bytes,2,opt,name=hardware_configuration,json=hardwareConfiguration,proto3" json:"hardware_configuration,omitempty"`
}

func (x *RobotHardwareConfigurationResponse) Reset() {
	*x = RobotHardwareConfigurationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotHardwareConfigurationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotHardwareConfigurationResponse) ProtoMessage() {}

func (x *RobotHardwareConfigurationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotHardwareConfigurationResponse.ProtoReflect.Descriptor instead.
func (*RobotHardwareConfigurationResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{23}
}

func (x *RobotHardwareConfigurationResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotHardwareConfigurationResponse) GetHardwareConfiguration() *HardwareConfiguration {
	if x != nil {
		return x.HardwareConfiguration
	}
	return nil
}

// The RobotLinkModel request message uses a link name returned by the RobotHardwareConfiguration response to
// get the associated OBJ file.
type RobotLinkModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The link name of which the OBJ file shoould represent.
	LinkName string `protobuf:"bytes,2,opt,name=link_name,json=linkName,proto3" json:"link_name,omitempty"`
}

func (x *RobotLinkModelRequest) Reset() {
	*x = RobotLinkModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotLinkModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotLinkModelRequest) ProtoMessage() {}

func (x *RobotLinkModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotLinkModelRequest.ProtoReflect.Descriptor instead.
func (*RobotLinkModelRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{24}
}

func (x *RobotLinkModelRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotLinkModelRequest) GetLinkName() string {
	if x != nil {
		return x.LinkName
	}
	return ""
}

// The RobotLinkModel response message returns the OBJ file for a specifc robot link.
type RobotLinkModelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The requested RobotState skeleton obj model.
	LinkModel *Skeleton_Link_ObjModel `protobuf:"bytes,2,opt,name=link_model,json=linkModel,proto3" json:"link_model,omitempty"`
}

func (x *RobotLinkModelResponse) Reset() {
	*x = RobotLinkModelResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotLinkModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotLinkModelResponse) ProtoMessage() {}

func (x *RobotLinkModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotLinkModelResponse.ProtoReflect.Descriptor instead.
func (*RobotLinkModelResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{25}
}

func (x *RobotLinkModelResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotLinkModelResponse) GetLinkModel() *Skeleton_Link_ObjModel {
	if x != nil {
		return x.LinkModel
	}
	return nil
}

// Keeps track of why the robot is not able to drive autonomously.
type RobotImpairedState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the status is ROBOT_IMPAIRED, this is specifically why the robot is impaired.
	ImpairedStatus RobotImpairedState_ImpairedStatus `protobuf:"varint,1,opt,name=impaired_status,json=impairedStatus,proto3,enum=bosdyn.api.RobotImpairedState_ImpairedStatus" json:"impaired_status,omitempty"`
	// If impaired_status is STATUS_SYSTEM_FAULT, these are the faults which caused the robot to stop.
	SystemFaults []*SystemFault `protobuf:"bytes,2,rep,name=system_faults,json=systemFaults,proto3" json:"system_faults,omitempty"`
	// If impaired_status is STATUS_SERVICE_FAULT, these are the service faults which caused
	// the robot to stop.
	ServiceFaults []*ServiceFault `protobuf:"bytes,3,rep,name=service_faults,json=serviceFaults,proto3" json:"service_faults,omitempty"`
	// If impaired_status is STATUS_BEHAVIOR_FAULT, these are the behavior faults which caused
	// the robot to stop.
	BehaviorFaults []*BehaviorFault `protobuf:"bytes,4,rep,name=behavior_faults,json=behaviorFaults,proto3" json:"behavior_faults,omitempty"`
}

func (x *RobotImpairedState) Reset() {
	*x = RobotImpairedState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotImpairedState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotImpairedState) ProtoMessage() {}

func (x *RobotImpairedState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotImpairedState.ProtoReflect.Descriptor instead.
func (*RobotImpairedState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{26}
}

func (x *RobotImpairedState) GetImpairedStatus() RobotImpairedState_ImpairedStatus {
	if x != nil {
		return x.ImpairedStatus
	}
	return RobotImpairedState_IMPAIRED_STATUS_UNKNOWN
}

func (x *RobotImpairedState) GetSystemFaults() []*SystemFault {
	if x != nil {
		return x.SystemFaults
	}
	return nil
}

func (x *RobotImpairedState) GetServiceFaults() []*ServiceFault {
	if x != nil {
		return x.ServiceFaults
	}
	return nil
}

func (x *RobotImpairedState) GetBehaviorFaults() []*BehaviorFault {
	if x != nil {
		return x.BehaviorFaults
	}
	return nil
}

// Each link of the robot skeleton.
type Skeleton_Link struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The link name, which matches those used in the urdf.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The OBJ file representing the model of this link.
	ObjModel *Skeleton_Link_ObjModel `protobuf:"bytes,2,opt,name=obj_model,json=objModel,proto3" json:"obj_model,omitempty"`
}

func (x *Skeleton_Link) Reset() {
	*x = Skeleton_Link{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skeleton_Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skeleton_Link) ProtoMessage() {}

func (x *Skeleton_Link) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skeleton_Link.ProtoReflect.Descriptor instead.
func (*Skeleton_Link) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Skeleton_Link) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Skeleton_Link) GetObjModel() *Skeleton_Link_ObjModel {
	if x != nil {
		return x.ObjModel
	}
	return nil
}

// Model to draw, expressed as an obj file.
// Note: To limit the size of responses, obj_file_contents might be omitted.
type Skeleton_Link_ObjModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the file.
	FileName string `protobuf:"bytes,1,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	// The contents of the file.
	FileContents string `protobuf:"bytes,2,opt,name=file_contents,json=fileContents,proto3" json:"file_contents,omitempty"`
}

func (x *Skeleton_Link_ObjModel) Reset() {
	*x = Skeleton_Link_ObjModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Skeleton_Link_ObjModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Skeleton_Link_ObjModel) ProtoMessage() {}

func (x *Skeleton_Link_ObjModel) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Skeleton_Link_ObjModel.ProtoReflect.Descriptor instead.
func (*Skeleton_Link_ObjModel) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Skeleton_Link_ObjModel) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Skeleton_Link_ObjModel) GetFileContents() string {
	if x != nil {
		return x.FileContents
	}
	return ""
}

// Foot specific terrain data. Data may not be valid if the contact state is
// not CONTACT_MADE.
type FootState_TerrainState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Estimated ground coefficient of friction for this foot.
	GroundMuEst float64 `protobuf:"fixed64,1,opt,name=ground_mu_est,json=groundMuEst,proto3" json:"ground_mu_est,omitempty"`
	// Reference frame name for vector data.
	FrameName string `protobuf:"bytes,2,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// Foot slip distance rt named frame
	FootSlipDistanceRtFrame *Vec3 `protobuf:"bytes,3,opt,name=foot_slip_distance_rt_frame,json=footSlipDistanceRtFrame,proto3" json:"foot_slip_distance_rt_frame,omitempty"`
	// Foot slip velocity rt named frame
	FootSlipVelocityRtFrame *Vec3 `protobuf:"bytes,4,opt,name=foot_slip_velocity_rt_frame,json=footSlipVelocityRtFrame,proto3" json:"foot_slip_velocity_rt_frame,omitempty"`
	// Ground contact normal rt named frame
	GroundContactNormalRtFrame *Vec3 `protobuf:"bytes,5,opt,name=ground_contact_normal_rt_frame,json=groundContactNormalRtFrame,proto3" json:"ground_contact_normal_rt_frame,omitempty"`
	// Mean penetration (meters) of the foot below the ground visual
	// surface. For penetrable terrains (gravel/sand/grass etc.) these values are
	// positive. Negative values would indicate potential odometry issues.
	VisualSurfaceGroundPenetrationMean float64 `protobuf:"fixed64,6,opt,name=visual_surface_ground_penetration_mean,json=visualSurfaceGroundPenetrationMean,proto3" json:"visual_surface_ground_penetration_mean,omitempty"`
	// Standard deviation of the visual surface ground penetration.
	VisualSurfaceGroundPenetrationStd float64 `protobuf:"fixed64,7,opt,name=visual_surface_ground_penetration_std,json=visualSurfaceGroundPenetrationStd,proto3" json:"visual_surface_ground_penetration_std,omitempty"`
}

func (x *FootState_TerrainState) Reset() {
	*x = FootState_TerrainState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_state_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootState_TerrainState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootState_TerrainState) ProtoMessage() {}

func (x *FootState_TerrainState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_state_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootState_TerrainState.ProtoReflect.Descriptor instead.
func (*FootState_TerrainState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_state_proto_rawDescGZIP(), []int{15, 0}
}

func (x *FootState_TerrainState) GetGroundMuEst() float64 {
	if x != nil {
		return x.GroundMuEst
	}
	return 0
}

func (x *FootState_TerrainState) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *FootState_TerrainState) GetFootSlipDistanceRtFrame() *Vec3 {
	if x != nil {
		return x.FootSlipDistanceRtFrame
	}
	return nil
}

func (x *FootState_TerrainState) GetFootSlipVelocityRtFrame() *Vec3 {
	if x != nil {
		return x.FootSlipVelocityRtFrame
	}
	return nil
}

func (x *FootState_TerrainState) GetGroundContactNormalRtFrame() *Vec3 {
	if x != nil {
		return x.GroundContactNormalRtFrame
	}
	return nil
}

func (x *FootState_TerrainState) GetVisualSurfaceGroundPenetrationMean() float64 {
	if x != nil {
		return x.VisualSurfaceGroundPenetrationMean
	}
	return 0
}

func (x *FootState_TerrainState) GetVisualSurfaceGroundPenetrationStd() float64 {
	if x != nil {
		return x.VisualSurfaceGroundPenetrationStd
	}
	return 0
}

var File_bosdyn_api_robot_state_proto protoreflect.FileDescriptor

var file_bosdyn_api_robot_state_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x08,
	0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x72, 0x64,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x72, 0x64, 0x66, 0x1a, 0xa9, 0x01,
	0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x62,
	0x6a, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6b, 0x65, 0x6c, 0x65,
	0x74, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f, 0x62, 0x6a, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0x4c, 0x0a, 0x08, 0x4f,
	0x62, 0x6a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8b, 0x03, 0x0a, 0x15, 0x48, 0x61,
	0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x52, 0x08, 0x73, 0x6b, 0x65,
	0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x23, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6f, 0x66, 0x66, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1e, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x66, 0x52, 0x6f, 0x62,
	0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x25, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x63, 0x79, 0x63, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x20, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x12, 0x53, 0x0a, 0x27, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x24, 0x63, 0x61, 0x6e, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1f, 0x63, 0x61, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x57, 0x69,
	0x66, 0x69, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x22, 0xb5, 0x05, 0x0a, 0x0a, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x73, 0x74, 0x6f, 0x70,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x65, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x50, 0x0a, 0x14, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x12, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x66, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x49, 0x0a, 0x11, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x6d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x22,
	0xd6, 0x0c, 0x0a, 0x0a, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x52, 0x0a, 0x11, 0x6d, 0x6f, 0x74, 0x6f,
	0x72, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x74, 0x6f,
	0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x6d, 0x6f, 0x74,
	0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x11,
	0x73, 0x68, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x68, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x0f, 0x73, 0x68, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x52, 0x0a, 0x11, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a, 0x19, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x16, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f,
	0x0a, 0x16, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x57, 0x69, 0x66, 0x69, 0x52, 0x61, 0x64, 0x69, 0x6f,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x13, 0x77, 0x69, 0x66, 0x69,
	0x52, 0x61, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x5e, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12,
	0x5b, 0x0a, 0x1c, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x73,
	0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x1a, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xd5, 0x02, 0x0a,
	0x0f, 0x4d, 0x6f, 0x74, 0x6f, 0x72, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x15, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x54, 0x4f, 0x52,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4f, 0x46, 0x46, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x54,
	0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f,
	0x46, 0x46, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x19, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x10, 0x03, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4d,
	0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x1a,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x4d, 0x4f,
	0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x04, 0x12, 0x13,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x1a,
	0x02, 0x08, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x1a, 0x02, 0x10, 0x01, 0x22, 0xc9, 0x01, 0x0a, 0x0f, 0x53, 0x68, 0x6f, 0x72, 0x65, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x45, 0x5f,
	0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x00, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x48, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x14, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x5f, 0x53, 0x48, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x48, 0x4f, 0x52,
	0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e,
	0x10, 0x01, 0x12, 0x1d, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x10, 0x02, 0x1a, 0x02, 0x08,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x48, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x1a, 0x02, 0x10, 0x01,
	0x22, 0x65, 0x0a, 0x0f, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x22, 0x84, 0x01, 0x0a, 0x16, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x21, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x4f,
	0x52, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x22, 0x78,
	0x0a, 0x13, 0x57, 0x69, 0x66, 0x69, 0x52, 0x61, 0x64, 0x69, 0x6f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x52, 0x41,
	0x44, 0x49, 0x4f, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x49, 0x46,
	0x49, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x49, 0x46, 0x49,
	0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x02, 0x22, 0xb8, 0x02, 0x0a, 0x10, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x44,
	0x0a, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x4c, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x1a, 0x5f, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x2e,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xa5, 0x03, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x6f, 0x6e, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x08,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3c,
	0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x22, 0x5d, 0x0a, 0x08,
	0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x45, 0x56, 0x45,
	0x52, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x41,
	0x52, 0x4e, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59,
	0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x22, 0xf4, 0x02, 0x0a, 0x0a,
	0x45, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x41, 0x52,
	0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x10, 0x02, 0x22, 0x46, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x45, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x53, 0x54, 0x4f, 0x50, 0x50, 0x45, 0x44,
	0x10, 0x02, 0x22, 0xbb, 0x04, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x49, 0x0a,
	0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x71, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44,
	0x49, 0x53, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x04,
	0x22, 0xc2, 0x03, 0x0a, 0x0e, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4f,
	0x0a, 0x15, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x14, 0x61, 0x63, 0x71, 0x75, 0x69,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x4e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12,
	0x53, 0x0a, 0x1a, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x45, 0x33, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x16, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x56, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x18, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6f, 0x64, 0x6f, 0x6d,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x14, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x42, 0x6f, 0x64, 0x79, 0x49,
	0x6e, 0x4f, 0x64, 0x6f, 0x6d, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x03, 0x10,
	0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x4a,
	0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0x88, 0x02, 0x0a, 0x0a, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0c,
	0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30,
	0x0a, 0x04, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x47, 0x0a, 0x12, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x96, 0x03, 0x0a, 0x0d, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x6f, 0x6e, 0x73, 0x65, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6f, 0x6e,
	0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f,
	0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57, 0x0a,
	0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x46, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x41, 0x55,
	0x53, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x41, 0x55, 0x53, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4c, 0x45, 0x41, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x43, 0x4c, 0x45, 0x41, 0x52, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x22, 0x79, 0x0a, 0x0c, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x87, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0a, 0x77, 0x69, 0x66, 0x69, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x77, 0x69, 0x66, 0x69, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x09, 0x57, 0x69, 0x46, 0x69,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x69, 0x46, 0x69, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x73, 0x73, 0x69, 0x64, 0x22, 0x40, 0x0a, 0x04, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x22, 0xfb, 0x05, 0x0a,
	0x09, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x15, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x74, 0x5f, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x12, 0x66, 0x6f, 0x6f,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x37, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f,
	0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x3c, 0x0a, 0x07, 0x74, 0x65, 0x72, 0x72,
	0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x74,
	0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x1a, 0xed, 0x03, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x72, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x5f, 0x6d, 0x75, 0x5f, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x75, 0x45, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x1b, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x33, 0x52, 0x17, 0x66, 0x6f, 0x6f, 0x74, 0x53, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x1b, 0x66, 0x6f,
	0x6f, 0x74, 0x5f, 0x73, 0x6c, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x33, 0x52, 0x17, 0x66, 0x6f, 0x6f, 0x74, 0x53, 0x6c, 0x69, 0x70, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x1e, 0x67, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x33, 0x52, 0x1a, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x52, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x52, 0x0a, 0x26, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65, 0x6e, 0x65, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x22, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x61, 0x6e, 0x12, 0x50, 0x0a, 0x25, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x73,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x65,
	0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x21, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x53, 0x75, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x64, 0x22, 0x42, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43,
	0x54, 0x5f, 0x4d, 0x41, 0x44, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x54,
	0x41, 0x43, 0x54, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x02, 0x22, 0xab, 0x06, 0x0a, 0x10, 0x4d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x36, 0x0a, 0x17, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x15, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x73, 0x5f, 0x67, 0x72,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x73, 0x47, 0x72, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x5f,
	0x0a, 0x24, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x69,
	0x6e, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x1f,
	0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x64, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x12,
	0x45, 0x0a, 0x0a, 0x73, 0x74, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x1a, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69,
	0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x16, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x66, 0x48,
	0x61, 0x6e, 0x64, 0x49, 0x6e, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x18, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f,
	0x69, 0x6e, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x14, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x4f, 0x66, 0x48, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x4f, 0x64, 0x6f, 0x6d, 0x12, 0x48, 0x0a, 0x0b,
	0x63, 0x61, 0x72, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x61, 0x72, 0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x72,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x50, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x77, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x4f, 0x57, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x4f, 0x57, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x57, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x4f, 0x57, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x45, 0x44, 0x10, 0x02, 0x22, 0x87, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x72,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x41, 0x52, 0x52, 0x59,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x41, 0x52, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x19, 0x0a, 0x15, 0x43, 0x41, 0x52, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x26, 0x0a, 0x22, 0x43, 0x41,
	0x52, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x57, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x03, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04,
	0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x0a,
	0x10, 0x0b, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x22, 0xbd, 0x02, 0x0a, 0x11, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x30,
	0x0a, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x45, 0x0a, 0x11, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x10, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x63, 0x61,
	0x6c, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x0a, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x60, 0x0a, 0x0f, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x46, 0x0a, 0x11, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0x81, 0x01, 0x0a, 0x12, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x0b, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x22, 0x48, 0x0a, 0x13, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x89,
	0x01, 0x0a, 0x14, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0d, 0x72,
	0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0c, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x56, 0x0a, 0x21, 0x52, 0x6f,
	0x62, 0x6f, 0x74, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x22, 0xb2, 0x01, 0x0a, 0x22, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x48, 0x61, 0x72, 0x64,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x58, 0x0a,
	0x16, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x72, 0x64, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x15, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x67, 0x0a, 0x15, 0x52, 0x6f, 0x62, 0x6f, 0x74,
	0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x6b, 0x65, 0x6c, 0x65, 0x74, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x4f,
	0x62, 0x6a, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x22, 0xd6, 0x04, 0x0a, 0x12, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x61,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x69, 0x6d, 0x70,
	0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0e, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x3f, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x42, 0x0a, 0x0f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x5f, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x0e, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4d, 0x50, 0x41, 0x49,
	0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d,
	0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4e, 0x4f, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10,
	0x03, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x5f, 0x50, 0x4f,
	0x57, 0x45, 0x52, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45,
	0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x05, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4d, 0x50, 0x41, 0x49,
	0x52, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x42, 0x45, 0x48, 0x41, 0x56,
	0x49, 0x4f, 0x52, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x07, 0x42, 0x44, 0x42, 0x0f, 0x52,
	0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e,
	0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_robot_state_proto_rawDescOnce sync.Once
	file_bosdyn_api_robot_state_proto_rawDescData = file_bosdyn_api_robot_state_proto_rawDesc
)

func file_bosdyn_api_robot_state_proto_rawDescGZIP() []byte {
	file_bosdyn_api_robot_state_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_robot_state_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_robot_state_proto_rawDescData)
	})
	return file_bosdyn_api_robot_state_proto_rawDescData
}

var file_bosdyn_api_robot_state_proto_enumTypes = make([]protoimpl.EnumInfo, 16)
var file_bosdyn_api_robot_state_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_bosdyn_api_robot_state_proto_goTypes = []interface{}{
	(PowerState_MotorPowerState)(0),            // 0: bosdyn.api.PowerState.MotorPowerState
	(PowerState_ShorePowerState)(0),            // 1: bosdyn.api.PowerState.ShorePowerState
	(PowerState_RobotPowerState)(0),            // 2: bosdyn.api.PowerState.RobotPowerState
	(PowerState_PayloadPortsPowerState)(0),     // 3: bosdyn.api.PowerState.PayloadPortsPowerState
	(PowerState_WifiRadioPowerState)(0),        // 4: bosdyn.api.PowerState.WifiRadioPowerState
	(SystemFault_Severity)(0),                  // 5: bosdyn.api.SystemFault.Severity
	(EStopState_Type)(0),                       // 6: bosdyn.api.EStopState.Type
	(EStopState_State)(0),                      // 7: bosdyn.api.EStopState.State
	(BatteryState_Status)(0),                   // 8: bosdyn.api.BatteryState.Status
	(BehaviorFault_Cause)(0),                   // 9: bosdyn.api.BehaviorFault.Cause
	(BehaviorFault_Status)(0),                  // 10: bosdyn.api.BehaviorFault.Status
	(WiFiState_Mode)(0),                        // 11: bosdyn.api.WiFiState.Mode
	(FootState_Contact)(0),                     // 12: bosdyn.api.FootState.Contact
	(ManipulatorState_StowState)(0),            // 13: bosdyn.api.ManipulatorState.StowState
	(ManipulatorState_CarryState)(0),           // 14: bosdyn.api.ManipulatorState.CarryState
	(RobotImpairedState_ImpairedStatus)(0),     // 15: bosdyn.api.RobotImpairedState.ImpairedStatus
	(*Skeleton)(nil),                           // 16: bosdyn.api.Skeleton
	(*HardwareConfiguration)(nil),              // 17: bosdyn.api.HardwareConfiguration
	(*RobotState)(nil),                         // 18: bosdyn.api.RobotState
	(*PowerState)(nil),                         // 19: bosdyn.api.PowerState
	(*SystemFaultState)(nil),                   // 20: bosdyn.api.SystemFaultState
	(*SystemFault)(nil),                        // 21: bosdyn.api.SystemFault
	(*EStopState)(nil),                         // 22: bosdyn.api.EStopState
	(*BatteryState)(nil),                       // 23: bosdyn.api.BatteryState
	(*KinematicState)(nil),                     // 24: bosdyn.api.KinematicState
	(*JointState)(nil),                         // 25: bosdyn.api.JointState
	(*BehaviorFaultState)(nil),                 // 26: bosdyn.api.BehaviorFaultState
	(*BehaviorFault)(nil),                      // 27: bosdyn.api.BehaviorFault
	(*RobotMetrics)(nil),                       // 28: bosdyn.api.RobotMetrics
	(*CommsState)(nil),                         // 29: bosdyn.api.CommsState
	(*WiFiState)(nil),                          // 30: bosdyn.api.WiFiState
	(*FootState)(nil),                          // 31: bosdyn.api.FootState
	(*ManipulatorState)(nil),                   // 32: bosdyn.api.ManipulatorState
	(*ServiceFaultState)(nil),                  // 33: bosdyn.api.ServiceFaultState
	(*RobotStateRequest)(nil),                  // 34: bosdyn.api.RobotStateRequest
	(*RobotStateResponse)(nil),                 // 35: bosdyn.api.RobotStateResponse
	(*RobotMetricsRequest)(nil),                // 36: bosdyn.api.RobotMetricsRequest
	(*RobotMetricsResponse)(nil),               // 37: bosdyn.api.RobotMetricsResponse
	(*RobotHardwareConfigurationRequest)(nil),  // 38: bosdyn.api.RobotHardwareConfigurationRequest
	(*RobotHardwareConfigurationResponse)(nil), // 39: bosdyn.api.RobotHardwareConfigurationResponse
	(*RobotLinkModelRequest)(nil),              // 40: bosdyn.api.RobotLinkModelRequest
	(*RobotLinkModelResponse)(nil),             // 41: bosdyn.api.RobotLinkModelResponse
	(*RobotImpairedState)(nil),                 // 42: bosdyn.api.RobotImpairedState
	(*Skeleton_Link)(nil),                      // 43: bosdyn.api.Skeleton.Link
	(*Skeleton_Link_ObjModel)(nil),             // 44: bosdyn.api.Skeleton.Link.ObjModel
	nil,                                        // 45: bosdyn.api.SystemFaultState.AggregatedEntry
	(*FootState_TerrainState)(nil),             // 46: bosdyn.api.FootState.TerrainState
	nil,                                        // 47: bosdyn.api.ServiceFaultState.AggregatedEntry
	(*timestamppb.Timestamp)(nil),              // 48: google.protobuf.Timestamp
	(*wrapperspb.DoubleValue)(nil),             // 49: google.protobuf.DoubleValue
	(*durationpb.Duration)(nil),                // 50: google.protobuf.Duration
	(*FrameTreeSnapshot)(nil),                  // 51: bosdyn.api.FrameTreeSnapshot
	(*SE3Velocity)(nil),                        // 52: bosdyn.api.SE3Velocity
	(*Parameter)(nil),                          // 53: bosdyn.api.Parameter
	(*Vec3)(nil),                               // 54: bosdyn.api.Vec3
	(*ServiceFault)(nil),                       // 55: bosdyn.api.ServiceFault
	(*RequestHeader)(nil),                      // 56: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),                     // 57: bosdyn.api.ResponseHeader
	(ServiceFault_Severity)(0),                 // 58: bosdyn.api.ServiceFault.Severity
}
var file_bosdyn_api_robot_state_proto_depIdxs = []int32{
	43, // 0: bosdyn.api.Skeleton.links:type_name -> bosdyn.api.Skeleton.Link
	16, // 1: bosdyn.api.HardwareConfiguration.skeleton:type_name -> bosdyn.api.Skeleton
	19, // 2: bosdyn.api.RobotState.power_state:type_name -> bosdyn.api.PowerState
	23, // 3: bosdyn.api.RobotState.battery_states:type_name -> bosdyn.api.BatteryState
	29, // 4: bosdyn.api.RobotState.comms_states:type_name -> bosdyn.api.CommsState
	20, // 5: bosdyn.api.RobotState.system_fault_state:type_name -> bosdyn.api.SystemFaultState
	22, // 6: bosdyn.api.RobotState.estop_states:type_name -> bosdyn.api.EStopState
	24, // 7: bosdyn.api.RobotState.kinematic_state:type_name -> bosdyn.api.KinematicState
	26, // 8: bosdyn.api.RobotState.behavior_fault_state:type_name -> bosdyn.api.BehaviorFaultState
	31, // 9: bosdyn.api.RobotState.foot_state:type_name -> bosdyn.api.FootState
	32, // 10: bosdyn.api.RobotState.manipulator_state:type_name -> bosdyn.api.ManipulatorState
	33, // 11: bosdyn.api.RobotState.service_fault_state:type_name -> bosdyn.api.ServiceFaultState
	48, // 12: bosdyn.api.PowerState.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 13: bosdyn.api.PowerState.motor_power_state:type_name -> bosdyn.api.PowerState.MotorPowerState
	1,  // 14: bosdyn.api.PowerState.shore_power_state:type_name -> bosdyn.api.PowerState.ShorePowerState
	2,  // 15: bosdyn.api.PowerState.robot_power_state:type_name -> bosdyn.api.PowerState.RobotPowerState
	3,  // 16: bosdyn.api.PowerState.payload_ports_power_state:type_name -> bosdyn.api.PowerState.PayloadPortsPowerState
	4,  // 17: bosdyn.api.PowerState.wifi_radio_power_state:type_name -> bosdyn.api.PowerState.WifiRadioPowerState
	49, // 18: bosdyn.api.PowerState.locomotion_charge_percentage:type_name -> google.protobuf.DoubleValue
	50, // 19: bosdyn.api.PowerState.locomotion_estimated_runtime:type_name -> google.protobuf.Duration
	21, // 20: bosdyn.api.SystemFaultState.faults:type_name -> bosdyn.api.SystemFault
	21, // 21: bosdyn.api.SystemFaultState.historical_faults:type_name -> bosdyn.api.SystemFault
	45, // 22: bosdyn.api.SystemFaultState.aggregated:type_name -> bosdyn.api.SystemFaultState.AggregatedEntry
	48, // 23: bosdyn.api.SystemFault.onset_timestamp:type_name -> google.protobuf.Timestamp
	50, // 24: bosdyn.api.SystemFault.duration:type_name -> google.protobuf.Duration
	5,  // 25: bosdyn.api.SystemFault.severity:type_name -> bosdyn.api.SystemFault.Severity
	48, // 26: bosdyn.api.EStopState.timestamp:type_name -> google.protobuf.Timestamp
	6,  // 27: bosdyn.api.EStopState.type:type_name -> bosdyn.api.EStopState.Type
	7,  // 28: bosdyn.api.EStopState.state:type_name -> bosdyn.api.EStopState.State
	48, // 29: bosdyn.api.BatteryState.timestamp:type_name -> google.protobuf.Timestamp
	49, // 30: bosdyn.api.BatteryState.charge_percentage:type_name -> google.protobuf.DoubleValue
	50, // 31: bosdyn.api.BatteryState.estimated_runtime:type_name -> google.protobuf.Duration
	49, // 32: bosdyn.api.BatteryState.current:type_name -> google.protobuf.DoubleValue
	49, // 33: bosdyn.api.BatteryState.voltage:type_name -> google.protobuf.DoubleValue
	8,  // 34: bosdyn.api.BatteryState.status:type_name -> bosdyn.api.BatteryState.Status
	25, // 35: bosdyn.api.KinematicState.joint_states:type_name -> bosdyn.api.JointState
	48, // 36: bosdyn.api.KinematicState.acquisition_timestamp:type_name -> google.protobuf.Timestamp
	51, // 37: bosdyn.api.KinematicState.transforms_snapshot:type_name -> bosdyn.api.FrameTreeSnapshot
	52, // 38: bosdyn.api.KinematicState.velocity_of_body_in_vision:type_name -> bosdyn.api.SE3Velocity
	52, // 39: bosdyn.api.KinematicState.velocity_of_body_in_odom:type_name -> bosdyn.api.SE3Velocity
	49, // 40: bosdyn.api.JointState.position:type_name -> google.protobuf.DoubleValue
	49, // 41: bosdyn.api.JointState.velocity:type_name -> google.protobuf.DoubleValue
	49, // 42: bosdyn.api.JointState.acceleration:type_name -> google.protobuf.DoubleValue
	49, // 43: bosdyn.api.JointState.load:type_name -> google.protobuf.DoubleValue
	27, // 44: bosdyn.api.BehaviorFaultState.faults:type_name -> bosdyn.api.BehaviorFault
	48, // 45: bosdyn.api.BehaviorFault.onset_timestamp:type_name -> google.protobuf.Timestamp
	9,  // 46: bosdyn.api.BehaviorFault.cause:type_name -> bosdyn.api.BehaviorFault.Cause
	10, // 47: bosdyn.api.BehaviorFault.status:type_name -> bosdyn.api.BehaviorFault.Status
	48, // 48: bosdyn.api.RobotMetrics.timestamp:type_name -> google.protobuf.Timestamp
	53, // 49: bosdyn.api.RobotMetrics.metrics:type_name -> bosdyn.api.Parameter
	48, // 50: bosdyn.api.CommsState.timestamp:type_name -> google.protobuf.Timestamp
	30, // 51: bosdyn.api.CommsState.wifi_state:type_name -> bosdyn.api.WiFiState
	11, // 52: bosdyn.api.WiFiState.current_mode:type_name -> bosdyn.api.WiFiState.Mode
	54, // 53: bosdyn.api.FootState.foot_position_rt_body:type_name -> bosdyn.api.Vec3
	12, // 54: bosdyn.api.FootState.contact:type_name -> bosdyn.api.FootState.Contact
	46, // 55: bosdyn.api.FootState.terrain:type_name -> bosdyn.api.FootState.TerrainState
	54, // 56: bosdyn.api.ManipulatorState.estimated_end_effector_force_in_hand:type_name -> bosdyn.api.Vec3
	13, // 57: bosdyn.api.ManipulatorState.stow_state:type_name -> bosdyn.api.ManipulatorState.StowState
	52, // 58: bosdyn.api.ManipulatorState.velocity_of_hand_in_vision:type_name -> bosdyn.api.SE3Velocity
	52, // 59: bosdyn.api.ManipulatorState.velocity_of_hand_in_odom:type_name -> bosdyn.api.SE3Velocity
	14, // 60: bosdyn.api.ManipulatorState.carry_state:type_name -> bosdyn.api.ManipulatorState.CarryState
	55, // 61: bosdyn.api.ServiceFaultState.faults:type_name -> bosdyn.api.ServiceFault
	55, // 62: bosdyn.api.ServiceFaultState.historical_faults:type_name -> bosdyn.api.ServiceFault
	47, // 63: bosdyn.api.ServiceFaultState.aggregated:type_name -> bosdyn.api.ServiceFaultState.AggregatedEntry
	56, // 64: bosdyn.api.RobotStateRequest.header:type_name -> bosdyn.api.RequestHeader
	57, // 65: bosdyn.api.RobotStateResponse.header:type_name -> bosdyn.api.ResponseHeader
	18, // 66: bosdyn.api.RobotStateResponse.robot_state:type_name -> bosdyn.api.RobotState
	56, // 67: bosdyn.api.RobotMetricsRequest.header:type_name -> bosdyn.api.RequestHeader
	57, // 68: bosdyn.api.RobotMetricsResponse.header:type_name -> bosdyn.api.ResponseHeader
	28, // 69: bosdyn.api.RobotMetricsResponse.robot_metrics:type_name -> bosdyn.api.RobotMetrics
	56, // 70: bosdyn.api.RobotHardwareConfigurationRequest.header:type_name -> bosdyn.api.RequestHeader
	57, // 71: bosdyn.api.RobotHardwareConfigurationResponse.header:type_name -> bosdyn.api.ResponseHeader
	17, // 72: bosdyn.api.RobotHardwareConfigurationResponse.hardware_configuration:type_name -> bosdyn.api.HardwareConfiguration
	56, // 73: bosdyn.api.RobotLinkModelRequest.header:type_name -> bosdyn.api.RequestHeader
	57, // 74: bosdyn.api.RobotLinkModelResponse.header:type_name -> bosdyn.api.ResponseHeader
	44, // 75: bosdyn.api.RobotLinkModelResponse.link_model:type_name -> bosdyn.api.Skeleton.Link.ObjModel
	15, // 76: bosdyn.api.RobotImpairedState.impaired_status:type_name -> bosdyn.api.RobotImpairedState.ImpairedStatus
	21, // 77: bosdyn.api.RobotImpairedState.system_faults:type_name -> bosdyn.api.SystemFault
	55, // 78: bosdyn.api.RobotImpairedState.service_faults:type_name -> bosdyn.api.ServiceFault
	27, // 79: bosdyn.api.RobotImpairedState.behavior_faults:type_name -> bosdyn.api.BehaviorFault
	44, // 80: bosdyn.api.Skeleton.Link.obj_model:type_name -> bosdyn.api.Skeleton.Link.ObjModel
	5,  // 81: bosdyn.api.SystemFaultState.AggregatedEntry.value:type_name -> bosdyn.api.SystemFault.Severity
	54, // 82: bosdyn.api.FootState.TerrainState.foot_slip_distance_rt_frame:type_name -> bosdyn.api.Vec3
	54, // 83: bosdyn.api.FootState.TerrainState.foot_slip_velocity_rt_frame:type_name -> bosdyn.api.Vec3
	54, // 84: bosdyn.api.FootState.TerrainState.ground_contact_normal_rt_frame:type_name -> bosdyn.api.Vec3
	58, // 85: bosdyn.api.ServiceFaultState.AggregatedEntry.value:type_name -> bosdyn.api.ServiceFault.Severity
	86, // [86:86] is the sub-list for method output_type
	86, // [86:86] is the sub-list for method input_type
	86, // [86:86] is the sub-list for extension type_name
	86, // [86:86] is the sub-list for extension extendee
	0,  // [0:86] is the sub-list for field type_name
}

func init() { file_bosdyn_api_robot_state_proto_init() }
func file_bosdyn_api_robot_state_proto_init() {
	if File_bosdyn_api_robot_state_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_parameter_proto_init()
	file_bosdyn_api_service_fault_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_robot_state_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skeleton); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HardwareConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemFaultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EStopState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KinematicState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JointState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BehaviorFaultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BehaviorFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommsState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WiFiState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManipulatorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceFaultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotHardwareConfigurationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotHardwareConfigurationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotLinkModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotLinkModelResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotImpairedState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skeleton_Link); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Skeleton_Link_ObjModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_state_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootState_TerrainState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_robot_state_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CommsState_WifiState)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_robot_state_proto_rawDesc,
			NumEnums:      16,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_robot_state_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_robot_state_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_robot_state_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_robot_state_proto_msgTypes,
	}.Build()
	File_bosdyn_api_robot_state_proto = out.File
	file_bosdyn_api_robot_state_proto_rawDesc = nil
	file_bosdyn_api_robot_state_proto_goTypes = nil
	file_bosdyn_api_robot_state_proto_depIdxs = nil
}
