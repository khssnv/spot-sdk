// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/image.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Image_Format int32

const (
	// Unknown image format.
	Image_FORMAT_UNKNOWN Image_Format = 0
	// Color/greyscale formats.
	// JPEG format.
	Image_FORMAT_JPEG Image_Format = 1
	// Uncompressed.  Requires pixel_format.
	Image_FORMAT_RAW Image_Format = 2
	// 1 byte run-length before each pixel value.
	Image_FORMAT_RLE Image_Format = 3
)

// Enum value maps for Image_Format.
var (
	Image_Format_name = map[int32]string{
		0: "FORMAT_UNKNOWN",
		1: "FORMAT_JPEG",
		2: "FORMAT_RAW",
		3: "FORMAT_RLE",
	}
	Image_Format_value = map[string]int32{
		"FORMAT_UNKNOWN": 0,
		"FORMAT_JPEG":    1,
		"FORMAT_RAW":     2,
		"FORMAT_RLE":     3,
	}
)

func (x Image_Format) Enum() *Image_Format {
	p := new(Image_Format)
	*p = x
	return p
}

func (x Image_Format) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Image_Format) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_image_proto_enumTypes[0].Descriptor()
}

func (Image_Format) Type() protoreflect.EnumType {
	return &file_bosdyn_api_image_proto_enumTypes[0]
}

func (x Image_Format) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Image_Format.Descriptor instead.
func (Image_Format) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{0, 0}
}

type Image_PixelFormat int32

const (
	// Unspecified value -- should not be used.
	Image_PIXEL_FORMAT_UNKNOWN Image_PixelFormat = 0
	// One byte per pixel.
	Image_PIXEL_FORMAT_GREYSCALE_U8 Image_PixelFormat = 1
	// Three bytes per pixel.
	Image_PIXEL_FORMAT_RGB_U8 Image_PixelFormat = 3
	// Four bytes per pixel.
	Image_PIXEL_FORMAT_RGBA_U8 Image_PixelFormat = 4
	// Little-endian uint16 z-distance from camera (mm).
	Image_PIXEL_FORMAT_DEPTH_U16 Image_PixelFormat = 5
	// Two bytes per pixel.
	Image_PIXEL_FORMAT_GREYSCALE_U16 Image_PixelFormat = 6
)

// Enum value maps for Image_PixelFormat.
var (
	Image_PixelFormat_name = map[int32]string{
		0: "PIXEL_FORMAT_UNKNOWN",
		1: "PIXEL_FORMAT_GREYSCALE_U8",
		3: "PIXEL_FORMAT_RGB_U8",
		4: "PIXEL_FORMAT_RGBA_U8",
		5: "PIXEL_FORMAT_DEPTH_U16",
		6: "PIXEL_FORMAT_GREYSCALE_U16",
	}
	Image_PixelFormat_value = map[string]int32{
		"PIXEL_FORMAT_UNKNOWN":       0,
		"PIXEL_FORMAT_GREYSCALE_U8":  1,
		"PIXEL_FORMAT_RGB_U8":        3,
		"PIXEL_FORMAT_RGBA_U8":       4,
		"PIXEL_FORMAT_DEPTH_U16":     5,
		"PIXEL_FORMAT_GREYSCALE_U16": 6,
	}
)

func (x Image_PixelFormat) Enum() *Image_PixelFormat {
	p := new(Image_PixelFormat)
	*p = x
	return p
}

func (x Image_PixelFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Image_PixelFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_image_proto_enumTypes[1].Descriptor()
}

func (Image_PixelFormat) Type() protoreflect.EnumType {
	return &file_bosdyn_api_image_proto_enumTypes[1]
}

func (x Image_PixelFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Image_PixelFormat.Descriptor instead.
func (Image_PixelFormat) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{0, 1}
}

type ImageSource_ImageType int32

const (
	// Unspecified image type.
	ImageSource_IMAGE_TYPE_UNKNOWN ImageSource_ImageType = 0
	// Color or greyscale intensity image.
	ImageSource_IMAGE_TYPE_VISUAL ImageSource_ImageType = 1
	// Pixel values represent distances to objects/surfaces.
	ImageSource_IMAGE_TYPE_DEPTH ImageSource_ImageType = 2
)

// Enum value maps for ImageSource_ImageType.
var (
	ImageSource_ImageType_name = map[int32]string{
		0: "IMAGE_TYPE_UNKNOWN",
		1: "IMAGE_TYPE_VISUAL",
		2: "IMAGE_TYPE_DEPTH",
	}
	ImageSource_ImageType_value = map[string]int32{
		"IMAGE_TYPE_UNKNOWN": 0,
		"IMAGE_TYPE_VISUAL":  1,
		"IMAGE_TYPE_DEPTH":   2,
	}
)

func (x ImageSource_ImageType) Enum() *ImageSource_ImageType {
	p := new(ImageSource_ImageType)
	*p = x
	return p
}

func (x ImageSource_ImageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageSource_ImageType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_image_proto_enumTypes[2].Descriptor()
}

func (ImageSource_ImageType) Type() protoreflect.EnumType {
	return &file_bosdyn_api_image_proto_enumTypes[2]
}

func (x ImageSource_ImageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageSource_ImageType.Descriptor instead.
func (ImageSource_ImageType) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{3, 0}
}

type ImageResponse_Status int32

const (
	// UNKNOWN should never be used.
	// An internal ImageService issue has happened if UNKNOWN is set.
	// None of the other fields are filled out.
	ImageResponse_STATUS_UNKNOWN ImageResponse_Status = 0
	// Call succeeded at filling out all the fields.
	ImageResponse_STATUS_OK ImageResponse_Status = 1
	// Image source name in request is unknown.  Other fields are not filled out.
	ImageResponse_STATUS_UNKNOWN_CAMERA ImageResponse_Status = 2
	// Failed to fill out ImageSource.  All the other fields are not filled out.
	ImageResponse_STATUS_SOURCE_DATA_ERROR ImageResponse_Status = 3
	// There was a problem with the image data.  Only the ImageSource is filled out.
	ImageResponse_STATUS_IMAGE_DATA_ERROR ImageResponse_Status = 4
	// The requested image format is unsupported for the image-source named. The image data will
	// not be filled out. Note, if an image request has "FORMAT_UNKNOWN", the service should choose the
	// best format to provide the data in.
	ImageResponse_STATUS_UNSUPPORTED_IMAGE_FORMAT_REQUESTED ImageResponse_Status = 5
	// The requested pixel format is unsupported for the image-source named. The image data will
	// not be filled out. Note, if an image request has "PIXEL_FORMAT_UNKNOWN", the service
	// should choose the best format to provide the data in.
	ImageResponse_STATUS_UNSUPPORTED_PIXEL_FORMAT_REQUESTED ImageResponse_Status = 6
	// The requested ratio is out of bounds [0,1] or unsupported by the image service
	ImageResponse_STATUS_UNSUPPORTED_RESIZE_RATIO_REQUESTED ImageResponse_Status = 7
)

// Enum value maps for ImageResponse_Status.
var (
	ImageResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_UNKNOWN_CAMERA",
		3: "STATUS_SOURCE_DATA_ERROR",
		4: "STATUS_IMAGE_DATA_ERROR",
		5: "STATUS_UNSUPPORTED_IMAGE_FORMAT_REQUESTED",
		6: "STATUS_UNSUPPORTED_PIXEL_FORMAT_REQUESTED",
		7: "STATUS_UNSUPPORTED_RESIZE_RATIO_REQUESTED",
	}
	ImageResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                            0,
		"STATUS_OK":                                 1,
		"STATUS_UNKNOWN_CAMERA":                     2,
		"STATUS_SOURCE_DATA_ERROR":                  3,
		"STATUS_IMAGE_DATA_ERROR":                   4,
		"STATUS_UNSUPPORTED_IMAGE_FORMAT_REQUESTED": 5,
		"STATUS_UNSUPPORTED_PIXEL_FORMAT_REQUESTED": 6,
		"STATUS_UNSUPPORTED_RESIZE_RATIO_REQUESTED": 7,
	}
)

func (x ImageResponse_Status) Enum() *ImageResponse_Status {
	p := new(ImageResponse_Status)
	*p = x
	return p
}

func (x ImageResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ImageResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_image_proto_enumTypes[3].Descriptor()
}

func (ImageResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_image_proto_enumTypes[3]
}

func (x ImageResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ImageResponse_Status.Descriptor instead.
func (ImageResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{8, 0}
}

// Rectangular color/greyscale/depth images.
type Image struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of columns in the image (in pixels).
	Cols int32 `protobuf:"varint,2,opt,name=cols,proto3" json:"cols,omitempty"`
	// Number of rows in the image (in pixels).
	Rows int32 `protobuf:"varint,3,opt,name=rows,proto3" json:"rows,omitempty"`
	// Raw image data.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// How the image is encoded.
	Format Image_Format `protobuf:"varint,5,opt,name=format,proto3,enum=bosdyn.api.Image_Format" json:"format,omitempty"`
	// Pixel format of the image; this will be set even when the Format implies
	// the pixel format.
	PixelFormat Image_PixelFormat `protobuf:"varint,6,opt,name=pixel_format,json=pixelFormat,proto3,enum=bosdyn.api.Image_PixelFormat" json:"pixel_format,omitempty"`
}

func (x *Image) Reset() {
	*x = Image{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Image) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Image) ProtoMessage() {}

func (x *Image) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Image.ProtoReflect.Descriptor instead.
func (*Image) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{0}
}

func (x *Image) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *Image) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *Image) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Image) GetFormat() Image_Format {
	if x != nil {
		return x.Format
	}
	return Image_FORMAT_UNKNOWN
}

func (x *Image) GetPixelFormat() Image_PixelFormat {
	if x != nil {
		return x.PixelFormat
	}
	return Image_PIXEL_FORMAT_UNKNOWN
}

// Sensor parameters associated with an image capture.
type CaptureParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The duration of exposure in microseconds.
	ExposureDuration *durationpb.Duration `protobuf:"bytes,1,opt,name=exposure_duration,json=exposureDuration,proto3" json:"exposure_duration,omitempty"`
	// Sensor gain in dB.
	Gain float64 `protobuf:"fixed64,2,opt,name=gain,proto3" json:"gain,omitempty"`
}

func (x *CaptureParameters) Reset() {
	*x = CaptureParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureParameters) ProtoMessage() {}

func (x *CaptureParameters) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureParameters.ProtoReflect.Descriptor instead.
func (*CaptureParameters) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{1}
}

func (x *CaptureParameters) GetExposureDuration() *durationpb.Duration {
	if x != nil {
		return x.ExposureDuration
	}
	return nil
}

func (x *CaptureParameters) GetGain() float64 {
	if x != nil {
		return x.Gain
	}
	return 0
}

// Rectangular color/greyscale images.
type ImageCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The time at which the image data was acquired in the robot's time basis.
	AcquisitionTime *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=acquisition_time,json=acquisitionTime,proto3" json:"acquisition_time,omitempty"`
	// A tree-based collection of transformations, which will include the transformations to each image's
	// sensor in addition to transformations to the common frames ("vision", "body", "odom").
	// All transforms within the snapshot are at the acquistion time of the image.
	TransformsSnapshot *FrameTreeSnapshot `protobuf:"bytes,31,opt,name=transforms_snapshot,json=transformsSnapshot,proto3" json:"transforms_snapshot,omitempty"`
	// The frame name for the image's sensor source. This will be included in the transform snapshot.
	FrameNameImageSensor string `protobuf:"bytes,5,opt,name=frame_name_image_sensor,json=frameNameImageSensor,proto3" json:"frame_name_image_sensor,omitempty"`
	// Image data.
	Image *Image `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`
	// Sensor parameters associated with this image capture.
	CaptureParams *CaptureParameters `protobuf:"bytes,4,opt,name=capture_params,json=captureParams,proto3" json:"capture_params,omitempty"`
}

func (x *ImageCapture) Reset() {
	*x = ImageCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageCapture) ProtoMessage() {}

func (x *ImageCapture) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageCapture.ProtoReflect.Descriptor instead.
func (*ImageCapture) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{2}
}

func (x *ImageCapture) GetAcquisitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AcquisitionTime
	}
	return nil
}

func (x *ImageCapture) GetTransformsSnapshot() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshot
	}
	return nil
}

func (x *ImageCapture) GetFrameNameImageSensor() string {
	if x != nil {
		return x.FrameNameImageSensor
	}
	return ""
}

func (x *ImageCapture) GetImage() *Image {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *ImageCapture) GetCaptureParams() *CaptureParameters {
	if x != nil {
		return x.CaptureParams
	}
	return nil
}

// Proto for a description of an image source on the robot.
type ImageSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this image source used to get images.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Number of columns in the image (in pixels).
	Cols int32 `protobuf:"varint,4,opt,name=cols,proto3" json:"cols,omitempty"`
	// Number of rows in the image (in pixels).
	Rows int32 `protobuf:"varint,5,opt,name=rows,proto3" json:"rows,omitempty"`
	// For depth images, the pixel value that represents a depth of one meter.
	// Depth in meters can be computed by dividing the raw pixel value by this scale factor.
	DepthScale float64 `protobuf:"fixed64,6,opt,name=depth_scale,json=depthScale,proto3" json:"depth_scale,omitempty"`
	// Types that are assignable to CameraModels:
	//	*ImageSource_Pinhole
	CameraModels isImageSource_CameraModels `protobuf_oneof:"camera_models"`
	// The kind of images returned by this image source.
	ImageType ImageSource_ImageType `protobuf:"varint,9,opt,name=image_type,json=imageType,proto3,enum=bosdyn.api.ImageSource_ImageType" json:"image_type,omitempty"`
	// The pixel formats a specific image source supports.
	PixelFormats []Image_PixelFormat `protobuf:"varint,10,rep,packed,name=pixel_formats,json=pixelFormats,proto3,enum=bosdyn.api.Image_PixelFormat" json:"pixel_formats,omitempty"`
	// The image formats a specific image source supports.
	ImageFormats []Image_Format `protobuf:"varint,11,rep,packed,name=image_formats,json=imageFormats,proto3,enum=bosdyn.api.Image_Format" json:"image_formats,omitempty"`
}

func (x *ImageSource) Reset() {
	*x = ImageSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSource) ProtoMessage() {}

func (x *ImageSource) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSource.ProtoReflect.Descriptor instead.
func (*ImageSource) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{3}
}

func (x *ImageSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ImageSource) GetCols() int32 {
	if x != nil {
		return x.Cols
	}
	return 0
}

func (x *ImageSource) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *ImageSource) GetDepthScale() float64 {
	if x != nil {
		return x.DepthScale
	}
	return 0
}

func (m *ImageSource) GetCameraModels() isImageSource_CameraModels {
	if m != nil {
		return m.CameraModels
	}
	return nil
}

func (x *ImageSource) GetPinhole() *ImageSource_PinholeModel {
	if x, ok := x.GetCameraModels().(*ImageSource_Pinhole); ok {
		return x.Pinhole
	}
	return nil
}

func (x *ImageSource) GetImageType() ImageSource_ImageType {
	if x != nil {
		return x.ImageType
	}
	return ImageSource_IMAGE_TYPE_UNKNOWN
}

func (x *ImageSource) GetPixelFormats() []Image_PixelFormat {
	if x != nil {
		return x.PixelFormats
	}
	return nil
}

func (x *ImageSource) GetImageFormats() []Image_Format {
	if x != nil {
		return x.ImageFormats
	}
	return nil
}

type isImageSource_CameraModels interface {
	isImageSource_CameraModels()
}

type ImageSource_Pinhole struct {
	// Rectilinear camera model.
	Pinhole *ImageSource_PinholeModel `protobuf:"bytes,8,opt,name=pinhole,proto3,oneof"`
}

func (*ImageSource_Pinhole) isImageSource_CameraModels() {}

// The ListImageSources request message for the robot image service.
type ListImageSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListImageSourcesRequest) Reset() {
	*x = ListImageSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageSourcesRequest) ProtoMessage() {}

func (x *ListImageSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageSourcesRequest.ProtoReflect.Descriptor instead.
func (*ListImageSourcesRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{4}
}

func (x *ListImageSourcesRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The ListImageSources response message which contains all known image sources for the robot.
type ListImageSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response Header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The set of ImageSources available from this service.
	// May be empty if the service serves no cameras (e.g., if no cameras were found on startup).
	ImageSources []*ImageSource `protobuf:"bytes,2,rep,name=image_sources,json=imageSources,proto3" json:"image_sources,omitempty"`
}

func (x *ListImageSourcesResponse) Reset() {
	*x = ListImageSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListImageSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListImageSourcesResponse) ProtoMessage() {}

func (x *ListImageSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListImageSourcesResponse.ProtoReflect.Descriptor instead.
func (*ListImageSourcesResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{5}
}

func (x *ListImageSourcesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListImageSourcesResponse) GetImageSources() []*ImageSource {
	if x != nil {
		return x.ImageSources
	}
	return nil
}

// The image request specifying the image source and data format desired.
type ImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The string name of the image source to get image data from.
	ImageSourceName string `protobuf:"bytes,1,opt,name=image_source_name,json=imageSourceName,proto3" json:"image_source_name,omitempty"`
	// Image quality: a number from 0 (worst) to 100 (highest).
	// Note that jpeg quality 100 is still lossy.
	QualityPercent float64 `protobuf:"fixed64,2,opt,name=quality_percent,json=qualityPercent,proto3" json:"quality_percent,omitempty"`
	// Specify the desired image encoding (e.g. JPEG, RAW). If no format is specified (e.g. FORMAT_UNKNOWN), the image
	// service will choose the best format for the data.
	ImageFormat Image_Format `protobuf:"varint,3,opt,name=image_format,json=imageFormat,proto3,enum=bosdyn.api.Image_Format" json:"image_format,omitempty"`
	// Optional specification of the desired image dimensions.
	// If the original image is 1920x1080, a resize_ratio of (2/3) will return an image with size 1280x720
	// The range is clipped to [0.01, 1] while maintaining the original aspect ratio.
	// For backwards compatibliity, a value of 0 means no resizing.
	ResizeRatio float64 `protobuf:"fixed64,4,opt,name=resize_ratio,json=resizeRatio,proto3" json:"resize_ratio,omitempty"`
	// Specify the desired pixel format (e.g. GREYSCALE_U8, RGB_U8). If no format is specified
	// (e.g. PIXEL_FORMAT_UNKNOWN), the image service will choose the best format for the data.
	PixelFormat Image_PixelFormat `protobuf:"varint,5,opt,name=pixel_format,json=pixelFormat,proto3,enum=bosdyn.api.Image_PixelFormat" json:"pixel_format,omitempty"`
}

func (x *ImageRequest) Reset() {
	*x = ImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageRequest) ProtoMessage() {}

func (x *ImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageRequest.ProtoReflect.Descriptor instead.
func (*ImageRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{6}
}

func (x *ImageRequest) GetImageSourceName() string {
	if x != nil {
		return x.ImageSourceName
	}
	return ""
}

func (x *ImageRequest) GetQualityPercent() float64 {
	if x != nil {
		return x.QualityPercent
	}
	return 0
}

func (x *ImageRequest) GetImageFormat() Image_Format {
	if x != nil {
		return x.ImageFormat
	}
	return Image_FORMAT_UNKNOWN
}

func (x *ImageRequest) GetResizeRatio() float64 {
	if x != nil {
		return x.ResizeRatio
	}
	return 0
}

func (x *ImageRequest) GetPixelFormat() Image_PixelFormat {
	if x != nil {
		return x.PixelFormat
	}
	return Image_PIXEL_FORMAT_UNKNOWN
}

// The GetImage request message which can send multiple different image source requests at once.
type GetImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The different image requests for this rpc call.
	ImageRequests []*ImageRequest `protobuf:"bytes,2,rep,name=image_requests,json=imageRequests,proto3" json:"image_requests,omitempty"`
}

func (x *GetImageRequest) Reset() {
	*x = GetImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageRequest) ProtoMessage() {}

func (x *GetImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageRequest.ProtoReflect.Descriptor instead.
func (*GetImageRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{7}
}

func (x *GetImageRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetImageRequest) GetImageRequests() []*ImageRequest {
	if x != nil {
		return x.ImageRequests
	}
	return nil
}

// The image response for each request, that includes image data and image source information.
type ImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image capture contains the image data and information about the state of the camera and robot
	// at the time the image was collected.
	Shot *ImageCapture `protobuf:"bytes,1,opt,name=shot,proto3" json:"shot,omitempty"`
	// The source describes general information about the camera source the image data was collected from.
	Source *ImageSource `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	// Return status of the request.
	Status ImageResponse_Status `protobuf:"varint,4,opt,name=status,proto3,enum=bosdyn.api.ImageResponse_Status" json:"status,omitempty"`
}

func (x *ImageResponse) Reset() {
	*x = ImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageResponse) ProtoMessage() {}

func (x *ImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageResponse.ProtoReflect.Descriptor instead.
func (*ImageResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{8}
}

func (x *ImageResponse) GetShot() *ImageCapture {
	if x != nil {
		return x.Shot
	}
	return nil
}

func (x *ImageResponse) GetSource() *ImageSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ImageResponse) GetStatus() ImageResponse_Status {
	if x != nil {
		return x.Status
	}
	return ImageResponse_STATUS_UNKNOWN
}

// The GetImage response message which includes image data for all requested sources.
type GetImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The ordering of these image responses is defined by the order of the ImageRequests.
	ImageResponses []*ImageResponse `protobuf:"bytes,2,rep,name=image_responses,json=imageResponses,proto3" json:"image_responses,omitempty"`
}

func (x *GetImageResponse) Reset() {
	*x = GetImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetImageResponse) ProtoMessage() {}

func (x *GetImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetImageResponse.ProtoReflect.Descriptor instead.
func (*GetImageResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{9}
}

func (x *GetImageResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetImageResponse) GetImageResponses() []*ImageResponse {
	if x != nil {
		return x.ImageResponses
	}
	return nil
}

// The camera can be modeled as a pinhole camera described with a matrix.
// Camera Matrix can be constructed by the camera intrinsics:
// [[focal_length.x,         skew.x, principal_point.x],
// [[        skew.y, focal_length.y, principal_point.y],
// [[             0,              0,                 1]]
type ImageSource_PinholeModel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The camera intrinsics are necessary for descrbing the pinhole camera matrix.
	Intrinsics *ImageSource_PinholeModel_CameraIntrinsics `protobuf:"bytes,1,opt,name=intrinsics,proto3" json:"intrinsics,omitempty"`
}

func (x *ImageSource_PinholeModel) Reset() {
	*x = ImageSource_PinholeModel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSource_PinholeModel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSource_PinholeModel) ProtoMessage() {}

func (x *ImageSource_PinholeModel) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSource_PinholeModel.ProtoReflect.Descriptor instead.
func (*ImageSource_PinholeModel) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ImageSource_PinholeModel) GetIntrinsics() *ImageSource_PinholeModel_CameraIntrinsics {
	if x != nil {
		return x.Intrinsics
	}
	return nil
}

// Intrinsic parameters are in pixel space.
type ImageSource_PinholeModel_CameraIntrinsics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The focal length of the camera.
	FocalLength *Vec2 `protobuf:"bytes,1,opt,name=focal_length,json=focalLength,proto3" json:"focal_length,omitempty"`
	// The optical center in sensor coordinates.
	PrincipalPoint *Vec2 `protobuf:"bytes,2,opt,name=principal_point,json=principalPoint,proto3" json:"principal_point,omitempty"`
	// The skew for the intrinsic matrix.
	Skew *Vec2 `protobuf:"bytes,3,opt,name=skew,proto3" json:"skew,omitempty"`
}

func (x *ImageSource_PinholeModel_CameraIntrinsics) Reset() {
	*x = ImageSource_PinholeModel_CameraIntrinsics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_image_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSource_PinholeModel_CameraIntrinsics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSource_PinholeModel_CameraIntrinsics) ProtoMessage() {}

func (x *ImageSource_PinholeModel_CameraIntrinsics) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_image_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSource_PinholeModel_CameraIntrinsics.ProtoReflect.Descriptor instead.
func (*ImageSource_PinholeModel_CameraIntrinsics) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_image_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *ImageSource_PinholeModel_CameraIntrinsics) GetFocalLength() *Vec2 {
	if x != nil {
		return x.FocalLength
	}
	return nil
}

func (x *ImageSource_PinholeModel_CameraIntrinsics) GetPrincipalPoint() *Vec2 {
	if x != nil {
		return x.PrincipalPoint
	}
	return nil
}

func (x *ImageSource_PinholeModel_CameraIntrinsics) GetSkew() *Vec2 {
	if x != nil {
		return x.Skew
	}
	return nil
}

var File_bosdyn_api_image_proto protoreflect.FileDescriptor

var file_bosdyn_api_image_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbe, 0x03, 0x0a, 0x05, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x30, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x22, 0x4d, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x4a, 0x50, 0x45, 0x47,
	0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x41, 0x57,
	0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x4c, 0x45,
	0x10, 0x03, 0x22, 0xb5, 0x01, 0x0a, 0x0b, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d,
	0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x49, 0x58, 0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45,
	0x59, 0x53, 0x43, 0x41, 0x4c, 0x45, 0x5f, 0x55, 0x38, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50,
	0x49, 0x58, 0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x47, 0x42, 0x5f,
	0x55, 0x38, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x47, 0x42, 0x41, 0x5f, 0x55, 0x38, 0x10, 0x04, 0x12, 0x1a,
	0x0a, 0x16, 0x50, 0x49, 0x58, 0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x44,
	0x45, 0x50, 0x54, 0x48, 0x5f, 0x55, 0x31, 0x36, 0x10, 0x05, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x49,
	0x58, 0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x47, 0x52, 0x45, 0x59, 0x53,
	0x43, 0x41, 0x4c, 0x45, 0x5f, 0x55, 0x31, 0x36, 0x10, 0x06, 0x22, 0x6f, 0x0a, 0x11, 0x43, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x46, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x22, 0xd7, 0x02, 0x0a, 0x0c,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x45, 0x0a, 0x10,
	0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d,
	0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a,
	0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xf3, 0x05, 0x0a, 0x0b, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6c,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x63, 0x61,
	0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x70, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e,
	0x68, 0x6f, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x48, 0x00, 0x52, 0x07, 0x70, 0x69, 0x6e,
	0x68, 0x6f, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x70, 0x69,
	0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x73, 0x1a, 0x90, 0x02, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x68, 0x6f, 0x6c, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x74, 0x72, 0x69,
	0x6e, 0x73, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x72, 0x69, 0x6e, 0x73, 0x69, 0x63,
	0x73, 0x1a, 0xa8, 0x01, 0x0a, 0x10, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x49, 0x6e, 0x74, 0x72,
	0x69, 0x6e, 0x73, 0x69, 0x63, 0x73, 0x12, 0x33, 0x0a, 0x0c, 0x66, 0x6f, 0x63, 0x61, 0x6c, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x0b,
	0x66, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0f, 0x70,
	0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6e, 0x63, 0x69, 0x70, 0x61,
	0x6c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x6b, 0x65, 0x77, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x04, 0x73, 0x6b, 0x65, 0x77, 0x22, 0x50, 0x0a, 0x09,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4d, 0x41,
	0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x56, 0x49, 0x53, 0x55, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x45, 0x50, 0x54, 0x48, 0x10, 0x02, 0x42, 0x0f,
	0x0a, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x4a,
	0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x22, 0x4c, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x85, 0x02, 0x0a, 0x0c, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x3b,
	0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x40,
	0x0a, 0x0c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x52, 0x0b, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x85, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xc5, 0x03, 0x0a, 0x0d, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x52, 0x04, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x8e, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x49, 0x4d,
	0x41, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x45, 0x44, 0x10, 0x05, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x49, 0x58,
	0x45, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x45, 0x44, 0x10, 0x06, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x49,
	0x5a, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x45, 0x44, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06,
	0x22, 0x8a, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0e, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x3f, 0x42,
	0x0a, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73,
	0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_image_proto_rawDescOnce sync.Once
	file_bosdyn_api_image_proto_rawDescData = file_bosdyn_api_image_proto_rawDesc
)

func file_bosdyn_api_image_proto_rawDescGZIP() []byte {
	file_bosdyn_api_image_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_image_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_image_proto_rawDescData)
	})
	return file_bosdyn_api_image_proto_rawDescData
}

var file_bosdyn_api_image_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bosdyn_api_image_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_bosdyn_api_image_proto_goTypes = []interface{}{
	(Image_Format)(0),                                 // 0: bosdyn.api.Image.Format
	(Image_PixelFormat)(0),                            // 1: bosdyn.api.Image.PixelFormat
	(ImageSource_ImageType)(0),                        // 2: bosdyn.api.ImageSource.ImageType
	(ImageResponse_Status)(0),                         // 3: bosdyn.api.ImageResponse.Status
	(*Image)(nil),                                     // 4: bosdyn.api.Image
	(*CaptureParameters)(nil),                         // 5: bosdyn.api.CaptureParameters
	(*ImageCapture)(nil),                              // 6: bosdyn.api.ImageCapture
	(*ImageSource)(nil),                               // 7: bosdyn.api.ImageSource
	(*ListImageSourcesRequest)(nil),                   // 8: bosdyn.api.ListImageSourcesRequest
	(*ListImageSourcesResponse)(nil),                  // 9: bosdyn.api.ListImageSourcesResponse
	(*ImageRequest)(nil),                              // 10: bosdyn.api.ImageRequest
	(*GetImageRequest)(nil),                           // 11: bosdyn.api.GetImageRequest
	(*ImageResponse)(nil),                             // 12: bosdyn.api.ImageResponse
	(*GetImageResponse)(nil),                          // 13: bosdyn.api.GetImageResponse
	(*ImageSource_PinholeModel)(nil),                  // 14: bosdyn.api.ImageSource.PinholeModel
	(*ImageSource_PinholeModel_CameraIntrinsics)(nil), // 15: bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics
	(*durationpb.Duration)(nil),                       // 16: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                     // 17: google.protobuf.Timestamp
	(*FrameTreeSnapshot)(nil),                         // 18: bosdyn.api.FrameTreeSnapshot
	(*RequestHeader)(nil),                             // 19: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),                            // 20: bosdyn.api.ResponseHeader
	(*Vec2)(nil),                                      // 21: bosdyn.api.Vec2
}
var file_bosdyn_api_image_proto_depIdxs = []int32{
	0,  // 0: bosdyn.api.Image.format:type_name -> bosdyn.api.Image.Format
	1,  // 1: bosdyn.api.Image.pixel_format:type_name -> bosdyn.api.Image.PixelFormat
	16, // 2: bosdyn.api.CaptureParameters.exposure_duration:type_name -> google.protobuf.Duration
	17, // 3: bosdyn.api.ImageCapture.acquisition_time:type_name -> google.protobuf.Timestamp
	18, // 4: bosdyn.api.ImageCapture.transforms_snapshot:type_name -> bosdyn.api.FrameTreeSnapshot
	4,  // 5: bosdyn.api.ImageCapture.image:type_name -> bosdyn.api.Image
	5,  // 6: bosdyn.api.ImageCapture.capture_params:type_name -> bosdyn.api.CaptureParameters
	14, // 7: bosdyn.api.ImageSource.pinhole:type_name -> bosdyn.api.ImageSource.PinholeModel
	2,  // 8: bosdyn.api.ImageSource.image_type:type_name -> bosdyn.api.ImageSource.ImageType
	1,  // 9: bosdyn.api.ImageSource.pixel_formats:type_name -> bosdyn.api.Image.PixelFormat
	0,  // 10: bosdyn.api.ImageSource.image_formats:type_name -> bosdyn.api.Image.Format
	19, // 11: bosdyn.api.ListImageSourcesRequest.header:type_name -> bosdyn.api.RequestHeader
	20, // 12: bosdyn.api.ListImageSourcesResponse.header:type_name -> bosdyn.api.ResponseHeader
	7,  // 13: bosdyn.api.ListImageSourcesResponse.image_sources:type_name -> bosdyn.api.ImageSource
	0,  // 14: bosdyn.api.ImageRequest.image_format:type_name -> bosdyn.api.Image.Format
	1,  // 15: bosdyn.api.ImageRequest.pixel_format:type_name -> bosdyn.api.Image.PixelFormat
	19, // 16: bosdyn.api.GetImageRequest.header:type_name -> bosdyn.api.RequestHeader
	10, // 17: bosdyn.api.GetImageRequest.image_requests:type_name -> bosdyn.api.ImageRequest
	6,  // 18: bosdyn.api.ImageResponse.shot:type_name -> bosdyn.api.ImageCapture
	7,  // 19: bosdyn.api.ImageResponse.source:type_name -> bosdyn.api.ImageSource
	3,  // 20: bosdyn.api.ImageResponse.status:type_name -> bosdyn.api.ImageResponse.Status
	20, // 21: bosdyn.api.GetImageResponse.header:type_name -> bosdyn.api.ResponseHeader
	12, // 22: bosdyn.api.GetImageResponse.image_responses:type_name -> bosdyn.api.ImageResponse
	15, // 23: bosdyn.api.ImageSource.PinholeModel.intrinsics:type_name -> bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics
	21, // 24: bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics.focal_length:type_name -> bosdyn.api.Vec2
	21, // 25: bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics.principal_point:type_name -> bosdyn.api.Vec2
	21, // 26: bosdyn.api.ImageSource.PinholeModel.CameraIntrinsics.skew:type_name -> bosdyn.api.Vec2
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_bosdyn_api_image_proto_init() }
func file_bosdyn_api_image_proto_init() {
	if File_bosdyn_api_image_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_geometry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_image_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Image); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListImageSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSource_PinholeModel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_image_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSource_PinholeModel_CameraIntrinsics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_image_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ImageSource_Pinhole)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_image_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_image_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_image_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_image_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_image_proto_msgTypes,
	}.Build()
	File_bosdyn_api_image_proto = out.File
	file_bosdyn_api_image_proto_rawDesc = nil
	file_bosdyn_api_image_proto_goTypes = nil
	file_bosdyn_api_image_proto_depIdxs = nil
}
