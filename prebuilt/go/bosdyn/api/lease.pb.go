// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/lease.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LeaseUseResult_Status int32

const (
	// An internal issue occurred.
	LeaseUseResult_STATUS_UNKNOWN LeaseUseResult_Status = 0
	// The Lease was accepted.
	LeaseUseResult_STATUS_OK LeaseUseResult_Status = 1
	// The Lease is invalid.
	LeaseUseResult_STATUS_INVALID_LEASE LeaseUseResult_Status = 2
	// The Lease is older than the current lease, and rejected.
	LeaseUseResult_STATUS_OLDER LeaseUseResult_Status = 3
	// The Lease holder did not check in regularly enough, and the Lease is stale.
	LeaseUseResult_STATUS_REVOKED LeaseUseResult_Status = 4
	// The Lease was for an unmanaged resource.
	LeaseUseResult_STATUS_UNMANAGED LeaseUseResult_Status = 5
	// The Lease was for the wrong epoch.
	LeaseUseResult_STATUS_WRONG_EPOCH LeaseUseResult_Status = 6
)

// Enum value maps for LeaseUseResult_Status.
var (
	LeaseUseResult_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_LEASE",
		3: "STATUS_OLDER",
		4: "STATUS_REVOKED",
		5: "STATUS_UNMANAGED",
		6: "STATUS_WRONG_EPOCH",
	}
	LeaseUseResult_Status_value = map[string]int32{
		"STATUS_UNKNOWN":       0,
		"STATUS_OK":            1,
		"STATUS_INVALID_LEASE": 2,
		"STATUS_OLDER":         3,
		"STATUS_REVOKED":       4,
		"STATUS_UNMANAGED":     5,
		"STATUS_WRONG_EPOCH":   6,
	}
)

func (x LeaseUseResult_Status) Enum() *LeaseUseResult_Status {
	p := new(LeaseUseResult_Status)
	*p = x
	return p
}

func (x LeaseUseResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LeaseUseResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_lease_proto_enumTypes[0].Descriptor()
}

func (LeaseUseResult_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_lease_proto_enumTypes[0]
}

func (x LeaseUseResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LeaseUseResult_Status.Descriptor instead.
func (LeaseUseResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{3, 0}
}

type AcquireLeaseResponse_Status int32

const (
	// UNKNOWN should never be used. An internal LeaseService issue has happened
	// if UNKNOWN is set.
	AcquireLeaseResponse_STATUS_UNKNOWN AcquireLeaseResponse_Status = 0
	// AcquireLease was successful.The lease field will be populated with the new
	// lease for the resource. The client is expected to call the RetainLease method
	// immediately after.
	AcquireLeaseResponse_STATUS_OK AcquireLeaseResponse_Status = 1
	// AcquireLease failed since the resource has already been claimed.
	// The TakeLease method may be used to forcefully grab the lease.
	AcquireLeaseResponse_STATUS_RESOURCE_ALREADY_CLAIMED AcquireLeaseResponse_Status = 2
	// AcquireLease failed since the resource is not known to LeaseService.
	// The ListLeaseResources method may be used to list all known
	// resources.
	AcquireLeaseResponse_STATUS_INVALID_RESOURCE AcquireLeaseResponse_Status = 3
	// The LeaseService is not authoritative - so Acquire should not work.
	AcquireLeaseResponse_STATUS_NOT_AUTHORITATIVE_SERVICE AcquireLeaseResponse_Status = 4
)

// Enum value maps for AcquireLeaseResponse_Status.
var (
	AcquireLeaseResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_RESOURCE_ALREADY_CLAIMED",
		3: "STATUS_INVALID_RESOURCE",
		4: "STATUS_NOT_AUTHORITATIVE_SERVICE",
	}
	AcquireLeaseResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                   0,
		"STATUS_OK":                        1,
		"STATUS_RESOURCE_ALREADY_CLAIMED":  2,
		"STATUS_INVALID_RESOURCE":          3,
		"STATUS_NOT_AUTHORITATIVE_SERVICE": 4,
	}
)

func (x AcquireLeaseResponse_Status) Enum() *AcquireLeaseResponse_Status {
	p := new(AcquireLeaseResponse_Status)
	*p = x
	return p
}

func (x AcquireLeaseResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquireLeaseResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_lease_proto_enumTypes[1].Descriptor()
}

func (AcquireLeaseResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_lease_proto_enumTypes[1]
}

func (x AcquireLeaseResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquireLeaseResponse_Status.Descriptor instead.
func (AcquireLeaseResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{5, 0}
}

type TakeLeaseResponse_Status int32

const (
	// UNKNOWN should never be used. An internal LeaseService issue has happened if UNKNOWN is set.
	TakeLeaseResponse_STATUS_UNKNOWN TakeLeaseResponse_Status = 0
	// TakeLease was successful. The lease field will be populated with the
	// new lease for the resource. The client is expected to call the RetainLease
	// method immediately after.
	TakeLeaseResponse_STATUS_OK TakeLeaseResponse_Status = 1
	// TakeLease failed since the resource is not known to LeaseService.
	// The ListLeaseResources method may be used to list all known
	// resources.
	TakeLeaseResponse_STATUS_INVALID_RESOURCE TakeLeaseResponse_Status = 2
	// The LeaseService is not authoritative - so Acquire should not work.
	TakeLeaseResponse_STATUS_NOT_AUTHORITATIVE_SERVICE TakeLeaseResponse_Status = 3
)

// Enum value maps for TakeLeaseResponse_Status.
var (
	TakeLeaseResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_RESOURCE",
		3: "STATUS_NOT_AUTHORITATIVE_SERVICE",
	}
	TakeLeaseResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                   0,
		"STATUS_OK":                        1,
		"STATUS_INVALID_RESOURCE":          2,
		"STATUS_NOT_AUTHORITATIVE_SERVICE": 3,
	}
)

func (x TakeLeaseResponse_Status) Enum() *TakeLeaseResponse_Status {
	p := new(TakeLeaseResponse_Status)
	*p = x
	return p
}

func (x TakeLeaseResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TakeLeaseResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_lease_proto_enumTypes[2].Descriptor()
}

func (TakeLeaseResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_lease_proto_enumTypes[2]
}

func (x TakeLeaseResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TakeLeaseResponse_Status.Descriptor instead.
func (TakeLeaseResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{7, 0}
}

type ReturnLeaseResponse_Status int32

const (
	// UNKNOWN should never be used. An internal LeaseService issue has happened if UNKNOWN is set.
	ReturnLeaseResponse_STATUS_UNKNOWN ReturnLeaseResponse_Status = 0
	// ReturnLease was successful.
	ReturnLeaseResponse_STATUS_OK ReturnLeaseResponse_Status = 1
	// ReturnLease failed because the resource covered by the lease
	// is not being managed by the LeaseService.
	ReturnLeaseResponse_STATUS_INVALID_RESOURCE ReturnLeaseResponse_Status = 2
	// ReturnLease failed because the lease was not the active lease.
	ReturnLeaseResponse_STATUS_NOT_ACTIVE_LEASE ReturnLeaseResponse_Status = 3
	// The LeaseService is not authoritative - so Acquire should not work.
	ReturnLeaseResponse_STATUS_NOT_AUTHORITATIVE_SERVICE ReturnLeaseResponse_Status = 4
)

// Enum value maps for ReturnLeaseResponse_Status.
var (
	ReturnLeaseResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_RESOURCE",
		3: "STATUS_NOT_ACTIVE_LEASE",
		4: "STATUS_NOT_AUTHORITATIVE_SERVICE",
	}
	ReturnLeaseResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                   0,
		"STATUS_OK":                        1,
		"STATUS_INVALID_RESOURCE":          2,
		"STATUS_NOT_ACTIVE_LEASE":          3,
		"STATUS_NOT_AUTHORITATIVE_SERVICE": 4,
	}
)

func (x ReturnLeaseResponse_Status) Enum() *ReturnLeaseResponse_Status {
	p := new(ReturnLeaseResponse_Status)
	*p = x
	return p
}

func (x ReturnLeaseResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnLeaseResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_lease_proto_enumTypes[3].Descriptor()
}

func (ReturnLeaseResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_lease_proto_enumTypes[3]
}

func (x ReturnLeaseResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnLeaseResponse_Status.Descriptor instead.
func (ReturnLeaseResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{9, 0}
}

// Leases are used to verify that a client has exclusive access to a shared
// resources. Examples of shared resources are the motors for a robot, or
// indicator lights on a robot.
// Leases are initially obtained by clients from the LeaseService. Clients
// then attach Leases to Commands which require them. Clients may also
// generate sub-Leases to delegate out control of the resource to other
// services.
type Lease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource that the Lease is for.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The epoch for the Lease. The sequences field are scoped to a particular epoch.
	// One example of where this can be used is to generate a random epoch
	// at LeaseService startup.
	Epoch string `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	// Logical vector clock indicating when the Lease was generated.
	Sequence []uint32 `protobuf:"varint,3,rep,packed,name=sequence,proto3" json:"sequence,omitempty"`
	// The set of different clients which have sent/receieved the lease.
	ClientNames []string `protobuf:"bytes,4,rep,name=client_names,json=clientNames,proto3" json:"client_names,omitempty"`
}

func (x *Lease) Reset() {
	*x = Lease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease) ProtoMessage() {}

func (x *Lease) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease.ProtoReflect.Descriptor instead.
func (*Lease) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{0}
}

func (x *Lease) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Lease) GetEpoch() string {
	if x != nil {
		return x.Epoch
	}
	return ""
}

func (x *Lease) GetSequence() []uint32 {
	if x != nil {
		return x.Sequence
	}
	return nil
}

func (x *Lease) GetClientNames() []string {
	if x != nil {
		return x.ClientNames
	}
	return nil
}

// Lease resources can be divided into a hierarchy of sub-resources that can
// be commanded together. This message describes the hierarchy of a resource.
type ResourceTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of this resource.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// Sub-resources that make up this resource.
	SubResources []*ResourceTree `protobuf:"bytes,2,rep,name=sub_resources,json=subResources,proto3" json:"sub_resources,omitempty"`
}

func (x *ResourceTree) Reset() {
	*x = ResourceTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceTree) ProtoMessage() {}

func (x *ResourceTree) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceTree.ProtoReflect.Descriptor instead.
func (*ResourceTree) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceTree) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ResourceTree) GetSubResources() []*ResourceTree {
	if x != nil {
		return x.SubResources
	}
	return nil
}

// Details about who currently owns the Lease for a resource.
type LeaseOwner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientName string `protobuf:"bytes,1,opt,name=client_name,json=clientName,proto3" json:"client_name,omitempty"` // The name of the client application.
	UserName   string `protobuf:"bytes,2,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`       // The name of the user.
}

func (x *LeaseOwner) Reset() {
	*x = LeaseOwner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseOwner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseOwner) ProtoMessage() {}

func (x *LeaseOwner) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseOwner.ProtoReflect.Descriptor instead.
func (*LeaseOwner) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{2}
}

func (x *LeaseOwner) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *LeaseOwner) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

// Result for when a Lease is used - for example, in a LeaseRetainer, or
// associated with a command.
type LeaseUseResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status LeaseUseResult_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.LeaseUseResult_Status" json:"status,omitempty"`
	// The current lease owner.
	Owner *LeaseOwner `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	// The lease which was attempted for use.
	AttemptedLease *Lease `protobuf:"bytes,3,opt,name=attempted_lease,json=attemptedLease,proto3" json:"attempted_lease,omitempty"`
	// The previous lease, if any, which was used.
	PreviousLease *Lease `protobuf:"bytes,4,opt,name=previous_lease,json=previousLease,proto3" json:"previous_lease,omitempty"`
	// The "latest"/"most recent" lease known to the system.
	LatestKnownLease *Lease `protobuf:"bytes,5,opt,name=latest_known_lease,json=latestKnownLease,proto3" json:"latest_known_lease,omitempty"`
	// Represents the latest "leaf" resources of the hierarchy.
	LatestResources []*Lease `protobuf:"bytes,6,rep,name=latest_resources,json=latestResources,proto3" json:"latest_resources,omitempty"`
}

func (x *LeaseUseResult) Reset() {
	*x = LeaseUseResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseUseResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseUseResult) ProtoMessage() {}

func (x *LeaseUseResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseUseResult.ProtoReflect.Descriptor instead.
func (*LeaseUseResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{3}
}

func (x *LeaseUseResult) GetStatus() LeaseUseResult_Status {
	if x != nil {
		return x.Status
	}
	return LeaseUseResult_STATUS_UNKNOWN
}

func (x *LeaseUseResult) GetOwner() *LeaseOwner {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *LeaseUseResult) GetAttemptedLease() *Lease {
	if x != nil {
		return x.AttemptedLease
	}
	return nil
}

func (x *LeaseUseResult) GetPreviousLease() *Lease {
	if x != nil {
		return x.PreviousLease
	}
	return nil
}

func (x *LeaseUseResult) GetLatestKnownLease() *Lease {
	if x != nil {
		return x.LatestKnownLease
	}
	return nil
}

func (x *LeaseUseResult) GetLatestResources() []*Lease {
	if x != nil {
		return x.LatestResources
	}
	return nil
}

// The AcquireLease request message which sends which resource the lease should be for.
type AcquireLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The resource to obtain a Lease for.
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *AcquireLeaseRequest) Reset() {
	*x = AcquireLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLeaseRequest) ProtoMessage() {}

func (x *AcquireLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLeaseRequest.ProtoReflect.Descriptor instead.
func (*AcquireLeaseRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{4}
}

func (x *AcquireLeaseRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcquireLeaseRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// The AcquireLease response returns the lease for the desired resource if it could be obtained.
// If a client is returned a new lease, the client should initiate a
// RetainLease bidirectional streaming request immediately after completion
// of AcquireLease.
type AcquireLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response Header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status AcquireLeaseResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.AcquireLeaseResponse_Status" json:"status,omitempty"`
	// The lease for the resource. Only set if status field == STATUS_OK.
	Lease *Lease `protobuf:"bytes,3,opt,name=lease,proto3" json:"lease,omitempty"`
	// The owner for the lease. Set if status field == OK or status field == RESOURCE_ALREADY_CLAIMED.
	LeaseOwner *LeaseOwner `protobuf:"bytes,4,opt,name=lease_owner,json=leaseOwner,proto3" json:"lease_owner,omitempty"`
}

func (x *AcquireLeaseResponse) Reset() {
	*x = AcquireLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireLeaseResponse) ProtoMessage() {}

func (x *AcquireLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireLeaseResponse.ProtoReflect.Descriptor instead.
func (*AcquireLeaseResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{5}
}

func (x *AcquireLeaseResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcquireLeaseResponse) GetStatus() AcquireLeaseResponse_Status {
	if x != nil {
		return x.Status
	}
	return AcquireLeaseResponse_STATUS_UNKNOWN
}

func (x *AcquireLeaseResponse) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *AcquireLeaseResponse) GetLeaseOwner() *LeaseOwner {
	if x != nil {
		return x.LeaseOwner
	}
	return nil
}

// The TakeLease request message which sends which resource the lease should be for.
type TakeLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The resource to obtain a Lease for.
	Resource string `protobuf:"bytes,2,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *TakeLeaseRequest) Reset() {
	*x = TakeLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeLeaseRequest) ProtoMessage() {}

func (x *TakeLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeLeaseRequest.ProtoReflect.Descriptor instead.
func (*TakeLeaseRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{6}
}

func (x *TakeLeaseRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TakeLeaseRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

// The TakeLease response returns the lease for the desired resource if it could be obtained.
// In most cases if the resource is managed by the LeaseService, TakeLease
// will succeed. However, in the future policies may be introduced which will prevent
// TakeLease from succeeding and clients should be prepared to handle that
// case.
// If a client obtains a new lease, the client should initiate a
// RetainLease bidirectional streaming request immediately after completion
// of TakeLease.
type TakeLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status TakeLeaseResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.TakeLeaseResponse_Status" json:"status,omitempty"`
	// The lease for the resource. Only set if status field == STATUS_OK.
	Lease *Lease `protobuf:"bytes,3,opt,name=lease,proto3" json:"lease,omitempty"`
	// The owner for the lease. Set if status field == STATUS_OK.
	LeaseOwner *LeaseOwner `protobuf:"bytes,4,opt,name=lease_owner,json=leaseOwner,proto3" json:"lease_owner,omitempty"`
}

func (x *TakeLeaseResponse) Reset() {
	*x = TakeLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeLeaseResponse) ProtoMessage() {}

func (x *TakeLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeLeaseResponse.ProtoReflect.Descriptor instead.
func (*TakeLeaseResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{7}
}

func (x *TakeLeaseResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TakeLeaseResponse) GetStatus() TakeLeaseResponse_Status {
	if x != nil {
		return x.Status
	}
	return TakeLeaseResponse_STATUS_UNKNOWN
}

func (x *TakeLeaseResponse) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *TakeLeaseResponse) GetLeaseOwner() *LeaseOwner {
	if x != nil {
		return x.LeaseOwner
	}
	return nil
}

// The ReturnLease request message will be sent to the LeaseService. If the lease
// is currently active for the resource, the LeaseService will invalidate the lease.
// Future calls to AcquireLease by any client will now succeed.
type ReturnLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to return back to the LeaseService.
	Lease *Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *ReturnLeaseRequest) Reset() {
	*x = ReturnLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnLeaseRequest) ProtoMessage() {}

func (x *ReturnLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnLeaseRequest.ProtoReflect.Descriptor instead.
func (*ReturnLeaseRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{8}
}

func (x *ReturnLeaseRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReturnLeaseRequest) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The ReturnLease response message
type ReturnLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status ReturnLeaseResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.ReturnLeaseResponse_Status" json:"status,omitempty"`
}

func (x *ReturnLeaseResponse) Reset() {
	*x = ReturnLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReturnLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReturnLeaseResponse) ProtoMessage() {}

func (x *ReturnLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReturnLeaseResponse.ProtoReflect.Descriptor instead.
func (*ReturnLeaseResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{9}
}

func (x *ReturnLeaseResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ReturnLeaseResponse) GetStatus() ReturnLeaseResponse_Status {
	if x != nil {
		return x.Status
	}
	return ReturnLeaseResponse_STATUS_UNKNOWN
}

// The ListLease request message asks for information about any known lease resources.
type ListLeasesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Include the full data of leases in use, if available.
	// Defaults to false to receive basic information.
	IncludeFullLeaseInfo bool `protobuf:"varint,2,opt,name=include_full_lease_info,json=includeFullLeaseInfo,proto3" json:"include_full_lease_info,omitempty"`
}

func (x *ListLeasesRequest) Reset() {
	*x = ListLeasesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeasesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeasesRequest) ProtoMessage() {}

func (x *ListLeasesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeasesRequest.ProtoReflect.Descriptor instead.
func (*ListLeasesRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{10}
}

func (x *ListLeasesRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListLeasesRequest) GetIncludeFullLeaseInfo() bool {
	if x != nil {
		return x.IncludeFullLeaseInfo
	}
	return false
}

// Describes all information about a sepcific lease: including the resource it covers, the
// active lease, and which application is the owner of a lease.
type LeaseResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name.
	Resource string `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	// The active lease, if any.
	Lease *Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// The Lease Owner, if there is a Lease.
	LeaseOwner *LeaseOwner `protobuf:"bytes,3,opt,name=lease_owner,json=leaseOwner,proto3" json:"lease_owner,omitempty"`
	// The robot time when this lease will become stale.  A stale lease can be
	// acquired with an AcquireLeaseRequest OR a TakeLeaseRequest, while a lease
	// that is not stale can only be acquired with a TakeLeaseRequest.
	//
	// Leases get marked stale when they haven't been used in a while.  If you want
	// to prevent your lease from being marked stale, you need to either:
	//     - Periodically send RetainLeaseRequests.
	//     - Periodically send valid commands to the robot using the lease.  Note
	//       that only some types of commands will actually cause explicit lease
	//       retention.
	//
	// Commands & RetainLeaseRequests issued with a stale lease will still be accepted.
	// Stale leases, when used, will cause the used lease to no longer be stale.
	StaleTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=stale_time,json=staleTime,proto3" json:"stale_time,omitempty"`
}

func (x *LeaseResource) Reset() {
	*x = LeaseResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseResource) ProtoMessage() {}

func (x *LeaseResource) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseResource.ProtoReflect.Descriptor instead.
func (*LeaseResource) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{11}
}

func (x *LeaseResource) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *LeaseResource) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *LeaseResource) GetLeaseOwner() *LeaseOwner {
	if x != nil {
		return x.LeaseOwner
	}
	return nil
}

func (x *LeaseResource) GetStaleTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StaleTime
	}
	return nil
}

// The ListLease response message returns all known lease resources from the LeaseService.
type ListLeasesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The resources managed by the LeaseService.
	Resources []*LeaseResource `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	// Provide the hierarchical lease structure.
	// A resource can encapsulate multiple sub-resources.
	// For example, the "body" lease may include control of the legs, arm, and gripper.
	ResourceTree *ResourceTree `protobuf:"bytes,3,opt,name=resource_tree,json=resourceTree,proto3" json:"resource_tree,omitempty"`
}

func (x *ListLeasesResponse) Reset() {
	*x = ListLeasesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLeasesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLeasesResponse) ProtoMessage() {}

func (x *ListLeasesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLeasesResponse.ProtoReflect.Descriptor instead.
func (*ListLeasesResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{12}
}

func (x *ListLeasesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListLeasesResponse) GetResources() []*LeaseResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ListLeasesResponse) GetResourceTree() *ResourceTree {
	if x != nil {
		return x.ResourceTree
	}
	return nil
}

// The RetainLease request will inform the LeaseService that the application contains to hold
// ownership of this lease. Lease holders are expected to be reachable and alive. If enough time
// has passed since the last RetainLeaseRequest, the LeaseService will revoke the lease.
type RetainLeaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to retain ownership over. May also be a "super" lease of the lease to retain
	// ownership over.
	Lease *Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *RetainLeaseRequest) Reset() {
	*x = RetainLeaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetainLeaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetainLeaseRequest) ProtoMessage() {}

func (x *RetainLeaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetainLeaseRequest.ProtoReflect.Descriptor instead.
func (*RetainLeaseRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{13}
}

func (x *RetainLeaseRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RetainLeaseRequest) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The RetainLease response message sends the result of the attempted RetainLease request, which
// contains whether or not the lease is still owned by the application sending the request.
type RetainLeaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of using the lease.
	LeaseUseResult *LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *RetainLeaseResponse) Reset() {
	*x = RetainLeaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_lease_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RetainLeaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetainLeaseResponse) ProtoMessage() {}

func (x *RetainLeaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_lease_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetainLeaseResponse.ProtoReflect.Descriptor instead.
func (*RetainLeaseResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_lease_proto_rawDescGZIP(), []int{14}
}

func (x *RetainLeaseResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RetainLeaseResponse) GetLeaseUseResult() *LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

var File_bosdyn_api_lease_proto protoreflect.FileDescriptor

var file_bosdyn_api_lease_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78,
	0x0a, 0x05, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x5f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x0a, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x8a, 0x04, 0x0a, 0x0e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x3a, 0x0a, 0x0f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0e, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x65, 0x64, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x3f, 0x0a, 0x12, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52,
	0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x22, 0x99, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57,
	0x52, 0x4f, 0x4e, 0x47, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x06, 0x22, 0x64, 0x0a, 0x13,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x22, 0x83, 0x03, 0x0a, 0x14, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x22, 0x93, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55,
	0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x43, 0x4c, 0x41, 0x49,
	0x4d, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x04, 0x22, 0x61, 0x0a, 0x10, 0x54, 0x61, 0x6b, 0x65,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0xd7, 0x02, 0x0a, 0x11,
	0x54, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x22, 0x6e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55,
	0x54, 0x48, 0x4f, 0x52, 0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x03, 0x22, 0x70, 0x0a, 0x12, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52,
	0x49, 0x54, 0x41, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10,
	0x04, 0x22, 0x7d, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x46, 0x75, 0x6c, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0xc8, 0x01, 0x0a, 0x0d, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x27,
	0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x52, 0x0a, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc0, 0x01, 0x0a, 0x12,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12,
	0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x65, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x72, 0x65, 0x65, 0x22, 0x70,
	0x0a, 0x12, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x22, 0x8f, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x42, 0x3f, 0x42, 0x0a, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73,
	0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_lease_proto_rawDescOnce sync.Once
	file_bosdyn_api_lease_proto_rawDescData = file_bosdyn_api_lease_proto_rawDesc
)

func file_bosdyn_api_lease_proto_rawDescGZIP() []byte {
	file_bosdyn_api_lease_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_lease_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_lease_proto_rawDescData)
	})
	return file_bosdyn_api_lease_proto_rawDescData
}

var file_bosdyn_api_lease_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bosdyn_api_lease_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_bosdyn_api_lease_proto_goTypes = []interface{}{
	(LeaseUseResult_Status)(0),       // 0: bosdyn.api.LeaseUseResult.Status
	(AcquireLeaseResponse_Status)(0), // 1: bosdyn.api.AcquireLeaseResponse.Status
	(TakeLeaseResponse_Status)(0),    // 2: bosdyn.api.TakeLeaseResponse.Status
	(ReturnLeaseResponse_Status)(0),  // 3: bosdyn.api.ReturnLeaseResponse.Status
	(*Lease)(nil),                    // 4: bosdyn.api.Lease
	(*ResourceTree)(nil),             // 5: bosdyn.api.ResourceTree
	(*LeaseOwner)(nil),               // 6: bosdyn.api.LeaseOwner
	(*LeaseUseResult)(nil),           // 7: bosdyn.api.LeaseUseResult
	(*AcquireLeaseRequest)(nil),      // 8: bosdyn.api.AcquireLeaseRequest
	(*AcquireLeaseResponse)(nil),     // 9: bosdyn.api.AcquireLeaseResponse
	(*TakeLeaseRequest)(nil),         // 10: bosdyn.api.TakeLeaseRequest
	(*TakeLeaseResponse)(nil),        // 11: bosdyn.api.TakeLeaseResponse
	(*ReturnLeaseRequest)(nil),       // 12: bosdyn.api.ReturnLeaseRequest
	(*ReturnLeaseResponse)(nil),      // 13: bosdyn.api.ReturnLeaseResponse
	(*ListLeasesRequest)(nil),        // 14: bosdyn.api.ListLeasesRequest
	(*LeaseResource)(nil),            // 15: bosdyn.api.LeaseResource
	(*ListLeasesResponse)(nil),       // 16: bosdyn.api.ListLeasesResponse
	(*RetainLeaseRequest)(nil),       // 17: bosdyn.api.RetainLeaseRequest
	(*RetainLeaseResponse)(nil),      // 18: bosdyn.api.RetainLeaseResponse
	(*RequestHeader)(nil),            // 19: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),           // 20: bosdyn.api.ResponseHeader
	(*timestamppb.Timestamp)(nil),    // 21: google.protobuf.Timestamp
}
var file_bosdyn_api_lease_proto_depIdxs = []int32{
	5,  // 0: bosdyn.api.ResourceTree.sub_resources:type_name -> bosdyn.api.ResourceTree
	0,  // 1: bosdyn.api.LeaseUseResult.status:type_name -> bosdyn.api.LeaseUseResult.Status
	6,  // 2: bosdyn.api.LeaseUseResult.owner:type_name -> bosdyn.api.LeaseOwner
	4,  // 3: bosdyn.api.LeaseUseResult.attempted_lease:type_name -> bosdyn.api.Lease
	4,  // 4: bosdyn.api.LeaseUseResult.previous_lease:type_name -> bosdyn.api.Lease
	4,  // 5: bosdyn.api.LeaseUseResult.latest_known_lease:type_name -> bosdyn.api.Lease
	4,  // 6: bosdyn.api.LeaseUseResult.latest_resources:type_name -> bosdyn.api.Lease
	19, // 7: bosdyn.api.AcquireLeaseRequest.header:type_name -> bosdyn.api.RequestHeader
	20, // 8: bosdyn.api.AcquireLeaseResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 9: bosdyn.api.AcquireLeaseResponse.status:type_name -> bosdyn.api.AcquireLeaseResponse.Status
	4,  // 10: bosdyn.api.AcquireLeaseResponse.lease:type_name -> bosdyn.api.Lease
	6,  // 11: bosdyn.api.AcquireLeaseResponse.lease_owner:type_name -> bosdyn.api.LeaseOwner
	19, // 12: bosdyn.api.TakeLeaseRequest.header:type_name -> bosdyn.api.RequestHeader
	20, // 13: bosdyn.api.TakeLeaseResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 14: bosdyn.api.TakeLeaseResponse.status:type_name -> bosdyn.api.TakeLeaseResponse.Status
	4,  // 15: bosdyn.api.TakeLeaseResponse.lease:type_name -> bosdyn.api.Lease
	6,  // 16: bosdyn.api.TakeLeaseResponse.lease_owner:type_name -> bosdyn.api.LeaseOwner
	19, // 17: bosdyn.api.ReturnLeaseRequest.header:type_name -> bosdyn.api.RequestHeader
	4,  // 18: bosdyn.api.ReturnLeaseRequest.lease:type_name -> bosdyn.api.Lease
	20, // 19: bosdyn.api.ReturnLeaseResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 20: bosdyn.api.ReturnLeaseResponse.status:type_name -> bosdyn.api.ReturnLeaseResponse.Status
	19, // 21: bosdyn.api.ListLeasesRequest.header:type_name -> bosdyn.api.RequestHeader
	4,  // 22: bosdyn.api.LeaseResource.lease:type_name -> bosdyn.api.Lease
	6,  // 23: bosdyn.api.LeaseResource.lease_owner:type_name -> bosdyn.api.LeaseOwner
	21, // 24: bosdyn.api.LeaseResource.stale_time:type_name -> google.protobuf.Timestamp
	20, // 25: bosdyn.api.ListLeasesResponse.header:type_name -> bosdyn.api.ResponseHeader
	15, // 26: bosdyn.api.ListLeasesResponse.resources:type_name -> bosdyn.api.LeaseResource
	5,  // 27: bosdyn.api.ListLeasesResponse.resource_tree:type_name -> bosdyn.api.ResourceTree
	19, // 28: bosdyn.api.RetainLeaseRequest.header:type_name -> bosdyn.api.RequestHeader
	4,  // 29: bosdyn.api.RetainLeaseRequest.lease:type_name -> bosdyn.api.Lease
	20, // 30: bosdyn.api.RetainLeaseResponse.header:type_name -> bosdyn.api.ResponseHeader
	7,  // 31: bosdyn.api.RetainLeaseResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_bosdyn_api_lease_proto_init() }
func file_bosdyn_api_lease_proto_init() {
	if File_bosdyn_api_lease_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_lease_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseOwner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseUseResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReturnLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLeasesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLeasesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetainLeaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_lease_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RetainLeaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_lease_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_lease_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_lease_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_lease_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_lease_proto_msgTypes,
	}.Build()
	File_bosdyn_api_lease_proto = out.File
	file_bosdyn_api_lease_proto_rawDesc = nil
	file_bosdyn_api_lease_proto_goTypes = nil
	file_bosdyn_api_lease_proto_depIdxs = nil
}
