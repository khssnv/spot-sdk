// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/directory_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DirectoryServiceClient is the client API for DirectoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectoryServiceClient interface {
	// Get information about a specific service.
	GetServiceEntry(ctx context.Context, in *GetServiceEntryRequest, opts ...grpc.CallOption) (*GetServiceEntryResponse, error)
	// List all known services at time of call.
	ListServiceEntries(ctx context.Context, in *ListServiceEntriesRequest, opts ...grpc.CallOption) (*ListServiceEntriesResponse, error)
}

type directoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectoryServiceClient(cc grpc.ClientConnInterface) DirectoryServiceClient {
	return &directoryServiceClient{cc}
}

func (c *directoryServiceClient) GetServiceEntry(ctx context.Context, in *GetServiceEntryRequest, opts ...grpc.CallOption) (*GetServiceEntryResponse, error) {
	out := new(GetServiceEntryResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.DirectoryService/GetServiceEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directoryServiceClient) ListServiceEntries(ctx context.Context, in *ListServiceEntriesRequest, opts ...grpc.CallOption) (*ListServiceEntriesResponse, error) {
	out := new(ListServiceEntriesResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.DirectoryService/ListServiceEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectoryServiceServer is the server API for DirectoryService service.
// All implementations must embed UnimplementedDirectoryServiceServer
// for forward compatibility
type DirectoryServiceServer interface {
	// Get information about a specific service.
	GetServiceEntry(context.Context, *GetServiceEntryRequest) (*GetServiceEntryResponse, error)
	// List all known services at time of call.
	ListServiceEntries(context.Context, *ListServiceEntriesRequest) (*ListServiceEntriesResponse, error)
	mustEmbedUnimplementedDirectoryServiceServer()
}

// UnimplementedDirectoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDirectoryServiceServer struct {
}

func (UnimplementedDirectoryServiceServer) GetServiceEntry(context.Context, *GetServiceEntryRequest) (*GetServiceEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceEntry not implemented")
}
func (UnimplementedDirectoryServiceServer) ListServiceEntries(context.Context, *ListServiceEntriesRequest) (*ListServiceEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServiceEntries not implemented")
}
func (UnimplementedDirectoryServiceServer) mustEmbedUnimplementedDirectoryServiceServer() {}

// UnsafeDirectoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectoryServiceServer will
// result in compilation errors.
type UnsafeDirectoryServiceServer interface {
	mustEmbedUnimplementedDirectoryServiceServer()
}

func RegisterDirectoryServiceServer(s grpc.ServiceRegistrar, srv DirectoryServiceServer) {
	s.RegisterService(&DirectoryService_ServiceDesc, srv)
}

func _DirectoryService_GetServiceEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).GetServiceEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.DirectoryService/GetServiceEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).GetServiceEntry(ctx, req.(*GetServiceEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectoryService_ListServiceEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListServiceEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectoryServiceServer).ListServiceEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.DirectoryService/ListServiceEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectoryServiceServer).ListServiceEntries(ctx, req.(*ListServiceEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectoryService_ServiceDesc is the grpc.ServiceDesc for DirectoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.DirectoryService",
	HandlerType: (*DirectoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServiceEntry",
			Handler:    _DirectoryService_GetServiceEntry_Handler,
		},
		{
			MethodName: "ListServiceEntries",
			Handler:    _DirectoryService_ListServiceEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/directory_service.proto",
}
