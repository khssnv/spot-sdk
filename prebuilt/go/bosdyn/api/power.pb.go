// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/power.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Feedback on the current state of a power command on the robot.
type PowerCommandStatus int32

const (
	// Status is not specified.
	PowerCommandStatus_STATUS_UNKNOWN PowerCommandStatus = 0
	// Power command is executing.
	PowerCommandStatus_STATUS_IN_PROGRESS PowerCommandStatus = 1
	// Power command succeeded.
	PowerCommandStatus_STATUS_SUCCESS PowerCommandStatus = 2
	// ERROR: Robot cannot be powered on while on wall power.
	PowerCommandStatus_STATUS_SHORE_POWER_CONNECTED PowerCommandStatus = 3
	// ERROR: Battery not inserted into robot.
	PowerCommandStatus_STATUS_BATTERY_MISSING PowerCommandStatus = 4
	// ERROR: Power command cant be overwritten.
	PowerCommandStatus_STATUS_COMMAND_IN_PROGRESS PowerCommandStatus = 5
	// ERROR: Cannot power on while estopped. A robot may have multiple estops.
	// Inspect EStopState for additional info.
	PowerCommandStatus_STATUS_ESTOPPED PowerCommandStatus = 6
	// ERROR: Cannot power due to a fault. Inspect FaultState for more info.
	PowerCommandStatus_STATUS_FAULTED PowerCommandStatus = 7
	// ERROR: Internal error occurred, may be clear-able by issuing a power off command.
	PowerCommandStatus_STATUS_INTERNAL_ERROR PowerCommandStatus = 8
	// ERROR: License check failed. Check license_status field for details.
	PowerCommandStatus_STATUS_LICENSE_ERROR PowerCommandStatus = 9
	// ERROR: The Spot hardware is not compatible with the request request.
	PowerCommandStatus_INCOMPATIBLE_HARDWARE_ERROR PowerCommandStatus = 10
	// ERROR: Robot has overridden the power command and disabled motor power. In the case
	// of a commanded power OFF, robot will report SUCCESS if power is disabled.
	PowerCommandStatus_STATUS_OVERRIDDEN PowerCommandStatus = 11
)

// Enum value maps for PowerCommandStatus.
var (
	PowerCommandStatus_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_IN_PROGRESS",
		2:  "STATUS_SUCCESS",
		3:  "STATUS_SHORE_POWER_CONNECTED",
		4:  "STATUS_BATTERY_MISSING",
		5:  "STATUS_COMMAND_IN_PROGRESS",
		6:  "STATUS_ESTOPPED",
		7:  "STATUS_FAULTED",
		8:  "STATUS_INTERNAL_ERROR",
		9:  "STATUS_LICENSE_ERROR",
		10: "INCOMPATIBLE_HARDWARE_ERROR",
		11: "STATUS_OVERRIDDEN",
	}
	PowerCommandStatus_value = map[string]int32{
		"STATUS_UNKNOWN":               0,
		"STATUS_IN_PROGRESS":           1,
		"STATUS_SUCCESS":               2,
		"STATUS_SHORE_POWER_CONNECTED": 3,
		"STATUS_BATTERY_MISSING":       4,
		"STATUS_COMMAND_IN_PROGRESS":   5,
		"STATUS_ESTOPPED":              6,
		"STATUS_FAULTED":               7,
		"STATUS_INTERNAL_ERROR":        8,
		"STATUS_LICENSE_ERROR":         9,
		"INCOMPATIBLE_HARDWARE_ERROR":  10,
		"STATUS_OVERRIDDEN":            11,
	}
)

func (x PowerCommandStatus) Enum() *PowerCommandStatus {
	p := new(PowerCommandStatus)
	*p = x
	return p
}

func (x PowerCommandStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerCommandStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_power_proto_enumTypes[0].Descriptor()
}

func (PowerCommandStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_power_proto_enumTypes[0]
}

func (x PowerCommandStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerCommandStatus.Descriptor instead.
func (PowerCommandStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_power_proto_rawDescGZIP(), []int{0}
}

// Commands for the robot to execute.
// Note that not all Spot robots are compatible with all these commands. Check your robot's
// HardwareConfiguration in bosdyn.api.robot_state.
type PowerCommandRequest_Request int32

const (
	PowerCommandRequest_REQUEST_UNKNOWN PowerCommandRequest_Request = 0 // Invalid request; do not use.
	// Deprecated: Do not use.
	PowerCommandRequest_REQUEST_OFF PowerCommandRequest_Request = 1 // Cut power to motors immediately.
	// Deprecated: Do not use.
	PowerCommandRequest_REQUEST_ON                PowerCommandRequest_Request = 2 // Turn on power to the robot motors.
	PowerCommandRequest_REQUEST_OFF_MOTORS        PowerCommandRequest_Request = 1 // Cut power to motors immediately.
	PowerCommandRequest_REQUEST_ON_MOTORS         PowerCommandRequest_Request = 2 // Turn on power to the robot motors.
	PowerCommandRequest_REQUEST_OFF_ROBOT         PowerCommandRequest_Request = 3 // Turn off the robot. Same as physical switch.
	PowerCommandRequest_REQUEST_CYCLE_ROBOT       PowerCommandRequest_Request = 4 // Power cycle the robot. Same as physical switch.
	PowerCommandRequest_REQUEST_OFF_PAYLOAD_PORTS PowerCommandRequest_Request = 5 // Cut power to the payload ports.
	PowerCommandRequest_REQUEST_ON_PAYLOAD_PORTS  PowerCommandRequest_Request = 6 // Turn on power to the payload ports.
	PowerCommandRequest_REQUEST_OFF_WIFI_RADIO    PowerCommandRequest_Request = 7 // Cut power to the hardware Wi-Fi radio.
	PowerCommandRequest_REQUEST_ON_WIFI_RADIO     PowerCommandRequest_Request = 8 // Power on the hardware Wi-Fi radio.
)

// Enum value maps for PowerCommandRequest_Request.
var (
	PowerCommandRequest_Request_name = map[int32]string{
		0: "REQUEST_UNKNOWN",
		1: "REQUEST_OFF",
		2: "REQUEST_ON",
		// Duplicate value: 1: "REQUEST_OFF_MOTORS",
		// Duplicate value: 2: "REQUEST_ON_MOTORS",
		3: "REQUEST_OFF_ROBOT",
		4: "REQUEST_CYCLE_ROBOT",
		5: "REQUEST_OFF_PAYLOAD_PORTS",
		6: "REQUEST_ON_PAYLOAD_PORTS",
		7: "REQUEST_OFF_WIFI_RADIO",
		8: "REQUEST_ON_WIFI_RADIO",
	}
	PowerCommandRequest_Request_value = map[string]int32{
		"REQUEST_UNKNOWN":           0,
		"REQUEST_OFF":               1,
		"REQUEST_ON":                2,
		"REQUEST_OFF_MOTORS":        1,
		"REQUEST_ON_MOTORS":         2,
		"REQUEST_OFF_ROBOT":         3,
		"REQUEST_CYCLE_ROBOT":       4,
		"REQUEST_OFF_PAYLOAD_PORTS": 5,
		"REQUEST_ON_PAYLOAD_PORTS":  6,
		"REQUEST_OFF_WIFI_RADIO":    7,
		"REQUEST_ON_WIFI_RADIO":     8,
	}
)

func (x PowerCommandRequest_Request) Enum() *PowerCommandRequest_Request {
	p := new(PowerCommandRequest_Request)
	*p = x
	return p
}

func (x PowerCommandRequest_Request) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PowerCommandRequest_Request) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_power_proto_enumTypes[1].Descriptor()
}

func (PowerCommandRequest_Request) Type() protoreflect.EnumType {
	return &file_bosdyn_api_power_proto_enumTypes[1]
}

func (x PowerCommandRequest_Request) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PowerCommandRequest_Request.Descriptor instead.
func (PowerCommandRequest_Request) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_power_proto_rawDescGZIP(), []int{0, 0}
}

// The PowerCommand request which specifies a change in the robot's motor power.
type PowerCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot.
	Lease   *Lease                      `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	Request PowerCommandRequest_Request `protobuf:"varint,3,opt,name=request,proto3,enum=bosdyn.api.PowerCommandRequest_Request" json:"request,omitempty"`
}

func (x *PowerCommandRequest) Reset() {
	*x = PowerCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_power_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCommandRequest) ProtoMessage() {}

func (x *PowerCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_power_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCommandRequest.ProtoReflect.Descriptor instead.
func (*PowerCommandRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_power_proto_rawDescGZIP(), []int{0}
}

func (x *PowerCommandRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PowerCommandRequest) GetLease() *Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *PowerCommandRequest) GetRequest() PowerCommandRequest_Request {
	if x != nil {
		return x.Request
	}
	return PowerCommandRequest_REQUEST_UNKNOWN
}

// The PowerCommand response message which contains a unique identifier that can be used to
// get feedback on the progress of a power command from the power service.
type PowerCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Current feedback of specified command.
	Status PowerCommandStatus `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.PowerCommandStatus" json:"status,omitempty"`
	// Unique identifier for the command, If empty, was not accepted.
	PowerCommandId uint32 `protobuf:"varint,4,opt,name=power_command_id,json=powerCommandId,proto3" json:"power_command_id,omitempty"`
	// License check status
	LicenseStatus LicenseInfo_Status `protobuf:"varint,5,opt,name=license_status,json=licenseStatus,proto3,enum=bosdyn.api.LicenseInfo_Status" json:"license_status,omitempty"`
	// Optional list of active faults blocking success of the PowerCommandRequest
	BlockingFaults []*SystemFault `protobuf:"bytes,6,rep,name=blocking_faults,json=blockingFaults,proto3" json:"blocking_faults,omitempty"`
}

func (x *PowerCommandResponse) Reset() {
	*x = PowerCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_power_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCommandResponse) ProtoMessage() {}

func (x *PowerCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_power_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCommandResponse.ProtoReflect.Descriptor instead.
func (*PowerCommandResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_power_proto_rawDescGZIP(), []int{1}
}

func (x *PowerCommandResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PowerCommandResponse) GetLeaseUseResult() *LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *PowerCommandResponse) GetStatus() PowerCommandStatus {
	if x != nil {
		return x.Status
	}
	return PowerCommandStatus_STATUS_UNKNOWN
}

func (x *PowerCommandResponse) GetPowerCommandId() uint32 {
	if x != nil {
		return x.PowerCommandId
	}
	return 0
}

func (x *PowerCommandResponse) GetLicenseStatus() LicenseInfo_Status {
	if x != nil {
		return x.LicenseStatus
	}
	return LicenseInfo_STATUS_UNKNOWN
}

func (x *PowerCommandResponse) GetBlockingFaults() []*SystemFault {
	if x != nil {
		return x.BlockingFaults
	}
	return nil
}

// The PowerCommandFeedback request message, which can get the feedback for a specific
// power command id number.
type PowerCommandFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier for the command of which feedback is desired.
	PowerCommandId uint32 `protobuf:"varint,2,opt,name=power_command_id,json=powerCommandId,proto3" json:"power_command_id,omitempty"`
}

func (x *PowerCommandFeedbackRequest) Reset() {
	*x = PowerCommandFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_power_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerCommandFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCommandFeedbackRequest) ProtoMessage() {}

func (x *PowerCommandFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_power_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCommandFeedbackRequest.ProtoReflect.Descriptor instead.
func (*PowerCommandFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_power_proto_rawDescGZIP(), []int{2}
}

func (x *PowerCommandFeedbackRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PowerCommandFeedbackRequest) GetPowerCommandId() uint32 {
	if x != nil {
		return x.PowerCommandId
	}
	return 0
}

// The PowerCommandFeedback response message, which contains the progress of the power command.
type PowerCommandFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Current status of specified command.
	Status PowerCommandStatus `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.PowerCommandStatus" json:"status,omitempty"`
	// Optional list of active faults blocking success of the PowerCommandRequest
	BlockingFaults []*SystemFault `protobuf:"bytes,3,rep,name=blocking_faults,json=blockingFaults,proto3" json:"blocking_faults,omitempty"`
}

func (x *PowerCommandFeedbackResponse) Reset() {
	*x = PowerCommandFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_power_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerCommandFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerCommandFeedbackResponse) ProtoMessage() {}

func (x *PowerCommandFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_power_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerCommandFeedbackResponse.ProtoReflect.Descriptor instead.
func (*PowerCommandFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_power_proto_rawDescGZIP(), []int{3}
}

func (x *PowerCommandFeedbackResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *PowerCommandFeedbackResponse) GetStatus() PowerCommandStatus {
	if x != nil {
		return x.Status
	}
	return PowerCommandStatus_STATUS_UNKNOWN
}

func (x *PowerCommandFeedbackResponse) GetBlockingFaults() []*SystemFault {
	if x != nil {
		return x.BlockingFaults
	}
	return nil
}

var File_bosdyn_api_power_proto protoreflect.FileDescriptor

var file_bosdyn_api_power_proto_rawDesc = []byte{
	0x0a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x03,
	0x0a, 0x13, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0b, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x12, 0x0a, 0x0a, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x4d, 0x4f,
	0x54, 0x4f, 0x52, 0x53, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a,
	0x11, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x52, 0x4f, 0x42,
	0x4f, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x43, 0x59, 0x43, 0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x50, 0x41, 0x59,
	0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x05, 0x12, 0x1c, 0x0a, 0x18,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f,
	0x41, 0x44, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x53, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4f, 0x46, 0x46, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x52,
	0x41, 0x44, 0x49, 0x4f, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x46, 0x49, 0x5f, 0x52, 0x41, 0x44, 0x49, 0x4f, 0x10,
	0x08, 0x1a, 0x02, 0x10, 0x01, 0x22, 0xfb, 0x02, 0x0a, 0x14, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x40, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x73, 0x22, 0x7a, 0x0a, 0x1b, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22,
	0xcc, 0x01, 0x0a, 0x1c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40, 0x0a, 0x0f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x2a, 0xc8,
	0x02, 0x0a, 0x12, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x48, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x4e,
	0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x42, 0x41, 0x54, 0x54, 0x45, 0x52, 0x59, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e,
	0x47, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x53,
	0x54, 0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c,
	0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x0a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x52, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x0b, 0x42, 0x3f, 0x42, 0x0a, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d,
	0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_bosdyn_api_power_proto_rawDescOnce sync.Once
	file_bosdyn_api_power_proto_rawDescData = file_bosdyn_api_power_proto_rawDesc
)

func file_bosdyn_api_power_proto_rawDescGZIP() []byte {
	file_bosdyn_api_power_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_power_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_power_proto_rawDescData)
	})
	return file_bosdyn_api_power_proto_rawDescData
}

var file_bosdyn_api_power_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bosdyn_api_power_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bosdyn_api_power_proto_goTypes = []interface{}{
	(PowerCommandStatus)(0),              // 0: bosdyn.api.PowerCommandStatus
	(PowerCommandRequest_Request)(0),     // 1: bosdyn.api.PowerCommandRequest.Request
	(*PowerCommandRequest)(nil),          // 2: bosdyn.api.PowerCommandRequest
	(*PowerCommandResponse)(nil),         // 3: bosdyn.api.PowerCommandResponse
	(*PowerCommandFeedbackRequest)(nil),  // 4: bosdyn.api.PowerCommandFeedbackRequest
	(*PowerCommandFeedbackResponse)(nil), // 5: bosdyn.api.PowerCommandFeedbackResponse
	(*RequestHeader)(nil),                // 6: bosdyn.api.RequestHeader
	(*Lease)(nil),                        // 7: bosdyn.api.Lease
	(*ResponseHeader)(nil),               // 8: bosdyn.api.ResponseHeader
	(*LeaseUseResult)(nil),               // 9: bosdyn.api.LeaseUseResult
	(LicenseInfo_Status)(0),              // 10: bosdyn.api.LicenseInfo.Status
	(*SystemFault)(nil),                  // 11: bosdyn.api.SystemFault
}
var file_bosdyn_api_power_proto_depIdxs = []int32{
	6,  // 0: bosdyn.api.PowerCommandRequest.header:type_name -> bosdyn.api.RequestHeader
	7,  // 1: bosdyn.api.PowerCommandRequest.lease:type_name -> bosdyn.api.Lease
	1,  // 2: bosdyn.api.PowerCommandRequest.request:type_name -> bosdyn.api.PowerCommandRequest.Request
	8,  // 3: bosdyn.api.PowerCommandResponse.header:type_name -> bosdyn.api.ResponseHeader
	9,  // 4: bosdyn.api.PowerCommandResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	0,  // 5: bosdyn.api.PowerCommandResponse.status:type_name -> bosdyn.api.PowerCommandStatus
	10, // 6: bosdyn.api.PowerCommandResponse.license_status:type_name -> bosdyn.api.LicenseInfo.Status
	11, // 7: bosdyn.api.PowerCommandResponse.blocking_faults:type_name -> bosdyn.api.SystemFault
	6,  // 8: bosdyn.api.PowerCommandFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	8,  // 9: bosdyn.api.PowerCommandFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 10: bosdyn.api.PowerCommandFeedbackResponse.status:type_name -> bosdyn.api.PowerCommandStatus
	11, // 11: bosdyn.api.PowerCommandFeedbackResponse.blocking_faults:type_name -> bosdyn.api.SystemFault
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_bosdyn_api_power_proto_init() }
func file_bosdyn_api_power_proto_init() {
	if File_bosdyn_api_power_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_lease_proto_init()
	file_bosdyn_api_license_proto_init()
	file_bosdyn_api_robot_state_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_power_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_power_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_power_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerCommandFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_power_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerCommandFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_power_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_power_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_power_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_power_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_power_proto_msgTypes,
	}.Build()
	File_bosdyn_api_power_proto = out.File
	file_bosdyn_api_power_proto_rawDesc = nil
	file_bosdyn_api_power_proto_goTypes = nil
	file_bosdyn_api_power_proto_depIdxs = nil
}
