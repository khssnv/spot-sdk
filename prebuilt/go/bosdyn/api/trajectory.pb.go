// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/trajectory.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Parameters for how positional trajectories will be interpolated on robot.
type PositionalInterpolation int32

const (
	PositionalInterpolation_POS_INTERP_UNKNOWN PositionalInterpolation = 0 // Unknown interpolation, do not use.
	PositionalInterpolation_POS_INTERP_LINEAR  PositionalInterpolation = 1 // Linear interpolation for positional data.
	PositionalInterpolation_POS_INTERP_CUBIC   PositionalInterpolation = 2 // Cubic interpolation for positional data.
)

// Enum value maps for PositionalInterpolation.
var (
	PositionalInterpolation_name = map[int32]string{
		0: "POS_INTERP_UNKNOWN",
		1: "POS_INTERP_LINEAR",
		2: "POS_INTERP_CUBIC",
	}
	PositionalInterpolation_value = map[string]int32{
		"POS_INTERP_UNKNOWN": 0,
		"POS_INTERP_LINEAR":  1,
		"POS_INTERP_CUBIC":   2,
	}
)

func (x PositionalInterpolation) Enum() *PositionalInterpolation {
	p := new(PositionalInterpolation)
	*p = x
	return p
}

func (x PositionalInterpolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PositionalInterpolation) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_trajectory_proto_enumTypes[0].Descriptor()
}

func (PositionalInterpolation) Type() protoreflect.EnumType {
	return &file_bosdyn_api_trajectory_proto_enumTypes[0]
}

func (x PositionalInterpolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PositionalInterpolation.Descriptor instead.
func (PositionalInterpolation) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{0}
}

// Parameters for how angular trajectories will be interpolated on robot.
type AngularInterpolation int32

const (
	AngularInterpolation_ANG_INTERP_UNKNOWN     AngularInterpolation = 0 // Unknown interpolation, do not use.
	AngularInterpolation_ANG_INTERP_LINEAR      AngularInterpolation = 1 // Linear interpolation for angular data.
	AngularInterpolation_ANG_INTERP_CUBIC_EULER AngularInterpolation = 2 // Cubic interpolation (using Euler method) for angular data.
)

// Enum value maps for AngularInterpolation.
var (
	AngularInterpolation_name = map[int32]string{
		0: "ANG_INTERP_UNKNOWN",
		1: "ANG_INTERP_LINEAR",
		2: "ANG_INTERP_CUBIC_EULER",
	}
	AngularInterpolation_value = map[string]int32{
		"ANG_INTERP_UNKNOWN":     0,
		"ANG_INTERP_LINEAR":      1,
		"ANG_INTERP_CUBIC_EULER": 2,
	}
)

func (x AngularInterpolation) Enum() *AngularInterpolation {
	p := new(AngularInterpolation)
	*p = x
	return p
}

func (x AngularInterpolation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AngularInterpolation) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_trajectory_proto_enumTypes[1].Descriptor()
}

func (AngularInterpolation) Type() protoreflect.EnumType {
	return &file_bosdyn_api_trajectory_proto_enumTypes[1]
}

func (x AngularInterpolation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AngularInterpolation.Descriptor instead.
func (AngularInterpolation) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{1}
}

// A 2D pose trajectory, which specified multiple points and the desired times the robot should
// reach these points.
type SE2Trajectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The points in trajectory
	Points []*SE2TrajectoryPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// All trajectories specify times relative to this reference time. The reference time should be
	// in robot clock. If this field is not included, this time will be the receive time of the
	// command.
	ReferenceTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reference_time,json=referenceTime,proto3" json:"reference_time,omitempty"`
	// Parameters for how trajectories will be interpolated on robot.
	Interpolation PositionalInterpolation `protobuf:"varint,4,opt,name=interpolation,proto3,enum=bosdyn.api.PositionalInterpolation" json:"interpolation,omitempty"`
}

func (x *SE2Trajectory) Reset() {
	*x = SE2Trajectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2Trajectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2Trajectory) ProtoMessage() {}

func (x *SE2Trajectory) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2Trajectory.ProtoReflect.Descriptor instead.
func (*SE2Trajectory) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{0}
}

func (x *SE2Trajectory) GetPoints() []*SE2TrajectoryPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *SE2Trajectory) GetReferenceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReferenceTime
	}
	return nil
}

func (x *SE2Trajectory) GetInterpolation() PositionalInterpolation {
	if x != nil {
		return x.Interpolation
	}
	return PositionalInterpolation_POS_INTERP_UNKNOWN
}

// A SE2 pose that can be used as a point within a trajectory.
type SE2TrajectoryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required pose the robot will try and achieve.
	Pose *SE2Pose `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
	// The duration to reach the point relative to the trajectory reference time.
	TimeSinceReference *durationpb.Duration `protobuf:"bytes,3,opt,name=time_since_reference,json=timeSinceReference,proto3" json:"time_since_reference,omitempty"`
}

func (x *SE2TrajectoryPoint) Reset() {
	*x = SE2TrajectoryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2TrajectoryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2TrajectoryPoint) ProtoMessage() {}

func (x *SE2TrajectoryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2TrajectoryPoint.ProtoReflect.Descriptor instead.
func (*SE2TrajectoryPoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{1}
}

func (x *SE2TrajectoryPoint) GetPose() *SE2Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *SE2TrajectoryPoint) GetTimeSinceReference() *durationpb.Duration {
	if x != nil {
		return x.TimeSinceReference
	}
	return nil
}

// A 3D pose trajectory, which specified multiple poses (and velocities for each pose)
// and the desired times the robot should reach these points.
type SE3Trajectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The points in trajectory
	Points []*SE3TrajectoryPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// All trajectories specify times relative to this reference time. The reference time should be
	// in robot clock. If this field is not included, this time will be the receive time of the
	// command.
	ReferenceTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reference_time,json=referenceTime,proto3" json:"reference_time,omitempty"`
	// Parameters for how trajectories will be interpolated on robot.
	PosInterpolation PositionalInterpolation `protobuf:"varint,4,opt,name=pos_interpolation,json=posInterpolation,proto3,enum=bosdyn.api.PositionalInterpolation" json:"pos_interpolation,omitempty"`
	AngInterpolation AngularInterpolation    `protobuf:"varint,5,opt,name=ang_interpolation,json=angInterpolation,proto3,enum=bosdyn.api.AngularInterpolation" json:"ang_interpolation,omitempty"`
}

func (x *SE3Trajectory) Reset() {
	*x = SE3Trajectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE3Trajectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE3Trajectory) ProtoMessage() {}

func (x *SE3Trajectory) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE3Trajectory.ProtoReflect.Descriptor instead.
func (*SE3Trajectory) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{2}
}

func (x *SE3Trajectory) GetPoints() []*SE3TrajectoryPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *SE3Trajectory) GetReferenceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReferenceTime
	}
	return nil
}

func (x *SE3Trajectory) GetPosInterpolation() PositionalInterpolation {
	if x != nil {
		return x.PosInterpolation
	}
	return PositionalInterpolation_POS_INTERP_UNKNOWN
}

func (x *SE3Trajectory) GetAngInterpolation() AngularInterpolation {
	if x != nil {
		return x.AngInterpolation
	}
	return AngularInterpolation_ANG_INTERP_UNKNOWN
}

// A SE3 pose and velocity that can be used as a point within a trajectory.
type SE3TrajectoryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required pose the robot will try and achieve.
	Pose *SE3Pose `protobuf:"bytes,1,opt,name=pose,proto3" json:"pose,omitempty"`
	// Optional velocity (linear and angular) the robot will try and achieve.
	Velocity *SE3Velocity `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// The duration to reach the point relative to the trajectory reference time.
	TimeSinceReference *durationpb.Duration `protobuf:"bytes,3,opt,name=time_since_reference,json=timeSinceReference,proto3" json:"time_since_reference,omitempty"`
}

func (x *SE3TrajectoryPoint) Reset() {
	*x = SE3TrajectoryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE3TrajectoryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE3TrajectoryPoint) ProtoMessage() {}

func (x *SE3TrajectoryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE3TrajectoryPoint.ProtoReflect.Descriptor instead.
func (*SE3TrajectoryPoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{3}
}

func (x *SE3TrajectoryPoint) GetPose() *SE3Pose {
	if x != nil {
		return x.Pose
	}
	return nil
}

func (x *SE3TrajectoryPoint) GetVelocity() *SE3Velocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *SE3TrajectoryPoint) GetTimeSinceReference() *durationpb.Duration {
	if x != nil {
		return x.TimeSinceReference
	}
	return nil
}

// A 3D point trajectory, described by 3D points, a starting and ending velocity, and
// a reference time.
type Vec3Trajectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The points in trajectory.
	Points []*Vec3TrajectoryPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// All trajectories specify times relative to this reference time. The reference time should be
	// in robot clock. If this field is not included, this time will be the receive time of the
	// command.
	ReferenceTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=reference_time,json=referenceTime,proto3" json:"reference_time,omitempty"`
	// Parameters for how trajectories will be interpolated on robot.
	PosInterpolation PositionalInterpolation `protobuf:"varint,4,opt,name=pos_interpolation,json=posInterpolation,proto3,enum=bosdyn.api.PositionalInterpolation" json:"pos_interpolation,omitempty"`
	// Velocity at the starting point of the trajectory.
	StartingVelocity *Vec3 `protobuf:"bytes,5,opt,name=starting_velocity,json=startingVelocity,proto3" json:"starting_velocity,omitempty"`
	// Velocity at the ending point of the trajectory.
	EndingVelocity *Vec3 `protobuf:"bytes,6,opt,name=ending_velocity,json=endingVelocity,proto3" json:"ending_velocity,omitempty"`
}

func (x *Vec3Trajectory) Reset() {
	*x = Vec3Trajectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vec3Trajectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec3Trajectory) ProtoMessage() {}

func (x *Vec3Trajectory) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec3Trajectory.ProtoReflect.Descriptor instead.
func (*Vec3Trajectory) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{4}
}

func (x *Vec3Trajectory) GetPoints() []*Vec3TrajectoryPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Vec3Trajectory) GetReferenceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReferenceTime
	}
	return nil
}

func (x *Vec3Trajectory) GetPosInterpolation() PositionalInterpolation {
	if x != nil {
		return x.PosInterpolation
	}
	return PositionalInterpolation_POS_INTERP_UNKNOWN
}

func (x *Vec3Trajectory) GetStartingVelocity() *Vec3 {
	if x != nil {
		return x.StartingVelocity
	}
	return nil
}

func (x *Vec3Trajectory) GetEndingVelocity() *Vec3 {
	if x != nil {
		return x.EndingVelocity
	}
	return nil
}

// A 3D point (and linear velocity) that can be used as a point within a trajectory.
type Vec3TrajectoryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The point 3D position.
	Point *Vec3 `protobuf:"bytes,1,opt,name=point,proto3" json:"point,omitempty"`
	// These are all optional.  If nothing is specified, good defaults will be chosen
	// server-side.
	LinearSpeed float64 `protobuf:"fixed64,4,opt,name=linear_speed,json=linearSpeed,proto3" json:"linear_speed,omitempty"`
	// The duration to reach the point relative to the trajectory reference time.
	TimeSinceReference *durationpb.Duration `protobuf:"bytes,3,opt,name=time_since_reference,json=timeSinceReference,proto3" json:"time_since_reference,omitempty"`
}

func (x *Vec3TrajectoryPoint) Reset() {
	*x = Vec3TrajectoryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vec3TrajectoryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vec3TrajectoryPoint) ProtoMessage() {}

func (x *Vec3TrajectoryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vec3TrajectoryPoint.ProtoReflect.Descriptor instead.
func (*Vec3TrajectoryPoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{5}
}

func (x *Vec3TrajectoryPoint) GetPoint() *Vec3 {
	if x != nil {
		return x.Point
	}
	return nil
}

func (x *Vec3TrajectoryPoint) GetLinearSpeed() float64 {
	if x != nil {
		return x.LinearSpeed
	}
	return 0
}

func (x *Vec3TrajectoryPoint) GetTimeSinceReference() *durationpb.Duration {
	if x != nil {
		return x.TimeSinceReference
	}
	return nil
}

// A time-based trajectories of wrenches.
type WrenchTrajectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wrenches in the trajectory
	Points []*WrenchTrajectoryPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// All trajectories specify times relative to this reference time. The reference time should be
	// in robot clock. If this field is not included, this time will be the receive time of the
	// command.
	ReferenceTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reference_time,json=referenceTime,proto3" json:"reference_time,omitempty"`
}

func (x *WrenchTrajectory) Reset() {
	*x = WrenchTrajectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrenchTrajectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrenchTrajectory) ProtoMessage() {}

func (x *WrenchTrajectory) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrenchTrajectory.ProtoReflect.Descriptor instead.
func (*WrenchTrajectory) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{6}
}

func (x *WrenchTrajectory) GetPoints() []*WrenchTrajectoryPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *WrenchTrajectory) GetReferenceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReferenceTime
	}
	return nil
}

type WrenchTrajectoryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The wrench to apply at this point in time.
	Wrench *Wrench `protobuf:"bytes,1,opt,name=wrench,proto3" json:"wrench,omitempty"`
	// The duration to reach the point relative to the trajectory reference time.
	TimeSinceReference *durationpb.Duration `protobuf:"bytes,2,opt,name=time_since_reference,json=timeSinceReference,proto3" json:"time_since_reference,omitempty"`
}

func (x *WrenchTrajectoryPoint) Reset() {
	*x = WrenchTrajectoryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrenchTrajectoryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrenchTrajectoryPoint) ProtoMessage() {}

func (x *WrenchTrajectoryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrenchTrajectoryPoint.ProtoReflect.Descriptor instead.
func (*WrenchTrajectoryPoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{7}
}

func (x *WrenchTrajectoryPoint) GetWrench() *Wrench {
	if x != nil {
		return x.Wrench
	}
	return nil
}

func (x *WrenchTrajectoryPoint) GetTimeSinceReference() *durationpb.Duration {
	if x != nil {
		return x.TimeSinceReference
	}
	return nil
}

// A Point trajectory.
type ScalarTrajectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The points in trajectory
	Points []*ScalarTrajectoryPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// All trajectories specify times relative to this reference time. The reference time should be
	// in robot clock. If this field is not included, this time will be the receive time of the
	// command.
	ReferenceTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reference_time,json=referenceTime,proto3" json:"reference_time,omitempty"`
	// Parameters for how trajectories will be interpolated on robot.
	// (Note: ignored for ClawGripperCommand.Request, which will automatically
	// select between cubic interpolation or a minimum time trajectory)
	Interpolation PositionalInterpolation `protobuf:"varint,3,opt,name=interpolation,proto3,enum=bosdyn.api.PositionalInterpolation" json:"interpolation,omitempty"`
}

func (x *ScalarTrajectory) Reset() {
	*x = ScalarTrajectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTrajectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTrajectory) ProtoMessage() {}

func (x *ScalarTrajectory) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTrajectory.ProtoReflect.Descriptor instead.
func (*ScalarTrajectory) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{8}
}

func (x *ScalarTrajectory) GetPoints() []*ScalarTrajectoryPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *ScalarTrajectory) GetReferenceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReferenceTime
	}
	return nil
}

func (x *ScalarTrajectory) GetInterpolation() PositionalInterpolation {
	if x != nil {
		return x.Interpolation
	}
	return PositionalInterpolation_POS_INTERP_UNKNOWN
}

type ScalarTrajectoryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required position at the trajectory point's reference time.
	Point float64 `protobuf:"fixed64,1,opt,name=point,proto3" json:"point,omitempty"`
	// Optional speed at the trajectory point's reference time.
	Velocity *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// The duration to reach the point relative to the trajectory reference time.
	TimeSinceReference *durationpb.Duration `protobuf:"bytes,3,opt,name=time_since_reference,json=timeSinceReference,proto3" json:"time_since_reference,omitempty"`
}

func (x *ScalarTrajectoryPoint) Reset() {
	*x = ScalarTrajectoryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_trajectory_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTrajectoryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTrajectoryPoint) ProtoMessage() {}

func (x *ScalarTrajectoryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_trajectory_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTrajectoryPoint.ProtoReflect.Descriptor instead.
func (*ScalarTrajectoryPoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_trajectory_proto_rawDescGZIP(), []int{9}
}

func (x *ScalarTrajectoryPoint) GetPoint() float64 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *ScalarTrajectoryPoint) GetVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *ScalarTrajectoryPoint) GetTimeSinceReference() *durationpb.Duration {
	if x != nil {
		return x.TimeSinceReference
	}
	return nil
}

var File_bosdyn_api_trajectory_proto protoreflect.FileDescriptor

var file_bosdyn_api_trajectory_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x53, 0x45, 0x32, 0x54, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x22, 0x8a, 0x01, 0x0a, 0x12, 0x53, 0x45, 0x32, 0x54, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x6f,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04, 0x70,
	0x6f, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x69,
	0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x22, 0xb1, 0x02, 0x0a, 0x0d, 0x53, 0x45, 0x33, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x45, 0x33, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a,
	0x11, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70,
	0x6f, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x11, 0x61, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x61, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04,
	0x08, 0x02, 0x10, 0x03, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x53, 0x45, 0x33, 0x54, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x70,
	0x6f, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x04,
	0x70, 0x6f, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xde, 0x02, 0x0a, 0x0e, 0x56, 0x65, 0x63, 0x33, 0x54,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x54, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x50, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x56, 0x65, 0x63, 0x33, 0x52, 0x10, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x39, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x33, 0x52, 0x0e, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x63, 0x33,
	0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x26, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33,
	0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x65, 0x61,
	0x72, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x57, 0x72, 0x65, 0x6e,
	0x63, 0x68, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x39, 0x0a, 0x06,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68,
	0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x15, 0x57,
	0x72, 0x65, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x68,
	0x12, 0x4b, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xdb, 0x01,
	0x0a, 0x10, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x41, 0x0a,
	0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x49, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x15,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69,
	0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12,
	0x74, 0x69, 0x6d, 0x65, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x2a, 0x5e, 0x0a, 0x17, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x12, 0x50, 0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x4f, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x43, 0x55, 0x42, 0x49, 0x43,
	0x10, 0x02, 0x2a, 0x61, 0x0a, 0x14, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x4e,
	0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x4e, 0x47, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50,
	0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4e, 0x47,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x5f, 0x43, 0x55, 0x42, 0x49, 0x43, 0x5f, 0x45, 0x55,
	0x4c, 0x45, 0x52, 0x10, 0x02, 0x42, 0x44, 0x42, 0x0f, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_trajectory_proto_rawDescOnce sync.Once
	file_bosdyn_api_trajectory_proto_rawDescData = file_bosdyn_api_trajectory_proto_rawDesc
)

func file_bosdyn_api_trajectory_proto_rawDescGZIP() []byte {
	file_bosdyn_api_trajectory_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_trajectory_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_trajectory_proto_rawDescData)
	})
	return file_bosdyn_api_trajectory_proto_rawDescData
}

var file_bosdyn_api_trajectory_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bosdyn_api_trajectory_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bosdyn_api_trajectory_proto_goTypes = []interface{}{
	(PositionalInterpolation)(0),   // 0: bosdyn.api.PositionalInterpolation
	(AngularInterpolation)(0),      // 1: bosdyn.api.AngularInterpolation
	(*SE2Trajectory)(nil),          // 2: bosdyn.api.SE2Trajectory
	(*SE2TrajectoryPoint)(nil),     // 3: bosdyn.api.SE2TrajectoryPoint
	(*SE3Trajectory)(nil),          // 4: bosdyn.api.SE3Trajectory
	(*SE3TrajectoryPoint)(nil),     // 5: bosdyn.api.SE3TrajectoryPoint
	(*Vec3Trajectory)(nil),         // 6: bosdyn.api.Vec3Trajectory
	(*Vec3TrajectoryPoint)(nil),    // 7: bosdyn.api.Vec3TrajectoryPoint
	(*WrenchTrajectory)(nil),       // 8: bosdyn.api.WrenchTrajectory
	(*WrenchTrajectoryPoint)(nil),  // 9: bosdyn.api.WrenchTrajectoryPoint
	(*ScalarTrajectory)(nil),       // 10: bosdyn.api.ScalarTrajectory
	(*ScalarTrajectoryPoint)(nil),  // 11: bosdyn.api.ScalarTrajectoryPoint
	(*timestamppb.Timestamp)(nil),  // 12: google.protobuf.Timestamp
	(*SE2Pose)(nil),                // 13: bosdyn.api.SE2Pose
	(*durationpb.Duration)(nil),    // 14: google.protobuf.Duration
	(*SE3Pose)(nil),                // 15: bosdyn.api.SE3Pose
	(*SE3Velocity)(nil),            // 16: bosdyn.api.SE3Velocity
	(*Vec3)(nil),                   // 17: bosdyn.api.Vec3
	(*Wrench)(nil),                 // 18: bosdyn.api.Wrench
	(*wrapperspb.DoubleValue)(nil), // 19: google.protobuf.DoubleValue
}
var file_bosdyn_api_trajectory_proto_depIdxs = []int32{
	3,  // 0: bosdyn.api.SE2Trajectory.points:type_name -> bosdyn.api.SE2TrajectoryPoint
	12, // 1: bosdyn.api.SE2Trajectory.reference_time:type_name -> google.protobuf.Timestamp
	0,  // 2: bosdyn.api.SE2Trajectory.interpolation:type_name -> bosdyn.api.PositionalInterpolation
	13, // 3: bosdyn.api.SE2TrajectoryPoint.pose:type_name -> bosdyn.api.SE2Pose
	14, // 4: bosdyn.api.SE2TrajectoryPoint.time_since_reference:type_name -> google.protobuf.Duration
	5,  // 5: bosdyn.api.SE3Trajectory.points:type_name -> bosdyn.api.SE3TrajectoryPoint
	12, // 6: bosdyn.api.SE3Trajectory.reference_time:type_name -> google.protobuf.Timestamp
	0,  // 7: bosdyn.api.SE3Trajectory.pos_interpolation:type_name -> bosdyn.api.PositionalInterpolation
	1,  // 8: bosdyn.api.SE3Trajectory.ang_interpolation:type_name -> bosdyn.api.AngularInterpolation
	15, // 9: bosdyn.api.SE3TrajectoryPoint.pose:type_name -> bosdyn.api.SE3Pose
	16, // 10: bosdyn.api.SE3TrajectoryPoint.velocity:type_name -> bosdyn.api.SE3Velocity
	14, // 11: bosdyn.api.SE3TrajectoryPoint.time_since_reference:type_name -> google.protobuf.Duration
	7,  // 12: bosdyn.api.Vec3Trajectory.points:type_name -> bosdyn.api.Vec3TrajectoryPoint
	12, // 13: bosdyn.api.Vec3Trajectory.reference_time:type_name -> google.protobuf.Timestamp
	0,  // 14: bosdyn.api.Vec3Trajectory.pos_interpolation:type_name -> bosdyn.api.PositionalInterpolation
	17, // 15: bosdyn.api.Vec3Trajectory.starting_velocity:type_name -> bosdyn.api.Vec3
	17, // 16: bosdyn.api.Vec3Trajectory.ending_velocity:type_name -> bosdyn.api.Vec3
	17, // 17: bosdyn.api.Vec3TrajectoryPoint.point:type_name -> bosdyn.api.Vec3
	14, // 18: bosdyn.api.Vec3TrajectoryPoint.time_since_reference:type_name -> google.protobuf.Duration
	9,  // 19: bosdyn.api.WrenchTrajectory.points:type_name -> bosdyn.api.WrenchTrajectoryPoint
	12, // 20: bosdyn.api.WrenchTrajectory.reference_time:type_name -> google.protobuf.Timestamp
	18, // 21: bosdyn.api.WrenchTrajectoryPoint.wrench:type_name -> bosdyn.api.Wrench
	14, // 22: bosdyn.api.WrenchTrajectoryPoint.time_since_reference:type_name -> google.protobuf.Duration
	11, // 23: bosdyn.api.ScalarTrajectory.points:type_name -> bosdyn.api.ScalarTrajectoryPoint
	12, // 24: bosdyn.api.ScalarTrajectory.reference_time:type_name -> google.protobuf.Timestamp
	0,  // 25: bosdyn.api.ScalarTrajectory.interpolation:type_name -> bosdyn.api.PositionalInterpolation
	19, // 26: bosdyn.api.ScalarTrajectoryPoint.velocity:type_name -> google.protobuf.DoubleValue
	14, // 27: bosdyn.api.ScalarTrajectoryPoint.time_since_reference:type_name -> google.protobuf.Duration
	28, // [28:28] is the sub-list for method output_type
	28, // [28:28] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_bosdyn_api_trajectory_proto_init() }
func file_bosdyn_api_trajectory_proto_init() {
	if File_bosdyn_api_trajectory_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_trajectory_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2Trajectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2TrajectoryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE3Trajectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE3TrajectoryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vec3Trajectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vec3TrajectoryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrenchTrajectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrenchTrajectoryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarTrajectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_trajectory_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarTrajectoryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_trajectory_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_trajectory_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_trajectory_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_trajectory_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_trajectory_proto_msgTypes,
	}.Build()
	File_bosdyn_api_trajectory_proto = out.File
	file_bosdyn_api_trajectory_proto_rawDesc = nil
	file_bosdyn_api_trajectory_proto_goTypes = nil
	file_bosdyn_api_trajectory_proto_depIdxs = nil
}
