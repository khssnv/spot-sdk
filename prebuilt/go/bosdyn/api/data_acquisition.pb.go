// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/data_acquisition.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible ways a plugin can fail.
type PluginServiceError_ErrorCode int32

const (
	PluginServiceError_STATUS_UNKNOWN PluginServiceError_ErrorCode = 0
	// The initial RPC to the plugin failed
	PluginServiceError_STATUS_REQUEST_ERROR PluginServiceError_ErrorCode = 1
	// The GetStatus request to the plugin failed with a data error or timeout.
	PluginServiceError_STATUS_GETSTATUS_ERROR PluginServiceError_ErrorCode = 2
	// The plugin reported an internal error.
	PluginServiceError_STATUS_INTERNAL_ERROR PluginServiceError_ErrorCode = 3
)

// Enum value maps for PluginServiceError_ErrorCode.
var (
	PluginServiceError_ErrorCode_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_REQUEST_ERROR",
		2: "STATUS_GETSTATUS_ERROR",
		3: "STATUS_INTERNAL_ERROR",
	}
	PluginServiceError_ErrorCode_value = map[string]int32{
		"STATUS_UNKNOWN":         0,
		"STATUS_REQUEST_ERROR":   1,
		"STATUS_GETSTATUS_ERROR": 2,
		"STATUS_INTERNAL_ERROR":  3,
	}
)

func (x PluginServiceError_ErrorCode) Enum() *PluginServiceError_ErrorCode {
	p := new(PluginServiceError_ErrorCode)
	*p = x
	return p
}

func (x PluginServiceError_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PluginServiceError_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_acquisition_proto_enumTypes[0].Descriptor()
}

func (PluginServiceError_ErrorCode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_acquisition_proto_enumTypes[0]
}

func (x PluginServiceError_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PluginServiceError_ErrorCode.Descriptor instead.
func (PluginServiceError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{14, 0}
}

type NetworkComputeError_ErrorCode int32

const (
	NetworkComputeError_STATUS_UNKNOWN NetworkComputeError_ErrorCode = 0
	// The request was rejected.
	NetworkComputeError_STATUS_REQUEST_ERROR NetworkComputeError_ErrorCode = 1
	// The request had an error reaching the worker.
	NetworkComputeError_STATUS_NETWORK_ERROR NetworkComputeError_ErrorCode = 2
	// Some other problem prevented the request from succeeding.
	NetworkComputeError_STATUS_INTERNAL_ERROR NetworkComputeError_ErrorCode = 3
)

// Enum value maps for NetworkComputeError_ErrorCode.
var (
	NetworkComputeError_ErrorCode_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_REQUEST_ERROR",
		2: "STATUS_NETWORK_ERROR",
		3: "STATUS_INTERNAL_ERROR",
	}
	NetworkComputeError_ErrorCode_value = map[string]int32{
		"STATUS_UNKNOWN":        0,
		"STATUS_REQUEST_ERROR":  1,
		"STATUS_NETWORK_ERROR":  2,
		"STATUS_INTERNAL_ERROR": 3,
	}
)

func (x NetworkComputeError_ErrorCode) Enum() *NetworkComputeError_ErrorCode {
	p := new(NetworkComputeError_ErrorCode)
	*p = x
	return p
}

func (x NetworkComputeError_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkComputeError_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_acquisition_proto_enumTypes[1].Descriptor()
}

func (NetworkComputeError_ErrorCode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_acquisition_proto_enumTypes[1]
}

func (x NetworkComputeError_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkComputeError_ErrorCode.Descriptor instead.
func (NetworkComputeError_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{15, 0}
}

type AcquireDataResponse_Status int32

const (
	AcquireDataResponse_STATUS_UNKNOWN              AcquireDataResponse_Status = 0
	AcquireDataResponse_STATUS_OK                   AcquireDataResponse_Status = 1 // The capture action has successfully started acquiring the data.
	AcquireDataResponse_STATUS_UNKNOWN_CAPTURE_TYPE AcquireDataResponse_Status = 2 // One of the capability requests in the AcquisitionRequestList is unknown.
)

// Enum value maps for AcquireDataResponse_Status.
var (
	AcquireDataResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_UNKNOWN_CAPTURE_TYPE",
	}
	AcquireDataResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":              0,
		"STATUS_OK":                   1,
		"STATUS_UNKNOWN_CAPTURE_TYPE": 2,
	}
)

func (x AcquireDataResponse_Status) Enum() *AcquireDataResponse_Status {
	p := new(AcquireDataResponse_Status)
	*p = x
	return p
}

func (x AcquireDataResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquireDataResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_acquisition_proto_enumTypes[2].Descriptor()
}

func (AcquireDataResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_acquisition_proto_enumTypes[2]
}

func (x AcquireDataResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquireDataResponse_Status.Descriptor instead.
func (AcquireDataResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{17, 0}
}

type AcquirePluginDataResponse_Status int32

const (
	AcquirePluginDataResponse_STATUS_UNKNOWN              AcquirePluginDataResponse_Status = 0
	AcquirePluginDataResponse_STATUS_OK                   AcquirePluginDataResponse_Status = 1 // The capture action has successfully started acquiring the data.
	AcquirePluginDataResponse_STATUS_UNKNOWN_CAPTURE_TYPE AcquirePluginDataResponse_Status = 2 // One of the capability requests in the AcquisitionRequestList is unknown.
)

// Enum value maps for AcquirePluginDataResponse_Status.
var (
	AcquirePluginDataResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_UNKNOWN_CAPTURE_TYPE",
	}
	AcquirePluginDataResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":              0,
		"STATUS_OK":                   1,
		"STATUS_UNKNOWN_CAPTURE_TYPE": 2,
	}
)

func (x AcquirePluginDataResponse_Status) Enum() *AcquirePluginDataResponse_Status {
	p := new(AcquirePluginDataResponse_Status)
	*p = x
	return p
}

func (x AcquirePluginDataResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AcquirePluginDataResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_acquisition_proto_enumTypes[3].Descriptor()
}

func (AcquirePluginDataResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_acquisition_proto_enumTypes[3]
}

func (x AcquirePluginDataResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AcquirePluginDataResponse_Status.Descriptor instead.
func (AcquirePluginDataResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{19, 0}
}

type GetStatusResponse_Status int32

const (
	GetStatusResponse_STATUS_UNKNOWN                   GetStatusResponse_Status = 0
	GetStatusResponse_STATUS_ACQUIRING                 GetStatusResponse_Status = 1  // [Status] Data acquisition is still in progress
	GetStatusResponse_STATUS_SAVING                    GetStatusResponse_Status = 2  // [Status] Data has been acquired, processing and storage is now in progress.
	GetStatusResponse_STATUS_COMPLETE                  GetStatusResponse_Status = 3  // [Status] Data acquisition is complete.
	GetStatusResponse_STATUS_CANCEL_IN_PROGRESS        GetStatusResponse_Status = 4  // [Status] The data acquisition service is working to cancel the request.
	GetStatusResponse_STATUS_ACQUISITION_CANCELLED     GetStatusResponse_Status = 5  // [Status] The data acquisition request was cancelled manually.
	GetStatusResponse_STATUS_DATA_ERROR                GetStatusResponse_Status = 10 // [Error - AcquireData] An error occurred while acquiring, processing, or saving data.
	GetStatusResponse_STATUS_TIMEDOUT                  GetStatusResponse_Status = 11 // [Error - AcquireData] The data collection has passed the deadline for completion.
	GetStatusResponse_STATUS_INTERNAL_ERROR            GetStatusResponse_Status = 12 // [Error - AcquireData] An error occurred such that we don't even know our status.
	GetStatusResponse_STATUS_CANCEL_ACQUISITION_FAILED GetStatusResponse_Status = 30 // [Error -CancelAcquisition] The cancellation request failed to complete.
	GetStatusResponse_STATUS_REQUEST_ID_DOES_NOT_EXIST GetStatusResponse_Status = 20 // [Error - GetStatus] The request_id does not exist.
)

// Enum value maps for GetStatusResponse_Status.
var (
	GetStatusResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_ACQUIRING",
		2:  "STATUS_SAVING",
		3:  "STATUS_COMPLETE",
		4:  "STATUS_CANCEL_IN_PROGRESS",
		5:  "STATUS_ACQUISITION_CANCELLED",
		10: "STATUS_DATA_ERROR",
		11: "STATUS_TIMEDOUT",
		12: "STATUS_INTERNAL_ERROR",
		30: "STATUS_CANCEL_ACQUISITION_FAILED",
		20: "STATUS_REQUEST_ID_DOES_NOT_EXIST",
	}
	GetStatusResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                   0,
		"STATUS_ACQUIRING":                 1,
		"STATUS_SAVING":                    2,
		"STATUS_COMPLETE":                  3,
		"STATUS_CANCEL_IN_PROGRESS":        4,
		"STATUS_ACQUISITION_CANCELLED":     5,
		"STATUS_DATA_ERROR":                10,
		"STATUS_TIMEDOUT":                  11,
		"STATUS_INTERNAL_ERROR":            12,
		"STATUS_CANCEL_ACQUISITION_FAILED": 30,
		"STATUS_REQUEST_ID_DOES_NOT_EXIST": 20,
	}
)

func (x GetStatusResponse_Status) Enum() *GetStatusResponse_Status {
	p := new(GetStatusResponse_Status)
	*p = x
	return p
}

func (x GetStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_acquisition_proto_enumTypes[4].Descriptor()
}

func (GetStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_acquisition_proto_enumTypes[4]
}

func (x GetStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetStatusResponse_Status.Descriptor instead.
func (GetStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{21, 0}
}

type CancelAcquisitionResponse_Status int32

const (
	CancelAcquisitionResponse_STATUS_UNKNOWN                   CancelAcquisitionResponse_Status = 0
	CancelAcquisitionResponse_STATUS_OK                        CancelAcquisitionResponse_Status = 1 // Successfully cancelled the data acquisition request.
	CancelAcquisitionResponse_STATUS_FAILED_TO_CANCEL          CancelAcquisitionResponse_Status = 2 // Unable to stop the data acquisition request.
	CancelAcquisitionResponse_STATUS_REQUEST_ID_DOES_NOT_EXIST CancelAcquisitionResponse_Status = 3 // [Error] The request_id does not exist.
)

// Enum value maps for CancelAcquisitionResponse_Status.
var (
	CancelAcquisitionResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_FAILED_TO_CANCEL",
		3: "STATUS_REQUEST_ID_DOES_NOT_EXIST",
	}
	CancelAcquisitionResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                   0,
		"STATUS_OK":                        1,
		"STATUS_FAILED_TO_CANCEL":          2,
		"STATUS_REQUEST_ID_DOES_NOT_EXIST": 3,
	}
)

func (x CancelAcquisitionResponse_Status) Enum() *CancelAcquisitionResponse_Status {
	p := new(CancelAcquisitionResponse_Status)
	*p = x
	return p
}

func (x CancelAcquisitionResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancelAcquisitionResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_acquisition_proto_enumTypes[5].Descriptor()
}

func (CancelAcquisitionResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_acquisition_proto_enumTypes[5]
}

func (x CancelAcquisitionResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancelAcquisitionResponse_Status.Descriptor instead.
func (CancelAcquisitionResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{25, 0}
}

// Description of a data acquisition capability. A data acquisition plugin service will have a
// set of capabilities for which it can acquire and save the appropriate data.
type DataAcquisitionCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the data acquisition capability. Used for identification purposes
	// when making acquire data requests.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A human readable name of the data acquisition capability that will be shown on the tablet.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Channel name that will be associated with all data stored in the data buffer through
	// each data acquisition plugin. Metadata acquirers do not specify this field.
	ChannelName string `protobuf:"bytes,3,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	// The data acquisition plugin service's service name used in directory registration.
	ServiceName string `protobuf:"bytes,4,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *DataAcquisitionCapability) Reset() {
	*x = DataAcquisitionCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataAcquisitionCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataAcquisitionCapability) ProtoMessage() {}

func (x *DataAcquisitionCapability) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataAcquisitionCapability.ProtoReflect.Descriptor instead.
func (*DataAcquisitionCapability) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{0}
}

func (x *DataAcquisitionCapability) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataAcquisitionCapability) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataAcquisitionCapability) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *DataAcquisitionCapability) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// Description of an image acquisition capability. The image acquisition capabilities will be available
// through the main data acquisition service on robot and are populated based on all bosdyn.api.ImageService
// services registered to the robot's directory.
type ImageAcquisitionCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image service's service name used in directory registration.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// (Depricate) Please use "image_sources" below for information regarding the image source
	// associated with the service.
	ImageSourceNames []string `protobuf:"bytes,2,rep,name=image_source_names,json=imageSourceNames,proto3" json:"image_source_names,omitempty"`
	// List of image sources reported by the image service (through the ListImageSources RPC).
	ImageSources []*ImageSource `protobuf:"bytes,3,rep,name=image_sources,json=imageSources,proto3" json:"image_sources,omitempty"`
}

func (x *ImageAcquisitionCapability) Reset() {
	*x = ImageAcquisitionCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageAcquisitionCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageAcquisitionCapability) ProtoMessage() {}

func (x *ImageAcquisitionCapability) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageAcquisitionCapability.ProtoReflect.Descriptor instead.
func (*ImageAcquisitionCapability) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{1}
}

func (x *ImageAcquisitionCapability) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ImageAcquisitionCapability) GetImageSourceNames() []string {
	if x != nil {
		return x.ImageSourceNames
	}
	return nil
}

func (x *ImageAcquisitionCapability) GetImageSources() []*ImageSource {
	if x != nil {
		return x.ImageSources
	}
	return nil
}

type NetworkComputeCapability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service information.
	ServerConfig *NetworkComputeServerConfiguration `protobuf:"bytes,1,opt,name=server_config,json=serverConfig,proto3" json:"server_config,omitempty"`
	// Provide list of available models
	AvailableModels []string       `protobuf:"bytes,2,rep,name=available_models,json=availableModels,proto3" json:"available_models,omitempty"`
	Labels          []*ModelLabels `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *NetworkComputeCapability) Reset() {
	*x = NetworkComputeCapability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkComputeCapability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkComputeCapability) ProtoMessage() {}

func (x *NetworkComputeCapability) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkComputeCapability.ProtoReflect.Descriptor instead.
func (*NetworkComputeCapability) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{2}
}

func (x *NetworkComputeCapability) GetServerConfig() *NetworkComputeServerConfiguration {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

func (x *NetworkComputeCapability) GetAvailableModels() []string {
	if x != nil {
		return x.AvailableModels
	}
	return nil
}

func (x *NetworkComputeCapability) GetLabels() []*ModelLabels {
	if x != nil {
		return x.Labels
	}
	return nil
}

// A list of all capabilities (data and images) that a specific data acquisition plugin service can successfully
// acquire and save the data specified in each capability.
type AcquisitionCapabilityList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of non-image data acquisition capabilities.
	DataSources []*DataAcquisitionCapability `protobuf:"bytes,1,rep,name=data_sources,json=dataSources,proto3" json:"data_sources,omitempty"`
	// List of image data acquisition capabilities.
	ImageSources []*ImageAcquisitionCapability `protobuf:"bytes,3,rep,name=image_sources,json=imageSources,proto3" json:"image_sources,omitempty"`
	// List of network compute capabilities.
	NetworkComputeSources []*NetworkComputeCapability `protobuf:"bytes,5,rep,name=network_compute_sources,json=networkComputeSources,proto3" json:"network_compute_sources,omitempty"`
}

func (x *AcquisitionCapabilityList) Reset() {
	*x = AcquisitionCapabilityList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionCapabilityList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionCapabilityList) ProtoMessage() {}

func (x *AcquisitionCapabilityList) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionCapabilityList.ProtoReflect.Descriptor instead.
func (*AcquisitionCapabilityList) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{3}
}

func (x *AcquisitionCapabilityList) GetDataSources() []*DataAcquisitionCapability {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *AcquisitionCapabilityList) GetImageSources() []*ImageAcquisitionCapability {
	if x != nil {
		return x.ImageSources
	}
	return nil
}

func (x *AcquisitionCapabilityList) GetNetworkComputeSources() []*NetworkComputeCapability {
	if x != nil {
		return x.NetworkComputeSources
	}
	return nil
}

// The CaptureActionId describes the entire capture action for an AcquireData request and will be used
// to uniquely identify that full request's set of stored data.
type CaptureActionId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action name is used to group all pieces of data associated with a single AcquireData
	// request. The action name must be unique for the given group name, meaning no two actions
	// with the same group name can have the same action name.
	ActionName string `protobuf:"bytes,1,opt,name=action_name,json=actionName,proto3" json:"action_name,omitempty"`
	// The group name is used to group a "session" of data, such as a mission or a teleop capture session, which
	// includes multiple capture actions (from multiple AcquireData RPCs).
	GroupName string `protobuf:"bytes,2,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	// Time (in the robot's clock) at which this capture was triggered. If the timestamp is not specified
	// in the AcquireData RPC, the main data acquisition service on robot will populate the timestamp field
	// with the timestamp of when the RPC was recieved.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *CaptureActionId) Reset() {
	*x = CaptureActionId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaptureActionId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaptureActionId) ProtoMessage() {}

func (x *CaptureActionId) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaptureActionId.ProtoReflect.Descriptor instead.
func (*CaptureActionId) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{4}
}

func (x *CaptureActionId) GetActionName() string {
	if x != nil {
		return x.ActionName
	}
	return ""
}

func (x *CaptureActionId) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *CaptureActionId) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// A way to identify an individual piece of data stored in the data buffer.
type DataIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action where the data was acquired.
	ActionId *CaptureActionId `protobuf:"bytes,1,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Data buffer channel associated with the DataBlob. The channel is used to group data across
	// actions by a specific source, and it can be used in queries to retrieve some subset of data. For example,
	// the channel could be "ptz" and queries can be made for all PTZ images.
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Data-specific identifier that can optionally be used to disambiguate cases where the action_id and
	// channel are insufficient. For example, you save cropped SpotCAM pano image that are detected as gauges to
	// a "detected_gauges" channel, but want a way to further individually identify them as each specific gauge,
	// so you give each detection a unique data_name.
	DataName string `protobuf:"bytes,3,opt,name=data_name,json=dataName,proto3" json:"data_name,omitempty"`
}

func (x *DataIdentifier) Reset() {
	*x = DataIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataIdentifier) ProtoMessage() {}

func (x *DataIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataIdentifier.ProtoReflect.Descriptor instead.
func (*DataIdentifier) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{5}
}

func (x *DataIdentifier) GetActionId() *CaptureActionId {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *DataIdentifier) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *DataIdentifier) GetDataName() string {
	if x != nil {
		return x.DataName
	}
	return ""
}

// Structured data that can be included within a AcquireData RPC and saved in association with
// that capture action.
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// JSON representation of metadata.
	Data *structpb.Struct `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{6}
}

func (x *Metadata) GetData() *structpb.Struct {
	if x != nil {
		return x.Data
	}
	return nil
}

// This message can be stored as a DataBlob in the data buffer in order to be recognized as
// metadata that is associated with previously stored data.
type AssociatedMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data that this metadata refers to.
	// The timestamp field is ignored.
	// If only the action_id is filled out, this metadata is associated with the entire capture action.
	ReferenceId *DataIdentifier `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// Metadata message to be stored.
	Metadata *Metadata `protobuf:"bytes,2,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *AssociatedMetadata) Reset() {
	*x = AssociatedMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatedMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedMetadata) ProtoMessage() {}

func (x *AssociatedMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedMetadata.ProtoReflect.Descriptor instead.
func (*AssociatedMetadata) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{7}
}

func (x *AssociatedMetadata) GetReferenceId() *DataIdentifier {
	if x != nil {
		return x.ReferenceId
	}
	return nil
}

func (x *AssociatedMetadata) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// This message can be stored as a DataBlob in the data buffer in order to be recognized as
// AlertData that is associated with previously stored data.
type AssociatedAlertData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The data that this AlertData refers to.
	// The timestamp field is ignored.
	// If only the action_id is filled out, this AlertData is associated with the entire capture action.
	ReferenceId *DataIdentifier `protobuf:"bytes,1,opt,name=reference_id,json=referenceId,proto3" json:"reference_id,omitempty"`
	// AlertData message to be stored.
	AlertData *AlertData `protobuf:"bytes,2,opt,name=alert_data,json=alertData,proto3" json:"alert_data,omitempty"`
}

func (x *AssociatedAlertData) Reset() {
	*x = AssociatedAlertData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssociatedAlertData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssociatedAlertData) ProtoMessage() {}

func (x *AssociatedAlertData) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssociatedAlertData.ProtoReflect.Descriptor instead.
func (*AssociatedAlertData) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{8}
}

func (x *AssociatedAlertData) GetReferenceId() *DataIdentifier {
	if x != nil {
		return x.ReferenceId
	}
	return nil
}

func (x *AssociatedAlertData) GetAlertData() *AlertData {
	if x != nil {
		return x.AlertData
	}
	return nil
}

// An individual capture which can be specified in the AcquireData request to identify a piece of
// image data to be collected.
type ImageSourceCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the image service that the data should be requested from.
	ImageService string `protobuf:"bytes,1,opt,name=image_service,json=imageService,proto3" json:"image_service,omitempty"`
	// Specific image source to use from the list reported by the image service within the
	// ImageAcquisitionCapability message.
	ImageSource string `protobuf:"bytes,2,opt,name=image_source,json=imageSource,proto3" json:"image_source,omitempty"`
	// Specific pixel format to capture reported by the ImageAcquisitionCapability message.
	PixelFormat Image_PixelFormat `protobuf:"varint,3,opt,name=pixel_format,json=pixelFormat,proto3,enum=bosdyn.api.Image_PixelFormat" json:"pixel_format,omitempty"`
}

func (x *ImageSourceCapture) Reset() {
	*x = ImageSourceCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSourceCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSourceCapture) ProtoMessage() {}

func (x *ImageSourceCapture) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSourceCapture.ProtoReflect.Descriptor instead.
func (*ImageSourceCapture) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{9}
}

func (x *ImageSourceCapture) GetImageService() string {
	if x != nil {
		return x.ImageService
	}
	return ""
}

func (x *ImageSourceCapture) GetImageSource() string {
	if x != nil {
		return x.ImageSource
	}
	return ""
}

func (x *ImageSourceCapture) GetPixelFormat() Image_PixelFormat {
	if x != nil {
		return x.PixelFormat
	}
	return Image_PIXEL_FORMAT_UNKNOWN
}

// An individual capture which can be specified in the AcquireData request to identify a piece of
// non-image data to be collected.
type DataCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the data to be captured. This should match the uniquely identifying name from
	// the DataAcquisitionCapability.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DataCapture) Reset() {
	*x = DataCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataCapture) ProtoMessage() {}

func (x *DataCapture) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataCapture.ProtoReflect.Descriptor instead.
func (*DataCapture) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{10}
}

func (x *DataCapture) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type NetworkComputeCapture struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data source and model.
	InputData *NetworkComputeInputData `protobuf:"bytes,1,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// Which service to use.
	ServerConfig *NetworkComputeServerConfiguration `protobuf:"bytes,2,opt,name=server_config,json=serverConfig,proto3" json:"server_config,omitempty"`
}

func (x *NetworkComputeCapture) Reset() {
	*x = NetworkComputeCapture{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkComputeCapture) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkComputeCapture) ProtoMessage() {}

func (x *NetworkComputeCapture) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkComputeCapture.ProtoReflect.Descriptor instead.
func (*NetworkComputeCapture) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{11}
}

func (x *NetworkComputeCapture) GetInputData() *NetworkComputeInputData {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *NetworkComputeCapture) GetServerConfig() *NetworkComputeServerConfiguration {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

// The grouping of all individual image and data captures for a given capture action.
type AcquisitionRequestList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of image requests.
	ImageCaptures []*ImageSourceCapture `protobuf:"bytes,1,rep,name=image_captures,json=imageCaptures,proto3" json:"image_captures,omitempty"`
	// List of non-image data and metadata requests.
	DataCaptures []*DataCapture `protobuf:"bytes,2,rep,name=data_captures,json=dataCaptures,proto3" json:"data_captures,omitempty"`
	// List of Network Compute Bridge requests
	NetworkComputeCaptures []*NetworkComputeCapture `protobuf:"bytes,4,rep,name=network_compute_captures,json=networkComputeCaptures,proto3" json:"network_compute_captures,omitempty"`
}

func (x *AcquisitionRequestList) Reset() {
	*x = AcquisitionRequestList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquisitionRequestList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquisitionRequestList) ProtoMessage() {}

func (x *AcquisitionRequestList) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquisitionRequestList.ProtoReflect.Descriptor instead.
func (*AcquisitionRequestList) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{12}
}

func (x *AcquisitionRequestList) GetImageCaptures() []*ImageSourceCapture {
	if x != nil {
		return x.ImageCaptures
	}
	return nil
}

func (x *AcquisitionRequestList) GetDataCaptures() []*DataCapture {
	if x != nil {
		return x.DataCaptures
	}
	return nil
}

func (x *AcquisitionRequestList) GetNetworkComputeCaptures() []*NetworkComputeCapture {
	if x != nil {
		return x.NetworkComputeCaptures
	}
	return nil
}

// An error associated with a particular capture action and piece of data.
type DataError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the data to be saved.
	DataId *DataIdentifier `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	// Human-readable message describing the error.
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	// Custom plugin-specific data about the problem.
	ErrorData *anypb.Any `protobuf:"bytes,3,opt,name=error_data,json=errorData,proto3" json:"error_data,omitempty"`
}

func (x *DataError) Reset() {
	*x = DataError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataError) ProtoMessage() {}

func (x *DataError) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataError.ProtoReflect.Descriptor instead.
func (*DataError) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{13}
}

func (x *DataError) GetDataId() *DataIdentifier {
	if x != nil {
		return x.DataId
	}
	return nil
}

func (x *DataError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *DataError) GetErrorData() *anypb.Any {
	if x != nil {
		return x.ErrorData
	}
	return nil
}

// An error associated with a particular data acquisition plugin service that was
type PluginServiceError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service with the error
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Failure mode.
	Error PluginServiceError_ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=bosdyn.api.PluginServiceError_ErrorCode" json:"error,omitempty"`
	// Description of the error.
	Message string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PluginServiceError) Reset() {
	*x = PluginServiceError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginServiceError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginServiceError) ProtoMessage() {}

func (x *PluginServiceError) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginServiceError.ProtoReflect.Descriptor instead.
func (*PluginServiceError) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{14}
}

func (x *PluginServiceError) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *PluginServiceError) GetError() PluginServiceError_ErrorCode {
	if x != nil {
		return x.Error
	}
	return PluginServiceError_STATUS_UNKNOWN
}

func (x *PluginServiceError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type NetworkComputeError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the service with the error
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// General type of error that occurred.
	Error NetworkComputeError_ErrorCode `protobuf:"varint,2,opt,name=error,proto3,enum=bosdyn.api.NetworkComputeError_ErrorCode" json:"error,omitempty"`
	// Any particular failure mode reported.
	NetworkComputeStatus NetworkComputeStatus `protobuf:"varint,3,opt,name=network_compute_status,json=networkComputeStatus,proto3,enum=bosdyn.api.NetworkComputeStatus" json:"network_compute_status,omitempty"`
	// Description of the error.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *NetworkComputeError) Reset() {
	*x = NetworkComputeError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkComputeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkComputeError) ProtoMessage() {}

func (x *NetworkComputeError) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkComputeError.ProtoReflect.Descriptor instead.
func (*NetworkComputeError) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{15}
}

func (x *NetworkComputeError) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *NetworkComputeError) GetError() NetworkComputeError_ErrorCode {
	if x != nil {
		return x.Error
	}
	return NetworkComputeError_STATUS_UNKNOWN
}

func (x *NetworkComputeError) GetNetworkComputeStatus() NetworkComputeStatus {
	if x != nil {
		return x.NetworkComputeStatus
	}
	return NetworkComputeStatus_NETWORK_COMPUTE_STATUS_UNKNOWN
}

func (x *NetworkComputeError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type AcquireDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Define the unique action that all data should be saved with.
	ActionId *CaptureActionId `protobuf:"bytes,2,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Metadata to store with the data capture. The main DAQ service saves it in the DataBuffer.
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// List of capability requests that should be collected as part of this capture action.
	AcquisitionRequests *AcquisitionRequestList `protobuf:"bytes,4,opt,name=acquisition_requests,json=acquisitionRequests,proto3" json:"acquisition_requests,omitempty"`
	// Optional duration used to extend the amount of time that the data request may take, in
	// the event that a plugin is incorrectly specifying its timeout.
	// The amount of time allowed will be the maximum of this duration and any requests
	// made to plugins or other capture sources.
	MinTimeout *durationpb.Duration `protobuf:"bytes,5,opt,name=min_timeout,json=minTimeout,proto3" json:"min_timeout,omitempty"`
}

func (x *AcquireDataRequest) Reset() {
	*x = AcquireDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireDataRequest) ProtoMessage() {}

func (x *AcquireDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireDataRequest.ProtoReflect.Descriptor instead.
func (*AcquireDataRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{16}
}

func (x *AcquireDataRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcquireDataRequest) GetActionId() *CaptureActionId {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *AcquireDataRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AcquireDataRequest) GetAcquisitionRequests() *AcquisitionRequestList {
	if x != nil {
		return x.AcquisitionRequests
	}
	return nil
}

func (x *AcquireDataRequest) GetMinTimeout() *durationpb.Duration {
	if x != nil {
		return x.MinTimeout
	}
	return nil
}

type AcquireDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of the AcquirePluginData RPC call. Further monitoring on the success of the
	// acquisition request can be done using the GetStatus RPC.
	Status AcquireDataResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.AcquireDataResponse_Status" json:"status,omitempty"`
	// Identifier which can be used to check the status of or cancel the acquisition action..
	RequestId uint32 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *AcquireDataResponse) Reset() {
	*x = AcquireDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireDataResponse) ProtoMessage() {}

func (x *AcquireDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireDataResponse.ProtoReflect.Descriptor instead.
func (*AcquireDataResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{17}
}

func (x *AcquireDataResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcquireDataResponse) GetStatus() AcquireDataResponse_Status {
	if x != nil {
		return x.Status
	}
	return AcquireDataResponse_STATUS_UNKNOWN
}

func (x *AcquireDataResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

// Message sent by main DAQ service to all data acquisition plugin services.
type AcquirePluginDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Metadata acquirers use these DataIdentifier objects to associate them with the acquired
	// metadata when storing them in the DataBuffer.
	// Data acquirers simply get the timestamp from these DataIdentifier objects to use when
	// storing the data in the DataBuffer.
	DataId []*DataIdentifier `protobuf:"bytes,2,rep,name=data_id,json=dataId,proto3" json:"data_id,omitempty"`
	// Metadata specified by the requestor.
	Metadata *Metadata `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Id to be associated with all the data buffered for this request. It will be stored
	// in the DataIdentifier field of each piece of data buffered from this request.
	ActionId *CaptureActionId `protobuf:"bytes,4,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// List of capability requests specific for this DAQ plugin.
	AcquisitionRequests *AcquisitionRequestList `protobuf:"bytes,5,opt,name=acquisition_requests,json=acquisitionRequests,proto3" json:"acquisition_requests,omitempty"`
}

func (x *AcquirePluginDataRequest) Reset() {
	*x = AcquirePluginDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquirePluginDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquirePluginDataRequest) ProtoMessage() {}

func (x *AcquirePluginDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquirePluginDataRequest.ProtoReflect.Descriptor instead.
func (*AcquirePluginDataRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{18}
}

func (x *AcquirePluginDataRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcquirePluginDataRequest) GetDataId() []*DataIdentifier {
	if x != nil {
		return x.DataId
	}
	return nil
}

func (x *AcquirePluginDataRequest) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AcquirePluginDataRequest) GetActionId() *CaptureActionId {
	if x != nil {
		return x.ActionId
	}
	return nil
}

func (x *AcquirePluginDataRequest) GetAcquisitionRequests() *AcquisitionRequestList {
	if x != nil {
		return x.AcquisitionRequests
	}
	return nil
}

type AcquirePluginDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of the AcquirePluginData RPC call. Further monitoring on the success of the
	// acquisition request can be done using the GetStatus RPC.
	Status AcquirePluginDataResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.AcquirePluginDataResponse_Status" json:"status,omitempty"`
	// Identifier which can be used to check the status of or cancel the acquisition action..
	RequestId uint32 `protobuf:"varint,3,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Time (in the robot's clock) by which this capture should definitely be complete.
	// If it is not complete by this time, something has gone wrong.
	TimeoutDeadline *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timeout_deadline,json=timeoutDeadline,proto3" json:"timeout_deadline,omitempty"`
}

func (x *AcquirePluginDataResponse) Reset() {
	*x = AcquirePluginDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquirePluginDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquirePluginDataResponse) ProtoMessage() {}

func (x *AcquirePluginDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquirePluginDataResponse.ProtoReflect.Descriptor instead.
func (*AcquirePluginDataResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{19}
}

func (x *AcquirePluginDataResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *AcquirePluginDataResponse) GetStatus() AcquirePluginDataResponse_Status {
	if x != nil {
		return x.Status
	}
	return AcquirePluginDataResponse_STATUS_UNKNOWN
}

func (x *AcquirePluginDataResponse) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *AcquirePluginDataResponse) GetTimeoutDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeoutDeadline
	}
	return nil
}

type GetStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Which acquisition to check the status of.
	RequestId uint32 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *GetStatusRequest) Reset() {
	*x = GetStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusRequest) ProtoMessage() {}

func (x *GetStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusRequest.ProtoReflect.Descriptor instead.
func (*GetStatusRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatusRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStatusRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type GetStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header
	Header *ResponseHeader          `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Status GetStatusResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.GetStatusResponse_Status" json:"status,omitempty"`
	// Data that has been successfully saved into the data buffer for the capture action.
	DataSaved []*DataIdentifier `protobuf:"bytes,3,rep,name=data_saved,json=dataSaved,proto3" json:"data_saved,omitempty"`
	// A list of data captures which have failed in some way during the action.
	// For example, the data acquisition plugin is unable to communicate to a sensor and responds with
	// a data error for that specific data capture.
	DataErrors []*DataError `protobuf:"bytes,9,rep,name=data_errors,json=dataErrors,proto3" json:"data_errors,omitempty"`
	// Services which failed independent of a particular data id.
	// For example, if a plugin times out or crashes, it could be reported here.
	ServiceErrors []*PluginServiceError `protobuf:"bytes,10,rep,name=service_errors,json=serviceErrors,proto3" json:"service_errors,omitempty"`
	// Network compute services which failed independent of a particular data id.
	// For example, if a worker times out or crashes, it could be reported here.
	NetworkComputeErrors []*NetworkComputeError `protobuf:"bytes,11,rep,name=network_compute_errors,json=networkComputeErrors,proto3" json:"network_compute_errors,omitempty"`
}

func (x *GetStatusResponse) Reset() {
	*x = GetStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatusResponse) ProtoMessage() {}

func (x *GetStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatusResponse.ProtoReflect.Descriptor instead.
func (*GetStatusResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{21}
}

func (x *GetStatusResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetStatusResponse) GetStatus() GetStatusResponse_Status {
	if x != nil {
		return x.Status
	}
	return GetStatusResponse_STATUS_UNKNOWN
}

func (x *GetStatusResponse) GetDataSaved() []*DataIdentifier {
	if x != nil {
		return x.DataSaved
	}
	return nil
}

func (x *GetStatusResponse) GetDataErrors() []*DataError {
	if x != nil {
		return x.DataErrors
	}
	return nil
}

func (x *GetStatusResponse) GetServiceErrors() []*PluginServiceError {
	if x != nil {
		return x.ServiceErrors
	}
	return nil
}

func (x *GetStatusResponse) GetNetworkComputeErrors() []*NetworkComputeError {
	if x != nil {
		return x.NetworkComputeErrors
	}
	return nil
}

type GetServiceInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetServiceInfoRequest) Reset() {
	*x = GetServiceInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceInfoRequest) ProtoMessage() {}

func (x *GetServiceInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceInfoRequest.ProtoReflect.Descriptor instead.
func (*GetServiceInfoRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{22}
}

func (x *GetServiceInfoRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetServiceInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// List of capabilities that the data acquisition (plugin) service can
	// collect and save data for.
	Capabilities *AcquisitionCapabilityList `protobuf:"bytes,2,opt,name=capabilities,proto3" json:"capabilities,omitempty"`
}

func (x *GetServiceInfoResponse) Reset() {
	*x = GetServiceInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceInfoResponse) ProtoMessage() {}

func (x *GetServiceInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceInfoResponse.ProtoReflect.Descriptor instead.
func (*GetServiceInfoResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{23}
}

func (x *GetServiceInfoResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetServiceInfoResponse) GetCapabilities() *AcquisitionCapabilityList {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type CancelAcquisitionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Which acquisition request to cancel.
	RequestId uint32 `protobuf:"varint,2,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (x *CancelAcquisitionRequest) Reset() {
	*x = CancelAcquisitionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAcquisitionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAcquisitionRequest) ProtoMessage() {}

func (x *CancelAcquisitionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAcquisitionRequest.ProtoReflect.Descriptor instead.
func (*CancelAcquisitionRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{24}
}

func (x *CancelAcquisitionRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CancelAcquisitionRequest) GetRequestId() uint32 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

type CancelAcquisitionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The status of the Cancellation RPC. Further monitoring on the success of the cancellation
	// request can be done using the GetStatus RPC.
	Status CancelAcquisitionResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.CancelAcquisitionResponse_Status" json:"status,omitempty"`
}

func (x *CancelAcquisitionResponse) Reset() {
	*x = CancelAcquisitionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelAcquisitionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelAcquisitionResponse) ProtoMessage() {}

func (x *CancelAcquisitionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_acquisition_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelAcquisitionResponse.ProtoReflect.Descriptor instead.
func (*CancelAcquisitionResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_acquisition_proto_rawDescGZIP(), []int{25}
}

func (x *CancelAcquisitionResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CancelAcquisitionResponse) GetStatus() CancelAcquisitionResponse_Status {
	if x != nil {
		return x.Status
	}
	return CancelAcquisitionResponse_STATUS_UNKNOWN
}

var File_bosdyn_api_data_acquisition_proto protoreflect.FileDescriptor

var file_bosdyn_api_data_acquisition_proto_rawDesc = []byte{
	0x0a, 0x21, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a,
	0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72,
	0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x27, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x01, 0x0a,
	0x19, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x1a, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0xca, 0x01, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x12, 0x2f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x22, 0x90, 0x02, 0x0a, 0x19, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x48, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0b, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x0d, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x17, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x15, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x81, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61,
	0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x85, 0x01, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x01, 0x0a, 0x13, 0x41, 0x73, 0x73, 0x6f,
	0x63, 0x69, 0x61, 0x74, 0x65, 0x64, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x34,
	0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x9e, 0x01, 0x0a, 0x12, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x5f, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x69, 0x78,
	0x65, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0b, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x21, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70,
	0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xfa, 0x01, 0x0a, 0x16, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0d, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0c, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x18, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x63, 0x61,
	0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x33, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x83, 0x02, 0x0a, 0x12, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x70, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x45,
	0x54, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xdb, 0x02, 0x0a, 0x13, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x56, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6e, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45,
	0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xc6, 0x02, 0x0a, 0x12, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x55,
	0x0a, 0x14, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x13, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0xf6, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22, 0x4c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x43, 0x41, 0x50, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x22, 0xc5, 0x02, 0x0a, 0x18, 0x41,
	0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x55, 0x0a, 0x14, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x13, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0xc9, 0x02, 0x0a, 0x19, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x22, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x43, 0x41, 0x50, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x22, 0x64,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x22, 0xc7, 0x05, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x64, 0x61,
	0x74, 0x61, 0x53, 0x61, 0x76, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xae, 0x02,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x52, 0x49, 0x4e, 0x47,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x41, 0x56,
	0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x50,
	0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x44, 0x4f, 0x55, 0x54, 0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x5f, 0x41, 0x43, 0x51, 0x55, 0x49, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x1e, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f,
	0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x14, 0x22, 0x4a,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x0c, 0x63, 0x61, 0x70,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x18, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63,
	0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x22, 0x85, 0x02, 0x0a, 0x19, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x71,
	0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x6e, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x41, 0x4e, 0x43,
	0x45, 0x4c, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x03, 0x42, 0x49, 0x42, 0x14, 0x44, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_data_acquisition_proto_rawDescOnce sync.Once
	file_bosdyn_api_data_acquisition_proto_rawDescData = file_bosdyn_api_data_acquisition_proto_rawDesc
)

func file_bosdyn_api_data_acquisition_proto_rawDescGZIP() []byte {
	file_bosdyn_api_data_acquisition_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_data_acquisition_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_data_acquisition_proto_rawDescData)
	})
	return file_bosdyn_api_data_acquisition_proto_rawDescData
}

var file_bosdyn_api_data_acquisition_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_bosdyn_api_data_acquisition_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_bosdyn_api_data_acquisition_proto_goTypes = []interface{}{
	(PluginServiceError_ErrorCode)(0),         // 0: bosdyn.api.PluginServiceError.ErrorCode
	(NetworkComputeError_ErrorCode)(0),        // 1: bosdyn.api.NetworkComputeError.ErrorCode
	(AcquireDataResponse_Status)(0),           // 2: bosdyn.api.AcquireDataResponse.Status
	(AcquirePluginDataResponse_Status)(0),     // 3: bosdyn.api.AcquirePluginDataResponse.Status
	(GetStatusResponse_Status)(0),             // 4: bosdyn.api.GetStatusResponse.Status
	(CancelAcquisitionResponse_Status)(0),     // 5: bosdyn.api.CancelAcquisitionResponse.Status
	(*DataAcquisitionCapability)(nil),         // 6: bosdyn.api.DataAcquisitionCapability
	(*ImageAcquisitionCapability)(nil),        // 7: bosdyn.api.ImageAcquisitionCapability
	(*NetworkComputeCapability)(nil),          // 8: bosdyn.api.NetworkComputeCapability
	(*AcquisitionCapabilityList)(nil),         // 9: bosdyn.api.AcquisitionCapabilityList
	(*CaptureActionId)(nil),                   // 10: bosdyn.api.CaptureActionId
	(*DataIdentifier)(nil),                    // 11: bosdyn.api.DataIdentifier
	(*Metadata)(nil),                          // 12: bosdyn.api.Metadata
	(*AssociatedMetadata)(nil),                // 13: bosdyn.api.AssociatedMetadata
	(*AssociatedAlertData)(nil),               // 14: bosdyn.api.AssociatedAlertData
	(*ImageSourceCapture)(nil),                // 15: bosdyn.api.ImageSourceCapture
	(*DataCapture)(nil),                       // 16: bosdyn.api.DataCapture
	(*NetworkComputeCapture)(nil),             // 17: bosdyn.api.NetworkComputeCapture
	(*AcquisitionRequestList)(nil),            // 18: bosdyn.api.AcquisitionRequestList
	(*DataError)(nil),                         // 19: bosdyn.api.DataError
	(*PluginServiceError)(nil),                // 20: bosdyn.api.PluginServiceError
	(*NetworkComputeError)(nil),               // 21: bosdyn.api.NetworkComputeError
	(*AcquireDataRequest)(nil),                // 22: bosdyn.api.AcquireDataRequest
	(*AcquireDataResponse)(nil),               // 23: bosdyn.api.AcquireDataResponse
	(*AcquirePluginDataRequest)(nil),          // 24: bosdyn.api.AcquirePluginDataRequest
	(*AcquirePluginDataResponse)(nil),         // 25: bosdyn.api.AcquirePluginDataResponse
	(*GetStatusRequest)(nil),                  // 26: bosdyn.api.GetStatusRequest
	(*GetStatusResponse)(nil),                 // 27: bosdyn.api.GetStatusResponse
	(*GetServiceInfoRequest)(nil),             // 28: bosdyn.api.GetServiceInfoRequest
	(*GetServiceInfoResponse)(nil),            // 29: bosdyn.api.GetServiceInfoResponse
	(*CancelAcquisitionRequest)(nil),          // 30: bosdyn.api.CancelAcquisitionRequest
	(*CancelAcquisitionResponse)(nil),         // 31: bosdyn.api.CancelAcquisitionResponse
	(*ImageSource)(nil),                       // 32: bosdyn.api.ImageSource
	(*NetworkComputeServerConfiguration)(nil), // 33: bosdyn.api.NetworkComputeServerConfiguration
	(*ModelLabels)(nil),                       // 34: bosdyn.api.ModelLabels
	(*timestamppb.Timestamp)(nil),             // 35: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                   // 36: google.protobuf.Struct
	(*AlertData)(nil),                         // 37: bosdyn.api.AlertData
	(Image_PixelFormat)(0),                    // 38: bosdyn.api.Image.PixelFormat
	(*NetworkComputeInputData)(nil),           // 39: bosdyn.api.NetworkComputeInputData
	(*anypb.Any)(nil),                         // 40: google.protobuf.Any
	(NetworkComputeStatus)(0),                 // 41: bosdyn.api.NetworkComputeStatus
	(*RequestHeader)(nil),                     // 42: bosdyn.api.RequestHeader
	(*durationpb.Duration)(nil),               // 43: google.protobuf.Duration
	(*ResponseHeader)(nil),                    // 44: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_data_acquisition_proto_depIdxs = []int32{
	32, // 0: bosdyn.api.ImageAcquisitionCapability.image_sources:type_name -> bosdyn.api.ImageSource
	33, // 1: bosdyn.api.NetworkComputeCapability.server_config:type_name -> bosdyn.api.NetworkComputeServerConfiguration
	34, // 2: bosdyn.api.NetworkComputeCapability.labels:type_name -> bosdyn.api.ModelLabels
	6,  // 3: bosdyn.api.AcquisitionCapabilityList.data_sources:type_name -> bosdyn.api.DataAcquisitionCapability
	7,  // 4: bosdyn.api.AcquisitionCapabilityList.image_sources:type_name -> bosdyn.api.ImageAcquisitionCapability
	8,  // 5: bosdyn.api.AcquisitionCapabilityList.network_compute_sources:type_name -> bosdyn.api.NetworkComputeCapability
	35, // 6: bosdyn.api.CaptureActionId.timestamp:type_name -> google.protobuf.Timestamp
	10, // 7: bosdyn.api.DataIdentifier.action_id:type_name -> bosdyn.api.CaptureActionId
	36, // 8: bosdyn.api.Metadata.data:type_name -> google.protobuf.Struct
	11, // 9: bosdyn.api.AssociatedMetadata.reference_id:type_name -> bosdyn.api.DataIdentifier
	12, // 10: bosdyn.api.AssociatedMetadata.metadata:type_name -> bosdyn.api.Metadata
	11, // 11: bosdyn.api.AssociatedAlertData.reference_id:type_name -> bosdyn.api.DataIdentifier
	37, // 12: bosdyn.api.AssociatedAlertData.alert_data:type_name -> bosdyn.api.AlertData
	38, // 13: bosdyn.api.ImageSourceCapture.pixel_format:type_name -> bosdyn.api.Image.PixelFormat
	39, // 14: bosdyn.api.NetworkComputeCapture.input_data:type_name -> bosdyn.api.NetworkComputeInputData
	33, // 15: bosdyn.api.NetworkComputeCapture.server_config:type_name -> bosdyn.api.NetworkComputeServerConfiguration
	15, // 16: bosdyn.api.AcquisitionRequestList.image_captures:type_name -> bosdyn.api.ImageSourceCapture
	16, // 17: bosdyn.api.AcquisitionRequestList.data_captures:type_name -> bosdyn.api.DataCapture
	17, // 18: bosdyn.api.AcquisitionRequestList.network_compute_captures:type_name -> bosdyn.api.NetworkComputeCapture
	11, // 19: bosdyn.api.DataError.data_id:type_name -> bosdyn.api.DataIdentifier
	40, // 20: bosdyn.api.DataError.error_data:type_name -> google.protobuf.Any
	0,  // 21: bosdyn.api.PluginServiceError.error:type_name -> bosdyn.api.PluginServiceError.ErrorCode
	1,  // 22: bosdyn.api.NetworkComputeError.error:type_name -> bosdyn.api.NetworkComputeError.ErrorCode
	41, // 23: bosdyn.api.NetworkComputeError.network_compute_status:type_name -> bosdyn.api.NetworkComputeStatus
	42, // 24: bosdyn.api.AcquireDataRequest.header:type_name -> bosdyn.api.RequestHeader
	10, // 25: bosdyn.api.AcquireDataRequest.action_id:type_name -> bosdyn.api.CaptureActionId
	12, // 26: bosdyn.api.AcquireDataRequest.metadata:type_name -> bosdyn.api.Metadata
	18, // 27: bosdyn.api.AcquireDataRequest.acquisition_requests:type_name -> bosdyn.api.AcquisitionRequestList
	43, // 28: bosdyn.api.AcquireDataRequest.min_timeout:type_name -> google.protobuf.Duration
	44, // 29: bosdyn.api.AcquireDataResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 30: bosdyn.api.AcquireDataResponse.status:type_name -> bosdyn.api.AcquireDataResponse.Status
	42, // 31: bosdyn.api.AcquirePluginDataRequest.header:type_name -> bosdyn.api.RequestHeader
	11, // 32: bosdyn.api.AcquirePluginDataRequest.data_id:type_name -> bosdyn.api.DataIdentifier
	12, // 33: bosdyn.api.AcquirePluginDataRequest.metadata:type_name -> bosdyn.api.Metadata
	10, // 34: bosdyn.api.AcquirePluginDataRequest.action_id:type_name -> bosdyn.api.CaptureActionId
	18, // 35: bosdyn.api.AcquirePluginDataRequest.acquisition_requests:type_name -> bosdyn.api.AcquisitionRequestList
	44, // 36: bosdyn.api.AcquirePluginDataResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 37: bosdyn.api.AcquirePluginDataResponse.status:type_name -> bosdyn.api.AcquirePluginDataResponse.Status
	35, // 38: bosdyn.api.AcquirePluginDataResponse.timeout_deadline:type_name -> google.protobuf.Timestamp
	42, // 39: bosdyn.api.GetStatusRequest.header:type_name -> bosdyn.api.RequestHeader
	44, // 40: bosdyn.api.GetStatusResponse.header:type_name -> bosdyn.api.ResponseHeader
	4,  // 41: bosdyn.api.GetStatusResponse.status:type_name -> bosdyn.api.GetStatusResponse.Status
	11, // 42: bosdyn.api.GetStatusResponse.data_saved:type_name -> bosdyn.api.DataIdentifier
	19, // 43: bosdyn.api.GetStatusResponse.data_errors:type_name -> bosdyn.api.DataError
	20, // 44: bosdyn.api.GetStatusResponse.service_errors:type_name -> bosdyn.api.PluginServiceError
	21, // 45: bosdyn.api.GetStatusResponse.network_compute_errors:type_name -> bosdyn.api.NetworkComputeError
	42, // 46: bosdyn.api.GetServiceInfoRequest.header:type_name -> bosdyn.api.RequestHeader
	44, // 47: bosdyn.api.GetServiceInfoResponse.header:type_name -> bosdyn.api.ResponseHeader
	9,  // 48: bosdyn.api.GetServiceInfoResponse.capabilities:type_name -> bosdyn.api.AcquisitionCapabilityList
	42, // 49: bosdyn.api.CancelAcquisitionRequest.header:type_name -> bosdyn.api.RequestHeader
	44, // 50: bosdyn.api.CancelAcquisitionResponse.header:type_name -> bosdyn.api.ResponseHeader
	5,  // 51: bosdyn.api.CancelAcquisitionResponse.status:type_name -> bosdyn.api.CancelAcquisitionResponse.Status
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_bosdyn_api_data_acquisition_proto_init() }
func file_bosdyn_api_data_acquisition_proto_init() {
	if File_bosdyn_api_data_acquisition_proto != nil {
		return
	}
	file_bosdyn_api_alerts_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_image_proto_init()
	file_bosdyn_api_network_compute_bridge_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_data_acquisition_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataAcquisitionCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageAcquisitionCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkComputeCapability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionCapabilityList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaptureActionId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociatedMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssociatedAlertData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSourceCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkComputeCapture); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquisitionRequestList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginServiceError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkComputeError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquirePluginDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquirePluginDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAcquisitionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_acquisition_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancelAcquisitionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_data_acquisition_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_data_acquisition_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_data_acquisition_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_data_acquisition_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_data_acquisition_proto_msgTypes,
	}.Build()
	File_bosdyn_api_data_acquisition_proto = out.File
	file_bosdyn_api_data_acquisition_proto_rawDesc = nil
	file_bosdyn_api_data_acquisition_proto_goTypes = nil
	file_bosdyn_api_data_acquisition_proto_depIdxs = nil
}
