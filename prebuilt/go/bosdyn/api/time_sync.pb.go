// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/time_sync.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TimeSyncState_Status int32

const (
	// Invalid, do not use.
	TimeSyncState_STATUS_UNKNOWN TimeSyncState_Status = 0
	// Clock skew is available.
	TimeSyncState_STATUS_OK TimeSyncState_Status = 1
	// More updates are required to establish a synchronization estimate.
	TimeSyncState_STATUS_MORE_SAMPLES_NEEDED TimeSyncState_Status = 2
	// Server still establishing time sync internally.
	TimeSyncState_STATUS_SERVICE_NOT_READY TimeSyncState_Status = 3
)

// Enum value maps for TimeSyncState_Status.
var (
	TimeSyncState_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_MORE_SAMPLES_NEEDED",
		3: "STATUS_SERVICE_NOT_READY",
	}
	TimeSyncState_Status_value = map[string]int32{
		"STATUS_UNKNOWN":             0,
		"STATUS_OK":                  1,
		"STATUS_MORE_SAMPLES_NEEDED": 2,
		"STATUS_SERVICE_NOT_READY":   3,
	}
)

func (x TimeSyncState_Status) Enum() *TimeSyncState_Status {
	p := new(TimeSyncState_Status)
	*p = x
	return p
}

func (x TimeSyncState_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeSyncState_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_time_sync_proto_enumTypes[0].Descriptor()
}

func (TimeSyncState_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_time_sync_proto_enumTypes[0]
}

func (x TimeSyncState_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeSyncState_Status.Descriptor instead.
func (TimeSyncState_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_time_sync_proto_rawDescGZIP(), []int{2, 0}
}

// Timestamp information from a full GRPC call round-trip.
// These are used to estimate the round-trip communication time and difference between
// client and server clocks.
type TimeSyncRoundTrip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Client system time when the message was sent, if not zero.
	ClientTx *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=client_tx,json=clientTx,proto3" json:"client_tx,omitempty"`
	// Server system time when the message was received, if not zero.
	ServerRx *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=server_rx,json=serverRx,proto3" json:"server_rx,omitempty"`
	// Server system time when the response was sent, if not zero.
	ServerTx *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=server_tx,json=serverTx,proto3" json:"server_tx,omitempty"`
	// Client time when the response was received, if not zero.
	ClientRx *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=client_rx,json=clientRx,proto3" json:"client_rx,omitempty"`
}

func (x *TimeSyncRoundTrip) Reset() {
	*x = TimeSyncRoundTrip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_time_sync_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSyncRoundTrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSyncRoundTrip) ProtoMessage() {}

func (x *TimeSyncRoundTrip) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_time_sync_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSyncRoundTrip.ProtoReflect.Descriptor instead.
func (*TimeSyncRoundTrip) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_time_sync_proto_rawDescGZIP(), []int{0}
}

func (x *TimeSyncRoundTrip) GetClientTx() *timestamppb.Timestamp {
	if x != nil {
		return x.ClientTx
	}
	return nil
}

func (x *TimeSyncRoundTrip) GetServerRx() *timestamppb.Timestamp {
	if x != nil {
		return x.ServerRx
	}
	return nil
}

func (x *TimeSyncRoundTrip) GetServerTx() *timestamppb.Timestamp {
	if x != nil {
		return x.ServerTx
	}
	return nil
}

func (x *TimeSyncRoundTrip) GetClientRx() *timestamppb.Timestamp {
	if x != nil {
		return x.ClientRx
	}
	return nil
}

// Estimate of network speed and clock skew.  Both for the last
// complete sample and a recent average.  Populated by the server.
type TimeSyncEstimate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Observed network delay (excludes processing between server_rx and server_tx).
	// If zero, this estimate is unpopulated.
	RoundTripTime *durationpb.Duration `protobuf:"bytes,1,opt,name=round_trip_time,json=roundTripTime,proto3" json:"round_trip_time,omitempty"`
	// Add the skew to the client system clock to get the server clock.
	ClockSkew *durationpb.Duration `protobuf:"bytes,2,opt,name=clock_skew,json=clockSkew,proto3" json:"clock_skew,omitempty"`
}

func (x *TimeSyncEstimate) Reset() {
	*x = TimeSyncEstimate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_time_sync_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSyncEstimate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSyncEstimate) ProtoMessage() {}

func (x *TimeSyncEstimate) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_time_sync_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSyncEstimate.ProtoReflect.Descriptor instead.
func (*TimeSyncEstimate) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_time_sync_proto_rawDescGZIP(), []int{1}
}

func (x *TimeSyncEstimate) GetRoundTripTime() *durationpb.Duration {
	if x != nil {
		return x.RoundTripTime
	}
	return nil
}

func (x *TimeSyncEstimate) GetClockSkew() *durationpb.Duration {
	if x != nil {
		return x.ClockSkew
	}
	return nil
}

// Current best estimate status of time sync.
type TimeSyncState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Best clock synchronization estimate currently available, if any.
	BestEstimate *TimeSyncEstimate `protobuf:"bytes,1,opt,name=best_estimate,json=bestEstimate,proto3" json:"best_estimate,omitempty"`
	// STATUS_OK once time sync is established.
	Status TimeSyncState_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.TimeSyncState_Status" json:"status,omitempty"`
	// Time of best estimate, in server time.
	MeasurementTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=measurement_time,json=measurementTime,proto3" json:"measurement_time,omitempty"`
}

func (x *TimeSyncState) Reset() {
	*x = TimeSyncState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_time_sync_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSyncState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSyncState) ProtoMessage() {}

func (x *TimeSyncState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_time_sync_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSyncState.ProtoReflect.Descriptor instead.
func (*TimeSyncState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_time_sync_proto_rawDescGZIP(), []int{2}
}

func (x *TimeSyncState) GetBestEstimate() *TimeSyncEstimate {
	if x != nil {
		return x.BestEstimate
	}
	return nil
}

func (x *TimeSyncState) GetStatus() TimeSyncState_Status {
	if x != nil {
		return x.Status
	}
	return TimeSyncState_STATUS_UNKNOWN
}

func (x *TimeSyncState) GetMeasurementTime() *timestamppb.Timestamp {
	if x != nil {
		return x.MeasurementTime
	}
	return nil
}

// Request message for a time-sync Update RPC.
type TimeSyncUpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Round-trip timing information from the previous Update request.
	PreviousRoundTrip *TimeSyncRoundTrip `protobuf:"bytes,2,opt,name=previous_round_trip,json=previousRoundTrip,proto3" json:"previous_round_trip,omitempty"`
	// Identifier to verify time sync between robot and client. If unset, server will assign
	// one to client.
	ClockIdentifier string `protobuf:"bytes,3,opt,name=clock_identifier,json=clockIdentifier,proto3" json:"clock_identifier,omitempty"`
}

func (x *TimeSyncUpdateRequest) Reset() {
	*x = TimeSyncUpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_time_sync_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSyncUpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSyncUpdateRequest) ProtoMessage() {}

func (x *TimeSyncUpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_time_sync_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSyncUpdateRequest.ProtoReflect.Descriptor instead.
func (*TimeSyncUpdateRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_time_sync_proto_rawDescGZIP(), []int{3}
}

func (x *TimeSyncUpdateRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TimeSyncUpdateRequest) GetPreviousRoundTrip() *TimeSyncRoundTrip {
	if x != nil {
		return x.PreviousRoundTrip
	}
	return nil
}

func (x *TimeSyncUpdateRequest) GetClockIdentifier() string {
	if x != nil {
		return x.ClockIdentifier
	}
	return ""
}

// Request message for a time-sync Update RPC.
type TimeSyncUpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Clock synchronization estimate from the previous RPC round-trip, if available.
	PreviousEstimate *TimeSyncEstimate `protobuf:"bytes,2,opt,name=previous_estimate,json=previousEstimate,proto3" json:"previous_estimate,omitempty"`
	// Current best clock synchronization estimate according to server.
	State *TimeSyncState `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	// Identifier to verify time sync between robot and client. Assigned upon first Request and
	// echoed with each subsequent request.
	ClockIdentifier string `protobuf:"bytes,4,opt,name=clock_identifier,json=clockIdentifier,proto3" json:"clock_identifier,omitempty"`
}

func (x *TimeSyncUpdateResponse) Reset() {
	*x = TimeSyncUpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_time_sync_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeSyncUpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeSyncUpdateResponse) ProtoMessage() {}

func (x *TimeSyncUpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_time_sync_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeSyncUpdateResponse.ProtoReflect.Descriptor instead.
func (*TimeSyncUpdateResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_time_sync_proto_rawDescGZIP(), []int{4}
}

func (x *TimeSyncUpdateResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TimeSyncUpdateResponse) GetPreviousEstimate() *TimeSyncEstimate {
	if x != nil {
		return x.PreviousEstimate
	}
	return nil
}

func (x *TimeSyncUpdateResponse) GetState() *TimeSyncState {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *TimeSyncUpdateResponse) GetClockIdentifier() string {
	if x != nil {
		return x.ClockIdentifier
	}
	return ""
}

var File_bosdyn_api_time_sync_proto protoreflect.FileDescriptor

var file_bosdyn_api_time_sync_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54,
	0x78, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x78, 0x12, 0x37, 0x0a, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x54, 0x78, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x78,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x78, 0x22, 0x8f, 0x01, 0x0a,
	0x10, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x72, 0x69, 0x70, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6b,
	0x65, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x6b, 0x65, 0x77, 0x22, 0xbe,
	0x02, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x41, 0x0a, 0x0d, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x73, 0x74,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x62, 0x65, 0x73, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x10, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x4f, 0x52, 0x45,
	0x5f, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x53, 0x5f, 0x4e, 0x45, 0x45, 0x44, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x03, 0x22,
	0xc4, 0x01, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x13,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74,
	0x72, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x52, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f,
	0x75, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x54, 0x72, 0x69, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x22, 0xf3, 0x01, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x12, 0x2f, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x53, 0x79, 0x6e, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f,
	0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x42, 0x42, 0x42, 0x0d,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_time_sync_proto_rawDescOnce sync.Once
	file_bosdyn_api_time_sync_proto_rawDescData = file_bosdyn_api_time_sync_proto_rawDesc
)

func file_bosdyn_api_time_sync_proto_rawDescGZIP() []byte {
	file_bosdyn_api_time_sync_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_time_sync_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_time_sync_proto_rawDescData)
	})
	return file_bosdyn_api_time_sync_proto_rawDescData
}

var file_bosdyn_api_time_sync_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_time_sync_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bosdyn_api_time_sync_proto_goTypes = []interface{}{
	(TimeSyncState_Status)(0),      // 0: bosdyn.api.TimeSyncState.Status
	(*TimeSyncRoundTrip)(nil),      // 1: bosdyn.api.TimeSyncRoundTrip
	(*TimeSyncEstimate)(nil),       // 2: bosdyn.api.TimeSyncEstimate
	(*TimeSyncState)(nil),          // 3: bosdyn.api.TimeSyncState
	(*TimeSyncUpdateRequest)(nil),  // 4: bosdyn.api.TimeSyncUpdateRequest
	(*TimeSyncUpdateResponse)(nil), // 5: bosdyn.api.TimeSyncUpdateResponse
	(*timestamppb.Timestamp)(nil),  // 6: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),    // 7: google.protobuf.Duration
	(*RequestHeader)(nil),          // 8: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),         // 9: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_time_sync_proto_depIdxs = []int32{
	6,  // 0: bosdyn.api.TimeSyncRoundTrip.client_tx:type_name -> google.protobuf.Timestamp
	6,  // 1: bosdyn.api.TimeSyncRoundTrip.server_rx:type_name -> google.protobuf.Timestamp
	6,  // 2: bosdyn.api.TimeSyncRoundTrip.server_tx:type_name -> google.protobuf.Timestamp
	6,  // 3: bosdyn.api.TimeSyncRoundTrip.client_rx:type_name -> google.protobuf.Timestamp
	7,  // 4: bosdyn.api.TimeSyncEstimate.round_trip_time:type_name -> google.protobuf.Duration
	7,  // 5: bosdyn.api.TimeSyncEstimate.clock_skew:type_name -> google.protobuf.Duration
	2,  // 6: bosdyn.api.TimeSyncState.best_estimate:type_name -> bosdyn.api.TimeSyncEstimate
	0,  // 7: bosdyn.api.TimeSyncState.status:type_name -> bosdyn.api.TimeSyncState.Status
	6,  // 8: bosdyn.api.TimeSyncState.measurement_time:type_name -> google.protobuf.Timestamp
	8,  // 9: bosdyn.api.TimeSyncUpdateRequest.header:type_name -> bosdyn.api.RequestHeader
	1,  // 10: bosdyn.api.TimeSyncUpdateRequest.previous_round_trip:type_name -> bosdyn.api.TimeSyncRoundTrip
	9,  // 11: bosdyn.api.TimeSyncUpdateResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 12: bosdyn.api.TimeSyncUpdateResponse.previous_estimate:type_name -> bosdyn.api.TimeSyncEstimate
	3,  // 13: bosdyn.api.TimeSyncUpdateResponse.state:type_name -> bosdyn.api.TimeSyncState
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_bosdyn_api_time_sync_proto_init() }
func file_bosdyn_api_time_sync_proto_init() {
	if File_bosdyn_api_time_sync_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_time_sync_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSyncRoundTrip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_time_sync_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSyncEstimate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_time_sync_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSyncState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_time_sync_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSyncUpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_time_sync_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeSyncUpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_time_sync_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_time_sync_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_time_sync_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_time_sync_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_time_sync_proto_msgTypes,
	}.Build()
	File_bosdyn_api_time_sync_proto = out.File
	file_bosdyn_api_time_sync_proto_rawDesc = nil
	file_bosdyn_api_time_sync_proto_goTypes = nil
	file_bosdyn_api_time_sync_proto_depIdxs = nil
}
