// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/gripper_camera_param.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// High dynamic range (HDR) modes available. HDR sets the camera to take multiple frames to
// get exposure in a large range.  HDR will reduce framerate in high-framerate modes.
type HdrParameters int32

const (
	HdrParameters_HDR_UNKNOWN  HdrParameters = 0 // (or not set): will not change HDR settings.
	HdrParameters_HDR_OFF      HdrParameters = 1 // HDR disabled
	HdrParameters_HDR_AUTO     HdrParameters = 2 // Camera's on-board processor determines how much HDR is needed
	HdrParameters_HDR_MANUAL_1 HdrParameters = 3 // Manual HDR enabled (minimum)
	HdrParameters_HDR_MANUAL_2 HdrParameters = 4 //
	HdrParameters_HDR_MANUAL_3 HdrParameters = 5 //
	HdrParameters_HDR_MANUAL_4 HdrParameters = 6 // Manual HDR enabled (maximum)
)

// Enum value maps for HdrParameters.
var (
	HdrParameters_name = map[int32]string{
		0: "HDR_UNKNOWN",
		1: "HDR_OFF",
		2: "HDR_AUTO",
		3: "HDR_MANUAL_1",
		4: "HDR_MANUAL_2",
		5: "HDR_MANUAL_3",
		6: "HDR_MANUAL_4",
	}
	HdrParameters_value = map[string]int32{
		"HDR_UNKNOWN":  0,
		"HDR_OFF":      1,
		"HDR_AUTO":     2,
		"HDR_MANUAL_1": 3,
		"HDR_MANUAL_2": 4,
		"HDR_MANUAL_3": 5,
		"HDR_MANUAL_4": 6,
	}
)

func (x HdrParameters) Enum() *HdrParameters {
	p := new(HdrParameters)
	*p = x
	return p
}

func (x HdrParameters) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HdrParameters) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_gripper_camera_param_proto_enumTypes[0].Descriptor()
}

func (HdrParameters) Type() protoreflect.EnumType {
	return &file_bosdyn_api_gripper_camera_param_proto_enumTypes[0]
}

func (x HdrParameters) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HdrParameters.Descriptor instead.
func (HdrParameters) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{0}
}

type GripperCameraParams_CameraMode int32

const (
	// MODE_UNKNOWN should not be used.
	GripperCameraParams_MODE_UNKNOWN GripperCameraParams_CameraMode = 0
	// 1280x720 pixels at 60 frames per second in UYVY format
	GripperCameraParams_MODE_1280_720_60FPS_UYVY GripperCameraParams_CameraMode = 1
	// 640x480 pixels at 120 frames per second in UYVY format
	// Warning: this frame rate may not be achievable with long exposure times.
	GripperCameraParams_MODE_640_480_120FPS_UYVY GripperCameraParams_CameraMode = 11
	// 1920x1080 pixels at 60 frames per second in Motion JPG format
	GripperCameraParams_MODE_1920_1080_60FPS_MJPG GripperCameraParams_CameraMode = 14
	// 3840x2160 pixels at 30 frames per second in Motion JPG format
	GripperCameraParams_MODE_3840_2160_30FPS_MJPG GripperCameraParams_CameraMode = 15
	// 4208x3120 pixels at 20 frames per second in Motion JPG format
	GripperCameraParams_MODE_4208_3120_20FPS_MJPG GripperCameraParams_CameraMode = 16
	// 4096x2160 pixels at 30 frames per second in Motion JPG format
	GripperCameraParams_MODE_4096_2160_30FPS_MJPG GripperCameraParams_CameraMode = 17
)

// Enum value maps for GripperCameraParams_CameraMode.
var (
	GripperCameraParams_CameraMode_name = map[int32]string{
		0:  "MODE_UNKNOWN",
		1:  "MODE_1280_720_60FPS_UYVY",
		11: "MODE_640_480_120FPS_UYVY",
		14: "MODE_1920_1080_60FPS_MJPG",
		15: "MODE_3840_2160_30FPS_MJPG",
		16: "MODE_4208_3120_20FPS_MJPG",
		17: "MODE_4096_2160_30FPS_MJPG",
	}
	GripperCameraParams_CameraMode_value = map[string]int32{
		"MODE_UNKNOWN":              0,
		"MODE_1280_720_60FPS_UYVY":  1,
		"MODE_640_480_120FPS_UYVY":  11,
		"MODE_1920_1080_60FPS_MJPG": 14,
		"MODE_3840_2160_30FPS_MJPG": 15,
		"MODE_4208_3120_20FPS_MJPG": 16,
		"MODE_4096_2160_30FPS_MJPG": 17,
	}
)

func (x GripperCameraParams_CameraMode) Enum() *GripperCameraParams_CameraMode {
	p := new(GripperCameraParams_CameraMode)
	*p = x
	return p
}

func (x GripperCameraParams_CameraMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GripperCameraParams_CameraMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_gripper_camera_param_proto_enumTypes[1].Descriptor()
}

func (GripperCameraParams_CameraMode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_gripper_camera_param_proto_enumTypes[1]
}

func (x GripperCameraParams_CameraMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GripperCameraParams_CameraMode.Descriptor instead.
func (GripperCameraParams_CameraMode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{4, 0}
}

type GripperCameraParams_LedMode int32

const (
	// LED_MODE_UNKNOWN should not be used.
	GripperCameraParams_LED_MODE_UNKNOWN GripperCameraParams_LedMode = 0
	// Off
	GripperCameraParams_LED_MODE_OFF GripperCameraParams_LedMode = 1
	// Constantly on. Brightness level can be set in the led_torch_brightness field.
	GripperCameraParams_LED_MODE_TORCH GripperCameraParams_LedMode = 2
)

// Enum value maps for GripperCameraParams_LedMode.
var (
	GripperCameraParams_LedMode_name = map[int32]string{
		0: "LED_MODE_UNKNOWN",
		1: "LED_MODE_OFF",
		2: "LED_MODE_TORCH",
	}
	GripperCameraParams_LedMode_value = map[string]int32{
		"LED_MODE_UNKNOWN": 0,
		"LED_MODE_OFF":     1,
		"LED_MODE_TORCH":   2,
	}
)

func (x GripperCameraParams_LedMode) Enum() *GripperCameraParams_LedMode {
	p := new(GripperCameraParams_LedMode)
	*p = x
	return p
}

func (x GripperCameraParams_LedMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GripperCameraParams_LedMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_gripper_camera_param_proto_enumTypes[2].Descriptor()
}

func (GripperCameraParams_LedMode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_gripper_camera_param_proto_enumTypes[2]
}

func (x GripperCameraParams_LedMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GripperCameraParams_LedMode.Descriptor instead.
func (GripperCameraParams_LedMode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{4, 1}
}

type RoiParameters_RoiWindowSize int32

const (
	// ROI window size, 1 is the smallest, 8 is the largest.
	RoiParameters_ROI_WINDOW_SIZE_UNKNOWN RoiParameters_RoiWindowSize = 0
	RoiParameters_ROI_WINDOW_SIZE_1       RoiParameters_RoiWindowSize = 1
	RoiParameters_ROI_WINDOW_SIZE_2       RoiParameters_RoiWindowSize = 2
	RoiParameters_ROI_WINDOW_SIZE_3       RoiParameters_RoiWindowSize = 3
	RoiParameters_ROI_WINDOW_SIZE_4       RoiParameters_RoiWindowSize = 4
	RoiParameters_ROI_WINDOW_SIZE_5       RoiParameters_RoiWindowSize = 5
	RoiParameters_ROI_WINDOW_SIZE_6       RoiParameters_RoiWindowSize = 6
	RoiParameters_ROI_WINDOW_SIZE_7       RoiParameters_RoiWindowSize = 7
	RoiParameters_ROI_WINDOW_SIZE_8       RoiParameters_RoiWindowSize = 8
)

// Enum value maps for RoiParameters_RoiWindowSize.
var (
	RoiParameters_RoiWindowSize_name = map[int32]string{
		0: "ROI_WINDOW_SIZE_UNKNOWN",
		1: "ROI_WINDOW_SIZE_1",
		2: "ROI_WINDOW_SIZE_2",
		3: "ROI_WINDOW_SIZE_3",
		4: "ROI_WINDOW_SIZE_4",
		5: "ROI_WINDOW_SIZE_5",
		6: "ROI_WINDOW_SIZE_6",
		7: "ROI_WINDOW_SIZE_7",
		8: "ROI_WINDOW_SIZE_8",
	}
	RoiParameters_RoiWindowSize_value = map[string]int32{
		"ROI_WINDOW_SIZE_UNKNOWN": 0,
		"ROI_WINDOW_SIZE_1":       1,
		"ROI_WINDOW_SIZE_2":       2,
		"ROI_WINDOW_SIZE_3":       3,
		"ROI_WINDOW_SIZE_4":       4,
		"ROI_WINDOW_SIZE_5":       5,
		"ROI_WINDOW_SIZE_6":       6,
		"ROI_WINDOW_SIZE_7":       7,
		"ROI_WINDOW_SIZE_8":       8,
	}
)

func (x RoiParameters_RoiWindowSize) Enum() *RoiParameters_RoiWindowSize {
	p := new(RoiParameters_RoiWindowSize)
	*p = x
	return p
}

func (x RoiParameters_RoiWindowSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoiParameters_RoiWindowSize) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_gripper_camera_param_proto_enumTypes[3].Descriptor()
}

func (RoiParameters_RoiWindowSize) Type() protoreflect.EnumType {
	return &file_bosdyn_api_gripper_camera_param_proto_enumTypes[3]
}

func (x RoiParameters_RoiWindowSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoiParameters_RoiWindowSize.Descriptor instead.
func (RoiParameters_RoiWindowSize) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{5, 0}
}

// The GripperCameraParam request message sets new gripper sensor parameters. Gripper sensor parameters do not persist across reboots.
type GripperCameraParamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader       `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Params *GripperCameraParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GripperCameraParamRequest) Reset() {
	*x = GripperCameraParamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCameraParamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCameraParamRequest) ProtoMessage() {}

func (x *GripperCameraParamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCameraParamRequest.ProtoReflect.Descriptor instead.
func (*GripperCameraParamRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{0}
}

func (x *GripperCameraParamRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GripperCameraParamRequest) GetParams() *GripperCameraParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GripperCameraParamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GripperCameraParamResponse) Reset() {
	*x = GripperCameraParamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCameraParamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCameraParamResponse) ProtoMessage() {}

func (x *GripperCameraParamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCameraParamResponse.ProtoReflect.Descriptor instead.
func (*GripperCameraParamResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{1}
}

func (x *GripperCameraParamResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The GripperCameraGetParam request message queries the robot for the current gripper sensor parameters.
type GripperCameraGetParamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GripperCameraGetParamRequest) Reset() {
	*x = GripperCameraGetParamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCameraGetParamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCameraGetParamRequest) ProtoMessage() {}

func (x *GripperCameraGetParamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCameraGetParamRequest.ProtoReflect.Descriptor instead.
func (*GripperCameraGetParamRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{2}
}

func (x *GripperCameraGetParamRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The GripperCameraGetParam response message contains the current gripper sensor parameters. Gripper sensor parameters do not persist across reboots.
type GripperCameraGetParamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *ResponseHeader      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Params *GripperCameraParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *GripperCameraGetParamResponse) Reset() {
	*x = GripperCameraGetParamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCameraGetParamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCameraGetParamResponse) ProtoMessage() {}

func (x *GripperCameraGetParamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCameraGetParamResponse.ProtoReflect.Descriptor instead.
func (*GripperCameraGetParamResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{3}
}

func (x *GripperCameraGetParamResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GripperCameraGetParamResponse) GetParams() *GripperCameraParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type GripperCameraParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CameraMode sets the resolution, frame rate and image format.
	CameraMode GripperCameraParams_CameraMode `protobuf:"varint,1,opt,name=camera_mode,json=cameraMode,proto3,enum=bosdyn.api.GripperCameraParams_CameraMode" json:"camera_mode,omitempty"`
	// Set the image brightness level.
	// Min 0, max 1
	Brightness *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=brightness,proto3" json:"brightness,omitempty"`
	// Set the image contrast level.
	// Min 0, max 1
	Contrast *wrapperspb.FloatValue `protobuf:"bytes,3,opt,name=contrast,proto3" json:"contrast,omitempty"`
	// Set the image saturation level.
	// Min 0, max 1
	Saturation *wrapperspb.FloatValue `protobuf:"bytes,4,opt,name=saturation,proto3" json:"saturation,omitempty"`
	// Set the image gain level.
	// Min 0, max 1
	Gain *wrapperspb.FloatValue `protobuf:"bytes,7,opt,name=gain,proto3" json:"gain,omitempty"`
	// Whether the camera should use auto exposure.
	// Defaults to true.
	ExposureAuto *wrapperspb.BoolValue `protobuf:"bytes,10,opt,name=exposure_auto,json=exposureAuto,proto3" json:"exposure_auto,omitempty"`
	// Manually set the image exposure level. This value is only used if exposure_auto is false.
	// Min 0, max 1
	ExposureAbsolute *wrapperspb.FloatValue `protobuf:"bytes,11,opt,name=exposure_absolute,json=exposureAbsolute,proto3" json:"exposure_absolute,omitempty"`
	// Region of interest for exposure.  Specify a spot exposure on a
	// certain part of the image.  Only used in auto-exposure mode.
	ExposureRoi *RoiParameters `protobuf:"bytes,16,opt,name=exposure_roi,json=exposureRoi,proto3" json:"exposure_roi,omitempty"`
	// Whether the camera should automatically focus the image.
	// Default true
	FocusAuto *wrapperspb.BoolValue `protobuf:"bytes,13,opt,name=focus_auto,json=focusAuto,proto3" json:"focus_auto,omitempty"`
	// Manually set the image focus. This value is only used if focus_auto is false.
	// Min 0, max 1
	// 0 corresponds to focus at infinity, 1 corresponds to a focal point close to the camera.
	FocusAbsolute *wrapperspb.FloatValue `protobuf:"bytes,12,opt,name=focus_absolute,json=focusAbsolute,proto3" json:"focus_absolute,omitempty"`
	// Region of interest for focus.  Only used when in auto-focus mode.
	FocusRoi *RoiParameters `protobuf:"bytes,14,opt,name=focus_roi,json=focusRoi,proto3" json:"focus_roi,omitempty"`
	// Set to true to draw a rectangle in the image where the focus ROI is.
	// Default: false
	DrawFocusRoiRectangle *wrapperspb.BoolValue `protobuf:"bytes,18,opt,name=draw_focus_roi_rectangle,json=drawFocusRoiRectangle,proto3" json:"draw_focus_roi_rectangle,omitempty"`
	// High dynamic range (HDR) mode sets the camera to take multiple frames to get exposure
	// in a large range.  HDR will reduce framerate in high-framerate modes.
	Hdr HdrParameters `protobuf:"varint,17,opt,name=hdr,proto3,enum=bosdyn.api.HdrParameters" json:"hdr,omitempty"`
	// Set the LED mode.
	LedMode GripperCameraParams_LedMode `protobuf:"varint,19,opt,name=led_mode,json=ledMode,proto3,enum=bosdyn.api.GripperCameraParams_LedMode" json:"led_mode,omitempty"`
	// Brightness of the LED in torch mode.  Min = 0, max = 1.
	// Note: A brightness value of 0 is *not* off, but is the minimum brightness.
	//       To turn off the LED, set the led_mode to LED_MODE_OFF
	LedTorchBrightness *wrapperspb.FloatValue `protobuf:"bytes,20,opt,name=led_torch_brightness,json=ledTorchBrightness,proto3" json:"led_torch_brightness,omitempty"`
}

func (x *GripperCameraParams) Reset() {
	*x = GripperCameraParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCameraParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCameraParams) ProtoMessage() {}

func (x *GripperCameraParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCameraParams.ProtoReflect.Descriptor instead.
func (*GripperCameraParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{4}
}

func (x *GripperCameraParams) GetCameraMode() GripperCameraParams_CameraMode {
	if x != nil {
		return x.CameraMode
	}
	return GripperCameraParams_MODE_UNKNOWN
}

func (x *GripperCameraParams) GetBrightness() *wrapperspb.FloatValue {
	if x != nil {
		return x.Brightness
	}
	return nil
}

func (x *GripperCameraParams) GetContrast() *wrapperspb.FloatValue {
	if x != nil {
		return x.Contrast
	}
	return nil
}

func (x *GripperCameraParams) GetSaturation() *wrapperspb.FloatValue {
	if x != nil {
		return x.Saturation
	}
	return nil
}

func (x *GripperCameraParams) GetGain() *wrapperspb.FloatValue {
	if x != nil {
		return x.Gain
	}
	return nil
}

func (x *GripperCameraParams) GetExposureAuto() *wrapperspb.BoolValue {
	if x != nil {
		return x.ExposureAuto
	}
	return nil
}

func (x *GripperCameraParams) GetExposureAbsolute() *wrapperspb.FloatValue {
	if x != nil {
		return x.ExposureAbsolute
	}
	return nil
}

func (x *GripperCameraParams) GetExposureRoi() *RoiParameters {
	if x != nil {
		return x.ExposureRoi
	}
	return nil
}

func (x *GripperCameraParams) GetFocusAuto() *wrapperspb.BoolValue {
	if x != nil {
		return x.FocusAuto
	}
	return nil
}

func (x *GripperCameraParams) GetFocusAbsolute() *wrapperspb.FloatValue {
	if x != nil {
		return x.FocusAbsolute
	}
	return nil
}

func (x *GripperCameraParams) GetFocusRoi() *RoiParameters {
	if x != nil {
		return x.FocusRoi
	}
	return nil
}

func (x *GripperCameraParams) GetDrawFocusRoiRectangle() *wrapperspb.BoolValue {
	if x != nil {
		return x.DrawFocusRoiRectangle
	}
	return nil
}

func (x *GripperCameraParams) GetHdr() HdrParameters {
	if x != nil {
		return x.Hdr
	}
	return HdrParameters_HDR_UNKNOWN
}

func (x *GripperCameraParams) GetLedMode() GripperCameraParams_LedMode {
	if x != nil {
		return x.LedMode
	}
	return GripperCameraParams_LED_MODE_UNKNOWN
}

func (x *GripperCameraParams) GetLedTorchBrightness() *wrapperspb.FloatValue {
	if x != nil {
		return x.LedTorchBrightness
	}
	return nil
}

// Region of interest (ROI) indicates the region within the image that should be used for
// determination of automatic focus or exposure.
type RoiParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Center point of the ROI in the image. The upper lefthand corner of the image is (0, 0) and
	// the lower righthand corner is (1, 1). The middle of the image is (0.5, 0.5).
	RoiPercentageInImage *Vec2 `protobuf:"bytes,1,opt,name=roi_percentage_in_image,json=roiPercentageInImage,proto3" json:"roi_percentage_in_image,omitempty"`
	// Size of the region of interest.
	WindowSize RoiParameters_RoiWindowSize `protobuf:"varint,2,opt,name=window_size,json=windowSize,proto3,enum=bosdyn.api.RoiParameters_RoiWindowSize" json:"window_size,omitempty"`
}

func (x *RoiParameters) Reset() {
	*x = RoiParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoiParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoiParameters) ProtoMessage() {}

func (x *RoiParameters) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_camera_param_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoiParameters.ProtoReflect.Descriptor instead.
func (*RoiParameters) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP(), []int{5}
}

func (x *RoiParameters) GetRoiPercentageInImage() *Vec2 {
	if x != nil {
		return x.RoiPercentageInImage
	}
	return nil
}

func (x *RoiParameters) GetWindowSize() RoiParameters_RoiWindowSize {
	if x != nil {
		return x.WindowSize
	}
	return RoiParameters_ROI_WINDOW_SIZE_UNKNOWN
}

var File_bosdyn_api_gripper_camera_param_proto protoreflect.FileDescriptor

var file_bosdyn_api_gripper_camera_param_proto_rawDesc = []byte{
	0x0a, 0x25, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x87, 0x01, 0x0a, 0x19, 0x47, 0x72, 0x69, 0x70,
	0x70, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x22, 0x50, 0x0a, 0x1a, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x22, 0x51, 0x0a, 0x1c, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x0a, 0x1d, 0x47, 0x72, 0x69, 0x70, 0x70,
	0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x37, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xfb, 0x09, 0x0a, 0x13, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65,
	0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4b, 0x0a,
	0x0b, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x62, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x73, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a,
	0x04, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x67, 0x61, 0x69, 0x6e, 0x12, 0x3f,
	0x0a, 0x0d, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x12,
	0x48, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x65, 0x78, 0x70,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x6f, 0x69, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x69,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x69, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x5f, 0x61, 0x75, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x41, 0x62,
	0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f,
	0x72, 0x6f, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x6f, 0x69, 0x12, 0x53,
	0x0a, 0x18, 0x64, 0x72, 0x61, 0x77, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x72, 0x6f, 0x69,
	0x5f, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x64, 0x72,
	0x61, 0x77, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x52, 0x6f, 0x69, 0x52, 0x65, 0x63, 0x74, 0x61, 0x6e,
	0x67, 0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x68, 0x64, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x64,
	0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x03, 0x68, 0x64, 0x72,
	0x12, 0x42, 0x0a, 0x08, 0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x2e, 0x4c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6c, 0x65, 0x64,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4d, 0x0a, 0x14, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x72, 0x63,
	0x68, 0x5f, 0x62, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x6c, 0x65, 0x64, 0x54, 0x6f, 0x72, 0x63, 0x68, 0x42, 0x72, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x0a, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x32, 0x38,
	0x30, 0x5f, 0x37, 0x32, 0x30, 0x5f, 0x36, 0x30, 0x46, 0x50, 0x53, 0x5f, 0x55, 0x59, 0x56, 0x59,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x36, 0x34, 0x30, 0x5f, 0x34,
	0x38, 0x30, 0x5f, 0x31, 0x32, 0x30, 0x46, 0x50, 0x53, 0x5f, 0x55, 0x59, 0x56, 0x59, 0x10, 0x0b,
	0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x31, 0x39, 0x32, 0x30, 0x5f, 0x31, 0x30,
	0x38, 0x30, 0x5f, 0x36, 0x30, 0x46, 0x50, 0x53, 0x5f, 0x4d, 0x4a, 0x50, 0x47, 0x10, 0x0e, 0x12,
	0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x33, 0x38, 0x34, 0x30, 0x5f, 0x32, 0x31, 0x36,
	0x30, 0x5f, 0x33, 0x30, 0x46, 0x50, 0x53, 0x5f, 0x4d, 0x4a, 0x50, 0x47, 0x10, 0x0f, 0x12, 0x1d,
	0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x34, 0x32, 0x30, 0x38, 0x5f, 0x33, 0x31, 0x32, 0x30,
	0x5f, 0x32, 0x30, 0x46, 0x50, 0x53, 0x5f, 0x4d, 0x4a, 0x50, 0x47, 0x10, 0x10, 0x12, 0x1d, 0x0a,
	0x19, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x34, 0x30, 0x39, 0x36, 0x5f, 0x32, 0x31, 0x36, 0x30, 0x5f,
	0x33, 0x30, 0x46, 0x50, 0x53, 0x5f, 0x4d, 0x4a, 0x50, 0x47, 0x10, 0x11, 0x22, 0x45, 0x0a, 0x07,
	0x4c, 0x65, 0x64, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x44, 0x5f, 0x4d,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x4c, 0x45, 0x44, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x4f, 0x52, 0x43,
	0x48, 0x10, 0x02, 0x22, 0x89, 0x03, 0x0a, 0x0d, 0x52, 0x6f, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x17, 0x72, 0x6f, 0x69, 0x5f, 0x70, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x14, 0x72, 0x6f, 0x69, 0x50, 0x65, 0x72,
	0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x48,
	0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x6f, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x52,
	0x6f, 0x69, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x0a, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x69,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x4f,
	0x49, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x49, 0x5f, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x31, 0x10, 0x01, 0x12, 0x15,
	0x0a, 0x11, 0x52, 0x4f, 0x49, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a,
	0x45, 0x5f, 0x32, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x49, 0x5f, 0x57, 0x49, 0x4e,
	0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x33, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11,
	0x52, 0x4f, 0x49, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f,
	0x34, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x49, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x35, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f,
	0x49, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x36, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x49, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f,
	0x53, 0x49, 0x5a, 0x45, 0x5f, 0x37, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x4f, 0x49, 0x5f,
	0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x38, 0x10, 0x08, 0x2a,
	0x83, 0x01, 0x0a, 0x0d, 0x48, 0x64, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x44, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x44, 0x52, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x48, 0x44, 0x52, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x48, 0x44, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x31, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x48, 0x44, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f, 0x32, 0x10,
	0x04, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x44, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x5f,
	0x33, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x44, 0x52, 0x5f, 0x4d, 0x41, 0x4e, 0x55, 0x41,
	0x4c, 0x5f, 0x34, 0x10, 0x06, 0x42, 0x4c, 0x42, 0x17, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73,
	0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_gripper_camera_param_proto_rawDescOnce sync.Once
	file_bosdyn_api_gripper_camera_param_proto_rawDescData = file_bosdyn_api_gripper_camera_param_proto_rawDesc
)

func file_bosdyn_api_gripper_camera_param_proto_rawDescGZIP() []byte {
	file_bosdyn_api_gripper_camera_param_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_gripper_camera_param_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_gripper_camera_param_proto_rawDescData)
	})
	return file_bosdyn_api_gripper_camera_param_proto_rawDescData
}

var file_bosdyn_api_gripper_camera_param_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bosdyn_api_gripper_camera_param_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bosdyn_api_gripper_camera_param_proto_goTypes = []interface{}{
	(HdrParameters)(0),                    // 0: bosdyn.api.HdrParameters
	(GripperCameraParams_CameraMode)(0),   // 1: bosdyn.api.GripperCameraParams.CameraMode
	(GripperCameraParams_LedMode)(0),      // 2: bosdyn.api.GripperCameraParams.LedMode
	(RoiParameters_RoiWindowSize)(0),      // 3: bosdyn.api.RoiParameters.RoiWindowSize
	(*GripperCameraParamRequest)(nil),     // 4: bosdyn.api.GripperCameraParamRequest
	(*GripperCameraParamResponse)(nil),    // 5: bosdyn.api.GripperCameraParamResponse
	(*GripperCameraGetParamRequest)(nil),  // 6: bosdyn.api.GripperCameraGetParamRequest
	(*GripperCameraGetParamResponse)(nil), // 7: bosdyn.api.GripperCameraGetParamResponse
	(*GripperCameraParams)(nil),           // 8: bosdyn.api.GripperCameraParams
	(*RoiParameters)(nil),                 // 9: bosdyn.api.RoiParameters
	(*RequestHeader)(nil),                 // 10: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),                // 11: bosdyn.api.ResponseHeader
	(*wrapperspb.FloatValue)(nil),         // 12: google.protobuf.FloatValue
	(*wrapperspb.BoolValue)(nil),          // 13: google.protobuf.BoolValue
	(*Vec2)(nil),                          // 14: bosdyn.api.Vec2
}
var file_bosdyn_api_gripper_camera_param_proto_depIdxs = []int32{
	10, // 0: bosdyn.api.GripperCameraParamRequest.header:type_name -> bosdyn.api.RequestHeader
	8,  // 1: bosdyn.api.GripperCameraParamRequest.params:type_name -> bosdyn.api.GripperCameraParams
	11, // 2: bosdyn.api.GripperCameraParamResponse.header:type_name -> bosdyn.api.ResponseHeader
	10, // 3: bosdyn.api.GripperCameraGetParamRequest.header:type_name -> bosdyn.api.RequestHeader
	11, // 4: bosdyn.api.GripperCameraGetParamResponse.header:type_name -> bosdyn.api.ResponseHeader
	8,  // 5: bosdyn.api.GripperCameraGetParamResponse.params:type_name -> bosdyn.api.GripperCameraParams
	1,  // 6: bosdyn.api.GripperCameraParams.camera_mode:type_name -> bosdyn.api.GripperCameraParams.CameraMode
	12, // 7: bosdyn.api.GripperCameraParams.brightness:type_name -> google.protobuf.FloatValue
	12, // 8: bosdyn.api.GripperCameraParams.contrast:type_name -> google.protobuf.FloatValue
	12, // 9: bosdyn.api.GripperCameraParams.saturation:type_name -> google.protobuf.FloatValue
	12, // 10: bosdyn.api.GripperCameraParams.gain:type_name -> google.protobuf.FloatValue
	13, // 11: bosdyn.api.GripperCameraParams.exposure_auto:type_name -> google.protobuf.BoolValue
	12, // 12: bosdyn.api.GripperCameraParams.exposure_absolute:type_name -> google.protobuf.FloatValue
	9,  // 13: bosdyn.api.GripperCameraParams.exposure_roi:type_name -> bosdyn.api.RoiParameters
	13, // 14: bosdyn.api.GripperCameraParams.focus_auto:type_name -> google.protobuf.BoolValue
	12, // 15: bosdyn.api.GripperCameraParams.focus_absolute:type_name -> google.protobuf.FloatValue
	9,  // 16: bosdyn.api.GripperCameraParams.focus_roi:type_name -> bosdyn.api.RoiParameters
	13, // 17: bosdyn.api.GripperCameraParams.draw_focus_roi_rectangle:type_name -> google.protobuf.BoolValue
	0,  // 18: bosdyn.api.GripperCameraParams.hdr:type_name -> bosdyn.api.HdrParameters
	2,  // 19: bosdyn.api.GripperCameraParams.led_mode:type_name -> bosdyn.api.GripperCameraParams.LedMode
	12, // 20: bosdyn.api.GripperCameraParams.led_torch_brightness:type_name -> google.protobuf.FloatValue
	14, // 21: bosdyn.api.RoiParameters.roi_percentage_in_image:type_name -> bosdyn.api.Vec2
	3,  // 22: bosdyn.api.RoiParameters.window_size:type_name -> bosdyn.api.RoiParameters.RoiWindowSize
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_bosdyn_api_gripper_camera_param_proto_init() }
func file_bosdyn_api_gripper_camera_param_proto_init() {
	if File_bosdyn_api_gripper_camera_param_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_geometry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_gripper_camera_param_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCameraParamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_camera_param_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCameraParamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_camera_param_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCameraGetParamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_camera_param_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCameraGetParamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_camera_param_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCameraParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_camera_param_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoiParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_gripper_camera_param_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_gripper_camera_param_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_gripper_camera_param_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_gripper_camera_param_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_gripper_camera_param_proto_msgTypes,
	}.Build()
	File_bosdyn_api_gripper_camera_param_proto = out.File
	file_bosdyn_api_gripper_camera_param_proto_rawDesc = nil
	file_bosdyn_api_gripper_camera_param_proto_goTypes = nil
	file_bosdyn_api_gripper_camera_param_proto_depIdxs = nil
}
