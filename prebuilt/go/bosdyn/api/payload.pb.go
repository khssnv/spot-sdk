// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/payload.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Payloads are defined relative to a frame on the robot. These are the possible frames.
type MountFrameName int32

const (
	// The is the default. For backwards compatibility, we assume unknown means body mount frame.
	MountFrameName_MOUNT_FRAME_UNKNOWN MountFrameName = 0
	// The body payload mount frame, as defined in documentation.
	MountFrameName_MOUNT_FRAME_BODY_PAYLOAD MountFrameName = 1
	// The gripper payload mount frame, as defined in documentation.
	MountFrameName_MOUNT_FRAME_GRIPPER_PAYLOAD MountFrameName = 2
	// The wrist link frame, as defined in the gripper CAD and documentation.
	MountFrameName_MOUNT_FRAME_WR1 MountFrameName = 3
)

// Enum value maps for MountFrameName.
var (
	MountFrameName_name = map[int32]string{
		0: "MOUNT_FRAME_UNKNOWN",
		1: "MOUNT_FRAME_BODY_PAYLOAD",
		2: "MOUNT_FRAME_GRIPPER_PAYLOAD",
		3: "MOUNT_FRAME_WR1",
	}
	MountFrameName_value = map[string]int32{
		"MOUNT_FRAME_UNKNOWN":         0,
		"MOUNT_FRAME_BODY_PAYLOAD":    1,
		"MOUNT_FRAME_GRIPPER_PAYLOAD": 2,
		"MOUNT_FRAME_WR1":             3,
	}
)

func (x MountFrameName) Enum() *MountFrameName {
	p := new(MountFrameName)
	*p = x
	return p
}

func (x MountFrameName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MountFrameName) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_payload_proto_enumTypes[0].Descriptor()
}

func (MountFrameName) Type() protoreflect.EnumType {
	return &file_bosdyn_api_payload_proto_enumTypes[0]
}

func (x MountFrameName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MountFrameName.Descriptor instead.
func (MountFrameName) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{0}
}

// A Payload describes a single payload installed on the Spot platform.
// It includes all external information necessary to represent
// the payload to the user as a single record.
type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique id provided by the payload or auto-generated by the website.
	GUID string `protobuf:"bytes,1,opt,name=GUID,proto3" json:"GUID,omitempty"`
	// A human readable name describing this payload. It is provided by the
	// payload as part of the payload announcement system.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// A human-readable description string providing more context as to the
	// function of this payload. It is displayed in UIs.
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// A list of labels used to indicate what type of payload this is.
	LabelPrefix []string `protobuf:"bytes,9,rep,name=label_prefix,json=labelPrefix,proto3" json:"label_prefix,omitempty"`
	// Set true once the payload is authorized by the administrator in the payload webpage.
	// Must be set to false at registration time.
	IsAuthorized bool `protobuf:"varint,4,opt,name=is_authorized,json=isAuthorized,proto3" json:"is_authorized,omitempty"`
	// Set true if the payload is attached to the robot.
	// Must be set to false at registration time.
	IsEnabled bool `protobuf:"varint,5,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// Set true for payloads registered without their own computers. These records
	// are all manually entered.
	IsNoncomputePayload bool `protobuf:"varint,6,opt,name=is_noncompute_payload,json=isNoncomputePayload,proto3" json:"is_noncompute_payload,omitempty"`
	// Payload version details.
	Version *SoftwareVersion `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	// The pose of the payload relative to the body frame.
	BodyTformPayload *SE3Pose `protobuf:"bytes,7,opt,name=body_tform_payload,json=bodyTformPayload,proto3" json:"body_tform_payload,omitempty"`
	// The pose of the payload relative to the mount frame.
	MountTformPayload *SE3Pose `protobuf:"bytes,8,opt,name=mount_tform_payload,json=mountTformPayload,proto3" json:"mount_tform_payload,omitempty"`
	// Optional - mount frame_name (if not included, payload is assumed to be in the body mount frame)
	MountFrameName MountFrameName `protobuf:"varint,13,opt,name=mount_frame_name,json=mountFrameName,proto3,enum=bosdyn.api.MountFrameName" json:"mount_frame_name,omitempty"`
	// The mass and volume properties of the payload.
	MassVolumeProperties *PayloadMassVolumeProperties `protobuf:"bytes,10,opt,name=mass_volume_properties,json=massVolumeProperties,proto3" json:"mass_volume_properties,omitempty"`
	// A list of possible physical configurations for the payload.
	PresetConfigurations []*PayloadPreset `protobuf:"bytes,11,rep,name=preset_configurations,json=presetConfigurations,proto3" json:"preset_configurations,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_payload_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_payload_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{0}
}

func (x *Payload) GetGUID() string {
	if x != nil {
		return x.GUID
	}
	return ""
}

func (x *Payload) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Payload) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Payload) GetLabelPrefix() []string {
	if x != nil {
		return x.LabelPrefix
	}
	return nil
}

func (x *Payload) GetIsAuthorized() bool {
	if x != nil {
		return x.IsAuthorized
	}
	return false
}

func (x *Payload) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *Payload) GetIsNoncomputePayload() bool {
	if x != nil {
		return x.IsNoncomputePayload
	}
	return false
}

func (x *Payload) GetVersion() *SoftwareVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *Payload) GetBodyTformPayload() *SE3Pose {
	if x != nil {
		return x.BodyTformPayload
	}
	return nil
}

func (x *Payload) GetMountTformPayload() *SE3Pose {
	if x != nil {
		return x.MountTformPayload
	}
	return nil
}

func (x *Payload) GetMountFrameName() MountFrameName {
	if x != nil {
		return x.MountFrameName
	}
	return MountFrameName_MOUNT_FRAME_UNKNOWN
}

func (x *Payload) GetMassVolumeProperties() *PayloadMassVolumeProperties {
	if x != nil {
		return x.MassVolumeProperties
	}
	return nil
}

func (x *Payload) GetPresetConfigurations() []*PayloadPreset {
	if x != nil {
		return x.PresetConfigurations
	}
	return nil
}

// The physical configurations for the payload.
type PayloadPreset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A human readable name describing this configuration. It is displayed in
	// the admin console, but will not overwrite the top level payload name.
	PresetName string `protobuf:"bytes,1,opt,name=preset_name,json=presetName,proto3" json:"preset_name,omitempty"`
	// A human-readable description providing context on this configuration. It is
	// displayed in the admin console.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// The pose of the payload relative to the body frame.
	MountTformPayload *SE3Pose `protobuf:"bytes,3,opt,name=mount_tform_payload,json=mountTformPayload,proto3" json:"mount_tform_payload,omitempty"`
	// Optional - mount frame_name (if not included, payload is assumed to be in the body mount frame)
	MountFrameName MountFrameName `protobuf:"varint,6,opt,name=mount_frame_name,json=mountFrameName,proto3,enum=bosdyn.api.MountFrameName" json:"mount_frame_name,omitempty"`
	// The mass and volume properties of the payload.
	MassVolumeProperties *PayloadMassVolumeProperties `protobuf:"bytes,4,opt,name=mass_volume_properties,json=massVolumeProperties,proto3" json:"mass_volume_properties,omitempty"`
	// A list of labels used to indicate what type of payload this is.
	LabelPrefix []string `protobuf:"bytes,5,rep,name=label_prefix,json=labelPrefix,proto3" json:"label_prefix,omitempty"`
}

func (x *PayloadPreset) Reset() {
	*x = PayloadPreset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_payload_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadPreset) ProtoMessage() {}

func (x *PayloadPreset) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_payload_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadPreset.ProtoReflect.Descriptor instead.
func (*PayloadPreset) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{1}
}

func (x *PayloadPreset) GetPresetName() string {
	if x != nil {
		return x.PresetName
	}
	return ""
}

func (x *PayloadPreset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PayloadPreset) GetMountTformPayload() *SE3Pose {
	if x != nil {
		return x.MountTformPayload
	}
	return nil
}

func (x *PayloadPreset) GetMountFrameName() MountFrameName {
	if x != nil {
		return x.MountFrameName
	}
	return MountFrameName_MOUNT_FRAME_UNKNOWN
}

func (x *PayloadPreset) GetMassVolumeProperties() *PayloadMassVolumeProperties {
	if x != nil {
		return x.MassVolumeProperties
	}
	return nil
}

func (x *PayloadPreset) GetLabelPrefix() []string {
	if x != nil {
		return x.LabelPrefix
	}
	return nil
}

// PayloadMassVolumeProperties contain mass and volume information for the payload
// in the format that the user interacts with it. It is transmitted to the control
// and perception systems and processed there to inform those systems.
type PayloadMassVolumeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total mass of payload in kg.
	TotalMass float32 `protobuf:"fixed32,2,opt,name=total_mass,json=totalMass,proto3" json:"total_mass,omitempty"`
	// Position of the center of mass of the payload in the payload frame. Meters.
	ComPosRtPayload *Vec3 `protobuf:"bytes,3,opt,name=com_pos_rt_payload,json=comPosRtPayload,proto3" json:"com_pos_rt_payload,omitempty"`
	// The moment of inertia of the payload, represented about the payload
	// center of mass, in the payload frame. Units in [kg*m^2].
	MoiTensor *MomentOfIntertia `protobuf:"bytes,4,opt,name=moi_tensor,json=moiTensor,proto3" json:"moi_tensor,omitempty"`
	// Zero or more bounding boxes indicating the occupied volume of the payload.
	// These boxes must be represented in the payload frame by specifying
	// Must have Box3WithFrame.frame_name == "payload".
	BoundingBox []*Box3WithFrame `protobuf:"bytes,5,rep,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
	// Joint limits defining limits to range of motion of the hips of the robot,
	// in order to prevent collisions with the payload.
	// This field is optional and is only recommended for advanced development
	// purposes.
	JointLimits []*JointLimits `protobuf:"bytes,6,rep,name=joint_limits,json=jointLimits,proto3" json:"joint_limits,omitempty"`
}

func (x *PayloadMassVolumeProperties) Reset() {
	*x = PayloadMassVolumeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_payload_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadMassVolumeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadMassVolumeProperties) ProtoMessage() {}

func (x *PayloadMassVolumeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_payload_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadMassVolumeProperties.ProtoReflect.Descriptor instead.
func (*PayloadMassVolumeProperties) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{2}
}

func (x *PayloadMassVolumeProperties) GetTotalMass() float32 {
	if x != nil {
		return x.TotalMass
	}
	return 0
}

func (x *PayloadMassVolumeProperties) GetComPosRtPayload() *Vec3 {
	if x != nil {
		return x.ComPosRtPayload
	}
	return nil
}

func (x *PayloadMassVolumeProperties) GetMoiTensor() *MomentOfIntertia {
	if x != nil {
		return x.MoiTensor
	}
	return nil
}

func (x *PayloadMassVolumeProperties) GetBoundingBox() []*Box3WithFrame {
	if x != nil {
		return x.BoundingBox
	}
	return nil
}

func (x *PayloadMassVolumeProperties) GetJointLimits() []*JointLimits {
	if x != nil {
		return x.JointLimits
	}
	return nil
}

// Structure describing the moment of intertia of a body. The xx, yy, zz fields
// are the diagonal of the MOI tensor, and the xy, xz, and yz fields are the
// off diagonal terms.
type MomentOfIntertia struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xx float32 `protobuf:"fixed32,2,opt,name=xx,proto3" json:"xx,omitempty"`
	Yy float32 `protobuf:"fixed32,3,opt,name=yy,proto3" json:"yy,omitempty"`
	Zz float32 `protobuf:"fixed32,4,opt,name=zz,proto3" json:"zz,omitempty"`
	Xy float32 `protobuf:"fixed32,5,opt,name=xy,proto3" json:"xy,omitempty"`
	Xz float32 `protobuf:"fixed32,6,opt,name=xz,proto3" json:"xz,omitempty"`
	Yz float32 `protobuf:"fixed32,7,opt,name=yz,proto3" json:"yz,omitempty"`
}

func (x *MomentOfIntertia) Reset() {
	*x = MomentOfIntertia{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_payload_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MomentOfIntertia) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MomentOfIntertia) ProtoMessage() {}

func (x *MomentOfIntertia) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_payload_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MomentOfIntertia.ProtoReflect.Descriptor instead.
func (*MomentOfIntertia) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{3}
}

func (x *MomentOfIntertia) GetXx() float32 {
	if x != nil {
		return x.Xx
	}
	return 0
}

func (x *MomentOfIntertia) GetYy() float32 {
	if x != nil {
		return x.Yy
	}
	return 0
}

func (x *MomentOfIntertia) GetZz() float32 {
	if x != nil {
		return x.Zz
	}
	return 0
}

func (x *MomentOfIntertia) GetXy() float32 {
	if x != nil {
		return x.Xy
	}
	return 0
}

func (x *MomentOfIntertia) GetXz() float32 {
	if x != nil {
		return x.Xz
	}
	return 0
}

func (x *MomentOfIntertia) GetYz() float32 {
	if x != nil {
		return x.Yz
	}
	return 0
}

// JointLimits contain hip joint angles where limb to payload collisions occur.
type JointLimits struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Label identifying the respective limb to which these apply [fr,fl,hr,hl]
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// (hy, hx) coordinates outlining the hip joint limits where collisions occur
	// between robot hip and payload. Paired vectors must be of equal length.
	// Angles are measured with actual contact. Appropriate margin will be provided
	// in software. Radians.
	// Left legs must have hx > 0. Right legs must have hx < 0.
	Hy []float32 `protobuf:"fixed32,3,rep,packed,name=hy,proto3" json:"hy,omitempty"`
	// All legs must have hy > 1.3.
	Hx []float32 `protobuf:"fixed32,4,rep,packed,name=hx,proto3" json:"hx,omitempty"`
}

func (x *JointLimits) Reset() {
	*x = JointLimits{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_payload_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JointLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JointLimits) ProtoMessage() {}

func (x *JointLimits) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_payload_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JointLimits.ProtoReflect.Descriptor instead.
func (*JointLimits) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{4}
}

func (x *JointLimits) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *JointLimits) GetHy() []float32 {
	if x != nil {
		return x.Hy
	}
	return nil
}

func (x *JointLimits) GetHx() []float32 {
	if x != nil {
		return x.Hx
	}
	return nil
}

// The ListPayloads request message sent to the robot to get all known payloads.
type ListPayloadsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListPayloadsRequest) Reset() {
	*x = ListPayloadsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_payload_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPayloadsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayloadsRequest) ProtoMessage() {}

func (x *ListPayloadsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_payload_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayloadsRequest.ProtoReflect.Descriptor instead.
func (*ListPayloadsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{5}
}

func (x *ListPayloadsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The ListPayloads response message returns all payloads registered in the robot's directory.
type ListPayloadsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The returned list of payloads registered in the directory.
	Payloads []*Payload `protobuf:"bytes,2,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *ListPayloadsResponse) Reset() {
	*x = ListPayloadsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_payload_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPayloadsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPayloadsResponse) ProtoMessage() {}

func (x *ListPayloadsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_payload_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPayloadsResponse.ProtoReflect.Descriptor instead.
func (*ListPayloadsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_payload_proto_rawDescGZIP(), []int{6}
}

func (x *ListPayloadsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListPayloadsResponse) GetPayloads() []*Payload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

var File_bosdyn_api_payload_proto protoreflect.FileDescriptor

var file_bosdyn_api_payload_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x05, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x47, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x69, 0x73, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x13, 0x69, 0x73, 0x4e, 0x6f, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a,
	0x12, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x10,
	0x62, 0x6f, 0x64, 0x79, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x43, 0x0a, 0x13, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f,
	0x73, 0x65, 0x52, 0x11, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x6d,
	0x61, 0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x4d, 0x61, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x15, 0x70, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x14, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xdf, 0x02, 0x0a, 0x0d, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x43, 0x0a, 0x13, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x11, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x16, 0x6d, 0x61,
	0x73, 0x73, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d,
	0x61, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x14, 0x6d, 0x61, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x22, 0xb2, 0x02, 0x0a,
	0x1b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4d, 0x61, 0x73, 0x73, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x12, 0x63,
	0x6f, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x72, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x50, 0x6f,
	0x73, 0x52, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x6f,
	0x69, 0x5f, 0x74, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x74, 0x69, 0x61, 0x52, 0x09, 0x6d, 0x6f,
	0x69, 0x54, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x6f, 0x75, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f, 0x78, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f, 0x78, 0x33, 0x57,
	0x69, 0x74, 0x68, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x78, 0x12, 0x3a, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x73, 0x22, 0x72, 0x0a, 0x10, 0x4d, 0x6f, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x74, 0x69, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x78, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x79, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x7a, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x7a, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x78, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x78, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x78, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x79, 0x7a, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x02, 0x79, 0x7a, 0x22, 0x43, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x79,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x68, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x78,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x68, 0x78, 0x22, 0x48, 0x0a, 0x13, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x2f, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x73, 0x2a, 0x7d, 0x0a, 0x0e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x42, 0x4f, 0x44, 0x59,
	0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x47, 0x52, 0x49, 0x50, 0x50, 0x45,
	0x52, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x57, 0x52, 0x31, 0x10, 0x03,
	0x42, 0x41, 0x42, 0x0c, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73,
	0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_payload_proto_rawDescOnce sync.Once
	file_bosdyn_api_payload_proto_rawDescData = file_bosdyn_api_payload_proto_rawDesc
)

func file_bosdyn_api_payload_proto_rawDescGZIP() []byte {
	file_bosdyn_api_payload_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_payload_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_payload_proto_rawDescData)
	})
	return file_bosdyn_api_payload_proto_rawDescData
}

var file_bosdyn_api_payload_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_payload_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bosdyn_api_payload_proto_goTypes = []interface{}{
	(MountFrameName)(0),                 // 0: bosdyn.api.MountFrameName
	(*Payload)(nil),                     // 1: bosdyn.api.Payload
	(*PayloadPreset)(nil),               // 2: bosdyn.api.PayloadPreset
	(*PayloadMassVolumeProperties)(nil), // 3: bosdyn.api.PayloadMassVolumeProperties
	(*MomentOfIntertia)(nil),            // 4: bosdyn.api.MomentOfIntertia
	(*JointLimits)(nil),                 // 5: bosdyn.api.JointLimits
	(*ListPayloadsRequest)(nil),         // 6: bosdyn.api.ListPayloadsRequest
	(*ListPayloadsResponse)(nil),        // 7: bosdyn.api.ListPayloadsResponse
	(*SoftwareVersion)(nil),             // 8: bosdyn.api.SoftwareVersion
	(*SE3Pose)(nil),                     // 9: bosdyn.api.SE3Pose
	(*Vec3)(nil),                        // 10: bosdyn.api.Vec3
	(*Box3WithFrame)(nil),               // 11: bosdyn.api.Box3WithFrame
	(*RequestHeader)(nil),               // 12: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),              // 13: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_payload_proto_depIdxs = []int32{
	8,  // 0: bosdyn.api.Payload.version:type_name -> bosdyn.api.SoftwareVersion
	9,  // 1: bosdyn.api.Payload.body_tform_payload:type_name -> bosdyn.api.SE3Pose
	9,  // 2: bosdyn.api.Payload.mount_tform_payload:type_name -> bosdyn.api.SE3Pose
	0,  // 3: bosdyn.api.Payload.mount_frame_name:type_name -> bosdyn.api.MountFrameName
	3,  // 4: bosdyn.api.Payload.mass_volume_properties:type_name -> bosdyn.api.PayloadMassVolumeProperties
	2,  // 5: bosdyn.api.Payload.preset_configurations:type_name -> bosdyn.api.PayloadPreset
	9,  // 6: bosdyn.api.PayloadPreset.mount_tform_payload:type_name -> bosdyn.api.SE3Pose
	0,  // 7: bosdyn.api.PayloadPreset.mount_frame_name:type_name -> bosdyn.api.MountFrameName
	3,  // 8: bosdyn.api.PayloadPreset.mass_volume_properties:type_name -> bosdyn.api.PayloadMassVolumeProperties
	10, // 9: bosdyn.api.PayloadMassVolumeProperties.com_pos_rt_payload:type_name -> bosdyn.api.Vec3
	4,  // 10: bosdyn.api.PayloadMassVolumeProperties.moi_tensor:type_name -> bosdyn.api.MomentOfIntertia
	11, // 11: bosdyn.api.PayloadMassVolumeProperties.bounding_box:type_name -> bosdyn.api.Box3WithFrame
	5,  // 12: bosdyn.api.PayloadMassVolumeProperties.joint_limits:type_name -> bosdyn.api.JointLimits
	12, // 13: bosdyn.api.ListPayloadsRequest.header:type_name -> bosdyn.api.RequestHeader
	13, // 14: bosdyn.api.ListPayloadsResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 15: bosdyn.api.ListPayloadsResponse.payloads:type_name -> bosdyn.api.Payload
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_bosdyn_api_payload_proto_init() }
func file_bosdyn_api_payload_proto_init() {
	if File_bosdyn_api_payload_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_robot_id_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_payload_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_payload_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadPreset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_payload_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadMassVolumeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_payload_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MomentOfIntertia); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_payload_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JointLimits); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_payload_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPayloadsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_payload_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPayloadsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_payload_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_payload_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_payload_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_payload_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_payload_proto_msgTypes,
	}.Build()
	File_bosdyn_api_payload_proto = out.File
	file_bosdyn_api_payload_proto_rawDesc = nil
	file_bosdyn_api_payload_proto_goTypes = nil
	file_bosdyn_api_payload_proto_depIdxs = nil
}
