// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/gripper_command.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClawGripperCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	ClawGripperCommand_Feedback_STATUS_UNKNOWN ClawGripperCommand_Feedback_Status = 0
	// The gripper is opening or closing.
	ClawGripperCommand_Feedback_STATUS_IN_PROGRESS ClawGripperCommand_Feedback_Status = 1
	// The gripper is at the final point of the trajectory.
	ClawGripperCommand_Feedback_STATUS_AT_GOAL ClawGripperCommand_Feedback_Status = 2
	// During a close, detected contact and transitioned to force control.
	ClawGripperCommand_Feedback_STATUS_APPLYING_FORCE ClawGripperCommand_Feedback_Status = 3
)

// Enum value maps for ClawGripperCommand_Feedback_Status.
var (
	ClawGripperCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_IN_PROGRESS",
		2: "STATUS_AT_GOAL",
		3: "STATUS_APPLYING_FORCE",
	}
	ClawGripperCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":        0,
		"STATUS_IN_PROGRESS":    1,
		"STATUS_AT_GOAL":        2,
		"STATUS_APPLYING_FORCE": 3,
	}
)

func (x ClawGripperCommand_Feedback_Status) Enum() *ClawGripperCommand_Feedback_Status {
	p := new(ClawGripperCommand_Feedback_Status)
	*p = x
	return p
}

func (x ClawGripperCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClawGripperCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_gripper_command_proto_enumTypes[0].Descriptor()
}

func (ClawGripperCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_gripper_command_proto_enumTypes[0]
}

func (x ClawGripperCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClawGripperCommand_Feedback_Status.Descriptor instead.
func (ClawGripperCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_command_proto_rawDescGZIP(), []int{1, 1, 0}
}

// The synchronized command message for commanding the gripper to move.
// A synchronized commands is one of the possible robot command messages for controlling the robot.
type GripperCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GripperCommand) Reset() {
	*x = GripperCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCommand) ProtoMessage() {}

func (x *GripperCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCommand.ProtoReflect.Descriptor instead.
func (*GripperCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_command_proto_rawDescGZIP(), []int{0}
}

// Command to open and close the gripper.
type ClawGripperCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClawGripperCommand) Reset() {
	*x = ClawGripperCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClawGripperCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClawGripperCommand) ProtoMessage() {}

func (x *ClawGripperCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClawGripperCommand.ProtoReflect.Descriptor instead.
func (*ClawGripperCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_command_proto_rawDescGZIP(), []int{1}
}

// The gripper request must be one of the basic command primitives.
type GripperCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only one command can be requested at a time.
	//
	// Types that are assignable to Command:
	//	*GripperCommand_Request_ClawGripperCommand
	Command isGripperCommand_Request_Command `protobuf_oneof:"command"`
}

func (x *GripperCommand_Request) Reset() {
	*x = GripperCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCommand_Request) ProtoMessage() {}

func (x *GripperCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCommand_Request.ProtoReflect.Descriptor instead.
func (*GripperCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_command_proto_rawDescGZIP(), []int{0, 0}
}

func (m *GripperCommand_Request) GetCommand() isGripperCommand_Request_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *GripperCommand_Request) GetClawGripperCommand() *ClawGripperCommand_Request {
	if x, ok := x.GetCommand().(*GripperCommand_Request_ClawGripperCommand); ok {
		return x.ClawGripperCommand
	}
	return nil
}

type isGripperCommand_Request_Command interface {
	isGripperCommand_Request_Command()
}

type GripperCommand_Request_ClawGripperCommand struct {
	// Control opening and closing the gripper.
	ClawGripperCommand *ClawGripperCommand_Request `protobuf:"bytes,1,opt,name=claw_gripper_command,json=clawGripperCommand,proto3,oneof"`
}

func (*GripperCommand_Request_ClawGripperCommand) isGripperCommand_Request_Command() {}

// The feedback for the gripper command that will provide information on the progress
// of the command.
type GripperCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*GripperCommand_Feedback_ClawGripperFeedback
	Command isGripperCommand_Feedback_Command `protobuf_oneof:"command"`
	Status  RobotCommandFeedbackStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.RobotCommandFeedbackStatus_Status" json:"status,omitempty"`
}

func (x *GripperCommand_Feedback) Reset() {
	*x = GripperCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GripperCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GripperCommand_Feedback) ProtoMessage() {}

func (x *GripperCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GripperCommand_Feedback.ProtoReflect.Descriptor instead.
func (*GripperCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_command_proto_rawDescGZIP(), []int{0, 1}
}

func (m *GripperCommand_Feedback) GetCommand() isGripperCommand_Feedback_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *GripperCommand_Feedback) GetClawGripperFeedback() *ClawGripperCommand_Feedback {
	if x, ok := x.GetCommand().(*GripperCommand_Feedback_ClawGripperFeedback); ok {
		return x.ClawGripperFeedback
	}
	return nil
}

func (x *GripperCommand_Feedback) GetStatus() RobotCommandFeedbackStatus_Status {
	if x != nil {
		return x.Status
	}
	return RobotCommandFeedbackStatus_STATUS_UNKNOWN
}

type isGripperCommand_Feedback_Command interface {
	isGripperCommand_Feedback_Command()
}

type GripperCommand_Feedback_ClawGripperFeedback struct {
	// Feedback for the claw gripper command.
	ClawGripperFeedback *ClawGripperCommand_Feedback `protobuf:"bytes,1,opt,name=claw_gripper_feedback,json=clawGripperFeedback,proto3,oneof"`
}

func (*GripperCommand_Feedback_ClawGripperFeedback) isGripperCommand_Feedback_Command() {}

type ClawGripperCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Scalar trajectory for opening/closing the gripper. If 1 point is specified
	// with no end time, we will execute a minimum time trajectory that observes
	// velocity and acceleration constraints. Otherwise, we will use piecewise
	// cubic interpolation, meaning there will be a cubic polynomial between each
	// trajectory point, with continuous position and velocity at each trajectory
	// point. If the requested trajectory violates the velocity or acceleration
	// constraints below, a trajectory that is as close as possible but still
	// obeys the constraints will be executed instead.
	// position is radians: 0 is fully closed -1.5708 (-90 degrees) is fully open
	// velocity is radians / sec.
	Trajectory *ScalarTrajectory `protobuf:"bytes,5,opt,name=trajectory,proto3" json:"trajectory,omitempty"`
	// If unspecified, a default value of 10 (rad/s) will be used.
	MaximumOpenCloseVelocity *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=maximum_open_close_velocity,json=maximumOpenCloseVelocity,proto3" json:"maximum_open_close_velocity,omitempty"`
	// If unspecified, a default value of 40 (rad/s/s) will be used.
	MaximumOpenCloseAcceleration *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=maximum_open_close_acceleration,json=maximumOpenCloseAcceleration,proto3" json:"maximum_open_close_acceleration,omitempty"`
	// Maximum torque applied. If unspecified, a default value of 5.5 (Nm) will be used.
	MaximumTorque *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=maximum_torque,json=maximumTorque,proto3" json:"maximum_torque,omitempty"`
	// By default the gripper transitions to force control when it detects an object closing.
	// Setting this field to true disables the transition to force control on contact detection
	// and always keeps the gripper in position control.
	DisableForceOnContact bool `protobuf:"varint,6,opt,name=disable_force_on_contact,json=disableForceOnContact,proto3" json:"disable_force_on_contact,omitempty"`
}

func (x *ClawGripperCommand_Request) Reset() {
	*x = ClawGripperCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClawGripperCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClawGripperCommand_Request) ProtoMessage() {}

func (x *ClawGripperCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClawGripperCommand_Request.ProtoReflect.Descriptor instead.
func (*ClawGripperCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_command_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ClawGripperCommand_Request) GetTrajectory() *ScalarTrajectory {
	if x != nil {
		return x.Trajectory
	}
	return nil
}

func (x *ClawGripperCommand_Request) GetMaximumOpenCloseVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumOpenCloseVelocity
	}
	return nil
}

func (x *ClawGripperCommand_Request) GetMaximumOpenCloseAcceleration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumOpenCloseAcceleration
	}
	return nil
}

func (x *ClawGripperCommand_Request) GetMaximumTorque() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumTorque
	}
	return nil
}

func (x *ClawGripperCommand_Request) GetDisableForceOnContact() bool {
	if x != nil {
		return x.DisableForceOnContact
	}
	return false
}

type ClawGripperCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the command.
	Status ClawGripperCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.ClawGripperCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *ClawGripperCommand_Feedback) Reset() {
	*x = ClawGripperCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_gripper_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClawGripperCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClawGripperCommand_Feedback) ProtoMessage() {}

func (x *ClawGripperCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_gripper_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClawGripperCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ClawGripperCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_gripper_command_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ClawGripperCommand_Feedback) GetStatus() ClawGripperCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return ClawGripperCommand_Feedback_STATUS_UNKNOWN
}

var File_bosdyn_api_gripper_command_proto protoreflect.FileDescriptor

var file_bosdyn_api_gripper_command_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc0, 0x02, 0x0a, 0x0e,
	0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x70,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x14, 0x63, 0x6c, 0x61,
	0x77, 0x5f, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x77, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x12, 0x63, 0x6c, 0x61, 0x77, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x1a, 0xbb, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x5d, 0x0a,
	0x15, 0x63, 0x6c, 0x61, 0x77, 0x5f, 0x67, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6c, 0x61, 0x77, 0x47, 0x72,
	0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x77, 0x47, 0x72, 0x69,
	0x70, 0x70, 0x65, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xde,
	0x04, 0x0a, 0x12, 0x43, 0x6c, 0x61, 0x77, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x8d, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x5b, 0x0a, 0x1b, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x1f,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1c, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x74, 0x6f, 0x72,
	0x71, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d,
	0x54, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4a,
	0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0xb7, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x43, 0x6c, 0x61, 0x77, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x63, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41,
	0x50, 0x50, 0x4c, 0x59, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x03, 0x42,
	0x48, 0x42, 0x13, 0x47, 0x72, 0x69, 0x70, 0x70, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_bosdyn_api_gripper_command_proto_rawDescOnce sync.Once
	file_bosdyn_api_gripper_command_proto_rawDescData = file_bosdyn_api_gripper_command_proto_rawDesc
)

func file_bosdyn_api_gripper_command_proto_rawDescGZIP() []byte {
	file_bosdyn_api_gripper_command_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_gripper_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_gripper_command_proto_rawDescData)
	})
	return file_bosdyn_api_gripper_command_proto_rawDescData
}

var file_bosdyn_api_gripper_command_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_gripper_command_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_bosdyn_api_gripper_command_proto_goTypes = []interface{}{
	(ClawGripperCommand_Feedback_Status)(0), // 0: bosdyn.api.ClawGripperCommand.Feedback.Status
	(*GripperCommand)(nil),                  // 1: bosdyn.api.GripperCommand
	(*ClawGripperCommand)(nil),              // 2: bosdyn.api.ClawGripperCommand
	(*GripperCommand_Request)(nil),          // 3: bosdyn.api.GripperCommand.Request
	(*GripperCommand_Feedback)(nil),         // 4: bosdyn.api.GripperCommand.Feedback
	(*ClawGripperCommand_Request)(nil),      // 5: bosdyn.api.ClawGripperCommand.Request
	(*ClawGripperCommand_Feedback)(nil),     // 6: bosdyn.api.ClawGripperCommand.Feedback
	(RobotCommandFeedbackStatus_Status)(0),  // 7: bosdyn.api.RobotCommandFeedbackStatus.Status
	(*ScalarTrajectory)(nil),                // 8: bosdyn.api.ScalarTrajectory
	(*wrapperspb.DoubleValue)(nil),          // 9: google.protobuf.DoubleValue
}
var file_bosdyn_api_gripper_command_proto_depIdxs = []int32{
	5, // 0: bosdyn.api.GripperCommand.Request.claw_gripper_command:type_name -> bosdyn.api.ClawGripperCommand.Request
	6, // 1: bosdyn.api.GripperCommand.Feedback.claw_gripper_feedback:type_name -> bosdyn.api.ClawGripperCommand.Feedback
	7, // 2: bosdyn.api.GripperCommand.Feedback.status:type_name -> bosdyn.api.RobotCommandFeedbackStatus.Status
	8, // 3: bosdyn.api.ClawGripperCommand.Request.trajectory:type_name -> bosdyn.api.ScalarTrajectory
	9, // 4: bosdyn.api.ClawGripperCommand.Request.maximum_open_close_velocity:type_name -> google.protobuf.DoubleValue
	9, // 5: bosdyn.api.ClawGripperCommand.Request.maximum_open_close_acceleration:type_name -> google.protobuf.DoubleValue
	9, // 6: bosdyn.api.ClawGripperCommand.Request.maximum_torque:type_name -> google.protobuf.DoubleValue
	0, // 7: bosdyn.api.ClawGripperCommand.Feedback.status:type_name -> bosdyn.api.ClawGripperCommand.Feedback.Status
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_bosdyn_api_gripper_command_proto_init() }
func file_bosdyn_api_gripper_command_proto_init() {
	if File_bosdyn_api_gripper_command_proto != nil {
		return
	}
	file_bosdyn_api_basic_command_proto_init()
	file_bosdyn_api_trajectory_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_gripper_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClawGripperCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GripperCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClawGripperCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_gripper_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClawGripperCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_gripper_command_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GripperCommand_Request_ClawGripperCommand)(nil),
	}
	file_bosdyn_api_gripper_command_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*GripperCommand_Feedback_ClawGripperFeedback)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_gripper_command_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_gripper_command_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_gripper_command_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_gripper_command_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_gripper_command_proto_msgTypes,
	}.Build()
	File_bosdyn_api_gripper_command_proto = out.File
	file_bosdyn_api_gripper_command_proto_rawDesc = nil
	file_bosdyn_api_gripper_command_proto_goTypes = nil
	file_bosdyn_api_gripper_command_proto_depIdxs = nil
}
