// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/sparse_features.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeypointSet_KeypointType int32

const (
	KeypointSet_KEYPOINT_UNKNOWN KeypointSet_KeypointType = 0
	// Keypoints that consist only of image coordinates. Simple keypoints do not have
	// descriptors.
	KeypointSet_KEYPOINT_SIMPLE KeypointSet_KeypointType = 1
	// Keypoints detected by the ORB feature extraction algorithm (Oriented FAST and Rotated
	// BRIEF.)
	KeypointSet_KEYPOINT_ORB KeypointSet_KeypointType = 2
)

// Enum value maps for KeypointSet_KeypointType.
var (
	KeypointSet_KeypointType_name = map[int32]string{
		0: "KEYPOINT_UNKNOWN",
		1: "KEYPOINT_SIMPLE",
		2: "KEYPOINT_ORB",
	}
	KeypointSet_KeypointType_value = map[string]int32{
		"KEYPOINT_UNKNOWN": 0,
		"KEYPOINT_SIMPLE":  1,
		"KEYPOINT_ORB":     2,
	}
)

func (x KeypointSet_KeypointType) Enum() *KeypointSet_KeypointType {
	p := new(KeypointSet_KeypointType)
	*p = x
	return p
}

func (x KeypointSet_KeypointType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeypointSet_KeypointType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_sparse_features_proto_enumTypes[0].Descriptor()
}

func (KeypointSet_KeypointType) Type() protoreflect.EnumType {
	return &file_bosdyn_api_sparse_features_proto_enumTypes[0]
}

func (x KeypointSet_KeypointType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeypointSet_KeypointType.Descriptor instead.
func (KeypointSet_KeypointType) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_sparse_features_proto_rawDescGZIP(), []int{1, 0}
}

// A point of interest in an image expressed as a pixel coordinate with associated metadata.
type Keypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image pixel coordinates of the keypoint.
	Coordinates *Vec2 `protobuf:"bytes,2,opt,name=coordinates,proto3" json:"coordinates,omitempty"`
	// A binary descriptor representing the keypoint.
	BinaryDescriptor []byte `protobuf:"bytes,3,opt,name=binary_descriptor,json=binaryDescriptor,proto3" json:"binary_descriptor,omitempty"`
	// The score of this keypoint from the underlying keypoint detector, if applicable.
	Score float32 `protobuf:"fixed32,4,opt,name=score,proto3" json:"score,omitempty"`
	// The diameter in pixels of the local neighborhood used to construct the descriptor.
	Size float32 `protobuf:"fixed32,5,opt,name=size,proto3" json:"size,omitempty"`
	// The orientation of the keypoint, if applicable.
	Angle float32 `protobuf:"fixed32,6,opt,name=angle,proto3" json:"angle,omitempty"`
}

func (x *Keypoint) Reset() {
	*x = Keypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_sparse_features_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Keypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keypoint) ProtoMessage() {}

func (x *Keypoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_sparse_features_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keypoint.ProtoReflect.Descriptor instead.
func (*Keypoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_sparse_features_proto_rawDescGZIP(), []int{0}
}

func (x *Keypoint) GetCoordinates() *Vec2 {
	if x != nil {
		return x.Coordinates
	}
	return nil
}

func (x *Keypoint) GetBinaryDescriptor() []byte {
	if x != nil {
		return x.BinaryDescriptor
	}
	return nil
}

func (x *Keypoint) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *Keypoint) GetSize() float32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Keypoint) GetAngle() float32 {
	if x != nil {
		return x.Angle
	}
	return 0
}

// A set of keypoints detected in a single image.
type KeypointSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A set of detected keypoints and associated metadata.
	Keypoints []*Keypoint `protobuf:"bytes,2,rep,name=keypoints,proto3" json:"keypoints,omitempty"`
	// The algorithm used to compute this keypoint and its descriptor.
	Type KeypointSet_KeypointType `protobuf:"varint,3,opt,name=type,proto3,enum=bosdyn.api.KeypointSet_KeypointType" json:"type,omitempty"`
}

func (x *KeypointSet) Reset() {
	*x = KeypointSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_sparse_features_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeypointSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeypointSet) ProtoMessage() {}

func (x *KeypointSet) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_sparse_features_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeypointSet.ProtoReflect.Descriptor instead.
func (*KeypointSet) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_sparse_features_proto_rawDescGZIP(), []int{1}
}

func (x *KeypointSet) GetKeypoints() []*Keypoint {
	if x != nil {
		return x.Keypoints
	}
	return nil
}

func (x *KeypointSet) GetType() KeypointSet_KeypointType {
	if x != nil {
		return x.Type
	}
	return KeypointSet_KEYPOINT_UNKNOWN
}

type Match struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index in the reference KeypointSet of the keypoint in the matching pair.
	ReferenceIndex int32 `protobuf:"varint,2,opt,name=reference_index,json=referenceIndex,proto3" json:"reference_index,omitempty"`
	// The index in the live KeypointSet of the keypoint in the matching pair.
	LiveIndex int32 `protobuf:"varint,3,opt,name=live_index,json=liveIndex,proto3" json:"live_index,omitempty"`
	// The distance in descriptor space between the two keypoints.
	Distance float32 `protobuf:"fixed32,4,opt,name=distance,proto3" json:"distance,omitempty"`
}

func (x *Match) Reset() {
	*x = Match{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_sparse_features_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Match) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Match) ProtoMessage() {}

func (x *Match) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_sparse_features_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Match.ProtoReflect.Descriptor instead.
func (*Match) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_sparse_features_proto_rawDescGZIP(), []int{2}
}

func (x *Match) GetReferenceIndex() int32 {
	if x != nil {
		return x.ReferenceIndex
	}
	return 0
}

func (x *Match) GetLiveIndex() int32 {
	if x != nil {
		return x.LiveIndex
	}
	return 0
}

func (x *Match) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

// A pair of keypoint sets containing only features in common that have been matched.
type KeypointMatches struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of common keypoints in a first ("reference") image.
	ReferenceKeypoints *KeypointSet `protobuf:"bytes,2,opt,name=reference_keypoints,json=referenceKeypoints,proto3" json:"reference_keypoints,omitempty"`
	// The set of common keypoints in a second ("live") image.
	LiveKeypoints *KeypointSet `protobuf:"bytes,3,opt,name=live_keypoints,json=liveKeypoints,proto3" json:"live_keypoints,omitempty"`
	// Indices of pairs of matches in the two KeypointSets and their distance measure.
	Matches []*Match `protobuf:"bytes,4,rep,name=matches,proto3" json:"matches,omitempty"`
}

func (x *KeypointMatches) Reset() {
	*x = KeypointMatches{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_sparse_features_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeypointMatches) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeypointMatches) ProtoMessage() {}

func (x *KeypointMatches) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_sparse_features_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeypointMatches.ProtoReflect.Descriptor instead.
func (*KeypointMatches) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_sparse_features_proto_rawDescGZIP(), []int{3}
}

func (x *KeypointMatches) GetReferenceKeypoints() *KeypointSet {
	if x != nil {
		return x.ReferenceKeypoints
	}
	return nil
}

func (x *KeypointMatches) GetLiveKeypoints() *KeypointSet {
	if x != nil {
		return x.LiveKeypoints
	}
	return nil
}

func (x *KeypointMatches) GetMatches() []*Match {
	if x != nil {
		return x.Matches
	}
	return nil
}

var File_bosdyn_api_sparse_features_proto protoreflect.FileDescriptor

var file_bosdyn_api_sparse_features_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x61,
	0x72, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x19,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x0b, 0x63,
	0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69,
	0x6e, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x4b, 0x65, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4b,
	0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x45, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x4f, 0x52, 0x42,
	0x10, 0x02, 0x22, 0x6b, 0x0a, 0x05, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6c, 0x69, 0x76, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0xc8, 0x01, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x13, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a,
	0x0e, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x65, 0x74, 0x52, 0x0d,
	0x6c, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x07, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x42, 0x48, 0x42, 0x13, 0x53, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68,
	0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_sparse_features_proto_rawDescOnce sync.Once
	file_bosdyn_api_sparse_features_proto_rawDescData = file_bosdyn_api_sparse_features_proto_rawDesc
)

func file_bosdyn_api_sparse_features_proto_rawDescGZIP() []byte {
	file_bosdyn_api_sparse_features_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_sparse_features_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_sparse_features_proto_rawDescData)
	})
	return file_bosdyn_api_sparse_features_proto_rawDescData
}

var file_bosdyn_api_sparse_features_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_bosdyn_api_sparse_features_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_bosdyn_api_sparse_features_proto_goTypes = []interface{}{
	(KeypointSet_KeypointType)(0), // 0: bosdyn.api.KeypointSet.KeypointType
	(*Keypoint)(nil),              // 1: bosdyn.api.Keypoint
	(*KeypointSet)(nil),           // 2: bosdyn.api.KeypointSet
	(*Match)(nil),                 // 3: bosdyn.api.Match
	(*KeypointMatches)(nil),       // 4: bosdyn.api.KeypointMatches
	(*Vec2)(nil),                  // 5: bosdyn.api.Vec2
}
var file_bosdyn_api_sparse_features_proto_depIdxs = []int32{
	5, // 0: bosdyn.api.Keypoint.coordinates:type_name -> bosdyn.api.Vec2
	1, // 1: bosdyn.api.KeypointSet.keypoints:type_name -> bosdyn.api.Keypoint
	0, // 2: bosdyn.api.KeypointSet.type:type_name -> bosdyn.api.KeypointSet.KeypointType
	2, // 3: bosdyn.api.KeypointMatches.reference_keypoints:type_name -> bosdyn.api.KeypointSet
	2, // 4: bosdyn.api.KeypointMatches.live_keypoints:type_name -> bosdyn.api.KeypointSet
	3, // 5: bosdyn.api.KeypointMatches.matches:type_name -> bosdyn.api.Match
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_bosdyn_api_sparse_features_proto_init() }
func file_bosdyn_api_sparse_features_proto_init() {
	if File_bosdyn_api_sparse_features_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_sparse_features_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Keypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_sparse_features_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeypointSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_sparse_features_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Match); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_sparse_features_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeypointMatches); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_sparse_features_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_sparse_features_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_sparse_features_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_sparse_features_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_sparse_features_proto_msgTypes,
	}.Build()
	File_bosdyn_api_sparse_features_proto = out.File
	file_bosdyn_api_sparse_features_proto_rawDesc = nil
	file_bosdyn_api_sparse_features_proto_goTypes = nil
	file_bosdyn_api_sparse_features_proto_depIdxs = nil
}
