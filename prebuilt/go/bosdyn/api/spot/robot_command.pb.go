// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot/robot_command.proto

package spot

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The locomotion hint specifying the gait of the robot.
type LocomotionHint int32

const (
	// Invalid; do not use.
	LocomotionHint_HINT_UNKNOWN LocomotionHint = 0
	// No hint, robot chooses an appropriate gait (typically trot.)
	LocomotionHint_HINT_AUTO LocomotionHint = 1
	// Most robust gait which moves diagonal legs together.
	LocomotionHint_HINT_TROT LocomotionHint = 2
	// Trot which comes to a stand when not commanded to move.
	LocomotionHint_HINT_SPEED_SELECT_TROT LocomotionHint = 3
	// Slow and steady gait which moves only one foot at a time.
	LocomotionHint_HINT_CRAWL LocomotionHint = 4
	// Crawl which comes to a stand when not commanded to move.
	LocomotionHint_HINT_SPEED_SELECT_CRAWL LocomotionHint = 10
	// Four beat gait where one foot touches down at a time.
	LocomotionHint_HINT_AMBLE LocomotionHint = 5
	// Amble which comes to a stand when not commanded to move.
	LocomotionHint_HINT_SPEED_SELECT_AMBLE LocomotionHint = 6
	// Demo gait which moves diagonal leg pairs together with an aerial phase.
	LocomotionHint_HINT_JOG LocomotionHint = 7
	// Demo gait which hops while holding some feet in the air.
	LocomotionHint_HINT_HOP LocomotionHint = 8
	// HINT_AUTO_TROT is deprecated due to the name being too similar to the Spot Autowalk feature.
	// It has been replaced by HINT_SPEED_SELECT_TROT. Keeping this value in here for now for backwards
	// compatibility, but this may be removed in future releases.
	LocomotionHint_HINT_AUTO_TROT LocomotionHint = 3
	// HINT_AUTO_AMBLE is deprecated due to the name being too similar to the Spot Autowalk feature.
	// It has been replaced by HINT_SPEED_SELECT_AMBLE. Keeping this value in here for now for backwards
	// compatibility, but this may be removed in future releases.
	LocomotionHint_HINT_AUTO_AMBLE LocomotionHint = 6
)

// Enum value maps for LocomotionHint.
var (
	LocomotionHint_name = map[int32]string{
		0:  "HINT_UNKNOWN",
		1:  "HINT_AUTO",
		2:  "HINT_TROT",
		3:  "HINT_SPEED_SELECT_TROT",
		4:  "HINT_CRAWL",
		10: "HINT_SPEED_SELECT_CRAWL",
		5:  "HINT_AMBLE",
		6:  "HINT_SPEED_SELECT_AMBLE",
		7:  "HINT_JOG",
		8:  "HINT_HOP",
		// Duplicate value: 3: "HINT_AUTO_TROT",
		// Duplicate value: 6: "HINT_AUTO_AMBLE",
	}
	LocomotionHint_value = map[string]int32{
		"HINT_UNKNOWN":            0,
		"HINT_AUTO":               1,
		"HINT_TROT":               2,
		"HINT_SPEED_SELECT_TROT":  3,
		"HINT_CRAWL":              4,
		"HINT_SPEED_SELECT_CRAWL": 10,
		"HINT_AMBLE":              5,
		"HINT_SPEED_SELECT_AMBLE": 6,
		"HINT_JOG":                7,
		"HINT_HOP":                8,
		"HINT_AUTO_TROT":          3,
		"HINT_AUTO_AMBLE":         6,
	}
)

func (x LocomotionHint) Enum() *LocomotionHint {
	p := new(LocomotionHint)
	*p = x
	return p
}

func (x LocomotionHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocomotionHint) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_robot_command_proto_enumTypes[0].Descriptor()
}

func (LocomotionHint) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_robot_command_proto_enumTypes[0]
}

func (x LocomotionHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocomotionHint.Descriptor instead.
func (LocomotionHint) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{0}
}

// The type of swing height for a step.
type SwingHeight int32

const (
	SwingHeight_SWING_HEIGHT_UNKNOWN SwingHeight = 0 // Invalid; do not use.
	SwingHeight_SWING_HEIGHT_LOW     SwingHeight = 1 // Low-stepping. Robot will try to only swing legs a few cm away from ground.
	SwingHeight_SWING_HEIGHT_MEDIUM  SwingHeight = 2 // Default for most cases, use other values with caution.
	SwingHeight_SWING_HEIGHT_HIGH    SwingHeight = 3 // High-stepping. Possibly useful with degraded vision operation.
)

// Enum value maps for SwingHeight.
var (
	SwingHeight_name = map[int32]string{
		0: "SWING_HEIGHT_UNKNOWN",
		1: "SWING_HEIGHT_LOW",
		2: "SWING_HEIGHT_MEDIUM",
		3: "SWING_HEIGHT_HIGH",
	}
	SwingHeight_value = map[string]int32{
		"SWING_HEIGHT_UNKNOWN": 0,
		"SWING_HEIGHT_LOW":     1,
		"SWING_HEIGHT_MEDIUM":  2,
		"SWING_HEIGHT_HIGH":    3,
	}
)

func (x SwingHeight) Enum() *SwingHeight {
	p := new(SwingHeight)
	*p = x
	return p
}

func (x SwingHeight) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SwingHeight) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_robot_command_proto_enumTypes[1].Descriptor()
}

func (SwingHeight) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_robot_command_proto_enumTypes[1]
}

func (x SwingHeight) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SwingHeight.Descriptor instead.
func (SwingHeight) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{1}
}

// Setting for how the robot interprets base offset pitch & roll components.
// In the default case (ROTATION_SETTING_OFFSET) the robot will naturally align the body to the pitch of the current terrain.
// In some circumstances, the user may wish to override this value and try to maintain alignment
// with respect to gravity. Be careful with this setting as it may likely degrade robot performance in
// complex terrain, e.g. stairs, platforms, or slopes of sufficiently high grade.
type BodyControlParams_RotationSetting int32

const (
	BodyControlParams_ROTATION_SETTING_UNKNOWN  BodyControlParams_RotationSetting = 0 // Invalid; do not use.
	BodyControlParams_ROTATION_SETTING_OFFSET   BodyControlParams_RotationSetting = 1 // Pitch & Roll are offset with respect to orientation of the footprint.
	BodyControlParams_ROTATION_SETTING_ABSOLUTE BodyControlParams_RotationSetting = 2 // Pitch & Roll are offset with respect to gravity.
)

// Enum value maps for BodyControlParams_RotationSetting.
var (
	BodyControlParams_RotationSetting_name = map[int32]string{
		0: "ROTATION_SETTING_UNKNOWN",
		1: "ROTATION_SETTING_OFFSET",
		2: "ROTATION_SETTING_ABSOLUTE",
	}
	BodyControlParams_RotationSetting_value = map[string]int32{
		"ROTATION_SETTING_UNKNOWN":  0,
		"ROTATION_SETTING_OFFSET":   1,
		"ROTATION_SETTING_ABSOLUTE": 2,
	}
)

func (x BodyControlParams_RotationSetting) Enum() *BodyControlParams_RotationSetting {
	p := new(BodyControlParams_RotationSetting)
	*p = x
	return p
}

func (x BodyControlParams_RotationSetting) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyControlParams_RotationSetting) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_robot_command_proto_enumTypes[2].Descriptor()
}

func (BodyControlParams_RotationSetting) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_robot_command_proto_enumTypes[2]
}

func (x BodyControlParams_RotationSetting) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyControlParams_RotationSetting.Descriptor instead.
func (BodyControlParams_RotationSetting) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{1, 0}
}

// Options for Grated Surfaces Mode. When Grated Surfaces Mode is on, the robot assumes the
// ground below it is made of grated metal or other repeated pattern. When on, the robot will
// make assumptions about the environment structure and more aggressively filter noise in
// perception data.
type TerrainParams_GratedSurfacesMode int32

const (
	TerrainParams_GRATED_SURFACES_MODE_UNKNOWN TerrainParams_GratedSurfacesMode = 0 // Invalid; do not use.
	TerrainParams_GRATED_SURFACES_MODE_OFF     TerrainParams_GratedSurfacesMode = 1
	TerrainParams_GRATED_SURFACES_MODE_ON      TerrainParams_GratedSurfacesMode = 2
	TerrainParams_GRATED_SURFACES_MODE_AUTO    TerrainParams_GratedSurfacesMode = 3 // Robot will automatically turn mode on or off
)

// Enum value maps for TerrainParams_GratedSurfacesMode.
var (
	TerrainParams_GratedSurfacesMode_name = map[int32]string{
		0: "GRATED_SURFACES_MODE_UNKNOWN",
		1: "GRATED_SURFACES_MODE_OFF",
		2: "GRATED_SURFACES_MODE_ON",
		3: "GRATED_SURFACES_MODE_AUTO",
	}
	TerrainParams_GratedSurfacesMode_value = map[string]int32{
		"GRATED_SURFACES_MODE_UNKNOWN": 0,
		"GRATED_SURFACES_MODE_OFF":     1,
		"GRATED_SURFACES_MODE_ON":      2,
		"GRATED_SURFACES_MODE_AUTO":    3,
	}
)

func (x TerrainParams_GratedSurfacesMode) Enum() *TerrainParams_GratedSurfacesMode {
	p := new(TerrainParams_GratedSurfacesMode)
	*p = x
	return p
}

func (x TerrainParams_GratedSurfacesMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerrainParams_GratedSurfacesMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_robot_command_proto_enumTypes[3].Descriptor()
}

func (TerrainParams_GratedSurfacesMode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_robot_command_proto_enumTypes[3]
}

func (x TerrainParams_GratedSurfacesMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerrainParams_GratedSurfacesMode.Descriptor instead.
func (TerrainParams_GratedSurfacesMode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{3, 0}
}

// Indicates what external force estimate/override the robot should use.
// By default, the external force estimator is disabled on the robot.
type BodyExternalForceParams_ExternalForceIndicator int32

const (
	BodyExternalForceParams_EXTERNAL_FORCE_NONE         BodyExternalForceParams_ExternalForceIndicator = 0 // No external forces considered.
	BodyExternalForceParams_EXTERNAL_FORCE_USE_ESTIMATE BodyExternalForceParams_ExternalForceIndicator = 1 // Use external forces estimated by the robot
	BodyExternalForceParams_EXTERNAL_FORCE_USE_OVERRIDE BodyExternalForceParams_ExternalForceIndicator = 2 // Use external forces specified in an override vector.
)

// Enum value maps for BodyExternalForceParams_ExternalForceIndicator.
var (
	BodyExternalForceParams_ExternalForceIndicator_name = map[int32]string{
		0: "EXTERNAL_FORCE_NONE",
		1: "EXTERNAL_FORCE_USE_ESTIMATE",
		2: "EXTERNAL_FORCE_USE_OVERRIDE",
	}
	BodyExternalForceParams_ExternalForceIndicator_value = map[string]int32{
		"EXTERNAL_FORCE_NONE":         0,
		"EXTERNAL_FORCE_USE_ESTIMATE": 1,
		"EXTERNAL_FORCE_USE_OVERRIDE": 2,
	}
)

func (x BodyExternalForceParams_ExternalForceIndicator) Enum() *BodyExternalForceParams_ExternalForceIndicator {
	p := new(BodyExternalForceParams_ExternalForceIndicator)
	*p = x
	return p
}

func (x BodyExternalForceParams_ExternalForceIndicator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyExternalForceParams_ExternalForceIndicator) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_robot_command_proto_enumTypes[4].Descriptor()
}

func (BodyExternalForceParams_ExternalForceIndicator) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_robot_command_proto_enumTypes[4]
}

func (x BodyExternalForceParams_ExternalForceIndicator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyExternalForceParams_ExternalForceIndicator.Descriptor instead.
func (BodyExternalForceParams_ExternalForceIndicator) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{4, 0}
}

// Params common across spot movement and mobility.
type MobilityParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max allowable velocity at any point in trajectory.
	VelLimit *api.SE2VelocityLimit `protobuf:"bytes,1,opt,name=vel_limit,json=velLimit,proto3" json:"vel_limit,omitempty"`
	// Parameters for controlling Spot's body during motion.
	BodyControl *BodyControlParams `protobuf:"bytes,2,opt,name=body_control,json=bodyControl,proto3" json:"body_control,omitempty"`
	// Desired gait during locomotion
	LocomotionHint LocomotionHint `protobuf:"varint,3,opt,name=locomotion_hint,json=locomotionHint,proto3,enum=bosdyn.api.spot.LocomotionHint" json:"locomotion_hint,omitempty"`
	// Stairs are only supported in trot gaits. Using this hint will override some user defaults in
	// order to optimize stair behavior.
	StairHint bool `protobuf:"varint,4,opt,name=stair_hint,json=stairHint,proto3" json:"stair_hint,omitempty"`
	// Allow the robot to move with degraded perception when there are perception faults.
	AllowDegradedPerception bool `protobuf:"varint,5,opt,name=allow_degraded_perception,json=allowDegradedPerception,proto3" json:"allow_degraded_perception,omitempty"`
	// Control of obstacle avoidance.
	ObstacleParams *ObstacleParams `protobuf:"bytes,6,opt,name=obstacle_params,json=obstacleParams,proto3" json:"obstacle_params,omitempty"`
	// Swing height setting
	SwingHeight SwingHeight `protobuf:"varint,7,opt,name=swing_height,json=swingHeight,proto3,enum=bosdyn.api.spot.SwingHeight" json:"swing_height,omitempty"`
	// Ground terrain parameters.
	TerrainParams *TerrainParams `protobuf:"bytes,8,opt,name=terrain_params,json=terrainParams,proto3" json:"terrain_params,omitempty"`
	// Prevent the robot from using StairTracker even if in stairs mode.
	DisallowStairTracker bool `protobuf:"varint,9,opt,name=disallow_stair_tracker,json=disallowStairTracker,proto3" json:"disallow_stair_tracker,omitempty"`
	// Robot Body External Force parameters
	ExternalForceParams *BodyExternalForceParams `protobuf:"bytes,10,opt,name=external_force_params,json=externalForceParams,proto3" json:"external_force_params,omitempty"`
	// Prevent the robot from pitching to get a better look at rearward terrain except in stairs mode.
	DisallowNonStairsPitchLimiting bool `protobuf:"varint,11,opt,name=disallow_non_stairs_pitch_limiting,json=disallowNonStairsPitchLimiting,proto3" json:"disallow_non_stairs_pitch_limiting,omitempty"`
	// Disable the secondary nearmap-based cliff avoidance that runs while on stairs.
	DisableNearmapCliffAvoidance bool `protobuf:"varint,12,opt,name=disable_nearmap_cliff_avoidance,json=disableNearmapCliffAvoidance,proto3" json:"disable_nearmap_cliff_avoidance,omitempty"`
}

func (x *MobilityParams) Reset() {
	*x = MobilityParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MobilityParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MobilityParams) ProtoMessage() {}

func (x *MobilityParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MobilityParams.ProtoReflect.Descriptor instead.
func (*MobilityParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{0}
}

func (x *MobilityParams) GetVelLimit() *api.SE2VelocityLimit {
	if x != nil {
		return x.VelLimit
	}
	return nil
}

func (x *MobilityParams) GetBodyControl() *BodyControlParams {
	if x != nil {
		return x.BodyControl
	}
	return nil
}

func (x *MobilityParams) GetLocomotionHint() LocomotionHint {
	if x != nil {
		return x.LocomotionHint
	}
	return LocomotionHint_HINT_UNKNOWN
}

func (x *MobilityParams) GetStairHint() bool {
	if x != nil {
		return x.StairHint
	}
	return false
}

func (x *MobilityParams) GetAllowDegradedPerception() bool {
	if x != nil {
		return x.AllowDegradedPerception
	}
	return false
}

func (x *MobilityParams) GetObstacleParams() *ObstacleParams {
	if x != nil {
		return x.ObstacleParams
	}
	return nil
}

func (x *MobilityParams) GetSwingHeight() SwingHeight {
	if x != nil {
		return x.SwingHeight
	}
	return SwingHeight_SWING_HEIGHT_UNKNOWN
}

func (x *MobilityParams) GetTerrainParams() *TerrainParams {
	if x != nil {
		return x.TerrainParams
	}
	return nil
}

func (x *MobilityParams) GetDisallowStairTracker() bool {
	if x != nil {
		return x.DisallowStairTracker
	}
	return false
}

func (x *MobilityParams) GetExternalForceParams() *BodyExternalForceParams {
	if x != nil {
		return x.ExternalForceParams
	}
	return nil
}

func (x *MobilityParams) GetDisallowNonStairsPitchLimiting() bool {
	if x != nil {
		return x.DisallowNonStairsPitchLimiting
	}
	return false
}

func (x *MobilityParams) GetDisableNearmapCliffAvoidance() bool {
	if x != nil {
		return x.DisableNearmapCliffAvoidance
	}
	return false
}

// Parameters for offsetting the body from the normal default.
type BodyControlParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Desired base offset relative to the footprint pseudo-frame.
	// The footprint pseudo-frame is a gravity aligned frame with its origin located at the
	// geometric center of the feet in the X-Y axis, and at the nominal height of the hips in the Z axis.
	// The yaw of the frame (wrt the world) is calcuated by the average foot locations, and is aligned with the feet.
	BaseOffsetRtFootprint *api.SE3Trajectory `protobuf:"bytes,1,opt,name=base_offset_rt_footprint,json=baseOffsetRtFootprint,proto3" json:"base_offset_rt_footprint,omitempty"`
	// The rotation setting for the robot body.
	RotationSetting BodyControlParams_RotationSetting `protobuf:"varint,2,opt,name=rotation_setting,json=rotationSetting,proto3,enum=bosdyn.api.spot.BodyControlParams_RotationSetting" json:"rotation_setting,omitempty"`
}

func (x *BodyControlParams) Reset() {
	*x = BodyControlParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyControlParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyControlParams) ProtoMessage() {}

func (x *BodyControlParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyControlParams.ProtoReflect.Descriptor instead.
func (*BodyControlParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{1}
}

func (x *BodyControlParams) GetBaseOffsetRtFootprint() *api.SE3Trajectory {
	if x != nil {
		return x.BaseOffsetRtFootprint
	}
	return nil
}

func (x *BodyControlParams) GetRotationSetting() BodyControlParams_RotationSetting {
	if x != nil {
		return x.RotationSetting
	}
	return BodyControlParams_ROTATION_SETTING_UNKNOWN
}

// Parameters for obstacle avoidance types.
type ObstacleParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Use vision to make the feet avoid obstacles by swinging higher?
	DisableVisionFootObstacleAvoidance bool `protobuf:"varint,1,opt,name=disable_vision_foot_obstacle_avoidance,json=disableVisionFootObstacleAvoidance,proto3" json:"disable_vision_foot_obstacle_avoidance,omitempty"`
	// Use vision to make the feet avoid constraints like edges of stairs?
	DisableVisionFootConstraintAvoidance bool `protobuf:"varint,2,opt,name=disable_vision_foot_constraint_avoidance,json=disableVisionFootConstraintAvoidance,proto3" json:"disable_vision_foot_constraint_avoidance,omitempty"`
	// Use vision to make the body avoid obstacles?
	DisableVisionBodyObstacleAvoidance bool `protobuf:"varint,3,opt,name=disable_vision_body_obstacle_avoidance,json=disableVisionBodyObstacleAvoidance,proto3" json:"disable_vision_body_obstacle_avoidance,omitempty"`
	// Desired padding around the body to use when attempting to avoid obstacles.
	// Described in meters. Must be >= 0.
	ObstacleAvoidancePadding float64 `protobuf:"fixed64,4,opt,name=obstacle_avoidance_padding,json=obstacleAvoidancePadding,proto3" json:"obstacle_avoidance_padding,omitempty"`
	// Prevent the robot body from raising above nominal height to avoid lower-leg collisions with
	// the terrain.
	DisableVisionFootObstacleBodyAssist bool `protobuf:"varint,5,opt,name=disable_vision_foot_obstacle_body_assist,json=disableVisionFootObstacleBodyAssist,proto3" json:"disable_vision_foot_obstacle_body_assist,omitempty"`
	// Use vision to make the robot avoid stepping into negative obstacles?
	DisableVisionNegativeObstacles bool `protobuf:"varint,6,opt,name=disable_vision_negative_obstacles,json=disableVisionNegativeObstacles,proto3" json:"disable_vision_negative_obstacles,omitempty"`
}

func (x *ObstacleParams) Reset() {
	*x = ObstacleParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObstacleParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObstacleParams) ProtoMessage() {}

func (x *ObstacleParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObstacleParams.ProtoReflect.Descriptor instead.
func (*ObstacleParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{2}
}

func (x *ObstacleParams) GetDisableVisionFootObstacleAvoidance() bool {
	if x != nil {
		return x.DisableVisionFootObstacleAvoidance
	}
	return false
}

func (x *ObstacleParams) GetDisableVisionFootConstraintAvoidance() bool {
	if x != nil {
		return x.DisableVisionFootConstraintAvoidance
	}
	return false
}

func (x *ObstacleParams) GetDisableVisionBodyObstacleAvoidance() bool {
	if x != nil {
		return x.DisableVisionBodyObstacleAvoidance
	}
	return false
}

func (x *ObstacleParams) GetObstacleAvoidancePadding() float64 {
	if x != nil {
		return x.ObstacleAvoidancePadding
	}
	return 0
}

func (x *ObstacleParams) GetDisableVisionFootObstacleBodyAssist() bool {
	if x != nil {
		return x.DisableVisionFootObstacleBodyAssist
	}
	return false
}

func (x *ObstacleParams) GetDisableVisionNegativeObstacles() bool {
	if x != nil {
		return x.DisableVisionNegativeObstacles
	}
	return false
}

// Ground contact parameters that describe the terrain.
type TerrainParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Terrain coefficient of friction user hint. This value must be postive and will clamped if
	// necessary on the robot side. Best suggested values lie in the range between 0.4 and 0.8
	// (which is the robot's default.)
	GroundMuHint *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=ground_mu_hint,json=groundMuHint,proto3" json:"ground_mu_hint,omitempty"`
	// *** Deprecation Warning ***
	// DEPRECATED as of 3.0.0: The boolean field has been replaced by the field grated_surfaces_mode
	// The following field will be deprecated and moved to 'reserved' in a future release.
	//
	// Deprecated: Do not use.
	EnableGratedFloor bool `protobuf:"varint,3,opt,name=enable_grated_floor,json=enableGratedFloor,proto3" json:"enable_grated_floor,omitempty"`
	// The selected option for grated surfaces mode
	GratedSurfacesMode TerrainParams_GratedSurfacesMode `protobuf:"varint,4,opt,name=grated_surfaces_mode,json=gratedSurfacesMode,proto3,enum=bosdyn.api.spot.TerrainParams_GratedSurfacesMode" json:"grated_surfaces_mode,omitempty"`
}

func (x *TerrainParams) Reset() {
	*x = TerrainParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TerrainParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TerrainParams) ProtoMessage() {}

func (x *TerrainParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TerrainParams.ProtoReflect.Descriptor instead.
func (*TerrainParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{3}
}

func (x *TerrainParams) GetGroundMuHint() *wrapperspb.DoubleValue {
	if x != nil {
		return x.GroundMuHint
	}
	return nil
}

// Deprecated: Do not use.
func (x *TerrainParams) GetEnableGratedFloor() bool {
	if x != nil {
		return x.EnableGratedFloor
	}
	return false
}

func (x *TerrainParams) GetGratedSurfacesMode() TerrainParams_GratedSurfacesMode {
	if x != nil {
		return x.GratedSurfacesMode
	}
	return TerrainParams_GRATED_SURFACES_MODE_UNKNOWN
}

// External Force on robot body parameters. This is a beta feature and still can have some odd behaviors.
// By default, the external force estimator is disabled on the robot.
type BodyExternalForceParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of external force described by the parameters.
	ExternalForceIndicator BodyExternalForceParams_ExternalForceIndicator `protobuf:"varint,1,opt,name=external_force_indicator,json=externalForceIndicator,proto3,enum=bosdyn.api.spot.BodyExternalForceParams_ExternalForceIndicator" json:"external_force_indicator,omitempty"`
	// The frame name for which the external_force_override is defined in. The frame must be known to the robot.
	FrameName string `protobuf:"bytes,4,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// Specifies a force that the body should expect to feel. This allows the robot to "lean into"
	// an external force. Be careful using this override, since incorrect information can cause
	// the robot to fall over.
	// For example, if the robot is leaning against a wall in front of it, the force override would be in the
	// negative x dimension. If the robot was pulling something directly behind it, the force override would
	// be in the negative x dimension as well.
	ExternalForceOverride *api.Vec3 `protobuf:"bytes,3,opt,name=external_force_override,json=externalForceOverride,proto3" json:"external_force_override,omitempty"`
}

func (x *BodyExternalForceParams) Reset() {
	*x = BodyExternalForceParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyExternalForceParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyExternalForceParams) ProtoMessage() {}

func (x *BodyExternalForceParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_robot_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyExternalForceParams.ProtoReflect.Descriptor instead.
func (*BodyExternalForceParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_robot_command_proto_rawDescGZIP(), []int{4}
}

func (x *BodyExternalForceParams) GetExternalForceIndicator() BodyExternalForceParams_ExternalForceIndicator {
	if x != nil {
		return x.ExternalForceIndicator
	}
	return BodyExternalForceParams_EXTERNAL_FORCE_NONE
}

func (x *BodyExternalForceParams) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *BodyExternalForceParams) GetExternalForceOverride() *api.Vec3 {
	if x != nil {
		return x.ExternalForceOverride
	}
	return nil
}

var File_bosdyn_api_spot_robot_command_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_robot_command_proto_rawDesc = []byte{
	0x0a, 0x23, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb0,
	0x06, 0x0a, 0x0e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x39, 0x0a, 0x09, 0x76, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x45, 0x0a, 0x0c,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x62, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x48, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x4c,
	0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x6c,
	0x6f, 0x63, 0x6f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x69, 0x72, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x73, 0x74, 0x61, 0x69, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x19,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x65, 0x64, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x6f, 0x62, 0x73, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x0e, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x6e, 0x67,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52, 0x0b, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54, 0x65,
	0x72, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0d, 0x74, 0x65, 0x72,
	0x72, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x74, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x69, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x5c, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72,
	0x63, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x4a,
	0x0a, 0x22, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x73,
	0x74, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x69, 0x72, 0x73, 0x50, 0x69, 0x74,
	0x63, 0x68, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x6d, 0x61, 0x70, 0x5f, 0x63, 0x6c,
	0x69, 0x66, 0x66, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x61, 0x72,
	0x6d, 0x61, 0x70, 0x43, 0x6c, 0x69, 0x66, 0x66, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x22, 0xb3, 0x02, 0x0a, 0x11, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x15, 0x62, 0x61, 0x73, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x52, 0x74, 0x46, 0x6f, 0x6f, 0x74, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x10, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x6b, 0x0a, 0x0f, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e,
	0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f,
	0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x4f, 0x54, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x42, 0x53,
	0x4f, 0x4c, 0x55, 0x54, 0x45, 0x10, 0x02, 0x22, 0xf0, 0x03, 0x0a, 0x0e, 0x4f, 0x62, 0x73, 0x74,
	0x61, 0x63, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x52, 0x0a, 0x26, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f,
	0x74, 0x5f, 0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x62, 0x73,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x56,
	0x0a, 0x28, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x24, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46,
	0x6f, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x41, 0x76, 0x6f,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x26, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6f, 0x62,
	0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c,
	0x65, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x1a, 0x6f, 0x62,
	0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x18,
	0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x41, 0x76, 0x6f, 0x69, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x55, 0x0a, 0x28, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x6f, 0x6f, 0x74, 0x5f,
	0x6f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x61, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x23, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x6f, 0x74, 0x4f, 0x62, 0x73,
	0x74, 0x61, 0x63, 0x6c, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x12,
	0x49, 0x0a, 0x21, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6f, 0x62, 0x73, 0x74, 0x61,
	0x63, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x4f, 0x62, 0x73, 0x74, 0x61, 0x63, 0x6c, 0x65, 0x73, 0x22, 0xff, 0x02, 0x0a, 0x0d, 0x54,
	0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x6d, 0x75, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x75, 0x48, 0x69, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x13, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x47, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x6f, 0x72, 0x12, 0x63, 0x0a, 0x14, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73,
	0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x2e, 0x47, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x12, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x47, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x75, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x20, 0x0a, 0x1c, 0x47, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x46, 0x46, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41,
	0x43, 0x45, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x1d, 0x0a,
	0x19, 0x47, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x53, 0x55, 0x52, 0x46, 0x41, 0x43, 0x45, 0x53,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x03, 0x22, 0xf8, 0x02, 0x0a,
	0x17, 0x42, 0x6f, 0x64, 0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x79, 0x0a, 0x18, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x16, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x48, 0x0a, 0x17, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x66,
	0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x15, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46,
	0x6f, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x73, 0x0a, 0x16,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x49, 0x6e, 0x64,
	0x69, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e,
	0x41, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x43,
	0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x45, 0x53, 0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x46, 0x4f, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x45, 0x10,
	0x02, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x2a, 0xff, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x48, 0x49,
	0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x48, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48,
	0x49, 0x4e, 0x54, 0x5f, 0x54, 0x52, 0x4f, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x49,
	0x4e, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f,
	0x54, 0x52, 0x4f, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x43,
	0x52, 0x41, 0x57, 0x4c, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x53,
	0x50, 0x45, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x52, 0x41, 0x57,
	0x4c, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x4d, 0x42, 0x4c,
	0x45, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x45,
	0x44, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4d, 0x42, 0x4c, 0x45, 0x10, 0x06,
	0x12, 0x0c, 0x0a, 0x08, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x4a, 0x4f, 0x47, 0x10, 0x07, 0x12, 0x0c,
	0x0a, 0x08, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x48, 0x4f, 0x50, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e,
	0x48, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x54, 0x52, 0x4f, 0x54, 0x10, 0x03,
	0x12, 0x13, 0x0a, 0x0f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x5f, 0x41, 0x4d,
	0x42, 0x4c, 0x45, 0x10, 0x06, 0x1a, 0x02, 0x10, 0x01, 0x2a, 0x6d, 0x0a, 0x0b, 0x53, 0x77, 0x69,
	0x6e, 0x67, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x57, 0x49, 0x4e,
	0x47, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x45, 0x49, 0x47,
	0x48, 0x54, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x57, 0x49, 0x4e,
	0x47, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10,
	0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03, 0x42, 0x4b, 0x42, 0x11, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69,
	0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x70, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_robot_command_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_robot_command_proto_rawDescData = file_bosdyn_api_spot_robot_command_proto_rawDesc
)

func file_bosdyn_api_spot_robot_command_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_robot_command_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_robot_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_robot_command_proto_rawDescData)
	})
	return file_bosdyn_api_spot_robot_command_proto_rawDescData
}

var file_bosdyn_api_spot_robot_command_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bosdyn_api_spot_robot_command_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bosdyn_api_spot_robot_command_proto_goTypes = []interface{}{
	(LocomotionHint)(0),                                 // 0: bosdyn.api.spot.LocomotionHint
	(SwingHeight)(0),                                    // 1: bosdyn.api.spot.SwingHeight
	(BodyControlParams_RotationSetting)(0),              // 2: bosdyn.api.spot.BodyControlParams.RotationSetting
	(TerrainParams_GratedSurfacesMode)(0),               // 3: bosdyn.api.spot.TerrainParams.GratedSurfacesMode
	(BodyExternalForceParams_ExternalForceIndicator)(0), // 4: bosdyn.api.spot.BodyExternalForceParams.ExternalForceIndicator
	(*MobilityParams)(nil),                              // 5: bosdyn.api.spot.MobilityParams
	(*BodyControlParams)(nil),                           // 6: bosdyn.api.spot.BodyControlParams
	(*ObstacleParams)(nil),                              // 7: bosdyn.api.spot.ObstacleParams
	(*TerrainParams)(nil),                               // 8: bosdyn.api.spot.TerrainParams
	(*BodyExternalForceParams)(nil),                     // 9: bosdyn.api.spot.BodyExternalForceParams
	(*api.SE2VelocityLimit)(nil),                        // 10: bosdyn.api.SE2VelocityLimit
	(*api.SE3Trajectory)(nil),                           // 11: bosdyn.api.SE3Trajectory
	(*wrapperspb.DoubleValue)(nil),                      // 12: google.protobuf.DoubleValue
	(*api.Vec3)(nil),                                    // 13: bosdyn.api.Vec3
}
var file_bosdyn_api_spot_robot_command_proto_depIdxs = []int32{
	10, // 0: bosdyn.api.spot.MobilityParams.vel_limit:type_name -> bosdyn.api.SE2VelocityLimit
	6,  // 1: bosdyn.api.spot.MobilityParams.body_control:type_name -> bosdyn.api.spot.BodyControlParams
	0,  // 2: bosdyn.api.spot.MobilityParams.locomotion_hint:type_name -> bosdyn.api.spot.LocomotionHint
	7,  // 3: bosdyn.api.spot.MobilityParams.obstacle_params:type_name -> bosdyn.api.spot.ObstacleParams
	1,  // 4: bosdyn.api.spot.MobilityParams.swing_height:type_name -> bosdyn.api.spot.SwingHeight
	8,  // 5: bosdyn.api.spot.MobilityParams.terrain_params:type_name -> bosdyn.api.spot.TerrainParams
	9,  // 6: bosdyn.api.spot.MobilityParams.external_force_params:type_name -> bosdyn.api.spot.BodyExternalForceParams
	11, // 7: bosdyn.api.spot.BodyControlParams.base_offset_rt_footprint:type_name -> bosdyn.api.SE3Trajectory
	2,  // 8: bosdyn.api.spot.BodyControlParams.rotation_setting:type_name -> bosdyn.api.spot.BodyControlParams.RotationSetting
	12, // 9: bosdyn.api.spot.TerrainParams.ground_mu_hint:type_name -> google.protobuf.DoubleValue
	3,  // 10: bosdyn.api.spot.TerrainParams.grated_surfaces_mode:type_name -> bosdyn.api.spot.TerrainParams.GratedSurfacesMode
	4,  // 11: bosdyn.api.spot.BodyExternalForceParams.external_force_indicator:type_name -> bosdyn.api.spot.BodyExternalForceParams.ExternalForceIndicator
	13, // 12: bosdyn.api.spot.BodyExternalForceParams.external_force_override:type_name -> bosdyn.api.Vec3
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_robot_command_proto_init() }
func file_bosdyn_api_spot_robot_command_proto_init() {
	if File_bosdyn_api_spot_robot_command_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_robot_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MobilityParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_robot_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyControlParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_robot_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObstacleParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_robot_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TerrainParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_robot_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyExternalForceParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_robot_command_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_robot_command_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_robot_command_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_robot_command_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_robot_command_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_robot_command_proto = out.File
	file_bosdyn_api_spot_robot_command_proto_rawDesc = nil
	file_bosdyn_api_spot_robot_command_proto_goTypes = nil
	file_bosdyn_api_spot_robot_command_proto_depIdxs = nil
}
