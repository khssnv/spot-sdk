// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot/door.proto

package spot

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OpenDoorCommandResponse_Status int32

const (
	OpenDoorCommandResponse_STATUS_UNKNOWN             OpenDoorCommandResponse_Status = 0 // An unknown / unexpected error occurred.
	OpenDoorCommandResponse_STATUS_OK                  OpenDoorCommandResponse_Status = 1 // Request was accepted.
	OpenDoorCommandResponse_STATUS_ROBOT_COMMAND_ERROR OpenDoorCommandResponse_Status = 2 // Error sending command to RobotCommandService.
)

// Enum value maps for OpenDoorCommandResponse_Status.
var (
	OpenDoorCommandResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_ROBOT_COMMAND_ERROR",
	}
	OpenDoorCommandResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":             0,
		"STATUS_OK":                  1,
		"STATUS_ROBOT_COMMAND_ERROR": 2,
	}
)

func (x OpenDoorCommandResponse_Status) Enum() *OpenDoorCommandResponse_Status {
	p := new(OpenDoorCommandResponse_Status)
	*p = x
	return p
}

func (x OpenDoorCommandResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpenDoorCommandResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_door_proto_enumTypes[0].Descriptor()
}

func (OpenDoorCommandResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_door_proto_enumTypes[0]
}

func (x OpenDoorCommandResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpenDoorCommandResponse_Status.Descriptor instead.
func (OpenDoorCommandResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{1, 0}
}

// Specify if the hinge is on the left or right side of the door, when looking at the door,
// relative to the door handle.
type DoorCommand_HingeSide int32

const (
	DoorCommand_HINGE_SIDE_UNKNOWN DoorCommand_HingeSide = 0
	DoorCommand_HINGE_SIDE_LEFT    DoorCommand_HingeSide = 1
	DoorCommand_HINGE_SIDE_RIGHT   DoorCommand_HingeSide = 2
)

// Enum value maps for DoorCommand_HingeSide.
var (
	DoorCommand_HingeSide_name = map[int32]string{
		0: "HINGE_SIDE_UNKNOWN",
		1: "HINGE_SIDE_LEFT",
		2: "HINGE_SIDE_RIGHT",
	}
	DoorCommand_HingeSide_value = map[string]int32{
		"HINGE_SIDE_UNKNOWN": 0,
		"HINGE_SIDE_LEFT":    1,
		"HINGE_SIDE_RIGHT":   2,
	}
)

func (x DoorCommand_HingeSide) Enum() *DoorCommand_HingeSide {
	p := new(DoorCommand_HingeSide)
	*p = x
	return p
}

func (x DoorCommand_HingeSide) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoorCommand_HingeSide) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_door_proto_enumTypes[1].Descriptor()
}

func (DoorCommand_HingeSide) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_door_proto_enumTypes[1]
}

func (x DoorCommand_HingeSide) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoorCommand_HingeSide.Descriptor instead.
func (DoorCommand_HingeSide) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 0}
}

// Specify if the door is push or pull, when looking at the door.
type DoorCommand_SwingDirection int32

const (
	DoorCommand_SWING_DIRECTION_UNKNOWN DoorCommand_SwingDirection = 0
	// Deprecated: Do not use.
	DoorCommand_SWING_DIRECTION_INSWING DoorCommand_SwingDirection = 1
	DoorCommand_SWING_DIRECTION_PULL    DoorCommand_SwingDirection = 1
	// Deprecated: Do not use.
	DoorCommand_SWING_DIRECTION_OUTSWING DoorCommand_SwingDirection = 2
	DoorCommand_SWING_DIRECTION_PUSH     DoorCommand_SwingDirection = 2
)

// Enum value maps for DoorCommand_SwingDirection.
var (
	DoorCommand_SwingDirection_name = map[int32]string{
		0: "SWING_DIRECTION_UNKNOWN",
		1: "SWING_DIRECTION_INSWING",
		// Duplicate value: 1: "SWING_DIRECTION_PULL",
		2: "SWING_DIRECTION_OUTSWING",
		// Duplicate value: 2: "SWING_DIRECTION_PUSH",
	}
	DoorCommand_SwingDirection_value = map[string]int32{
		"SWING_DIRECTION_UNKNOWN":  0,
		"SWING_DIRECTION_INSWING":  1,
		"SWING_DIRECTION_PULL":     1,
		"SWING_DIRECTION_OUTSWING": 2,
		"SWING_DIRECTION_PUSH":     2,
	}
)

func (x DoorCommand_SwingDirection) Enum() *DoorCommand_SwingDirection {
	p := new(DoorCommand_SwingDirection)
	*p = x
	return p
}

func (x DoorCommand_SwingDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoorCommand_SwingDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_door_proto_enumTypes[2].Descriptor()
}

func (DoorCommand_SwingDirection) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_door_proto_enumTypes[2]
}

func (x DoorCommand_SwingDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoorCommand_SwingDirection.Descriptor instead.
func (DoorCommand_SwingDirection) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 1}
}

// Specify type of door handle.
type DoorCommand_HandleType int32

const (
	DoorCommand_HANDLE_TYPE_UNKNOWN     DoorCommand_HandleType = 0
	DoorCommand_HANDLE_TYPE_LEVER       DoorCommand_HandleType = 1
	DoorCommand_HANDLE_TYPE_KNOB        DoorCommand_HandleType = 2
	DoorCommand_HANDLE_TYPE_FIXED_GRASP DoorCommand_HandleType = 3
)

// Enum value maps for DoorCommand_HandleType.
var (
	DoorCommand_HandleType_name = map[int32]string{
		0: "HANDLE_TYPE_UNKNOWN",
		1: "HANDLE_TYPE_LEVER",
		2: "HANDLE_TYPE_KNOB",
		3: "HANDLE_TYPE_FIXED_GRASP",
	}
	DoorCommand_HandleType_value = map[string]int32{
		"HANDLE_TYPE_UNKNOWN":     0,
		"HANDLE_TYPE_LEVER":       1,
		"HANDLE_TYPE_KNOB":        2,
		"HANDLE_TYPE_FIXED_GRASP": 3,
	}
)

func (x DoorCommand_HandleType) Enum() *DoorCommand_HandleType {
	p := new(DoorCommand_HandleType)
	*p = x
	return p
}

func (x DoorCommand_HandleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoorCommand_HandleType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_door_proto_enumTypes[3].Descriptor()
}

func (DoorCommand_HandleType) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_door_proto_enumTypes[3]
}

func (x DoorCommand_HandleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoorCommand_HandleType.Descriptor instead.
func (DoorCommand_HandleType) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 2}
}

type DoorCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	DoorCommand_Feedback_STATUS_UNKNOWN DoorCommand_Feedback_Status = 0
	// Robot has finished opening the door.
	DoorCommand_Feedback_STATUS_COMPLETED DoorCommand_Feedback_Status = 1
	// Robot is attempting to open the door.
	DoorCommand_Feedback_STATUS_IN_PROGRESS DoorCommand_Feedback_Status = 2
)

// Enum value maps for DoorCommand_Feedback_Status.
var (
	DoorCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_COMPLETED",
		2: "STATUS_IN_PROGRESS",
	}
	DoorCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_COMPLETED":   1,
		"STATUS_IN_PROGRESS": 2,
	}
)

func (x DoorCommand_Feedback_Status) Enum() *DoorCommand_Feedback_Status {
	p := new(DoorCommand_Feedback_Status)
	*p = x
	return p
}

func (x DoorCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DoorCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_door_proto_enumTypes[4].Descriptor()
}

func (DoorCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_door_proto_enumTypes[4]
}

func (x DoorCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DoorCommand_Feedback_Status.Descriptor instead.
func (DoorCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 4, 0}
}

// A door command for the robot to execute plus a lease.
type OpenDoorCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// The command to execute.
	DoorCommand *DoorCommand_Request `protobuf:"bytes,4,opt,name=door_command,json=doorCommand,proto3" json:"door_command,omitempty"`
}

func (x *OpenDoorCommandRequest) Reset() {
	*x = OpenDoorCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDoorCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDoorCommandRequest) ProtoMessage() {}

func (x *OpenDoorCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDoorCommandRequest.ProtoReflect.Descriptor instead.
func (*OpenDoorCommandRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{0}
}

func (x *OpenDoorCommandRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *OpenDoorCommandRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *OpenDoorCommandRequest) GetDoorCommand() *DoorCommand_Request {
	if x != nil {
		return x.DoorCommand
	}
	return nil
}

// Response to the door command request.
type OpenDoorCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Return status for a request.
	Status OpenDoorCommandResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.spot.OpenDoorCommandResponse_Status" json:"status,omitempty"`
	// Human-readable error description.  Not for programmatic analysis.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	// Unique identifier for the command, If empty, command was not accepted.
	DoorCommandId uint32 `protobuf:"varint,5,opt,name=door_command_id,json=doorCommandId,proto3" json:"door_command_id,omitempty"`
}

func (x *OpenDoorCommandResponse) Reset() {
	*x = OpenDoorCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDoorCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDoorCommandResponse) ProtoMessage() {}

func (x *OpenDoorCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDoorCommandResponse.ProtoReflect.Descriptor instead.
func (*OpenDoorCommandResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{1}
}

func (x *OpenDoorCommandResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *OpenDoorCommandResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *OpenDoorCommandResponse) GetStatus() OpenDoorCommandResponse_Status {
	if x != nil {
		return x.Status
	}
	return OpenDoorCommandResponse_STATUS_UNKNOWN
}

func (x *OpenDoorCommandResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OpenDoorCommandResponse) GetDoorCommandId() uint32 {
	if x != nil {
		return x.DoorCommandId
	}
	return 0
}

// A request for feedback of a specific door command.
type OpenDoorFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier for the command, provided by OpenDoorResponse.
	DoorCommandId uint32 `protobuf:"varint,2,opt,name=door_command_id,json=doorCommandId,proto3" json:"door_command_id,omitempty"`
}

func (x *OpenDoorFeedbackRequest) Reset() {
	*x = OpenDoorFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDoorFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDoorFeedbackRequest) ProtoMessage() {}

func (x *OpenDoorFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDoorFeedbackRequest.ProtoReflect.Descriptor instead.
func (*OpenDoorFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{2}
}

func (x *OpenDoorFeedbackRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *OpenDoorFeedbackRequest) GetDoorCommandId() uint32 {
	if x != nil {
		return x.DoorCommandId
	}
	return 0
}

// Feedback for a specific door command. This RPC reports the robot's progress opening a door.
type OpenDoorFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Generic robot command feedback.
	Status api.RobotCommandFeedbackStatus_Status `protobuf:"varint,100,opt,name=status,proto3,enum=bosdyn.api.RobotCommandFeedbackStatus_Status" json:"status,omitempty"`
	// Specific door full body command feedback.
	Feedback *DoorCommand_Feedback `protobuf:"bytes,2,opt,name=feedback,proto3" json:"feedback,omitempty"`
}

func (x *OpenDoorFeedbackResponse) Reset() {
	*x = OpenDoorFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenDoorFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenDoorFeedbackResponse) ProtoMessage() {}

func (x *OpenDoorFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenDoorFeedbackResponse.ProtoReflect.Descriptor instead.
func (*OpenDoorFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{3}
}

func (x *OpenDoorFeedbackResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *OpenDoorFeedbackResponse) GetStatus() api.RobotCommandFeedbackStatus_Status {
	if x != nil {
		return x.Status
	}
	return api.RobotCommandFeedbackStatus_Status(0)
}

func (x *OpenDoorFeedbackResponse) GetFeedback() *DoorCommand_Feedback {
	if x != nil {
		return x.Feedback
	}
	return nil
}

//  Door Command specific request and Feedback.
type DoorCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DoorCommand) Reset() {
	*x = DoorCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorCommand) ProtoMessage() {}

func (x *DoorCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorCommand.ProtoReflect.Descriptor instead.
func (*DoorCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4}
}

// The robot searches along a ray for the door handle and automatically grasp it before
// executing door opening.
type DoorCommand_AutoGraspCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the frame that the following fields are expressed in.
	FrameName string `protobuf:"bytes,1,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// The start of the ray the robot searches along for the door handle.
	SearchRayStartInFrame *api.Vec3 `protobuf:"bytes,2,opt,name=search_ray_start_in_frame,json=searchRayStartInFrame,proto3" json:"search_ray_start_in_frame,omitempty"`
	// The end of the ray the robot searches along for the door handle.
	SearchRayEndInFrame *api.Vec3 `protobuf:"bytes,3,opt,name=search_ray_end_in_frame,json=searchRayEndInFrame,proto3" json:"search_ray_end_in_frame,omitempty"`
	// The side of the hinge with respect to the robot when facing the door.
	HingeSide DoorCommand_HingeSide `protobuf:"varint,4,opt,name=hinge_side,json=hingeSide,proto3,enum=bosdyn.api.spot.DoorCommand_HingeSide" json:"hinge_side,omitempty"`
	// The direction the door moves with respect to the robot.
	SwingDirection DoorCommand_SwingDirection `protobuf:"varint,5,opt,name=swing_direction,json=swingDirection,proto3,enum=bosdyn.api.spot.DoorCommand_SwingDirection" json:"swing_direction,omitempty"`
}

func (x *DoorCommand_AutoGraspCommand) Reset() {
	*x = DoorCommand_AutoGraspCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorCommand_AutoGraspCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorCommand_AutoGraspCommand) ProtoMessage() {}

func (x *DoorCommand_AutoGraspCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorCommand_AutoGraspCommand.ProtoReflect.Descriptor instead.
func (*DoorCommand_AutoGraspCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 0}
}

func (x *DoorCommand_AutoGraspCommand) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *DoorCommand_AutoGraspCommand) GetSearchRayStartInFrame() *api.Vec3 {
	if x != nil {
		return x.SearchRayStartInFrame
	}
	return nil
}

func (x *DoorCommand_AutoGraspCommand) GetSearchRayEndInFrame() *api.Vec3 {
	if x != nil {
		return x.SearchRayEndInFrame
	}
	return nil
}

func (x *DoorCommand_AutoGraspCommand) GetHingeSide() DoorCommand_HingeSide {
	if x != nil {
		return x.HingeSide
	}
	return DoorCommand_HINGE_SIDE_UNKNOWN
}

func (x *DoorCommand_AutoGraspCommand) GetSwingDirection() DoorCommand_SwingDirection {
	if x != nil {
		return x.SwingDirection
	}
	return DoorCommand_SWING_DIRECTION_UNKNOWN
}

// The robot is already grasping the door handle and will continue opening the door based on
// user specified params.
type DoorCommand_WarmstartCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The side of the hinge with respect to the robot when facing the door.
	HingeSide DoorCommand_HingeSide `protobuf:"varint,1,opt,name=hinge_side,json=hingeSide,proto3,enum=bosdyn.api.spot.DoorCommand_HingeSide" json:"hinge_side,omitempty"`
	// The direction the door moves with respect to the robot.
	SwingDirection DoorCommand_SwingDirection `protobuf:"varint,2,opt,name=swing_direction,json=swingDirection,proto3,enum=bosdyn.api.spot.DoorCommand_SwingDirection" json:"swing_direction,omitempty"`
	// The type of handle on the door.
	HandleType DoorCommand_HandleType `protobuf:"varint,3,opt,name=handle_type,json=handleType,proto3,enum=bosdyn.api.spot.DoorCommand_HandleType" json:"handle_type,omitempty"`
}

func (x *DoorCommand_WarmstartCommand) Reset() {
	*x = DoorCommand_WarmstartCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorCommand_WarmstartCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorCommand_WarmstartCommand) ProtoMessage() {}

func (x *DoorCommand_WarmstartCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorCommand_WarmstartCommand.ProtoReflect.Descriptor instead.
func (*DoorCommand_WarmstartCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 1}
}

func (x *DoorCommand_WarmstartCommand) GetHingeSide() DoorCommand_HingeSide {
	if x != nil {
		return x.HingeSide
	}
	return DoorCommand_HINGE_SIDE_UNKNOWN
}

func (x *DoorCommand_WarmstartCommand) GetSwingDirection() DoorCommand_SwingDirection {
	if x != nil {
		return x.SwingDirection
	}
	return DoorCommand_SWING_DIRECTION_UNKNOWN
}

func (x *DoorCommand_WarmstartCommand) GetHandleType() DoorCommand_HandleType {
	if x != nil {
		return x.HandleType
	}
	return DoorCommand_HANDLE_TYPE_UNKNOWN
}

// Open doors that do not require a grasp, just a push. This could be a door with no latching
// mechanism that just requires a push, or a door with a pushbar.
// The robot will automatically push the door open and walk through.
type DoorCommand_AutoPushCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the frame that the following fields are expressed in.
	FrameName string `protobuf:"bytes,1,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// The point that the robot will push on.
	PushPointInFrame *api.Vec3 `protobuf:"bytes,2,opt,name=push_point_in_frame,json=pushPointInFrame,proto3" json:"push_point_in_frame,omitempty"`
	// The side of the hinge with respect to the robot when facing the door.
	HingeSide DoorCommand_HingeSide `protobuf:"varint,3,opt,name=hinge_side,json=hingeSide,proto3,enum=bosdyn.api.spot.DoorCommand_HingeSide" json:"hinge_side,omitempty"`
}

func (x *DoorCommand_AutoPushCommand) Reset() {
	*x = DoorCommand_AutoPushCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorCommand_AutoPushCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorCommand_AutoPushCommand) ProtoMessage() {}

func (x *DoorCommand_AutoPushCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorCommand_AutoPushCommand.ProtoReflect.Descriptor instead.
func (*DoorCommand_AutoPushCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 2}
}

func (x *DoorCommand_AutoPushCommand) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *DoorCommand_AutoPushCommand) GetPushPointInFrame() *api.Vec3 {
	if x != nil {
		return x.PushPointInFrame
	}
	return nil
}

func (x *DoorCommand_AutoPushCommand) GetHingeSide() DoorCommand_HingeSide {
	if x != nil {
		return x.HingeSide
	}
	return DoorCommand_HINGE_SIDE_UNKNOWN
}

type DoorCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Command:
	//	*DoorCommand_Request_AutoGraspCommand
	//	*DoorCommand_Request_WarmstartCommand
	//	*DoorCommand_Request_AutoPushCommand
	Command isDoorCommand_Request_Command `protobuf_oneof:"command"`
}

func (x *DoorCommand_Request) Reset() {
	*x = DoorCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorCommand_Request) ProtoMessage() {}

func (x *DoorCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorCommand_Request.ProtoReflect.Descriptor instead.
func (*DoorCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 3}
}

func (m *DoorCommand_Request) GetCommand() isDoorCommand_Request_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *DoorCommand_Request) GetAutoGraspCommand() *DoorCommand_AutoGraspCommand {
	if x, ok := x.GetCommand().(*DoorCommand_Request_AutoGraspCommand); ok {
		return x.AutoGraspCommand
	}
	return nil
}

func (x *DoorCommand_Request) GetWarmstartCommand() *DoorCommand_WarmstartCommand {
	if x, ok := x.GetCommand().(*DoorCommand_Request_WarmstartCommand); ok {
		return x.WarmstartCommand
	}
	return nil
}

func (x *DoorCommand_Request) GetAutoPushCommand() *DoorCommand_AutoPushCommand {
	if x, ok := x.GetCommand().(*DoorCommand_Request_AutoPushCommand); ok {
		return x.AutoPushCommand
	}
	return nil
}

type isDoorCommand_Request_Command interface {
	isDoorCommand_Request_Command()
}

type DoorCommand_Request_AutoGraspCommand struct {
	AutoGraspCommand *DoorCommand_AutoGraspCommand `protobuf:"bytes,10,opt,name=auto_grasp_command,json=autoGraspCommand,proto3,oneof"`
}

type DoorCommand_Request_WarmstartCommand struct {
	WarmstartCommand *DoorCommand_WarmstartCommand `protobuf:"bytes,11,opt,name=warmstart_command,json=warmstartCommand,proto3,oneof"`
}

type DoorCommand_Request_AutoPushCommand struct {
	AutoPushCommand *DoorCommand_AutoPushCommand `protobuf:"bytes,12,opt,name=auto_push_command,json=autoPushCommand,proto3,oneof"`
}

func (*DoorCommand_Request_AutoGraspCommand) isDoorCommand_Request_Command() {}

func (*DoorCommand_Request_WarmstartCommand) isDoorCommand_Request_Command() {}

func (*DoorCommand_Request_AutoPushCommand) isDoorCommand_Request_Command() {}

type DoorCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the command.
	Status DoorCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.spot.DoorCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *DoorCommand_Feedback) Reset() {
	*x = DoorCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_door_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoorCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoorCommand_Feedback) ProtoMessage() {}

func (x *DoorCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_door_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoorCommand_Feedback.ProtoReflect.Descriptor instead.
func (*DoorCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_door_proto_rawDescGZIP(), []int{4, 4}
}

func (x *DoorCommand_Feedback) GetStatus() DoorCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return DoorCommand_Feedback_STATUS_UNKNOWN
}

var File_bosdyn_api_spot_door_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_door_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x2f, 0x64, 0x6f, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x1a, 0x1e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x16, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x12, 0x47, 0x0a, 0x0c, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0b, 0x64, 0x6f,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x17, 0x4f, 0x70,
	0x65, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x64, 0x6f, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x74, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x44,
	0x6f, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x6f, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x64, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xd8, 0x01,
	0x0a, 0x18, 0x4f, 0x70, 0x65, 0x6e, 0x44, 0x6f, 0x6f, 0x72, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x08,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xe4, 0x0c, 0x0a, 0x0b, 0x44, 0x6f, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0xe2, 0x02, 0x0a, 0x10, 0x41, 0x75, 0x74,
	0x6f, 0x47, 0x72, 0x61, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x19,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x33, 0x52, 0x15, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x61, 0x79, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x17, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x5f, 0x72, 0x61, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x13, 0x73, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x61, 0x79, 0x45, 0x6e, 0x64, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x45, 0x0a, 0x0a, 0x68, 0x69, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x48, 0x69, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x68, 0x69,
	0x6e, 0x67, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x77, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53,
	0x77, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73,
	0x77, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xf9, 0x01,
	0x0a, 0x10, 0x57, 0x61, 0x72, 0x6d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0a, 0x68, 0x69, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x48, 0x69, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09,
	0x68, 0x69, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x64, 0x65, 0x12, 0x54, 0x0a, 0x0f, 0x73, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0e, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x48, 0x0a, 0x0b, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x68,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xb8, 0x01, 0x0a, 0x0f, 0x41, 0x75,
	0x74, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x13,
	0x70, 0x75, 0x73, 0x68, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x10, 0x70, 0x75, 0x73,
	0x68, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x0a, 0x68, 0x69, 0x6e, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x48, 0x69, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x64, 0x65, 0x52, 0x09, 0x68, 0x69, 0x6e, 0x67, 0x65,
	0x53, 0x69, 0x64, 0x65, 0x1a, 0xad, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x5d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x67, 0x72, 0x61, 0x73, 0x70, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44,
	0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x47,
	0x72, 0x61, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x61,
	0x75, 0x74, 0x6f, 0x47, 0x72, 0x61, 0x73, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x5c, 0x0a, 0x11, 0x77, 0x61, 0x72, 0x6d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f,
	0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x57, 0x61, 0x72, 0x6d, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x77, 0x61, 0x72,
	0x6d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5a, 0x0a,
	0x11, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x70, 0x75, 0x73, 0x68, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x50, 0x75, 0x73, 0x68, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x6f, 0x50, 0x75,
	0x73, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x9c, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x22, 0x4e, 0x0a, 0x09, 0x48, 0x69, 0x6e, 0x67, 0x65, 0x53, 0x69, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x48, 0x49, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x49, 0x4e, 0x47,
	0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x48, 0x49, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x52, 0x49, 0x47, 0x48,
	0x54, 0x10, 0x02, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x53, 0x77, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x17, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x52,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x01,
	0x1a, 0x02, 0x08, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x18, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0x02, 0x08, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x02, 0x1a, 0x02, 0x10, 0x01, 0x22, 0x6f,
	0x0a, 0x0a, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x52, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4b, 0x4e, 0x4f, 0x42,
	0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x41, 0x4e, 0x44, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x46, 0x49, 0x58, 0x45, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x10, 0x03, 0x42,
	0x4a, 0x42, 0x10, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_door_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_door_proto_rawDescData = file_bosdyn_api_spot_door_proto_rawDesc
)

func file_bosdyn_api_spot_door_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_door_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_door_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_door_proto_rawDescData)
	})
	return file_bosdyn_api_spot_door_proto_rawDescData
}

var file_bosdyn_api_spot_door_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bosdyn_api_spot_door_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bosdyn_api_spot_door_proto_goTypes = []interface{}{
	(OpenDoorCommandResponse_Status)(0),        // 0: bosdyn.api.spot.OpenDoorCommandResponse.Status
	(DoorCommand_HingeSide)(0),                 // 1: bosdyn.api.spot.DoorCommand.HingeSide
	(DoorCommand_SwingDirection)(0),            // 2: bosdyn.api.spot.DoorCommand.SwingDirection
	(DoorCommand_HandleType)(0),                // 3: bosdyn.api.spot.DoorCommand.HandleType
	(DoorCommand_Feedback_Status)(0),           // 4: bosdyn.api.spot.DoorCommand.Feedback.Status
	(*OpenDoorCommandRequest)(nil),             // 5: bosdyn.api.spot.OpenDoorCommandRequest
	(*OpenDoorCommandResponse)(nil),            // 6: bosdyn.api.spot.OpenDoorCommandResponse
	(*OpenDoorFeedbackRequest)(nil),            // 7: bosdyn.api.spot.OpenDoorFeedbackRequest
	(*OpenDoorFeedbackResponse)(nil),           // 8: bosdyn.api.spot.OpenDoorFeedbackResponse
	(*DoorCommand)(nil),                        // 9: bosdyn.api.spot.DoorCommand
	(*DoorCommand_AutoGraspCommand)(nil),       // 10: bosdyn.api.spot.DoorCommand.AutoGraspCommand
	(*DoorCommand_WarmstartCommand)(nil),       // 11: bosdyn.api.spot.DoorCommand.WarmstartCommand
	(*DoorCommand_AutoPushCommand)(nil),        // 12: bosdyn.api.spot.DoorCommand.AutoPushCommand
	(*DoorCommand_Request)(nil),                // 13: bosdyn.api.spot.DoorCommand.Request
	(*DoorCommand_Feedback)(nil),               // 14: bosdyn.api.spot.DoorCommand.Feedback
	(*api.RequestHeader)(nil),                  // 15: bosdyn.api.RequestHeader
	(*api.Lease)(nil),                          // 16: bosdyn.api.Lease
	(*api.ResponseHeader)(nil),                 // 17: bosdyn.api.ResponseHeader
	(*api.LeaseUseResult)(nil),                 // 18: bosdyn.api.LeaseUseResult
	(api.RobotCommandFeedbackStatus_Status)(0), // 19: bosdyn.api.RobotCommandFeedbackStatus.Status
	(*api.Vec3)(nil),                           // 20: bosdyn.api.Vec3
}
var file_bosdyn_api_spot_door_proto_depIdxs = []int32{
	15, // 0: bosdyn.api.spot.OpenDoorCommandRequest.header:type_name -> bosdyn.api.RequestHeader
	16, // 1: bosdyn.api.spot.OpenDoorCommandRequest.lease:type_name -> bosdyn.api.Lease
	13, // 2: bosdyn.api.spot.OpenDoorCommandRequest.door_command:type_name -> bosdyn.api.spot.DoorCommand.Request
	17, // 3: bosdyn.api.spot.OpenDoorCommandResponse.header:type_name -> bosdyn.api.ResponseHeader
	18, // 4: bosdyn.api.spot.OpenDoorCommandResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	0,  // 5: bosdyn.api.spot.OpenDoorCommandResponse.status:type_name -> bosdyn.api.spot.OpenDoorCommandResponse.Status
	15, // 6: bosdyn.api.spot.OpenDoorFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	17, // 7: bosdyn.api.spot.OpenDoorFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	19, // 8: bosdyn.api.spot.OpenDoorFeedbackResponse.status:type_name -> bosdyn.api.RobotCommandFeedbackStatus.Status
	14, // 9: bosdyn.api.spot.OpenDoorFeedbackResponse.feedback:type_name -> bosdyn.api.spot.DoorCommand.Feedback
	20, // 10: bosdyn.api.spot.DoorCommand.AutoGraspCommand.search_ray_start_in_frame:type_name -> bosdyn.api.Vec3
	20, // 11: bosdyn.api.spot.DoorCommand.AutoGraspCommand.search_ray_end_in_frame:type_name -> bosdyn.api.Vec3
	1,  // 12: bosdyn.api.spot.DoorCommand.AutoGraspCommand.hinge_side:type_name -> bosdyn.api.spot.DoorCommand.HingeSide
	2,  // 13: bosdyn.api.spot.DoorCommand.AutoGraspCommand.swing_direction:type_name -> bosdyn.api.spot.DoorCommand.SwingDirection
	1,  // 14: bosdyn.api.spot.DoorCommand.WarmstartCommand.hinge_side:type_name -> bosdyn.api.spot.DoorCommand.HingeSide
	2,  // 15: bosdyn.api.spot.DoorCommand.WarmstartCommand.swing_direction:type_name -> bosdyn.api.spot.DoorCommand.SwingDirection
	3,  // 16: bosdyn.api.spot.DoorCommand.WarmstartCommand.handle_type:type_name -> bosdyn.api.spot.DoorCommand.HandleType
	20, // 17: bosdyn.api.spot.DoorCommand.AutoPushCommand.push_point_in_frame:type_name -> bosdyn.api.Vec3
	1,  // 18: bosdyn.api.spot.DoorCommand.AutoPushCommand.hinge_side:type_name -> bosdyn.api.spot.DoorCommand.HingeSide
	10, // 19: bosdyn.api.spot.DoorCommand.Request.auto_grasp_command:type_name -> bosdyn.api.spot.DoorCommand.AutoGraspCommand
	11, // 20: bosdyn.api.spot.DoorCommand.Request.warmstart_command:type_name -> bosdyn.api.spot.DoorCommand.WarmstartCommand
	12, // 21: bosdyn.api.spot.DoorCommand.Request.auto_push_command:type_name -> bosdyn.api.spot.DoorCommand.AutoPushCommand
	4,  // 22: bosdyn.api.spot.DoorCommand.Feedback.status:type_name -> bosdyn.api.spot.DoorCommand.Feedback.Status
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_door_proto_init() }
func file_bosdyn_api_spot_door_proto_init() {
	if File_bosdyn_api_spot_door_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_door_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDoorCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDoorCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDoorFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenDoorFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorCommand_AutoGraspCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorCommand_WarmstartCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorCommand_AutoPushCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_door_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoorCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_spot_door_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*DoorCommand_Request_AutoGraspCommand)(nil),
		(*DoorCommand_Request_WarmstartCommand)(nil),
		(*DoorCommand_Request_AutoPushCommand)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_door_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_door_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_door_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_door_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_door_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_door_proto = out.File
	file_bosdyn_api_spot_door_proto_rawDesc = nil
	file_bosdyn_api_spot_door_proto_goTypes = nil
	file_bosdyn_api_spot_door_proto_depIdxs = nil
}
