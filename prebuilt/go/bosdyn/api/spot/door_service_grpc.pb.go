// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/spot/door_service.proto

package spot

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DoorServiceClient is the client API for DoorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DoorServiceClient interface {
	OpenDoor(ctx context.Context, in *OpenDoorCommandRequest, opts ...grpc.CallOption) (*OpenDoorCommandResponse, error)
	OpenDoorFeedback(ctx context.Context, in *OpenDoorFeedbackRequest, opts ...grpc.CallOption) (*OpenDoorFeedbackResponse, error)
}

type doorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDoorServiceClient(cc grpc.ClientConnInterface) DoorServiceClient {
	return &doorServiceClient{cc}
}

func (c *doorServiceClient) OpenDoor(ctx context.Context, in *OpenDoorCommandRequest, opts ...grpc.CallOption) (*OpenDoorCommandResponse, error) {
	out := new(OpenDoorCommandResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.spot.DoorService/OpenDoor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *doorServiceClient) OpenDoorFeedback(ctx context.Context, in *OpenDoorFeedbackRequest, opts ...grpc.CallOption) (*OpenDoorFeedbackResponse, error) {
	out := new(OpenDoorFeedbackResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.spot.DoorService/OpenDoorFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DoorServiceServer is the server API for DoorService service.
// All implementations must embed UnimplementedDoorServiceServer
// for forward compatibility
type DoorServiceServer interface {
	OpenDoor(context.Context, *OpenDoorCommandRequest) (*OpenDoorCommandResponse, error)
	OpenDoorFeedback(context.Context, *OpenDoorFeedbackRequest) (*OpenDoorFeedbackResponse, error)
	mustEmbedUnimplementedDoorServiceServer()
}

// UnimplementedDoorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDoorServiceServer struct {
}

func (UnimplementedDoorServiceServer) OpenDoor(context.Context, *OpenDoorCommandRequest) (*OpenDoorCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDoor not implemented")
}
func (UnimplementedDoorServiceServer) OpenDoorFeedback(context.Context, *OpenDoorFeedbackRequest) (*OpenDoorFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenDoorFeedback not implemented")
}
func (UnimplementedDoorServiceServer) mustEmbedUnimplementedDoorServiceServer() {}

// UnsafeDoorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DoorServiceServer will
// result in compilation errors.
type UnsafeDoorServiceServer interface {
	mustEmbedUnimplementedDoorServiceServer()
}

func RegisterDoorServiceServer(s grpc.ServiceRegistrar, srv DoorServiceServer) {
	s.RegisterService(&DoorService_ServiceDesc, srv)
}

func _DoorService_OpenDoor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDoorCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoorServiceServer).OpenDoor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.spot.DoorService/OpenDoor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoorServiceServer).OpenDoor(ctx, req.(*OpenDoorCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DoorService_OpenDoorFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenDoorFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DoorServiceServer).OpenDoorFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.spot.DoorService/OpenDoorFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DoorServiceServer).OpenDoorFeedback(ctx, req.(*OpenDoorFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DoorService_ServiceDesc is the grpc.ServiceDesc for DoorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DoorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.spot.DoorService",
	HandlerType: (*DoorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenDoor",
			Handler:    _DoorService_OpenDoor_Handler,
		},
		{
			MethodName: "OpenDoorFeedback",
			Handler:    _DoorService_OpenDoorFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/spot/door_service.proto",
}
