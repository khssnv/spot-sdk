// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/spot/spot_check.proto

package spot

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SpotCheckCommandRequest_Command int32

const (
	SpotCheckCommandRequest_COMMAND_UNKNOWN    SpotCheckCommandRequest_Command = 0 // Unused enum.
	SpotCheckCommandRequest_COMMAND_START      SpotCheckCommandRequest_Command = 1 // Start spot check joint calibration and camera checks.
	SpotCheckCommandRequest_COMMAND_ABORT      SpotCheckCommandRequest_Command = 2 // Abort spot check joint calibration and camera check.
	SpotCheckCommandRequest_COMMAND_REVERT_CAL SpotCheckCommandRequest_Command = 3 // Revert joint calibration back to the previous values.
)

// Enum value maps for SpotCheckCommandRequest_Command.
var (
	SpotCheckCommandRequest_Command_name = map[int32]string{
		0: "COMMAND_UNKNOWN",
		1: "COMMAND_START",
		2: "COMMAND_ABORT",
		3: "COMMAND_REVERT_CAL",
	}
	SpotCheckCommandRequest_Command_value = map[string]int32{
		"COMMAND_UNKNOWN":    0,
		"COMMAND_START":      1,
		"COMMAND_ABORT":      2,
		"COMMAND_REVERT_CAL": 3,
	}
)

func (x SpotCheckCommandRequest_Command) Enum() *SpotCheckCommandRequest_Command {
	p := new(SpotCheckCommandRequest_Command)
	*p = x
	return p
}

func (x SpotCheckCommandRequest_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpotCheckCommandRequest_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[0].Descriptor()
}

func (SpotCheckCommandRequest_Command) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[0]
}

func (x SpotCheckCommandRequest_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpotCheckCommandRequest_Command.Descriptor instead.
func (SpotCheckCommandRequest_Command) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{0, 0}
}

type SpotCheckCommandResponse_Status int32

const (
	SpotCheckCommandResponse_STATUS_UNKNOWN SpotCheckCommandResponse_Status = 0 // Unknown
	SpotCheckCommandResponse_STATUS_OK      SpotCheckCommandResponse_Status = 1 // Request was accepted.
	SpotCheckCommandResponse_STATUS_ERROR   SpotCheckCommandResponse_Status = 2 // An error ocurred.
)

// Enum value maps for SpotCheckCommandResponse_Status.
var (
	SpotCheckCommandResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_ERROR",
	}
	SpotCheckCommandResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"STATUS_OK":      1,
		"STATUS_ERROR":   2,
	}
)

func (x SpotCheckCommandResponse_Status) Enum() *SpotCheckCommandResponse_Status {
	p := new(SpotCheckCommandResponse_Status)
	*p = x
	return p
}

func (x SpotCheckCommandResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpotCheckCommandResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[1].Descriptor()
}

func (SpotCheckCommandResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[1]
}

func (x SpotCheckCommandResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpotCheckCommandResponse_Status.Descriptor instead.
func (SpotCheckCommandResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{1, 0}
}

type SpotCheckFeedbackResponse_State int32

const (
	SpotCheckFeedbackResponse_STATE_UNKNOWN                   SpotCheckFeedbackResponse_State = 0  // Unused enum.
	SpotCheckFeedbackResponse_STATE_USER_ABORTED              SpotCheckFeedbackResponse_State = 1  // SpotCheck is aborted by the user.
	SpotCheckFeedbackResponse_STATE_STARTING                  SpotCheckFeedbackResponse_State = 2  // SpotCheck is initializing.
	SpotCheckFeedbackResponse_STATE_LOADCELL_CAL              SpotCheckFeedbackResponse_State = 3  // Load cell calibration underway.
	SpotCheckFeedbackResponse_STATE_ENDSTOP_CAL               SpotCheckFeedbackResponse_State = 4  // Endstop calibration underway.
	SpotCheckFeedbackResponse_STATE_CAMERA_CHECK              SpotCheckFeedbackResponse_State = 5  // Camera check underway.
	SpotCheckFeedbackResponse_STATE_BODY_POSING               SpotCheckFeedbackResponse_State = 6  // Body pose routine underway.
	SpotCheckFeedbackResponse_STATE_FINISHED                  SpotCheckFeedbackResponse_State = 7  // Spot check successfully finished.
	SpotCheckFeedbackResponse_STATE_REVERTING_CAL             SpotCheckFeedbackResponse_State = 8  // Reverting calibration to previous values.
	SpotCheckFeedbackResponse_STATE_ERROR                     SpotCheckFeedbackResponse_State = 9  // Error occurred while running spotcheck. Inspect error for more info.
	SpotCheckFeedbackResponse_STATE_WAITING_FOR_COMMAND       SpotCheckFeedbackResponse_State = 10 // Waiting for user command.
	SpotCheckFeedbackResponse_STATE_HIP_RANGE_OF_MOTION_CHECK SpotCheckFeedbackResponse_State = 11 // Hip range of motion check underway.
	SpotCheckFeedbackResponse_STATE_GRIPPER_CAL               SpotCheckFeedbackResponse_State = 12 // Gripper calibration underway.
	SpotCheckFeedbackResponse_STATE_SIT_DOWN_AFTER_RUN        SpotCheckFeedbackResponse_State = 13 // Sitting down after run.
)

// Enum value maps for SpotCheckFeedbackResponse_State.
var (
	SpotCheckFeedbackResponse_State_name = map[int32]string{
		0:  "STATE_UNKNOWN",
		1:  "STATE_USER_ABORTED",
		2:  "STATE_STARTING",
		3:  "STATE_LOADCELL_CAL",
		4:  "STATE_ENDSTOP_CAL",
		5:  "STATE_CAMERA_CHECK",
		6:  "STATE_BODY_POSING",
		7:  "STATE_FINISHED",
		8:  "STATE_REVERTING_CAL",
		9:  "STATE_ERROR",
		10: "STATE_WAITING_FOR_COMMAND",
		11: "STATE_HIP_RANGE_OF_MOTION_CHECK",
		12: "STATE_GRIPPER_CAL",
		13: "STATE_SIT_DOWN_AFTER_RUN",
	}
	SpotCheckFeedbackResponse_State_value = map[string]int32{
		"STATE_UNKNOWN":                   0,
		"STATE_USER_ABORTED":              1,
		"STATE_STARTING":                  2,
		"STATE_LOADCELL_CAL":              3,
		"STATE_ENDSTOP_CAL":               4,
		"STATE_CAMERA_CHECK":              5,
		"STATE_BODY_POSING":               6,
		"STATE_FINISHED":                  7,
		"STATE_REVERTING_CAL":             8,
		"STATE_ERROR":                     9,
		"STATE_WAITING_FOR_COMMAND":       10,
		"STATE_HIP_RANGE_OF_MOTION_CHECK": 11,
		"STATE_GRIPPER_CAL":               12,
		"STATE_SIT_DOWN_AFTER_RUN":        13,
	}
)

func (x SpotCheckFeedbackResponse_State) Enum() *SpotCheckFeedbackResponse_State {
	p := new(SpotCheckFeedbackResponse_State)
	*p = x
	return p
}

func (x SpotCheckFeedbackResponse_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpotCheckFeedbackResponse_State) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[2].Descriptor()
}

func (SpotCheckFeedbackResponse_State) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[2]
}

func (x SpotCheckFeedbackResponse_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpotCheckFeedbackResponse_State.Descriptor instead.
func (SpotCheckFeedbackResponse_State) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{3, 0}
}

// If SpotCheck experienced an error, specific error details reported here.
// This reflects an error in the routine.
type SpotCheckFeedbackResponse_Error int32

const (
	SpotCheckFeedbackResponse_ERROR_UNKNOWN                 SpotCheckFeedbackResponse_Error = 0  // Unused enum.
	SpotCheckFeedbackResponse_ERROR_NONE                    SpotCheckFeedbackResponse_Error = 1  // No error has occurred.
	SpotCheckFeedbackResponse_ERROR_UNEXPECTED_POWER_CHANGE SpotCheckFeedbackResponse_Error = 2  // Unexpected motor power state transition.
	SpotCheckFeedbackResponse_ERROR_INIT_IMU_CHECK          SpotCheckFeedbackResponse_Error = 3  // Robot body is not flat on the ground.
	SpotCheckFeedbackResponse_ERROR_INIT_NOT_SITTING        SpotCheckFeedbackResponse_Error = 4  // Robot body is not close to a sitting pose
	SpotCheckFeedbackResponse_ERROR_LOADCELL_TIMEOUT        SpotCheckFeedbackResponse_Error = 5  // Timeout during loadcell calibration.
	SpotCheckFeedbackResponse_ERROR_POWER_ON_FAILURE        SpotCheckFeedbackResponse_Error = 6  // Error enabling motor power.
	SpotCheckFeedbackResponse_ERROR_ENDSTOP_TIMEOUT         SpotCheckFeedbackResponse_Error = 7  // Timeout during endstop calibration.
	SpotCheckFeedbackResponse_ERROR_FAILED_STAND            SpotCheckFeedbackResponse_Error = 8  // Robot failed to stand.
	SpotCheckFeedbackResponse_ERROR_CAMERA_TIMEOUT          SpotCheckFeedbackResponse_Error = 9  // Timeout during camera check.
	SpotCheckFeedbackResponse_ERROR_GROUND_CHECK            SpotCheckFeedbackResponse_Error = 10 // Flat ground check failed.
	SpotCheckFeedbackResponse_ERROR_POWER_OFF_FAILURE       SpotCheckFeedbackResponse_Error = 11 // Robot failed to power off.
	SpotCheckFeedbackResponse_ERROR_REVERT_FAILURE          SpotCheckFeedbackResponse_Error = 12 // Robot failed to revert calibration.
	SpotCheckFeedbackResponse_ERROR_FGKC_FAILURE            SpotCheckFeedbackResponse_Error = 13 // Robot failed to do flat ground kinematic calibration.
	SpotCheckFeedbackResponse_ERROR_GRIPPER_CAL_TIMEOUT     SpotCheckFeedbackResponse_Error = 14 // Timeout during gripper calibration.
)

// Enum value maps for SpotCheckFeedbackResponse_Error.
var (
	SpotCheckFeedbackResponse_Error_name = map[int32]string{
		0:  "ERROR_UNKNOWN",
		1:  "ERROR_NONE",
		2:  "ERROR_UNEXPECTED_POWER_CHANGE",
		3:  "ERROR_INIT_IMU_CHECK",
		4:  "ERROR_INIT_NOT_SITTING",
		5:  "ERROR_LOADCELL_TIMEOUT",
		6:  "ERROR_POWER_ON_FAILURE",
		7:  "ERROR_ENDSTOP_TIMEOUT",
		8:  "ERROR_FAILED_STAND",
		9:  "ERROR_CAMERA_TIMEOUT",
		10: "ERROR_GROUND_CHECK",
		11: "ERROR_POWER_OFF_FAILURE",
		12: "ERROR_REVERT_FAILURE",
		13: "ERROR_FGKC_FAILURE",
		14: "ERROR_GRIPPER_CAL_TIMEOUT",
	}
	SpotCheckFeedbackResponse_Error_value = map[string]int32{
		"ERROR_UNKNOWN":                 0,
		"ERROR_NONE":                    1,
		"ERROR_UNEXPECTED_POWER_CHANGE": 2,
		"ERROR_INIT_IMU_CHECK":          3,
		"ERROR_INIT_NOT_SITTING":        4,
		"ERROR_LOADCELL_TIMEOUT":        5,
		"ERROR_POWER_ON_FAILURE":        6,
		"ERROR_ENDSTOP_TIMEOUT":         7,
		"ERROR_FAILED_STAND":            8,
		"ERROR_CAMERA_TIMEOUT":          9,
		"ERROR_GROUND_CHECK":            10,
		"ERROR_POWER_OFF_FAILURE":       11,
		"ERROR_REVERT_FAILURE":          12,
		"ERROR_FGKC_FAILURE":            13,
		"ERROR_GRIPPER_CAL_TIMEOUT":     14,
	}
)

func (x SpotCheckFeedbackResponse_Error) Enum() *SpotCheckFeedbackResponse_Error {
	p := new(SpotCheckFeedbackResponse_Error)
	*p = x
	return p
}

func (x SpotCheckFeedbackResponse_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpotCheckFeedbackResponse_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[3].Descriptor()
}

func (SpotCheckFeedbackResponse_Error) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[3]
}

func (x SpotCheckFeedbackResponse_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpotCheckFeedbackResponse_Error.Descriptor instead.
func (SpotCheckFeedbackResponse_Error) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{3, 1}
}

// Errors reflect an issue with camera hardware.
type DepthPlaneSpotCheckResult_Status int32

const (
	DepthPlaneSpotCheckResult_STATUS_UNKNOWN DepthPlaneSpotCheckResult_Status = 0 // Unused enum.
	DepthPlaneSpotCheckResult_STATUS_OK      DepthPlaneSpotCheckResult_Status = 1 // No detected calibration error.
	DepthPlaneSpotCheckResult_STATUS_WARNING DepthPlaneSpotCheckResult_Status = 2 // Possible calibration error detected.
	DepthPlaneSpotCheckResult_STATUS_ERROR   DepthPlaneSpotCheckResult_Status = 3 // Error with robot calibration.
)

// Enum value maps for DepthPlaneSpotCheckResult_Status.
var (
	DepthPlaneSpotCheckResult_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_WARNING",
		3: "STATUS_ERROR",
	}
	DepthPlaneSpotCheckResult_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"STATUS_OK":      1,
		"STATUS_WARNING": 2,
		"STATUS_ERROR":   3,
	}
)

func (x DepthPlaneSpotCheckResult_Status) Enum() *DepthPlaneSpotCheckResult_Status {
	p := new(DepthPlaneSpotCheckResult_Status)
	*p = x
	return p
}

func (x DepthPlaneSpotCheckResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DepthPlaneSpotCheckResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[4].Descriptor()
}

func (DepthPlaneSpotCheckResult_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[4]
}

func (x DepthPlaneSpotCheckResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DepthPlaneSpotCheckResult_Status.Descriptor instead.
func (DepthPlaneSpotCheckResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{4, 0}
}

// Errors reflect an issue with payload configuration.
type PayloadCheckResult_Error int32

const (
	// Unused enum.
	PayloadCheckResult_ERROR_UNKNOWN PayloadCheckResult_Error = 0
	// No error found in the payloads.
	PayloadCheckResult_ERROR_NONE PayloadCheckResult_Error = 1
	// There is a mass discrepancy between the registered payload and what is estimated.
	PayloadCheckResult_ERROR_MASS_DISCREPANCY PayloadCheckResult_Error = 2
)

// Enum value maps for PayloadCheckResult_Error.
var (
	PayloadCheckResult_Error_name = map[int32]string{
		0: "ERROR_UNKNOWN",
		1: "ERROR_NONE",
		2: "ERROR_MASS_DISCREPANCY",
	}
	PayloadCheckResult_Error_value = map[string]int32{
		"ERROR_UNKNOWN":          0,
		"ERROR_NONE":             1,
		"ERROR_MASS_DISCREPANCY": 2,
	}
)

func (x PayloadCheckResult_Error) Enum() *PayloadCheckResult_Error {
	p := new(PayloadCheckResult_Error)
	*p = x
	return p
}

func (x PayloadCheckResult_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadCheckResult_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[5].Descriptor()
}

func (PayloadCheckResult_Error) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[5]
}

func (x PayloadCheckResult_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadCheckResult_Error.Descriptor instead.
func (PayloadCheckResult_Error) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{5, 0}
}

// Errors reflect an issue with robot hardware.
type LoadCellSpotCheckResult_Error int32

const (
	LoadCellSpotCheckResult_ERROR_UNKNOWN           LoadCellSpotCheckResult_Error = 0 // Unused enum.
	LoadCellSpotCheckResult_ERROR_NONE              LoadCellSpotCheckResult_Error = 1 // No hardware error detected.
	LoadCellSpotCheckResult_ERROR_ZERO_OUT_OF_RANGE LoadCellSpotCheckResult_Error = 2 // Load cell calibration failure.
)

// Enum value maps for LoadCellSpotCheckResult_Error.
var (
	LoadCellSpotCheckResult_Error_name = map[int32]string{
		0: "ERROR_UNKNOWN",
		1: "ERROR_NONE",
		2: "ERROR_ZERO_OUT_OF_RANGE",
	}
	LoadCellSpotCheckResult_Error_value = map[string]int32{
		"ERROR_UNKNOWN":           0,
		"ERROR_NONE":              1,
		"ERROR_ZERO_OUT_OF_RANGE": 2,
	}
)

func (x LoadCellSpotCheckResult_Error) Enum() *LoadCellSpotCheckResult_Error {
	p := new(LoadCellSpotCheckResult_Error)
	*p = x
	return p
}

func (x LoadCellSpotCheckResult_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoadCellSpotCheckResult_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[6].Descriptor()
}

func (LoadCellSpotCheckResult_Error) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[6]
}

func (x LoadCellSpotCheckResult_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoadCellSpotCheckResult_Error.Descriptor instead.
func (LoadCellSpotCheckResult_Error) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{6, 0}
}

// Errors reflect an issue with robot hardware.
type JointKinematicCheckResult_Error int32

const (
	JointKinematicCheckResult_ERROR_UNKNOWN                 JointKinematicCheckResult_Error = 0 // Unused enum.
	JointKinematicCheckResult_ERROR_NONE                    JointKinematicCheckResult_Error = 1 // No hardware error detected.
	JointKinematicCheckResult_ERROR_CLUTCH_SLIP             JointKinematicCheckResult_Error = 2 // Error detected in clutch performance.
	JointKinematicCheckResult_ERROR_INVALID_RANGE_OF_MOTION JointKinematicCheckResult_Error = 3 // Error if a joint has an incorrect range of motion.
)

// Enum value maps for JointKinematicCheckResult_Error.
var (
	JointKinematicCheckResult_Error_name = map[int32]string{
		0: "ERROR_UNKNOWN",
		1: "ERROR_NONE",
		2: "ERROR_CLUTCH_SLIP",
		3: "ERROR_INVALID_RANGE_OF_MOTION",
	}
	JointKinematicCheckResult_Error_value = map[string]int32{
		"ERROR_UNKNOWN":                 0,
		"ERROR_NONE":                    1,
		"ERROR_CLUTCH_SLIP":             2,
		"ERROR_INVALID_RANGE_OF_MOTION": 3,
	}
)

func (x JointKinematicCheckResult_Error) Enum() *JointKinematicCheckResult_Error {
	p := new(JointKinematicCheckResult_Error)
	*p = x
	return p
}

func (x JointKinematicCheckResult_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (JointKinematicCheckResult_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[7].Descriptor()
}

func (JointKinematicCheckResult_Error) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[7]
}

func (x JointKinematicCheckResult_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use JointKinematicCheckResult_Error.Descriptor instead.
func (JointKinematicCheckResult_Error) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{7, 0}
}

// Errors reflect an issue with robot calibration.
type FootHeightCheckResult_Status int32

const (
	FootHeightCheckResult_STATUS_UNKNOWN FootHeightCheckResult_Status = 0 // Unused enum.
	FootHeightCheckResult_STATUS_OK      FootHeightCheckResult_Status = 1 // No detected calibration error.
	FootHeightCheckResult_STATUS_WARNING FootHeightCheckResult_Status = 2 // Possible calibration error detected.
	FootHeightCheckResult_STATUS_ERROR   FootHeightCheckResult_Status = 3 // Error with robot calibration.
)

// Enum value maps for FootHeightCheckResult_Status.
var (
	FootHeightCheckResult_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_WARNING",
		3: "STATUS_ERROR",
	}
	FootHeightCheckResult_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"STATUS_OK":      1,
		"STATUS_WARNING": 2,
		"STATUS_ERROR":   3,
	}
)

func (x FootHeightCheckResult_Status) Enum() *FootHeightCheckResult_Status {
	p := new(FootHeightCheckResult_Status)
	*p = x
	return p
}

func (x FootHeightCheckResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FootHeightCheckResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[8].Descriptor()
}

func (FootHeightCheckResult_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[8]
}

func (x FootHeightCheckResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FootHeightCheckResult_Status.Descriptor instead.
func (FootHeightCheckResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{8, 0}
}

type LegPairCheckResult_Status int32

const (
	LegPairCheckResult_STATUS_UNKNOWN LegPairCheckResult_Status = 0 // Unused enum.
	LegPairCheckResult_STATUS_OK      LegPairCheckResult_Status = 1 // No detected calibration error.
	LegPairCheckResult_STATUS_WARNING LegPairCheckResult_Status = 2 // Possible calibration error detected.
	LegPairCheckResult_STATUS_ERROR   LegPairCheckResult_Status = 3 // Error with robot calibration.
)

// Enum value maps for LegPairCheckResult_Status.
var (
	LegPairCheckResult_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_WARNING",
		3: "STATUS_ERROR",
	}
	LegPairCheckResult_Status_value = map[string]int32{
		"STATUS_UNKNOWN": 0,
		"STATUS_OK":      1,
		"STATUS_WARNING": 2,
		"STATUS_ERROR":   3,
	}
)

func (x LegPairCheckResult_Status) Enum() *LegPairCheckResult_Status {
	p := new(LegPairCheckResult_Status)
	*p = x
	return p
}

func (x LegPairCheckResult_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LegPairCheckResult_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[9].Descriptor()
}

func (LegPairCheckResult_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[9]
}

func (x LegPairCheckResult_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LegPairCheckResult_Status.Descriptor instead.
func (LegPairCheckResult_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{9, 0}
}

// Errors reflect an issue with hip range of motion
type HipRangeOfMotionResult_Error int32

const (
	HipRangeOfMotionResult_ERROR_UNKNOWN    HipRangeOfMotionResult_Error = 0
	HipRangeOfMotionResult_ERROR_NONE       HipRangeOfMotionResult_Error = 1
	HipRangeOfMotionResult_ERROR_OBSTRUCTED HipRangeOfMotionResult_Error = 2
)

// Enum value maps for HipRangeOfMotionResult_Error.
var (
	HipRangeOfMotionResult_Error_name = map[int32]string{
		0: "ERROR_UNKNOWN",
		1: "ERROR_NONE",
		2: "ERROR_OBSTRUCTED",
	}
	HipRangeOfMotionResult_Error_value = map[string]int32{
		"ERROR_UNKNOWN":    0,
		"ERROR_NONE":       1,
		"ERROR_OBSTRUCTED": 2,
	}
)

func (x HipRangeOfMotionResult_Error) Enum() *HipRangeOfMotionResult_Error {
	p := new(HipRangeOfMotionResult_Error)
	*p = x
	return p
}

func (x HipRangeOfMotionResult_Error) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HipRangeOfMotionResult_Error) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[10].Descriptor()
}

func (HipRangeOfMotionResult_Error) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[10]
}

func (x HipRangeOfMotionResult_Error) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HipRangeOfMotionResult_Error.Descriptor instead.
func (HipRangeOfMotionResult_Error) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{10, 0}
}

type CameraCalibrationCommandRequest_Command int32

const (
	CameraCalibrationCommandRequest_COMMAND_UNKNOWN CameraCalibrationCommandRequest_Command = 0 // Unused enum.
	CameraCalibrationCommandRequest_COMMAND_START   CameraCalibrationCommandRequest_Command = 1 // Start calibration routine.
	CameraCalibrationCommandRequest_COMMAND_CANCEL  CameraCalibrationCommandRequest_Command = 2 // Cancel calibration routine.
)

// Enum value maps for CameraCalibrationCommandRequest_Command.
var (
	CameraCalibrationCommandRequest_Command_name = map[int32]string{
		0: "COMMAND_UNKNOWN",
		1: "COMMAND_START",
		2: "COMMAND_CANCEL",
	}
	CameraCalibrationCommandRequest_Command_value = map[string]int32{
		"COMMAND_UNKNOWN": 0,
		"COMMAND_START":   1,
		"COMMAND_CANCEL":  2,
	}
)

func (x CameraCalibrationCommandRequest_Command) Enum() *CameraCalibrationCommandRequest_Command {
	p := new(CameraCalibrationCommandRequest_Command)
	*p = x
	return p
}

func (x CameraCalibrationCommandRequest_Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraCalibrationCommandRequest_Command) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[11].Descriptor()
}

func (CameraCalibrationCommandRequest_Command) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[11]
}

func (x CameraCalibrationCommandRequest_Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraCalibrationCommandRequest_Command.Descriptor instead.
func (CameraCalibrationCommandRequest_Command) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{11, 0}
}

type CameraCalibrationFeedbackResponse_Status int32

const (
	// Unused enum.
	CameraCalibrationFeedbackResponse_STATUS_UNKNOWN CameraCalibrationFeedbackResponse_Status = 0
	// The robot is actively running calibration routine.
	CameraCalibrationFeedbackResponse_STATUS_PROCESSING CameraCalibrationFeedbackResponse_Status = 1
	// The robot successfully ran calibration routine and
	// is ready to use again.
	CameraCalibrationFeedbackResponse_STATUS_SUCCESS CameraCalibrationFeedbackResponse_Status = 2
	// API client canceled calibration.
	CameraCalibrationFeedbackResponse_STATUS_USER_CANCELED CameraCalibrationFeedbackResponse_Status = 3
	// The robot is not powered on.
	CameraCalibrationFeedbackResponse_STATUS_POWER_ERROR CameraCalibrationFeedbackResponse_Status = 4
	// Ownership error during calibration.
	CameraCalibrationFeedbackResponse_STATUS_LEASE_ERROR CameraCalibrationFeedbackResponse_Status = 5
	// Robot encountered an error while trying to move
	// around the calibration target. Robot possibly
	// encountered a fault. Check robot state for more
	// details
	CameraCalibrationFeedbackResponse_STATUS_ROBOT_COMMAND_ERROR CameraCalibrationFeedbackResponse_Status = 7
	// Calibration procedure produced an invalid result.
	// This may occur in poor lighting conditions or if
	// calibration target moved during calibration
	// procedure.
	CameraCalibrationFeedbackResponse_STATUS_CALIBRATION_ERROR CameraCalibrationFeedbackResponse_Status = 8
	// Something extraordinary happened. Try power cycling robot or contact BD.
	CameraCalibrationFeedbackResponse_STATUS_INTERNAL_ERROR CameraCalibrationFeedbackResponse_Status = 9
	// Camera focus issue detected. This is a hardware issue.
	CameraCalibrationFeedbackResponse_STATUS_CAMERA_FOCUS_ERROR CameraCalibrationFeedbackResponse_Status = 14
	// Target partially, but not fully, in view when starting calibration.
	CameraCalibrationFeedbackResponse_STATUS_TARGET_NOT_CENTERED CameraCalibrationFeedbackResponse_Status = 6
	// Target not visible when starting calibration.
	CameraCalibrationFeedbackResponse_STATUS_TARGET_NOT_IN_VIEW CameraCalibrationFeedbackResponse_Status = 11
	// Target not aligned with gravity when starting calibration.
	CameraCalibrationFeedbackResponse_STATUS_TARGET_NOT_GRAVITY_ALIGNED CameraCalibrationFeedbackResponse_Status = 12
	// Target upside down when starting calibration.
	CameraCalibrationFeedbackResponse_STATUS_TARGET_UPSIDE_DOWN CameraCalibrationFeedbackResponse_Status = 13
	// Calibration routine has never been run. No feedback to give.
	CameraCalibrationFeedbackResponse_STATUS_NEVER_RUN CameraCalibrationFeedbackResponse_Status = 10
	// One of the cameras is not detected on the USB bus.
	CameraCalibrationFeedbackResponse_STATUS_CAMERA_NOT_DETECTED CameraCalibrationFeedbackResponse_Status = 15
	// Failed to write intrinsic calibration.
	CameraCalibrationFeedbackResponse_STATUS_INTRINSIC_WRITE_FAILED CameraCalibrationFeedbackResponse_Status = 16
	// Failed to write extrinsic calibration.
	CameraCalibrationFeedbackResponse_STATUS_EXTRINSIC_WRITE_FAILED CameraCalibrationFeedbackResponse_Status = 17
)

// Enum value maps for CameraCalibrationFeedbackResponse_Status.
var (
	CameraCalibrationFeedbackResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_PROCESSING",
		2:  "STATUS_SUCCESS",
		3:  "STATUS_USER_CANCELED",
		4:  "STATUS_POWER_ERROR",
		5:  "STATUS_LEASE_ERROR",
		7:  "STATUS_ROBOT_COMMAND_ERROR",
		8:  "STATUS_CALIBRATION_ERROR",
		9:  "STATUS_INTERNAL_ERROR",
		14: "STATUS_CAMERA_FOCUS_ERROR",
		6:  "STATUS_TARGET_NOT_CENTERED",
		11: "STATUS_TARGET_NOT_IN_VIEW",
		12: "STATUS_TARGET_NOT_GRAVITY_ALIGNED",
		13: "STATUS_TARGET_UPSIDE_DOWN",
		10: "STATUS_NEVER_RUN",
		15: "STATUS_CAMERA_NOT_DETECTED",
		16: "STATUS_INTRINSIC_WRITE_FAILED",
		17: "STATUS_EXTRINSIC_WRITE_FAILED",
	}
	CameraCalibrationFeedbackResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                    0,
		"STATUS_PROCESSING":                 1,
		"STATUS_SUCCESS":                    2,
		"STATUS_USER_CANCELED":              3,
		"STATUS_POWER_ERROR":                4,
		"STATUS_LEASE_ERROR":                5,
		"STATUS_ROBOT_COMMAND_ERROR":        7,
		"STATUS_CALIBRATION_ERROR":          8,
		"STATUS_INTERNAL_ERROR":             9,
		"STATUS_CAMERA_FOCUS_ERROR":         14,
		"STATUS_TARGET_NOT_CENTERED":        6,
		"STATUS_TARGET_NOT_IN_VIEW":         11,
		"STATUS_TARGET_NOT_GRAVITY_ALIGNED": 12,
		"STATUS_TARGET_UPSIDE_DOWN":         13,
		"STATUS_NEVER_RUN":                  10,
		"STATUS_CAMERA_NOT_DETECTED":        15,
		"STATUS_INTRINSIC_WRITE_FAILED":     16,
		"STATUS_EXTRINSIC_WRITE_FAILED":     17,
	}
)

func (x CameraCalibrationFeedbackResponse_Status) Enum() *CameraCalibrationFeedbackResponse_Status {
	p := new(CameraCalibrationFeedbackResponse_Status)
	*p = x
	return p
}

func (x CameraCalibrationFeedbackResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CameraCalibrationFeedbackResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_spot_spot_check_proto_enumTypes[12].Descriptor()
}

func (CameraCalibrationFeedbackResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_spot_spot_check_proto_enumTypes[12]
}

func (x CameraCalibrationFeedbackResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CameraCalibrationFeedbackResponse_Status.Descriptor instead.
func (CameraCalibrationFeedbackResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{14, 0}
}

// Request for the SpotCheckCommand service.
type SpotCheckCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot. Lease required to issue any SpotCheck command.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// The describing what the spot check service should do.
	Command SpotCheckCommandRequest_Command `protobuf:"varint,3,opt,name=command,proto3,enum=bosdyn.api.spot.SpotCheckCommandRequest_Command" json:"command,omitempty"`
}

func (x *SpotCheckCommandRequest) Reset() {
	*x = SpotCheckCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCheckCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCheckCommandRequest) ProtoMessage() {}

func (x *SpotCheckCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCheckCommandRequest.ProtoReflect.Descriptor instead.
func (*SpotCheckCommandRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{0}
}

func (x *SpotCheckCommandRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SpotCheckCommandRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *SpotCheckCommandRequest) GetCommand() SpotCheckCommandRequest_Command {
	if x != nil {
		return x.Command
	}
	return SpotCheckCommandRequest_COMMAND_UNKNOWN
}

// Response for the SpotCheckCommand service.
type SpotCheckCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Command status
	Status SpotCheckCommandResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.spot.SpotCheckCommandResponse_Status" json:"status,omitempty"`
	// Human-readable description if an error occurred.
	Message string `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SpotCheckCommandResponse) Reset() {
	*x = SpotCheckCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCheckCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCheckCommandResponse) ProtoMessage() {}

func (x *SpotCheckCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCheckCommandResponse.ProtoReflect.Descriptor instead.
func (*SpotCheckCommandResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{1}
}

func (x *SpotCheckCommandResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SpotCheckCommandResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *SpotCheckCommandResponse) GetStatus() SpotCheckCommandResponse_Status {
	if x != nil {
		return x.Status
	}
	return SpotCheckCommandResponse_STATUS_UNKNOWN
}

func (x *SpotCheckCommandResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Request for the SpotCheckFeedback service.
type SpotCheckFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *SpotCheckFeedbackRequest) Reset() {
	*x = SpotCheckFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCheckFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCheckFeedbackRequest) ProtoMessage() {}

func (x *SpotCheckFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCheckFeedbackRequest.ProtoReflect.Descriptor instead.
func (*SpotCheckFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{2}
}

func (x *SpotCheckFeedbackRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Response for the SpotCheckFeedback service.
type SpotCheckFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The state of the spot check routine.
	State SpotCheckFeedbackResponse_State `protobuf:"varint,2,opt,name=state,proto3,enum=bosdyn.api.spot.SpotCheckFeedbackResponse_State" json:"state,omitempty"`
	// The last command executed by Spotcheck. When SpotCheck is in state WAITING_FOR_COMMAND,
	// the last command has completed.
	LastCommand SpotCheckCommandRequest_Command `protobuf:"varint,12,opt,name=last_command,json=lastCommand,proto3,enum=bosdyn.api.spot.SpotCheckCommandRequest_Command" json:"last_command,omitempty"`
	// The specifics of the error for the SpotCheck service.
	Error SpotCheckFeedbackResponse_Error `protobuf:"varint,6,opt,name=error,proto3,enum=bosdyn.api.spot.SpotCheckFeedbackResponse_Error" json:"error,omitempty"`
	// Results from camera check.
	// The key string is the location of the camera (e.g. frontright, frontleft, left, ...)
	CameraResults map[string]*DepthPlaneSpotCheckResult `protobuf:"bytes,3,rep,name=camera_results,json=cameraResults,proto3" json:"camera_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Results from load cell calibration.
	// The key string is the location of the joint (e.g. fl.hxa, fl.hya, fl.kna, ...)
	LoadCellResults map[string]*LoadCellSpotCheckResult `protobuf:"bytes,4,rep,name=load_cell_results,json=loadCellResults,proto3" json:"load_cell_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Results from output position sensor calibration.
	// The key string is the location of the joint (e.g. fl.hx, fl.hy, fl.kn, ...)
	KinematicCalResults map[string]*JointKinematicCheckResult `protobuf:"bytes,5,rep,name=kinematic_cal_results,json=kinematicCalResults,proto3" json:"kinematic_cal_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Result from the payload check
	PayloadResult *PayloadCheckResult `protobuf:"bytes,8,opt,name=payload_result,json=payloadResult,proto3" json:"payload_result,omitempty"`
	// Deprecated. Results of foot height validation.
	// The key string is the name of the leg (e.g. fl, fr, hl, ...)
	//
	// Deprecated: Do not use.
	FootHeightResults map[string]*FootHeightCheckResult `protobuf:"bytes,10,rep,name=foot_height_results,json=footHeightResults,proto3" json:"foot_height_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Deprecated. Results of leg pair validation.
	// The key string is the name of the leg pair (e.g. fl-fr, fl-hl, ...)
	//
	// Deprecated: Do not use.
	LegPairResults map[string]*LegPairCheckResult `protobuf:"bytes,11,rep,name=leg_pair_results,json=legPairResults,proto3" json:"leg_pair_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Results of the hip range of motion check
	// The key string is the name of the leg (e.g. fl, fr, hl, ...)
	HipRangeOfMotionResults map[string]*HipRangeOfMotionResult `protobuf:"bytes,13,rep,name=hip_range_of_motion_results,json=hipRangeOfMotionResults,proto3" json:"hip_range_of_motion_results,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The approximate progress of the spot check routine, range [0-1].
	Progress float32 `protobuf:"fixed32,7,opt,name=progress,proto3" json:"progress,omitempty"`
	// Timestamp for the most up-to-date calibration
	LastCalTimestamp *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=last_cal_timestamp,json=lastCalTimestamp,proto3" json:"last_cal_timestamp,omitempty"`
}

func (x *SpotCheckFeedbackResponse) Reset() {
	*x = SpotCheckFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpotCheckFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpotCheckFeedbackResponse) ProtoMessage() {}

func (x *SpotCheckFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpotCheckFeedbackResponse.ProtoReflect.Descriptor instead.
func (*SpotCheckFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{3}
}

func (x *SpotCheckFeedbackResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SpotCheckFeedbackResponse) GetState() SpotCheckFeedbackResponse_State {
	if x != nil {
		return x.State
	}
	return SpotCheckFeedbackResponse_STATE_UNKNOWN
}

func (x *SpotCheckFeedbackResponse) GetLastCommand() SpotCheckCommandRequest_Command {
	if x != nil {
		return x.LastCommand
	}
	return SpotCheckCommandRequest_COMMAND_UNKNOWN
}

func (x *SpotCheckFeedbackResponse) GetError() SpotCheckFeedbackResponse_Error {
	if x != nil {
		return x.Error
	}
	return SpotCheckFeedbackResponse_ERROR_UNKNOWN
}

func (x *SpotCheckFeedbackResponse) GetCameraResults() map[string]*DepthPlaneSpotCheckResult {
	if x != nil {
		return x.CameraResults
	}
	return nil
}

func (x *SpotCheckFeedbackResponse) GetLoadCellResults() map[string]*LoadCellSpotCheckResult {
	if x != nil {
		return x.LoadCellResults
	}
	return nil
}

func (x *SpotCheckFeedbackResponse) GetKinematicCalResults() map[string]*JointKinematicCheckResult {
	if x != nil {
		return x.KinematicCalResults
	}
	return nil
}

func (x *SpotCheckFeedbackResponse) GetPayloadResult() *PayloadCheckResult {
	if x != nil {
		return x.PayloadResult
	}
	return nil
}

// Deprecated: Do not use.
func (x *SpotCheckFeedbackResponse) GetFootHeightResults() map[string]*FootHeightCheckResult {
	if x != nil {
		return x.FootHeightResults
	}
	return nil
}

// Deprecated: Do not use.
func (x *SpotCheckFeedbackResponse) GetLegPairResults() map[string]*LegPairCheckResult {
	if x != nil {
		return x.LegPairResults
	}
	return nil
}

func (x *SpotCheckFeedbackResponse) GetHipRangeOfMotionResults() map[string]*HipRangeOfMotionResult {
	if x != nil {
		return x.HipRangeOfMotionResults
	}
	return nil
}

func (x *SpotCheckFeedbackResponse) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *SpotCheckFeedbackResponse) GetLastCalTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCalTimestamp
	}
	return nil
}

// Results from camera check.
type DepthPlaneSpotCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return status for the request.
	Status DepthPlaneSpotCheckResult_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.spot.DepthPlaneSpotCheckResult_Status" json:"status,omitempty"`
	// Higher is worse. Above 100 means the camera is severely out of calibration.
	SeverityScore float32 `protobuf:"fixed32,2,opt,name=severity_score,json=severityScore,proto3" json:"severity_score,omitempty"`
}

func (x *DepthPlaneSpotCheckResult) Reset() {
	*x = DepthPlaneSpotCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepthPlaneSpotCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepthPlaneSpotCheckResult) ProtoMessage() {}

func (x *DepthPlaneSpotCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepthPlaneSpotCheckResult.ProtoReflect.Descriptor instead.
func (*DepthPlaneSpotCheckResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{4}
}

func (x *DepthPlaneSpotCheckResult) GetStatus() DepthPlaneSpotCheckResult_Status {
	if x != nil {
		return x.Status
	}
	return DepthPlaneSpotCheckResult_STATUS_UNKNOWN
}

func (x *DepthPlaneSpotCheckResult) GetSeverityScore() float32 {
	if x != nil {
		return x.SeverityScore
	}
	return 0
}

// Results of payload check.
type PayloadCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag to indicate if configuration has an error.
	Error PayloadCheckResult_Error `protobuf:"varint,1,opt,name=error,proto3,enum=bosdyn.api.spot.PayloadCheckResult_Error" json:"error,omitempty"`
	// Indicates how much extra payload (in kg) we think the robot has
	// Positive indicates robot has more payload than it is configured.
	// Negative indicates robot has less payload than it is configured.
	ExtraPayload float32 `protobuf:"fixed32,2,opt,name=extra_payload,json=extraPayload,proto3" json:"extra_payload,omitempty"`
}

func (x *PayloadCheckResult) Reset() {
	*x = PayloadCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadCheckResult) ProtoMessage() {}

func (x *PayloadCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadCheckResult.ProtoReflect.Descriptor instead.
func (*PayloadCheckResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{5}
}

func (x *PayloadCheckResult) GetError() PayloadCheckResult_Error {
	if x != nil {
		return x.Error
	}
	return PayloadCheckResult_ERROR_UNKNOWN
}

func (x *PayloadCheckResult) GetExtraPayload() float32 {
	if x != nil {
		return x.ExtraPayload
	}
	return 0
}

// Results from load cell check.
type LoadCellSpotCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag to indicate if results has an error.
	Error LoadCellSpotCheckResult_Error `protobuf:"varint,2,opt,name=error,proto3,enum=bosdyn.api.spot.LoadCellSpotCheckResult_Error" json:"error,omitempty"`
	// The current loadcell zero as fraction of full range [0-1]
	Zero float32 `protobuf:"fixed32,3,opt,name=zero,proto3" json:"zero,omitempty"`
	// The previous loadcell zero as fraction of full range [0-1]
	OldZero float32 `protobuf:"fixed32,4,opt,name=old_zero,json=oldZero,proto3" json:"old_zero,omitempty"`
}

func (x *LoadCellSpotCheckResult) Reset() {
	*x = LoadCellSpotCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoadCellSpotCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadCellSpotCheckResult) ProtoMessage() {}

func (x *LoadCellSpotCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadCellSpotCheckResult.ProtoReflect.Descriptor instead.
func (*LoadCellSpotCheckResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{6}
}

func (x *LoadCellSpotCheckResult) GetError() LoadCellSpotCheckResult_Error {
	if x != nil {
		return x.Error
	}
	return LoadCellSpotCheckResult_ERROR_UNKNOWN
}

func (x *LoadCellSpotCheckResult) GetZero() float32 {
	if x != nil {
		return x.Zero
	}
	return 0
}

func (x *LoadCellSpotCheckResult) GetOldZero() float32 {
	if x != nil {
		return x.OldZero
	}
	return 0
}

// Kinematic calibration results
type JointKinematicCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A flag to indicate if results has an error.
	Error JointKinematicCheckResult_Error `protobuf:"varint,2,opt,name=error,proto3,enum=bosdyn.api.spot.JointKinematicCheckResult_Error" json:"error,omitempty"`
	// The current offset [rad]
	Offset float32 `protobuf:"fixed32,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// The previous offset [rad]
	OldOffset float32 `protobuf:"fixed32,4,opt,name=old_offset,json=oldOffset,proto3" json:"old_offset,omitempty"`
	// Joint calibration health score. range [0-1]
	// 0 indicates an unhealthy kinematic joint calibration
	// 1 indicates a perfect kinematic joint calibration
	// Typically, values greater than 0.8 should be expected.
	HealthScore float32 `protobuf:"fixed32,5,opt,name=health_score,json=healthScore,proto3" json:"health_score,omitempty"`
}

func (x *JointKinematicCheckResult) Reset() {
	*x = JointKinematicCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JointKinematicCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JointKinematicCheckResult) ProtoMessage() {}

func (x *JointKinematicCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JointKinematicCheckResult.ProtoReflect.Descriptor instead.
func (*JointKinematicCheckResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{7}
}

func (x *JointKinematicCheckResult) GetError() JointKinematicCheckResult_Error {
	if x != nil {
		return x.Error
	}
	return JointKinematicCheckResult_ERROR_UNKNOWN
}

func (x *JointKinematicCheckResult) GetOffset() float32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *JointKinematicCheckResult) GetOldOffset() float32 {
	if x != nil {
		return x.OldOffset
	}
	return 0
}

func (x *JointKinematicCheckResult) GetHealthScore() float32 {
	if x != nil {
		return x.HealthScore
	}
	return 0
}

// Results from foot height checks.
type FootHeightCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return status for the request.
	Status FootHeightCheckResult_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.spot.FootHeightCheckResult_Status" json:"status,omitempty"`
	// The difference between foot height and mean feet height (m).
	FootHeightErrorFromMean float32 `protobuf:"fixed32,3,opt,name=foot_height_error_from_mean,json=footHeightErrorFromMean,proto3" json:"foot_height_error_from_mean,omitempty"`
}

func (x *FootHeightCheckResult) Reset() {
	*x = FootHeightCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FootHeightCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FootHeightCheckResult) ProtoMessage() {}

func (x *FootHeightCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FootHeightCheckResult.ProtoReflect.Descriptor instead.
func (*FootHeightCheckResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{8}
}

func (x *FootHeightCheckResult) GetStatus() FootHeightCheckResult_Status {
	if x != nil {
		return x.Status
	}
	return FootHeightCheckResult_STATUS_UNKNOWN
}

func (x *FootHeightCheckResult) GetFootHeightErrorFromMean() float32 {
	if x != nil {
		return x.FootHeightErrorFromMean
	}
	return 0
}

// Results from leg pair checks..
type LegPairCheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return status for the request.
	Status LegPairCheckResult_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.spot.LegPairCheckResult_Status" json:"status,omitempty"`
	// The change in estimated distance between two feet from tall to short stand (m)
	LegPairDistanceChange float32 `protobuf:"fixed32,3,opt,name=leg_pair_distance_change,json=legPairDistanceChange,proto3" json:"leg_pair_distance_change,omitempty"`
}

func (x *LegPairCheckResult) Reset() {
	*x = LegPairCheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LegPairCheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LegPairCheckResult) ProtoMessage() {}

func (x *LegPairCheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LegPairCheckResult.ProtoReflect.Descriptor instead.
func (*LegPairCheckResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{9}
}

func (x *LegPairCheckResult) GetStatus() LegPairCheckResult_Status {
	if x != nil {
		return x.Status
	}
	return LegPairCheckResult_STATUS_UNKNOWN
}

func (x *LegPairCheckResult) GetLegPairDistanceChange() float32 {
	if x != nil {
		return x.LegPairDistanceChange
	}
	return 0
}

type HipRangeOfMotionResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error HipRangeOfMotionResult_Error `protobuf:"varint,1,opt,name=error,proto3,enum=bosdyn.api.spot.HipRangeOfMotionResult_Error" json:"error,omitempty"`
	// The measured angles (radians) of the HX and HY joints where the obstruction was detected
	Hx []float32 `protobuf:"fixed32,2,rep,packed,name=hx,proto3" json:"hx,omitempty"`
	Hy []float32 `protobuf:"fixed32,3,rep,packed,name=hy,proto3" json:"hy,omitempty"`
}

func (x *HipRangeOfMotionResult) Reset() {
	*x = HipRangeOfMotionResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HipRangeOfMotionResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HipRangeOfMotionResult) ProtoMessage() {}

func (x *HipRangeOfMotionResult) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HipRangeOfMotionResult.ProtoReflect.Descriptor instead.
func (*HipRangeOfMotionResult) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{10}
}

func (x *HipRangeOfMotionResult) GetError() HipRangeOfMotionResult_Error {
	if x != nil {
		return x.Error
	}
	return HipRangeOfMotionResult_ERROR_UNKNOWN
}

func (x *HipRangeOfMotionResult) GetHx() []float32 {
	if x != nil {
		return x.Hx
	}
	return nil
}

func (x *HipRangeOfMotionResult) GetHy() []float32 {
	if x != nil {
		return x.Hy
	}
	return nil
}

// Request for the CameraCalibrationCommand service.
type CameraCalibrationCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot. Lease is required for all cal commands.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// Command to start/stop the calibration.
	Command CameraCalibrationCommandRequest_Command `protobuf:"varint,3,opt,name=command,proto3,enum=bosdyn.api.spot.CameraCalibrationCommandRequest_Command" json:"command,omitempty"`
}

func (x *CameraCalibrationCommandRequest) Reset() {
	*x = CameraCalibrationCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraCalibrationCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraCalibrationCommandRequest) ProtoMessage() {}

func (x *CameraCalibrationCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraCalibrationCommandRequest.ProtoReflect.Descriptor instead.
func (*CameraCalibrationCommandRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{11}
}

func (x *CameraCalibrationCommandRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CameraCalibrationCommandRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *CameraCalibrationCommandRequest) GetCommand() CameraCalibrationCommandRequest_Command {
	if x != nil {
		return x.Command
	}
	return CameraCalibrationCommandRequest_COMMAND_UNKNOWN
}

// Response for the CameraCalibrationCommand service.
type CameraCalibrationCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *CameraCalibrationCommandResponse) Reset() {
	*x = CameraCalibrationCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraCalibrationCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraCalibrationCommandResponse) ProtoMessage() {}

func (x *CameraCalibrationCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraCalibrationCommandResponse.ProtoReflect.Descriptor instead.
func (*CameraCalibrationCommandResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{12}
}

func (x *CameraCalibrationCommandResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CameraCalibrationCommandResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// Request for the CameraCalibrationFeedback service.
type CameraCalibrationFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *CameraCalibrationFeedbackRequest) Reset() {
	*x = CameraCalibrationFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraCalibrationFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraCalibrationFeedbackRequest) ProtoMessage() {}

func (x *CameraCalibrationFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraCalibrationFeedbackRequest.ProtoReflect.Descriptor instead.
func (*CameraCalibrationFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{13}
}

func (x *CameraCalibrationFeedbackRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Response for the CameraCalibrationFeedback service.
type CameraCalibrationFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Status of camera calibration procedure.
	Status CameraCalibrationFeedbackResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.spot.CameraCalibrationFeedbackResponse_Status" json:"status,omitempty"`
	// The approximate progress of the calibration routine, range [0-1].
	// Status takes precedence over progress value.
	Progress float32 `protobuf:"fixed32,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *CameraCalibrationFeedbackResponse) Reset() {
	*x = CameraCalibrationFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CameraCalibrationFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraCalibrationFeedbackResponse) ProtoMessage() {}

func (x *CameraCalibrationFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_spot_spot_check_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraCalibrationFeedbackResponse.ProtoReflect.Descriptor instead.
func (*CameraCalibrationFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_spot_spot_check_proto_rawDescGZIP(), []int{14}
}

func (x *CameraCalibrationFeedbackResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CameraCalibrationFeedbackResponse) GetStatus() CameraCalibrationFeedbackResponse_Status {
	if x != nil {
		return x.Status
	}
	return CameraCalibrationFeedbackResponse_STATUS_UNKNOWN
}

func (x *CameraCalibrationFeedbackResponse) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

var File_bosdyn_api_spot_spot_check_proto protoreflect.FileDescriptor

var file_bosdyn_api_spot_spot_check_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x02, 0x0a, 0x17, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x4a, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x5c, 0x0a, 0x07, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52,
	0x54, 0x5f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x22, 0xb7, 0x02, 0x0a, 0x18, 0x53, 0x70, 0x6f, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x3d, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x22, 0x4d, 0x0a, 0x18, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0xa9, 0x14, 0x0a, 0x19, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x46, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73,
	0x70, 0x6f, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12,
	0x46, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x64, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72,
	0x61, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x6d, 0x65,
	0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x6b, 0x0a,
	0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x77, 0x0a, 0x15, 0x6b, 0x69,
	0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13,
	0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x75, 0x0a, 0x13, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53,
	0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x11, 0x66, 0x6f, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x6c, 0x0a, 0x10, 0x6c, 0x65, 0x67, 0x5f, 0x70, 0x61,
	0x69, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x65, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6c, 0x65, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x1b, 0x68, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x53, 0x70, 0x6f,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f,
	0x66, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x17, 0x68, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x4d,
	0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x1a, 0x6c, 0x0a, 0x12, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x6c, 0x0a, 0x14, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x4c, 0x6f, 0x61, 0x64,
	0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x72,
	0x0a, 0x18, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x6c, 0x0a, 0x16, 0x46, 0x6f, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x46, 0x6f, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x66, 0x0a, 0x13, 0x4c, 0x65, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x4c, 0x65, 0x67, 0x50, 0x61,
	0x69, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x73, 0x0a, 0x1c, 0x48, 0x69, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x48, 0x69, 0x70, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xdb, 0x02,
	0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x4c, 0x4f, 0x41, 0x44, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x53, 0x54, 0x4f, 0x50, 0x5f,
	0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x43,
	0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x46, 0x49,
	0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x41, 0x4c, 0x10,
	0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x48, 0x49, 0x50, 0x5f, 0x52,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43,
	0x48, 0x45, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x52, 0x49, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x10, 0x0c, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x49, 0x54, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f,
	0x41, 0x46, 0x54, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x0d, 0x22, 0x8e, 0x03, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x55, 0x4e, 0x45, 0x58, 0x50, 0x45, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x50, 0x4f, 0x57,
	0x45, 0x52, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x49, 0x4d, 0x55, 0x5f, 0x43, 0x48,
	0x45, 0x43, 0x4b, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x49, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x12, 0x1a, 0x0a,
	0x16, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x4e, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x45, 0x4e, 0x44, 0x53, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f,
	0x55, 0x54, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x4f, 0x55, 0x54, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x0a, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x46, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x55, 0x52, 0x45, 0x10, 0x0c, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x46,
	0x47, 0x4b, 0x43, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x0d, 0x12, 0x1d, 0x0a,
	0x19, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x49, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x43,
	0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x0e, 0x22, 0xe0, 0x01, 0x0a,
	0x19, 0x44, 0x65, 0x70, 0x74, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x44, 0x65, 0x70,
	0x74, 0x68, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73,
	0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x51, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22,
	0xc2, 0x01, 0x0a, 0x12, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x72, 0x61, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x46, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4d, 0x41, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x52, 0x45, 0x50, 0x41, 0x4e,
	0x43, 0x59, 0x10, 0x02, 0x22, 0xd7, 0x01, 0x0a, 0x17, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c,
	0x6c, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x44, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x65, 0x6c, 0x6c, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x7a, 0x65, 0x72, 0x6f, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c,
	0x64, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6f, 0x6c,
	0x64, 0x5a, 0x65, 0x72, 0x6f, 0x22, 0x47, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11,
	0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x01, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x5f,
	0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x22, 0xa3,
	0x02, 0x0a, 0x19, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x46, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x4a, 0x6f,
	0x69, 0x6e, 0x74, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x6f, 0x6c, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x64,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4c, 0x55, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x4c, 0x49, 0x50, 0x10,
	0x02, 0x12, 0x21, 0x0a, 0x1d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x4f, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x03, 0x22, 0xef, 0x01, 0x0a, 0x15, 0x46, 0x6f, 0x6f, 0x74, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x45,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74,
	0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x1b, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x6d, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x17, 0x66, 0x6f, 0x6f, 0x74,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x4d,
	0x65, 0x61, 0x6e, 0x22, 0x51, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xe4, 0x01, 0x0a, 0x12, 0x4c, 0x65, 0x67, 0x50, 0x61,
	0x69, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x42, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e,
	0x4c, 0x65, 0x67, 0x50, 0x61, 0x69, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x15, 0x6c, 0x65, 0x67, 0x50, 0x61, 0x69, 0x72, 0x44, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x51, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x22, 0xbf, 0x01,
	0x0a, 0x16, 0x48, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4f, 0x66, 0x4d, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x43, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x48, 0x69, 0x70, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x4f, 0x66, 0x4d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0e, 0x0a,
	0x02, 0x68, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x68, 0x78, 0x12, 0x0e, 0x0a,
	0x02, 0x68, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x02, 0x52, 0x02, 0x68, 0x79, 0x22, 0x40, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x4f, 0x42, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x45, 0x44, 0x10, 0x02, 0x22,
	0x98, 0x02, 0x0a, 0x1f, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x52, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x38, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70,
	0x6f, 0x74, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x22, 0x45, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x13,
	0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x10, 0x02, 0x22, 0x9c, 0x01, 0x0a, 0x20, 0x43,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x55, 0x0a, 0x20, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x22, 0xd3, 0x05, 0x0a, 0x21, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f, 0x74, 0x2e, 0x43, 0x61, 0x6d,
	0x65, 0x72, 0x61, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x04, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4c, 0x45, 0x41, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x1c, 0x0a,
	0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52, 0x41, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x0e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45,
	0x52, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x56, 0x49,
	0x45, 0x57, 0x10, 0x0b, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54,
	0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x47, 0x52, 0x41, 0x56, 0x49, 0x54,
	0x59, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10, 0x0c, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x50, 0x53,
	0x49, 0x44, 0x45, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x56, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e, 0x10, 0x0a,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4d, 0x45, 0x52,
	0x41, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x0f,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x54, 0x52, 0x49,
	0x4e, 0x53, 0x49, 0x43, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x10, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x54, 0x52, 0x49, 0x4e, 0x53, 0x49, 0x43, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x11, 0x42, 0x48, 0x42, 0x0e, 0x53, 0x70, 0x6f, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_spot_spot_check_proto_rawDescOnce sync.Once
	file_bosdyn_api_spot_spot_check_proto_rawDescData = file_bosdyn_api_spot_spot_check_proto_rawDesc
)

func file_bosdyn_api_spot_spot_check_proto_rawDescGZIP() []byte {
	file_bosdyn_api_spot_spot_check_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_spot_spot_check_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_spot_spot_check_proto_rawDescData)
	})
	return file_bosdyn_api_spot_spot_check_proto_rawDescData
}

var file_bosdyn_api_spot_spot_check_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_bosdyn_api_spot_spot_check_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bosdyn_api_spot_spot_check_proto_goTypes = []interface{}{
	(SpotCheckCommandRequest_Command)(0),          // 0: bosdyn.api.spot.SpotCheckCommandRequest.Command
	(SpotCheckCommandResponse_Status)(0),          // 1: bosdyn.api.spot.SpotCheckCommandResponse.Status
	(SpotCheckFeedbackResponse_State)(0),          // 2: bosdyn.api.spot.SpotCheckFeedbackResponse.State
	(SpotCheckFeedbackResponse_Error)(0),          // 3: bosdyn.api.spot.SpotCheckFeedbackResponse.Error
	(DepthPlaneSpotCheckResult_Status)(0),         // 4: bosdyn.api.spot.DepthPlaneSpotCheckResult.Status
	(PayloadCheckResult_Error)(0),                 // 5: bosdyn.api.spot.PayloadCheckResult.Error
	(LoadCellSpotCheckResult_Error)(0),            // 6: bosdyn.api.spot.LoadCellSpotCheckResult.Error
	(JointKinematicCheckResult_Error)(0),          // 7: bosdyn.api.spot.JointKinematicCheckResult.Error
	(FootHeightCheckResult_Status)(0),             // 8: bosdyn.api.spot.FootHeightCheckResult.Status
	(LegPairCheckResult_Status)(0),                // 9: bosdyn.api.spot.LegPairCheckResult.Status
	(HipRangeOfMotionResult_Error)(0),             // 10: bosdyn.api.spot.HipRangeOfMotionResult.Error
	(CameraCalibrationCommandRequest_Command)(0),  // 11: bosdyn.api.spot.CameraCalibrationCommandRequest.Command
	(CameraCalibrationFeedbackResponse_Status)(0), // 12: bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status
	(*SpotCheckCommandRequest)(nil),               // 13: bosdyn.api.spot.SpotCheckCommandRequest
	(*SpotCheckCommandResponse)(nil),              // 14: bosdyn.api.spot.SpotCheckCommandResponse
	(*SpotCheckFeedbackRequest)(nil),              // 15: bosdyn.api.spot.SpotCheckFeedbackRequest
	(*SpotCheckFeedbackResponse)(nil),             // 16: bosdyn.api.spot.SpotCheckFeedbackResponse
	(*DepthPlaneSpotCheckResult)(nil),             // 17: bosdyn.api.spot.DepthPlaneSpotCheckResult
	(*PayloadCheckResult)(nil),                    // 18: bosdyn.api.spot.PayloadCheckResult
	(*LoadCellSpotCheckResult)(nil),               // 19: bosdyn.api.spot.LoadCellSpotCheckResult
	(*JointKinematicCheckResult)(nil),             // 20: bosdyn.api.spot.JointKinematicCheckResult
	(*FootHeightCheckResult)(nil),                 // 21: bosdyn.api.spot.FootHeightCheckResult
	(*LegPairCheckResult)(nil),                    // 22: bosdyn.api.spot.LegPairCheckResult
	(*HipRangeOfMotionResult)(nil),                // 23: bosdyn.api.spot.HipRangeOfMotionResult
	(*CameraCalibrationCommandRequest)(nil),       // 24: bosdyn.api.spot.CameraCalibrationCommandRequest
	(*CameraCalibrationCommandResponse)(nil),      // 25: bosdyn.api.spot.CameraCalibrationCommandResponse
	(*CameraCalibrationFeedbackRequest)(nil),      // 26: bosdyn.api.spot.CameraCalibrationFeedbackRequest
	(*CameraCalibrationFeedbackResponse)(nil),     // 27: bosdyn.api.spot.CameraCalibrationFeedbackResponse
	nil,                           // 28: bosdyn.api.spot.SpotCheckFeedbackResponse.CameraResultsEntry
	nil,                           // 29: bosdyn.api.spot.SpotCheckFeedbackResponse.LoadCellResultsEntry
	nil,                           // 30: bosdyn.api.spot.SpotCheckFeedbackResponse.KinematicCalResultsEntry
	nil,                           // 31: bosdyn.api.spot.SpotCheckFeedbackResponse.FootHeightResultsEntry
	nil,                           // 32: bosdyn.api.spot.SpotCheckFeedbackResponse.LegPairResultsEntry
	nil,                           // 33: bosdyn.api.spot.SpotCheckFeedbackResponse.HipRangeOfMotionResultsEntry
	(*api.RequestHeader)(nil),     // 34: bosdyn.api.RequestHeader
	(*api.Lease)(nil),             // 35: bosdyn.api.Lease
	(*api.ResponseHeader)(nil),    // 36: bosdyn.api.ResponseHeader
	(*api.LeaseUseResult)(nil),    // 37: bosdyn.api.LeaseUseResult
	(*timestamppb.Timestamp)(nil), // 38: google.protobuf.Timestamp
}
var file_bosdyn_api_spot_spot_check_proto_depIdxs = []int32{
	34, // 0: bosdyn.api.spot.SpotCheckCommandRequest.header:type_name -> bosdyn.api.RequestHeader
	35, // 1: bosdyn.api.spot.SpotCheckCommandRequest.lease:type_name -> bosdyn.api.Lease
	0,  // 2: bosdyn.api.spot.SpotCheckCommandRequest.command:type_name -> bosdyn.api.spot.SpotCheckCommandRequest.Command
	36, // 3: bosdyn.api.spot.SpotCheckCommandResponse.header:type_name -> bosdyn.api.ResponseHeader
	37, // 4: bosdyn.api.spot.SpotCheckCommandResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	1,  // 5: bosdyn.api.spot.SpotCheckCommandResponse.status:type_name -> bosdyn.api.spot.SpotCheckCommandResponse.Status
	34, // 6: bosdyn.api.spot.SpotCheckFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	36, // 7: bosdyn.api.spot.SpotCheckFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 8: bosdyn.api.spot.SpotCheckFeedbackResponse.state:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.State
	0,  // 9: bosdyn.api.spot.SpotCheckFeedbackResponse.last_command:type_name -> bosdyn.api.spot.SpotCheckCommandRequest.Command
	3,  // 10: bosdyn.api.spot.SpotCheckFeedbackResponse.error:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.Error
	28, // 11: bosdyn.api.spot.SpotCheckFeedbackResponse.camera_results:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.CameraResultsEntry
	29, // 12: bosdyn.api.spot.SpotCheckFeedbackResponse.load_cell_results:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.LoadCellResultsEntry
	30, // 13: bosdyn.api.spot.SpotCheckFeedbackResponse.kinematic_cal_results:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.KinematicCalResultsEntry
	18, // 14: bosdyn.api.spot.SpotCheckFeedbackResponse.payload_result:type_name -> bosdyn.api.spot.PayloadCheckResult
	31, // 15: bosdyn.api.spot.SpotCheckFeedbackResponse.foot_height_results:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.FootHeightResultsEntry
	32, // 16: bosdyn.api.spot.SpotCheckFeedbackResponse.leg_pair_results:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.LegPairResultsEntry
	33, // 17: bosdyn.api.spot.SpotCheckFeedbackResponse.hip_range_of_motion_results:type_name -> bosdyn.api.spot.SpotCheckFeedbackResponse.HipRangeOfMotionResultsEntry
	38, // 18: bosdyn.api.spot.SpotCheckFeedbackResponse.last_cal_timestamp:type_name -> google.protobuf.Timestamp
	4,  // 19: bosdyn.api.spot.DepthPlaneSpotCheckResult.status:type_name -> bosdyn.api.spot.DepthPlaneSpotCheckResult.Status
	5,  // 20: bosdyn.api.spot.PayloadCheckResult.error:type_name -> bosdyn.api.spot.PayloadCheckResult.Error
	6,  // 21: bosdyn.api.spot.LoadCellSpotCheckResult.error:type_name -> bosdyn.api.spot.LoadCellSpotCheckResult.Error
	7,  // 22: bosdyn.api.spot.JointKinematicCheckResult.error:type_name -> bosdyn.api.spot.JointKinematicCheckResult.Error
	8,  // 23: bosdyn.api.spot.FootHeightCheckResult.status:type_name -> bosdyn.api.spot.FootHeightCheckResult.Status
	9,  // 24: bosdyn.api.spot.LegPairCheckResult.status:type_name -> bosdyn.api.spot.LegPairCheckResult.Status
	10, // 25: bosdyn.api.spot.HipRangeOfMotionResult.error:type_name -> bosdyn.api.spot.HipRangeOfMotionResult.Error
	34, // 26: bosdyn.api.spot.CameraCalibrationCommandRequest.header:type_name -> bosdyn.api.RequestHeader
	35, // 27: bosdyn.api.spot.CameraCalibrationCommandRequest.lease:type_name -> bosdyn.api.Lease
	11, // 28: bosdyn.api.spot.CameraCalibrationCommandRequest.command:type_name -> bosdyn.api.spot.CameraCalibrationCommandRequest.Command
	36, // 29: bosdyn.api.spot.CameraCalibrationCommandResponse.header:type_name -> bosdyn.api.ResponseHeader
	37, // 30: bosdyn.api.spot.CameraCalibrationCommandResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	34, // 31: bosdyn.api.spot.CameraCalibrationFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	36, // 32: bosdyn.api.spot.CameraCalibrationFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	12, // 33: bosdyn.api.spot.CameraCalibrationFeedbackResponse.status:type_name -> bosdyn.api.spot.CameraCalibrationFeedbackResponse.Status
	17, // 34: bosdyn.api.spot.SpotCheckFeedbackResponse.CameraResultsEntry.value:type_name -> bosdyn.api.spot.DepthPlaneSpotCheckResult
	19, // 35: bosdyn.api.spot.SpotCheckFeedbackResponse.LoadCellResultsEntry.value:type_name -> bosdyn.api.spot.LoadCellSpotCheckResult
	20, // 36: bosdyn.api.spot.SpotCheckFeedbackResponse.KinematicCalResultsEntry.value:type_name -> bosdyn.api.spot.JointKinematicCheckResult
	21, // 37: bosdyn.api.spot.SpotCheckFeedbackResponse.FootHeightResultsEntry.value:type_name -> bosdyn.api.spot.FootHeightCheckResult
	22, // 38: bosdyn.api.spot.SpotCheckFeedbackResponse.LegPairResultsEntry.value:type_name -> bosdyn.api.spot.LegPairCheckResult
	23, // 39: bosdyn.api.spot.SpotCheckFeedbackResponse.HipRangeOfMotionResultsEntry.value:type_name -> bosdyn.api.spot.HipRangeOfMotionResult
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_bosdyn_api_spot_spot_check_proto_init() }
func file_bosdyn_api_spot_spot_check_proto_init() {
	if File_bosdyn_api_spot_spot_check_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_spot_spot_check_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCheckCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCheckCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCheckFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpotCheckFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepthPlaneSpotCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoadCellSpotCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JointKinematicCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FootHeightCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LegPairCheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HipRangeOfMotionResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraCalibrationCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraCalibrationCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraCalibrationFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_spot_spot_check_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CameraCalibrationFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_spot_spot_check_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_spot_spot_check_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_spot_spot_check_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_spot_spot_check_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_spot_spot_check_proto_msgTypes,
	}.Build()
	File_bosdyn_api_spot_spot_check_proto = out.File
	file_bosdyn_api_spot_spot_check_proto_rawDesc = nil
	file_bosdyn_api_spot_spot_check_proto_goTypes = nil
	file_bosdyn_api_spot_spot_check_proto_depIdxs = nil
}
