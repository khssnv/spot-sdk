// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/network_compute_bridge.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkComputeStatus int32

const (
	// Status is not specified.
	NetworkComputeStatus_NETWORK_COMPUTE_STATUS_UNKNOWN NetworkComputeStatus = 0
	// Succeeded.
	NetworkComputeStatus_NETWORK_COMPUTE_STATUS_SUCCESS NetworkComputeStatus = 1
	// External service not found in the robot's directory.
	NetworkComputeStatus_NETWORK_COMPUTE_STATUS_EXTERNAL_SERVICE_NOT_FOUND NetworkComputeStatus = 2
	// The call to the external server did not succeed.
	NetworkComputeStatus_NETWORK_COMPUTE_STATUS_EXTERNAL_SERVER_ERROR NetworkComputeStatus = 3
	// The robot failed to rotate the image as requested.
	NetworkComputeStatus_NETWORK_COMPUTE_STATUS_ROTATION_ERROR NetworkComputeStatus = 4
)

// Enum value maps for NetworkComputeStatus.
var (
	NetworkComputeStatus_name = map[int32]string{
		0: "NETWORK_COMPUTE_STATUS_UNKNOWN",
		1: "NETWORK_COMPUTE_STATUS_SUCCESS",
		2: "NETWORK_COMPUTE_STATUS_EXTERNAL_SERVICE_NOT_FOUND",
		3: "NETWORK_COMPUTE_STATUS_EXTERNAL_SERVER_ERROR",
		4: "NETWORK_COMPUTE_STATUS_ROTATION_ERROR",
	}
	NetworkComputeStatus_value = map[string]int32{
		"NETWORK_COMPUTE_STATUS_UNKNOWN":                    0,
		"NETWORK_COMPUTE_STATUS_SUCCESS":                    1,
		"NETWORK_COMPUTE_STATUS_EXTERNAL_SERVICE_NOT_FOUND": 2,
		"NETWORK_COMPUTE_STATUS_EXTERNAL_SERVER_ERROR":      3,
		"NETWORK_COMPUTE_STATUS_ROTATION_ERROR":             4,
	}
)

func (x NetworkComputeStatus) Enum() *NetworkComputeStatus {
	p := new(NetworkComputeStatus)
	*p = x
	return p
}

func (x NetworkComputeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkComputeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_network_compute_bridge_proto_enumTypes[0].Descriptor()
}

func (NetworkComputeStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_network_compute_bridge_proto_enumTypes[0]
}

func (x NetworkComputeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkComputeStatus.Descriptor instead.
func (NetworkComputeStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{0}
}

type ListAvailableModelsStatus int32

const (
	// Status is not specified.
	ListAvailableModelsStatus_LIST_AVAILABLE_MODELS_STATUS_UNKNOWN ListAvailableModelsStatus = 0
	// Succeeded.
	ListAvailableModelsStatus_LIST_AVAILABLE_MODELS_STATUS_SUCCESS ListAvailableModelsStatus = 1
	// External service not found in the robot's directory.
	ListAvailableModelsStatus_LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVICE_NOT_FOUND ListAvailableModelsStatus = 2
	// The call to the external server did not succeed.
	ListAvailableModelsStatus_LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVER_ERROR ListAvailableModelsStatus = 3
)

// Enum value maps for ListAvailableModelsStatus.
var (
	ListAvailableModelsStatus_name = map[int32]string{
		0: "LIST_AVAILABLE_MODELS_STATUS_UNKNOWN",
		1: "LIST_AVAILABLE_MODELS_STATUS_SUCCESS",
		2: "LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVICE_NOT_FOUND",
		3: "LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVER_ERROR",
	}
	ListAvailableModelsStatus_value = map[string]int32{
		"LIST_AVAILABLE_MODELS_STATUS_UNKNOWN":                    0,
		"LIST_AVAILABLE_MODELS_STATUS_SUCCESS":                    1,
		"LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVICE_NOT_FOUND": 2,
		"LIST_AVAILABLE_MODELS_STATUS_EXTERNAL_SERVER_ERROR":      3,
	}
)

func (x ListAvailableModelsStatus) Enum() *ListAvailableModelsStatus {
	p := new(ListAvailableModelsStatus)
	*p = x
	return p
}

func (x ListAvailableModelsStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListAvailableModelsStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_network_compute_bridge_proto_enumTypes[1].Descriptor()
}

func (ListAvailableModelsStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_network_compute_bridge_proto_enumTypes[1]
}

func (x ListAvailableModelsStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListAvailableModelsStatus.Descriptor instead.
func (ListAvailableModelsStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{1}
}

type NetworkComputeInputData_RotateImage int32

const (
	// Unspecified rotation method. Do not use.
	NetworkComputeInputData_ROTATE_IMAGE_UNKNOWN NetworkComputeInputData_RotateImage = 0
	// No rotation applied.
	NetworkComputeInputData_ROTATE_IMAGE_NO_ROTATION NetworkComputeInputData_RotateImage = 3
	// Rotate the images so the horizon is not rolled with respect to gravity.
	NetworkComputeInputData_ROTATE_IMAGE_ALIGN_HORIZONTAL NetworkComputeInputData_RotateImage = 1
	// Rotate the images so that the horizon in the image is aligned with the inclination of
	// the body. For example, when applied to the left body camera this option rotates the image
	// so that the world does not appear upside down when the robot is standing upright, but if the
	// body is pitched up, the image will appear rotated.
	NetworkComputeInputData_ROTATE_IMAGE_ALIGN_WITH_BODY NetworkComputeInputData_RotateImage = 2
)

// Enum value maps for NetworkComputeInputData_RotateImage.
var (
	NetworkComputeInputData_RotateImage_name = map[int32]string{
		0: "ROTATE_IMAGE_UNKNOWN",
		3: "ROTATE_IMAGE_NO_ROTATION",
		1: "ROTATE_IMAGE_ALIGN_HORIZONTAL",
		2: "ROTATE_IMAGE_ALIGN_WITH_BODY",
	}
	NetworkComputeInputData_RotateImage_value = map[string]int32{
		"ROTATE_IMAGE_UNKNOWN":          0,
		"ROTATE_IMAGE_NO_ROTATION":      3,
		"ROTATE_IMAGE_ALIGN_HORIZONTAL": 1,
		"ROTATE_IMAGE_ALIGN_WITH_BODY":  2,
	}
)

func (x NetworkComputeInputData_RotateImage) Enum() *NetworkComputeInputData_RotateImage {
	p := new(NetworkComputeInputData_RotateImage)
	*p = x
	return p
}

func (x NetworkComputeInputData_RotateImage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkComputeInputData_RotateImage) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_network_compute_bridge_proto_enumTypes[2].Descriptor()
}

func (NetworkComputeInputData_RotateImage) Type() protoreflect.EnumType {
	return &file_bosdyn_api_network_compute_bridge_proto_enumTypes[2]
}

func (x NetworkComputeInputData_RotateImage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkComputeInputData_RotateImage.Descriptor instead.
func (NetworkComputeInputData_RotateImage) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{5, 0}
}

type ListAvailableModelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Common request header
	// Configuration about which server to use.
	ServerConfig *NetworkComputeServerConfiguration `protobuf:"bytes,2,opt,name=server_config,json=serverConfig,proto3" json:"server_config,omitempty"`
}

func (x *ListAvailableModelsRequest) Reset() {
	*x = ListAvailableModelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableModelsRequest) ProtoMessage() {}

func (x *ListAvailableModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableModelsRequest.ProtoReflect.Descriptor instead.
func (*ListAvailableModelsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{0}
}

func (x *ListAvailableModelsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListAvailableModelsRequest) GetServerConfig() *NetworkComputeServerConfiguration {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

type ListAvailableModelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Common response header.
	// Provide list of available models
	AvailableModels []string `protobuf:"bytes,2,rep,name=available_models,json=availableModels,proto3" json:"available_models,omitempty"`
	// Optional information about available classes for each model
	Labels []*ModelLabels `protobuf:"bytes,6,rep,name=labels,proto3" json:"labels,omitempty"`
	// Command status
	Status ListAvailableModelsStatus `protobuf:"varint,5,opt,name=status,proto3,enum=bosdyn.api.ListAvailableModelsStatus" json:"status,omitempty"`
}

func (x *ListAvailableModelsResponse) Reset() {
	*x = ListAvailableModelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAvailableModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAvailableModelsResponse) ProtoMessage() {}

func (x *ListAvailableModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAvailableModelsResponse.ProtoReflect.Descriptor instead.
func (*ListAvailableModelsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{1}
}

func (x *ListAvailableModelsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListAvailableModelsResponse) GetAvailableModels() []string {
	if x != nil {
		return x.AvailableModels
	}
	return nil
}

func (x *ListAvailableModelsResponse) GetLabels() []*ModelLabels {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ListAvailableModelsResponse) GetStatus() ListAvailableModelsStatus {
	if x != nil {
		return x.Status
	}
	return ListAvailableModelsStatus_LIST_AVAILABLE_MODELS_STATUS_UNKNOWN
}

type ModelLabels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Model name.
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// List of class labels returned by this model.
	AvailableLabels []string `protobuf:"bytes,2,rep,name=available_labels,json=availableLabels,proto3" json:"available_labels,omitempty"`
}

func (x *ModelLabels) Reset() {
	*x = ModelLabels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModelLabels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelLabels) ProtoMessage() {}

func (x *ModelLabels) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelLabels.ProtoReflect.Descriptor instead.
func (*ModelLabels) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{2}
}

func (x *ModelLabels) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *ModelLabels) GetAvailableLabels() []string {
	if x != nil {
		return x.AvailableLabels
	}
	return nil
}

type NetworkComputeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Common request header.
	// Input data.
	InputData *NetworkComputeInputData `protobuf:"bytes,2,opt,name=input_data,json=inputData,proto3" json:"input_data,omitempty"`
	// Configuration about which server to use.
	ServerConfig *NetworkComputeServerConfiguration `protobuf:"bytes,3,opt,name=server_config,json=serverConfig,proto3" json:"server_config,omitempty"`
}

func (x *NetworkComputeRequest) Reset() {
	*x = NetworkComputeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkComputeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkComputeRequest) ProtoMessage() {}

func (x *NetworkComputeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkComputeRequest.ProtoReflect.Descriptor instead.
func (*NetworkComputeRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{3}
}

func (x *NetworkComputeRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NetworkComputeRequest) GetInputData() *NetworkComputeInputData {
	if x != nil {
		return x.InputData
	}
	return nil
}

func (x *NetworkComputeRequest) GetServerConfig() *NetworkComputeServerConfiguration {
	if x != nil {
		return x.ServerConfig
	}
	return nil
}

type ImageSourceAndService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Image source.
	ImageSource string `protobuf:"bytes,1,opt,name=image_source,json=imageSource,proto3" json:"image_source,omitempty"`
	// Image service.  If blank, it is assumed to be the robot's default image service.
	ImageService string `protobuf:"bytes,2,opt,name=image_service,json=imageService,proto3" json:"image_service,omitempty"`
}

func (x *ImageSourceAndService) Reset() {
	*x = ImageSourceAndService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageSourceAndService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageSourceAndService) ProtoMessage() {}

func (x *ImageSourceAndService) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageSourceAndService.ProtoReflect.Descriptor instead.
func (*ImageSourceAndService) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{4}
}

func (x *ImageSourceAndService) GetImageSource() string {
	if x != nil {
		return x.ImageSource
	}
	return ""
}

func (x *ImageSourceAndService) GetImageService() string {
	if x != nil {
		return x.ImageService
	}
	return ""
}

type NetworkComputeInputData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Input:
	//	*NetworkComputeInputData_ImageSourceAndService
	//	*NetworkComputeInputData_Image
	Input isNetworkComputeInputData_Input `protobuf_oneof:"input"`
	// Other data that isn't an image.  NetworkComputeBridge service will pass it through
	// to the remote server so you can do computation on arbitrary data.
	OtherData *anypb.Any `protobuf:"bytes,3,opt,name=other_data,json=otherData,proto3" json:"other_data,omitempty"`
	// Name of the model to be run on the input data.
	ModelName string `protobuf:"bytes,4,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// Minimum confidence [0.0 - 1.0] an object must have to be returned. Detections below this
	// confidence threshold will be suppressed in the response.
	MinConfidence float32 `protobuf:"fixed32,5,opt,name=min_confidence,json=minConfidence,proto3" json:"min_confidence,omitempty"`
	// Options for rotating the image before processing. When unset, no rotation is applied.
	// Rotation is supported for data from image services that provide a FrameTreeSnapshot
	// defining the sensor's frame with respect to Spot's body and vision frames.
	// Field is ignored for non-image input.
	RotateImage NetworkComputeInputData_RotateImage `protobuf:"varint,6,opt,name=rotate_image,json=rotateImage,proto3,enum=bosdyn.api.NetworkComputeInputData_RotateImage" json:"rotate_image,omitempty"`
}

func (x *NetworkComputeInputData) Reset() {
	*x = NetworkComputeInputData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkComputeInputData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkComputeInputData) ProtoMessage() {}

func (x *NetworkComputeInputData) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkComputeInputData.ProtoReflect.Descriptor instead.
func (*NetworkComputeInputData) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{5}
}

func (m *NetworkComputeInputData) GetInput() isNetworkComputeInputData_Input {
	if m != nil {
		return m.Input
	}
	return nil
}

func (x *NetworkComputeInputData) GetImageSourceAndService() *ImageSourceAndService {
	if x, ok := x.GetInput().(*NetworkComputeInputData_ImageSourceAndService); ok {
		return x.ImageSourceAndService
	}
	return nil
}

func (x *NetworkComputeInputData) GetImage() *Image {
	if x, ok := x.GetInput().(*NetworkComputeInputData_Image); ok {
		return x.Image
	}
	return nil
}

func (x *NetworkComputeInputData) GetOtherData() *anypb.Any {
	if x != nil {
		return x.OtherData
	}
	return nil
}

func (x *NetworkComputeInputData) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *NetworkComputeInputData) GetMinConfidence() float32 {
	if x != nil {
		return x.MinConfidence
	}
	return 0
}

func (x *NetworkComputeInputData) GetRotateImage() NetworkComputeInputData_RotateImage {
	if x != nil {
		return x.RotateImage
	}
	return NetworkComputeInputData_ROTATE_IMAGE_UNKNOWN
}

type isNetworkComputeInputData_Input interface {
	isNetworkComputeInputData_Input()
}

type NetworkComputeInputData_ImageSourceAndService struct {
	// Image source to collect an image from.
	ImageSourceAndService *ImageSourceAndService `protobuf:"bytes,7,opt,name=image_source_and_service,json=imageSourceAndService,proto3,oneof"`
}

type NetworkComputeInputData_Image struct {
	// Image to process, if you are not using an image source.
	Image *Image `protobuf:"bytes,2,opt,name=image,proto3,oneof"`
}

func (*NetworkComputeInputData_ImageSourceAndService) isNetworkComputeInputData_Input() {}

func (*NetworkComputeInputData_Image) isNetworkComputeInputData_Input() {}

type NetworkComputeServerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service name in the robot's Directory for the worker that will process the request.
	ServiceName string `protobuf:"bytes,3,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *NetworkComputeServerConfiguration) Reset() {
	*x = NetworkComputeServerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkComputeServerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkComputeServerConfiguration) ProtoMessage() {}

func (x *NetworkComputeServerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkComputeServerConfiguration.ProtoReflect.Descriptor instead.
func (*NetworkComputeServerConfiguration) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkComputeServerConfiguration) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type NetworkComputeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Common response header.
	// Detection information. May include bounding boxes, image coordinates, 3D pose information, etc.
	ObjectInImage []*WorldObject `protobuf:"bytes,2,rep,name=object_in_image,json=objectInImage,proto3" json:"object_in_image,omitempty"`
	// The image we computed the data on. If the input image itself was provided in the request,
	// this field is not populated.  This field is not set for non-image input.
	ImageResponse *ImageResponse `protobuf:"bytes,3,opt,name=image_response,json=imageResponse,proto3" json:"image_response,omitempty"`
	// If the image was rotated for processing, this field will contain the amount it was rotated by
	// (counter-clockwise, in radians).
	//
	// Note that the image returned is *not* rotated, regardless of if it was rotated
	// for processing.  This ensures that all other calibration and metadata remains valid.
	ImageRotationAngle float64 `protobuf:"fixed64,6,opt,name=image_rotation_angle,json=imageRotationAngle,proto3" json:"image_rotation_angle,omitempty"`
	// Non image-type data that can optionally be returned by a remote server.
	OtherData *anypb.Any `protobuf:"bytes,4,opt,name=other_data,json=otherData,proto3" json:"other_data,omitempty"`
	// Command status
	Status NetworkComputeStatus `protobuf:"varint,5,opt,name=status,proto3,enum=bosdyn.api.NetworkComputeStatus" json:"status,omitempty"`
	// Optional field to indicate an alert detected by this model.
	AlertData *AlertData `protobuf:"bytes,7,opt,name=alert_data,json=alertData,proto3" json:"alert_data,omitempty"`
}

func (x *NetworkComputeResponse) Reset() {
	*x = NetworkComputeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkComputeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkComputeResponse) ProtoMessage() {}

func (x *NetworkComputeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_network_compute_bridge_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkComputeResponse.ProtoReflect.Descriptor instead.
func (*NetworkComputeResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP(), []int{7}
}

func (x *NetworkComputeResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NetworkComputeResponse) GetObjectInImage() []*WorldObject {
	if x != nil {
		return x.ObjectInImage
	}
	return nil
}

func (x *NetworkComputeResponse) GetImageResponse() *ImageResponse {
	if x != nil {
		return x.ImageResponse
	}
	return nil
}

func (x *NetworkComputeResponse) GetImageRotationAngle() float64 {
	if x != nil {
		return x.ImageRotationAngle
	}
	return 0
}

func (x *NetworkComputeResponse) GetOtherData() *anypb.Any {
	if x != nil {
		return x.OtherData
	}
	return nil
}

func (x *NetworkComputeResponse) GetStatus() NetworkComputeStatus {
	if x != nil {
		return x.Status
	}
	return NetworkComputeStatus_NETWORK_COMPUTE_STATUS_UNKNOWN
}

func (x *NetworkComputeResponse) GetAlertData() *AlertData {
	if x != nil {
		return x.AlertData
	}
	return nil
}

var File_bosdyn_api_network_compute_bridge_proto protoreflect.FileDescriptor

var file_bosdyn_api_network_compute_bridge_proto_rawDesc = []byte{
	0x0a, 0x27, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6c,
	0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa3, 0x01, 0x0a, 0x1a, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x0d, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xec, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x2f,
	0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x57,
	0x0a, 0x0b, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0xe2, 0x01, 0x0a, 0x15, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x5f, 0x0a, 0x15,
	0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x8d, 0x04,
	0x0a, 0x17, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5c, 0x0a, 0x18, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00,
	0x52, 0x15, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6e, 0x64,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x09, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d,
	0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x52, 0x0a,
	0x0c, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x52,
	0x4f, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x52,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x4f, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x5f,
	0x48, 0x4f, 0x52, 0x49, 0x5a, 0x4f, 0x4e, 0x54, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c,
	0x52, 0x4f, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x41, 0x4c, 0x49,
	0x47, 0x4e, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x10, 0x02, 0x42, 0x07,
	0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x52, 0x0a,
	0x21, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xa6, 0x03, 0x0a, 0x16, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x0f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x40, 0x0a, 0x0e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x12, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x09, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2a, 0xf2, 0x01, 0x0a, 0x14, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x35, 0x0a, 0x31, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x02, 0x12, 0x30, 0x0a, 0x2c, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x2a,
	0xe4, 0x01, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a,
	0x24, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x28, 0x0a, 0x24, 0x4c, 0x49, 0x53, 0x54, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x53,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x3b, 0x0a, 0x37, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x36,
	0x0a, 0x32, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x4c, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x4e, 0x42, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_network_compute_bridge_proto_rawDescOnce sync.Once
	file_bosdyn_api_network_compute_bridge_proto_rawDescData = file_bosdyn_api_network_compute_bridge_proto_rawDesc
)

func file_bosdyn_api_network_compute_bridge_proto_rawDescGZIP() []byte {
	file_bosdyn_api_network_compute_bridge_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_network_compute_bridge_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_network_compute_bridge_proto_rawDescData)
	})
	return file_bosdyn_api_network_compute_bridge_proto_rawDescData
}

var file_bosdyn_api_network_compute_bridge_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bosdyn_api_network_compute_bridge_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_bosdyn_api_network_compute_bridge_proto_goTypes = []interface{}{
	(NetworkComputeStatus)(0),                 // 0: bosdyn.api.NetworkComputeStatus
	(ListAvailableModelsStatus)(0),            // 1: bosdyn.api.ListAvailableModelsStatus
	(NetworkComputeInputData_RotateImage)(0),  // 2: bosdyn.api.NetworkComputeInputData.RotateImage
	(*ListAvailableModelsRequest)(nil),        // 3: bosdyn.api.ListAvailableModelsRequest
	(*ListAvailableModelsResponse)(nil),       // 4: bosdyn.api.ListAvailableModelsResponse
	(*ModelLabels)(nil),                       // 5: bosdyn.api.ModelLabels
	(*NetworkComputeRequest)(nil),             // 6: bosdyn.api.NetworkComputeRequest
	(*ImageSourceAndService)(nil),             // 7: bosdyn.api.ImageSourceAndService
	(*NetworkComputeInputData)(nil),           // 8: bosdyn.api.NetworkComputeInputData
	(*NetworkComputeServerConfiguration)(nil), // 9: bosdyn.api.NetworkComputeServerConfiguration
	(*NetworkComputeResponse)(nil),            // 10: bosdyn.api.NetworkComputeResponse
	(*RequestHeader)(nil),                     // 11: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),                    // 12: bosdyn.api.ResponseHeader
	(*Image)(nil),                             // 13: bosdyn.api.Image
	(*anypb.Any)(nil),                         // 14: google.protobuf.Any
	(*WorldObject)(nil),                       // 15: bosdyn.api.WorldObject
	(*ImageResponse)(nil),                     // 16: bosdyn.api.ImageResponse
	(*AlertData)(nil),                         // 17: bosdyn.api.AlertData
}
var file_bosdyn_api_network_compute_bridge_proto_depIdxs = []int32{
	11, // 0: bosdyn.api.ListAvailableModelsRequest.header:type_name -> bosdyn.api.RequestHeader
	9,  // 1: bosdyn.api.ListAvailableModelsRequest.server_config:type_name -> bosdyn.api.NetworkComputeServerConfiguration
	12, // 2: bosdyn.api.ListAvailableModelsResponse.header:type_name -> bosdyn.api.ResponseHeader
	5,  // 3: bosdyn.api.ListAvailableModelsResponse.labels:type_name -> bosdyn.api.ModelLabels
	1,  // 4: bosdyn.api.ListAvailableModelsResponse.status:type_name -> bosdyn.api.ListAvailableModelsStatus
	11, // 5: bosdyn.api.NetworkComputeRequest.header:type_name -> bosdyn.api.RequestHeader
	8,  // 6: bosdyn.api.NetworkComputeRequest.input_data:type_name -> bosdyn.api.NetworkComputeInputData
	9,  // 7: bosdyn.api.NetworkComputeRequest.server_config:type_name -> bosdyn.api.NetworkComputeServerConfiguration
	7,  // 8: bosdyn.api.NetworkComputeInputData.image_source_and_service:type_name -> bosdyn.api.ImageSourceAndService
	13, // 9: bosdyn.api.NetworkComputeInputData.image:type_name -> bosdyn.api.Image
	14, // 10: bosdyn.api.NetworkComputeInputData.other_data:type_name -> google.protobuf.Any
	2,  // 11: bosdyn.api.NetworkComputeInputData.rotate_image:type_name -> bosdyn.api.NetworkComputeInputData.RotateImage
	12, // 12: bosdyn.api.NetworkComputeResponse.header:type_name -> bosdyn.api.ResponseHeader
	15, // 13: bosdyn.api.NetworkComputeResponse.object_in_image:type_name -> bosdyn.api.WorldObject
	16, // 14: bosdyn.api.NetworkComputeResponse.image_response:type_name -> bosdyn.api.ImageResponse
	14, // 15: bosdyn.api.NetworkComputeResponse.other_data:type_name -> google.protobuf.Any
	0,  // 16: bosdyn.api.NetworkComputeResponse.status:type_name -> bosdyn.api.NetworkComputeStatus
	17, // 17: bosdyn.api.NetworkComputeResponse.alert_data:type_name -> bosdyn.api.AlertData
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_bosdyn_api_network_compute_bridge_proto_init() }
func file_bosdyn_api_network_compute_bridge_proto_init() {
	if File_bosdyn_api_network_compute_bridge_proto != nil {
		return
	}
	file_bosdyn_api_alerts_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_image_proto_init()
	file_bosdyn_api_world_object_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAvailableModelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAvailableModelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModelLabels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkComputeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageSourceAndService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkComputeInputData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkComputeServerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_network_compute_bridge_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkComputeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_network_compute_bridge_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NetworkComputeInputData_ImageSourceAndService)(nil),
		(*NetworkComputeInputData_Image)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_network_compute_bridge_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_network_compute_bridge_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_network_compute_bridge_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_network_compute_bridge_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_network_compute_bridge_proto_msgTypes,
	}.Build()
	File_bosdyn_api_network_compute_bridge_proto = out.File
	file_bosdyn_api_network_compute_bridge_proto_rawDesc = nil
	file_bosdyn_api_network_compute_bridge_proto_goTypes = nil
	file_bosdyn_api_network_compute_bridge_proto_depIdxs = nil
}
