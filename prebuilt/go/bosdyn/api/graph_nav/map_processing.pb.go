// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/graph_nav/map_processing.proto

package graph_nav

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcessTopologyResponse_Status int32

const (
	ProcessTopologyResponse_STATUS_UNKNOWN                        ProcessTopologyResponse_Status = 0 // Programming error.
	ProcessTopologyResponse_STATUS_OK                             ProcessTopologyResponse_Status = 1 // Success.
	ProcessTopologyResponse_STATUS_MISSING_WAYPOINT_SNAPSHOTS     ProcessTopologyResponse_Status = 2 // Not all of the waypoint snapshots exist on the server. Upload them to continue.
	ProcessTopologyResponse_STATUS_INVALID_GRAPH                  ProcessTopologyResponse_Status = 3 // The graph is invalid topologically, for example containing missing waypoints referenced by edges.
	ProcessTopologyResponse_STATUS_MAP_MODIFIED_DURING_PROCESSING ProcessTopologyResponse_Status = 4 // Tried to write the anchoring after processing, but another client may have modified the map. Try again
)

// Enum value maps for ProcessTopologyResponse_Status.
var (
	ProcessTopologyResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_MISSING_WAYPOINT_SNAPSHOTS",
		3: "STATUS_INVALID_GRAPH",
		4: "STATUS_MAP_MODIFIED_DURING_PROCESSING",
	}
	ProcessTopologyResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                        0,
		"STATUS_OK":                             1,
		"STATUS_MISSING_WAYPOINT_SNAPSHOTS":     2,
		"STATUS_INVALID_GRAPH":                  3,
		"STATUS_MAP_MODIFIED_DURING_PROCESSING": 4,
	}
)

func (x ProcessTopologyResponse_Status) Enum() *ProcessTopologyResponse_Status {
	p := new(ProcessTopologyResponse_Status)
	*p = x
	return p
}

func (x ProcessTopologyResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessTopologyResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_map_processing_proto_enumTypes[0].Descriptor()
}

func (ProcessTopologyResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_map_processing_proto_enumTypes[0]
}

func (x ProcessTopologyResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessTopologyResponse_Status.Descriptor instead.
func (ProcessTopologyResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{1, 0}
}

type ProcessAnchoringResponse_Status int32

const (
	ProcessAnchoringResponse_STATUS_UNKNOWN                        ProcessAnchoringResponse_Status = 0  // Programming error.
	ProcessAnchoringResponse_STATUS_OK                             ProcessAnchoringResponse_Status = 1  // Success.
	ProcessAnchoringResponse_STATUS_MISSING_WAYPOINT_SNAPSHOTS     ProcessAnchoringResponse_Status = 2  // Not all of the waypoint snapshots exist on the server. Upload them to continue.
	ProcessAnchoringResponse_STATUS_INVALID_GRAPH                  ProcessAnchoringResponse_Status = 3  // The graph is invalid topologically, for example containing missing waypoints referenced by edges.
	ProcessAnchoringResponse_STATUS_OPTIMIZATION_FAILURE           ProcessAnchoringResponse_Status = 4  // The optimization failed due to local minima or an ill-conditioned problem definition.
	ProcessAnchoringResponse_STATUS_INVALID_PARAMS                 ProcessAnchoringResponse_Status = 5  // The parameters passed to the optimizer do not make sense (e.g negative weights).
	ProcessAnchoringResponse_STATUS_CONSTRAINT_VIOLATION           ProcessAnchoringResponse_Status = 6  // One or more anchors were moved outside of the desired constraints.
	ProcessAnchoringResponse_STATUS_MAX_ITERATIONS                 ProcessAnchoringResponse_Status = 7  // The optimizer reached the maximum number of iterations before converging.
	ProcessAnchoringResponse_STATUS_MAX_TIME                       ProcessAnchoringResponse_Status = 8  // The optimizer timed out before converging.
	ProcessAnchoringResponse_STATUS_INVALID_HINTS                  ProcessAnchoringResponse_Status = 9  // One or more of the hints passed in to the optimizer are invalid (do not correspond to real waypoints or objects).
	ProcessAnchoringResponse_STATUS_MAP_MODIFIED_DURING_PROCESSING ProcessAnchoringResponse_Status = 10 // Tried to write the anchoring after processing, but another client may have modified the map. Try again.
)

// Enum value maps for ProcessAnchoringResponse_Status.
var (
	ProcessAnchoringResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_OK",
		2:  "STATUS_MISSING_WAYPOINT_SNAPSHOTS",
		3:  "STATUS_INVALID_GRAPH",
		4:  "STATUS_OPTIMIZATION_FAILURE",
		5:  "STATUS_INVALID_PARAMS",
		6:  "STATUS_CONSTRAINT_VIOLATION",
		7:  "STATUS_MAX_ITERATIONS",
		8:  "STATUS_MAX_TIME",
		9:  "STATUS_INVALID_HINTS",
		10: "STATUS_MAP_MODIFIED_DURING_PROCESSING",
	}
	ProcessAnchoringResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                        0,
		"STATUS_OK":                             1,
		"STATUS_MISSING_WAYPOINT_SNAPSHOTS":     2,
		"STATUS_INVALID_GRAPH":                  3,
		"STATUS_OPTIMIZATION_FAILURE":           4,
		"STATUS_INVALID_PARAMS":                 5,
		"STATUS_CONSTRAINT_VIOLATION":           6,
		"STATUS_MAX_ITERATIONS":                 7,
		"STATUS_MAX_TIME":                       8,
		"STATUS_INVALID_HINTS":                  9,
		"STATUS_MAP_MODIFIED_DURING_PROCESSING": 10,
	}
)

func (x ProcessAnchoringResponse_Status) Enum() *ProcessAnchoringResponse_Status {
	p := new(ProcessAnchoringResponse_Status)
	*p = x
	return p
}

func (x ProcessAnchoringResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProcessAnchoringResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_map_processing_proto_enumTypes[1].Descriptor()
}

func (ProcessAnchoringResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_map_processing_proto_enumTypes[1]
}

func (x ProcessAnchoringResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProcessAnchoringResponse_Status.Descriptor instead.
func (ProcessAnchoringResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{8, 0}
}

// Processes a GraphNav map by creating additional edges. After processing,
// a new subgraph is created containing additional edges to add to the map.
// Edges are created between waypoints that are near each other. These waypoint pairs
// are called "loop closures", and are found by different means.
// In general, if parameters are not provided, reasonable defaults will be used.
// Note that this can be used to merge disconnected subgraphs from multiple recording
// sessions so long as they share fiducial observations.
type ProcessTopologyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard message header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Parameters. If not filled out, reasonable defaults will be used.
	Params *ProcessTopologyRequest_Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// If true, any processing should directly modify the map on the server.
	// Otherwise, the client is expected to upload the processing results (newly created edges)
	// back to the server. The processing service shares memory with a map container service
	// (e.g the GraphNav service).
	ModifyMapOnServer bool `protobuf:"varint,3,opt,name=modify_map_on_server,json=modifyMapOnServer,proto3" json:"modify_map_on_server,omitempty"`
}

func (x *ProcessTopologyRequest) Reset() {
	*x = ProcessTopologyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTopologyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTopologyRequest) ProtoMessage() {}

func (x *ProcessTopologyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTopologyRequest.ProtoReflect.Descriptor instead.
func (*ProcessTopologyRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{0}
}

func (x *ProcessTopologyRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ProcessTopologyRequest) GetParams() *ProcessTopologyRequest_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ProcessTopologyRequest) GetModifyMapOnServer() bool {
	if x != nil {
		return x.ModifyMapOnServer
	}
	return false
}

// Result of the topology processing RPC. If successful, contains a subgraph of new
// waypoints or edges created by this process.
type ProcessTopologyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard message header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of the processing.
	Status ProcessTopologyResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.graph_nav.ProcessTopologyResponse_Status" json:"status,omitempty"`
	// This graph contains the new edge(s) created by map processing. Note that these edges will be
	// annotated with their creation method. Note that several subgraphs may be returned via
	// streaming as the map is processed.
	NewSubgraph *Graph `protobuf:"bytes,3,opt,name=new_subgraph,json=newSubgraph,proto3" json:"new_subgraph,omitempty"`
	// If modify_map_on_server was set to true in the request, then the map currently on the server
	// was modified using map processing. If this is set to false, then either an error occurred during
	// processing, or modify_map_on_server was set to false in the request.
	// When map_on_server_was_modified is set to false, the client is expected to upload the results
	// back to the server to commit the changes.
	MapOnServerWasModified bool `protobuf:"varint,4,opt,name=map_on_server_was_modified,json=mapOnServerWasModified,proto3" json:"map_on_server_was_modified,omitempty"`
	// When there are missing waypoint snapshots, these are the IDs of the missing snapshots.
	// Upload them to continue.
	MissingSnapshotIds []string `protobuf:"bytes,10,rep,name=missing_snapshot_ids,json=missingSnapshotIds,proto3" json:"missing_snapshot_ids,omitempty"`
	// When there are missing waypoints, these are the IDs of the missing waypoints. Upload them
	// to continue.
	MissingWaypointIds []string `protobuf:"bytes,11,rep,name=missing_waypoint_ids,json=missingWaypointIds,proto3" json:"missing_waypoint_ids,omitempty"`
	// If true, the processing timed out. Note that this is not considered an error. Run topology processing again
	// to continue adding edges.
	TimedOut bool `protobuf:"varint,12,opt,name=timed_out,json=timedOut,proto3" json:"timed_out,omitempty"`
}

func (x *ProcessTopologyResponse) Reset() {
	*x = ProcessTopologyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTopologyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTopologyResponse) ProtoMessage() {}

func (x *ProcessTopologyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTopologyResponse.ProtoReflect.Descriptor instead.
func (*ProcessTopologyResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{1}
}

func (x *ProcessTopologyResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ProcessTopologyResponse) GetStatus() ProcessTopologyResponse_Status {
	if x != nil {
		return x.Status
	}
	return ProcessTopologyResponse_STATUS_UNKNOWN
}

func (x *ProcessTopologyResponse) GetNewSubgraph() *Graph {
	if x != nil {
		return x.NewSubgraph
	}
	return nil
}

func (x *ProcessTopologyResponse) GetMapOnServerWasModified() bool {
	if x != nil {
		return x.MapOnServerWasModified
	}
	return false
}

func (x *ProcessTopologyResponse) GetMissingSnapshotIds() []string {
	if x != nil {
		return x.MissingSnapshotIds
	}
	return nil
}

func (x *ProcessTopologyResponse) GetMissingWaypointIds() []string {
	if x != nil {
		return x.MissingWaypointIds
	}
	return nil
}

func (x *ProcessTopologyResponse) GetTimedOut() bool {
	if x != nil {
		return x.TimedOut
	}
	return false
}

// Represents an interval in x, y, z and yaw around some center. Some value x
// will be within the bounds if  center - x_bounds <= x >= center + x_bounds.
// If the values are left at zero, the bounds are considered to be unconstrained.
// The center of the bounds is left implicit, and should be whatever this message
// is packaged with.
type PoseBounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bounds on the x position in meters.
	XBounds float64 `protobuf:"fixed64,1,opt,name=x_bounds,json=xBounds,proto3" json:"x_bounds,omitempty"`
	// Bounds on the y position in meters.
	YBounds float64 `protobuf:"fixed64,2,opt,name=y_bounds,json=yBounds,proto3" json:"y_bounds,omitempty"`
	// Bounds on the z position in meters.
	ZBounds float64 `protobuf:"fixed64,3,opt,name=z_bounds,json=zBounds,proto3" json:"z_bounds,omitempty"`
	// Bounds on the yaw (rotation around z axis) in radians.
	YawBounds float64 `protobuf:"fixed64,4,opt,name=yaw_bounds,json=yawBounds,proto3" json:"yaw_bounds,omitempty"`
}

func (x *PoseBounds) Reset() {
	*x = PoseBounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PoseBounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoseBounds) ProtoMessage() {}

func (x *PoseBounds) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoseBounds.ProtoReflect.Descriptor instead.
func (*PoseBounds) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{2}
}

func (x *PoseBounds) GetXBounds() float64 {
	if x != nil {
		return x.XBounds
	}
	return 0
}

func (x *PoseBounds) GetYBounds() float64 {
	if x != nil {
		return x.YBounds
	}
	return 0
}

func (x *PoseBounds) GetZBounds() float64 {
	if x != nil {
		return x.ZBounds
	}
	return 0
}

func (x *PoseBounds) GetYawBounds() float64 {
	if x != nil {
		return x.YawBounds
	}
	return 0
}

// Controls how certain the user is of an anchor's pose. If left empty, a reasonable default will be chosen.
type AnchorHintUncertainty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Uncertainty:
	//	*AnchorHintUncertainty_Se3Covariance
	//	*AnchorHintUncertainty_ConfidenceBounds
	Uncertainty isAnchorHintUncertainty_Uncertainty `protobuf_oneof:"uncertainty"`
}

func (x *AnchorHintUncertainty) Reset() {
	*x = AnchorHintUncertainty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchorHintUncertainty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchorHintUncertainty) ProtoMessage() {}

func (x *AnchorHintUncertainty) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchorHintUncertainty.ProtoReflect.Descriptor instead.
func (*AnchorHintUncertainty) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{3}
}

func (m *AnchorHintUncertainty) GetUncertainty() isAnchorHintUncertainty_Uncertainty {
	if m != nil {
		return m.Uncertainty
	}
	return nil
}

func (x *AnchorHintUncertainty) GetSe3Covariance() *api.SE3Covariance {
	if x, ok := x.GetUncertainty().(*AnchorHintUncertainty_Se3Covariance); ok {
		return x.Se3Covariance
	}
	return nil
}

func (x *AnchorHintUncertainty) GetConfidenceBounds() *PoseBounds {
	if x, ok := x.GetUncertainty().(*AnchorHintUncertainty_ConfidenceBounds); ok {
		return x.ConfidenceBounds
	}
	return nil
}

type isAnchorHintUncertainty_Uncertainty interface {
	isAnchorHintUncertainty_Uncertainty()
}

type AnchorHintUncertainty_Se3Covariance struct {
	// A full 6x6 Gaussian covariance matrix representing uncertainty of an anchoring.
	Se3Covariance *api.SE3Covariance `protobuf:"bytes,1,opt,name=se3_covariance,json=se3Covariance,proto3,oneof"`
}

type AnchorHintUncertainty_ConfidenceBounds struct {
	// Represents the 95 percent confidence interval on individual axes. This
	// will be converted to a SE3Covariance internally by creating a diagonal
	// matrix whose elements are informed by the confidence bounds.
	ConfidenceBounds *PoseBounds `protobuf:"bytes,2,opt,name=confidence_bounds,json=confidenceBounds,proto3,oneof"`
}

func (*AnchorHintUncertainty_Se3Covariance) isAnchorHintUncertainty_Uncertainty() {}

func (*AnchorHintUncertainty_ConfidenceBounds) isAnchorHintUncertainty_Uncertainty() {}

// Waypoints may be anchored to a particular seed frame. The user may request that a waypoint
// be anchored in a particular place with some Gaussian uncertainty.
type WaypointAnchorHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is to be interpreted as the mean of a Gaussian distribution, representing
	// the pose of the waypoint in the seed frame.
	WaypointAnchor *Anchor `protobuf:"bytes,1,opt,name=waypoint_anchor,json=waypointAnchor,proto3" json:"waypoint_anchor,omitempty"`
	// This is the uncertainty of the anchor's pose in the seed frame.
	// If left empty, a reasonable default uncertainty will be generated.
	SeedTformWaypointUncertainty *AnchorHintUncertainty `protobuf:"bytes,2,opt,name=seed_tform_waypoint_uncertainty,json=seedTformWaypointUncertainty,proto3" json:"seed_tform_waypoint_uncertainty,omitempty"`
	// Normally, the optimizer will move the anchorings of waypoints based on context, to minimize the
	// overall cost of the optimization problem. By providing a constraint on pose, the user can ensure
	// that the anchors stay within a certain region in the seed frame.
	// Leaving this empty will allow the optimizer to move the anchoring from the hint as far as it likes.
	SeedTformWaypointConstraint *PoseBounds `protobuf:"bytes,3,opt,name=seed_tform_waypoint_constraint,json=seedTformWaypointConstraint,proto3" json:"seed_tform_waypoint_constraint,omitempty"`
}

func (x *WaypointAnchorHint) Reset() {
	*x = WaypointAnchorHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaypointAnchorHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaypointAnchorHint) ProtoMessage() {}

func (x *WaypointAnchorHint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaypointAnchorHint.ProtoReflect.Descriptor instead.
func (*WaypointAnchorHint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{4}
}

func (x *WaypointAnchorHint) GetWaypointAnchor() *Anchor {
	if x != nil {
		return x.WaypointAnchor
	}
	return nil
}

func (x *WaypointAnchorHint) GetSeedTformWaypointUncertainty() *AnchorHintUncertainty {
	if x != nil {
		return x.SeedTformWaypointUncertainty
	}
	return nil
}

func (x *WaypointAnchorHint) GetSeedTformWaypointConstraint() *PoseBounds {
	if x != nil {
		return x.SeedTformWaypointConstraint
	}
	return nil
}

// World objects (such as fiducials) may be anchored to a particular seed frame. The user may request that an object
// be anchored in a particular place with some Gaussian uncertainty.
type WorldObjectAnchorHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This is to be interpreted as the mean of a Gaussian distribution, representing
	// the pose of the object in the seed frame.
	ObjectAnchor *AnchoredWorldObject `protobuf:"bytes,1,opt,name=object_anchor,json=objectAnchor,proto3" json:"object_anchor,omitempty"`
	// This is the uncertainty of the anchor's pose in the seed frame.
	// If left empty, a reasonable default uncertainty will be generated.
	SeedTformObjectUncertainty *AnchorHintUncertainty `protobuf:"bytes,2,opt,name=seed_tform_object_uncertainty,json=seedTformObjectUncertainty,proto3" json:"seed_tform_object_uncertainty,omitempty"`
	// Normally, the optimizer will move the anchorings of object based on context, to minimize the
	// overall cost of the optimization problem. By providing a constraint on pose, the user can ensure
	// that the anchors stay within a certain region in the seed frame.
	// Leaving this empty will allow the optimizer to move the anchoring from the hint as far as it likes.
	SeedTformObjectConstraint *PoseBounds `protobuf:"bytes,3,opt,name=seed_tform_object_constraint,json=seedTformObjectConstraint,proto3" json:"seed_tform_object_constraint,omitempty"`
}

func (x *WorldObjectAnchorHint) Reset() {
	*x = WorldObjectAnchorHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldObjectAnchorHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldObjectAnchorHint) ProtoMessage() {}

func (x *WorldObjectAnchorHint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldObjectAnchorHint.ProtoReflect.Descriptor instead.
func (*WorldObjectAnchorHint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{5}
}

func (x *WorldObjectAnchorHint) GetObjectAnchor() *AnchoredWorldObject {
	if x != nil {
		return x.ObjectAnchor
	}
	return nil
}

func (x *WorldObjectAnchorHint) GetSeedTformObjectUncertainty() *AnchorHintUncertainty {
	if x != nil {
		return x.SeedTformObjectUncertainty
	}
	return nil
}

func (x *WorldObjectAnchorHint) GetSeedTformObjectConstraint() *PoseBounds {
	if x != nil {
		return x.SeedTformObjectConstraint
	}
	return nil
}

// The user may assign a number of world objects and waypoints a guess at where they are in the seed frame.
// These hints will be respected by the ProcessAnchoringRequest.
type AnchoringHint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of waypoints and hints as to where they are in the seed frame.
	WaypointAnchors []*WaypointAnchorHint `protobuf:"bytes,1,rep,name=waypoint_anchors,json=waypointAnchors,proto3" json:"waypoint_anchors,omitempty"`
	// List of world objects and hints as to where they are in the seed frame.
	WorldObjects []*WorldObjectAnchorHint `protobuf:"bytes,2,rep,name=world_objects,json=worldObjects,proto3" json:"world_objects,omitempty"`
}

func (x *AnchoringHint) Reset() {
	*x = AnchoringHint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchoringHint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchoringHint) ProtoMessage() {}

func (x *AnchoringHint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchoringHint.ProtoReflect.Descriptor instead.
func (*AnchoringHint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{6}
}

func (x *AnchoringHint) GetWaypointAnchors() []*WaypointAnchorHint {
	if x != nil {
		return x.WaypointAnchors
	}
	return nil
}

func (x *AnchoringHint) GetWorldObjects() []*WorldObjectAnchorHint {
	if x != nil {
		return x.WorldObjects
	}
	return nil
}

// Causes the server to optimize an existing anchoring, or generate a new anchoring for the map using the given parameters.
// In general, if parameters are not provided, reasonable defaults will be used.
// The new anchoring will be streamed back to the client, or modified on the server if desired.
type ProcessAnchoringRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Standard request header.
	Header *api.RequestHeader              `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Params *ProcessAnchoringRequest_Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// Initial guess at some number of waypoints and world objects and their anchorings.
	InitialHint *AnchoringHint `protobuf:"bytes,3,opt,name=initial_hint,json=initialHint,proto3" json:"initial_hint,omitempty"`
	// If true, the map currently uploaded to the server will have its anchoring modified.
	// Otherwise, the user is expected to re-upload the anchoring.
	ModifyAnchoringOnServer bool `protobuf:"varint,4,opt,name=modify_anchoring_on_server,json=modifyAnchoringOnServer,proto3" json:"modify_anchoring_on_server,omitempty"`
	// If true, the anchoring will be streamed back to the user after every iteration.
	// This is useful for debug visualization.
	StreamIntermediateResults bool `protobuf:"varint,5,opt,name=stream_intermediate_results,json=streamIntermediateResults,proto3" json:"stream_intermediate_results,omitempty"`
}

func (x *ProcessAnchoringRequest) Reset() {
	*x = ProcessAnchoringRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAnchoringRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAnchoringRequest) ProtoMessage() {}

func (x *ProcessAnchoringRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAnchoringRequest.ProtoReflect.Descriptor instead.
func (*ProcessAnchoringRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{7}
}

func (x *ProcessAnchoringRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ProcessAnchoringRequest) GetParams() *ProcessAnchoringRequest_Params {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *ProcessAnchoringRequest) GetInitialHint() *AnchoringHint {
	if x != nil {
		return x.InitialHint
	}
	return nil
}

func (x *ProcessAnchoringRequest) GetModifyAnchoringOnServer() bool {
	if x != nil {
		return x.ModifyAnchoringOnServer
	}
	return false
}

func (x *ProcessAnchoringRequest) GetStreamIntermediateResults() bool {
	if x != nil {
		return x.StreamIntermediateResults
	}
	return false
}

// Streamed response from the ProcessAnchoringRequest. These will be streamed until optimization is complete.
// New anchorings will be streamed as they become available.
type ProcessAnchoringResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *api.ResponseHeader             `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Status ProcessAnchoringResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.graph_nav.ProcessAnchoringResponse_Status" json:"status,omitempty"`
	// Contains new anchorings for waypoint(s) processed by the server.
	// These will be streamed back to the user as they become available.
	WaypointResults []*Anchor `protobuf:"bytes,3,rep,name=waypoint_results,json=waypointResults,proto3" json:"waypoint_results,omitempty"`
	// Contains new anchorings for object(s) (e.g april tags) processed by the server.
	// These will be streamed back to the user as they become available
	WorldObjectResults []*AnchoredWorldObject `protobuf:"bytes,4,rep,name=world_object_results,json=worldObjectResults,proto3" json:"world_object_results,omitempty"`
	// If modify_anchoring_on_server was set to true in the request, then the anchoring currently on the server
	// was modified using map processing. If this is set to false, then either an error occurred during
	// processing, or modify_anchoring_on_server was set to false in the request.
	// When anchoring_on_server_was_modified is set to false, the client is expected to upload the results
	// back to the server to commit the changes.
	AnchoringOnServerWasModified bool `protobuf:"varint,5,opt,name=anchoring_on_server_was_modified,json=anchoringOnServerWasModified,proto3" json:"anchoring_on_server_was_modified,omitempty"`
	// The current optimizer iteration that produced these data.
	Iteration int32 `protobuf:"varint,6,opt,name=iteration,proto3" json:"iteration,omitempty"`
	// The current nonlinear optimization cost.
	Cost float64 `protobuf:"fixed64,7,opt,name=cost,proto3" json:"cost,omitempty"`
	// If true, this is the result of the final iteration of optimization.
	// This will always be true when stream_intermediate_results in the request is false.
	FinalIteration bool `protobuf:"varint,8,opt,name=final_iteration,json=finalIteration,proto3" json:"final_iteration,omitempty"`
	// On failure due to constraint violation, these hints were violated by the optimization.
	// Try increasing the pose bounds on the constraints of these hints.
	ViolatedWaypointConstraints []*WaypointAnchorHint `protobuf:"bytes,9,rep,name=violated_waypoint_constraints,json=violatedWaypointConstraints,proto3" json:"violated_waypoint_constraints,omitempty"`
	// On failure due to constraint violation, these hints were violated by the optimization.
	// Try increasing the pose bounds on the constraints of these hints.
	ViolatedObjectConstraints []*WorldObjectAnchorHint `protobuf:"bytes,10,rep,name=violated_object_constraints,json=violatedObjectConstraints,proto3" json:"violated_object_constraints,omitempty"`
	// When there are missing waypoint snapshots, these are the IDs of the missing snapshots.
	// Upload them to continue.
	MissingSnapshotIds []string `protobuf:"bytes,11,rep,name=missing_snapshot_ids,json=missingSnapshotIds,proto3" json:"missing_snapshot_ids,omitempty"`
	// When there are missing waypoints, these are the IDs of the missing waypoints. Upload them
	// to continue.
	MissingWaypointIds []string `protobuf:"bytes,12,rep,name=missing_waypoint_ids,json=missingWaypointIds,proto3" json:"missing_waypoint_ids,omitempty"`
	// Unorganized list of waypoints and object IDs which were invalid (missing from the map).
	InvalidHints []string `protobuf:"bytes,13,rep,name=invalid_hints,json=invalidHints,proto3" json:"invalid_hints,omitempty"`
}

func (x *ProcessAnchoringResponse) Reset() {
	*x = ProcessAnchoringResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAnchoringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAnchoringResponse) ProtoMessage() {}

func (x *ProcessAnchoringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAnchoringResponse.ProtoReflect.Descriptor instead.
func (*ProcessAnchoringResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessAnchoringResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ProcessAnchoringResponse) GetStatus() ProcessAnchoringResponse_Status {
	if x != nil {
		return x.Status
	}
	return ProcessAnchoringResponse_STATUS_UNKNOWN
}

func (x *ProcessAnchoringResponse) GetWaypointResults() []*Anchor {
	if x != nil {
		return x.WaypointResults
	}
	return nil
}

func (x *ProcessAnchoringResponse) GetWorldObjectResults() []*AnchoredWorldObject {
	if x != nil {
		return x.WorldObjectResults
	}
	return nil
}

func (x *ProcessAnchoringResponse) GetAnchoringOnServerWasModified() bool {
	if x != nil {
		return x.AnchoringOnServerWasModified
	}
	return false
}

func (x *ProcessAnchoringResponse) GetIteration() int32 {
	if x != nil {
		return x.Iteration
	}
	return 0
}

func (x *ProcessAnchoringResponse) GetCost() float64 {
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *ProcessAnchoringResponse) GetFinalIteration() bool {
	if x != nil {
		return x.FinalIteration
	}
	return false
}

func (x *ProcessAnchoringResponse) GetViolatedWaypointConstraints() []*WaypointAnchorHint {
	if x != nil {
		return x.ViolatedWaypointConstraints
	}
	return nil
}

func (x *ProcessAnchoringResponse) GetViolatedObjectConstraints() []*WorldObjectAnchorHint {
	if x != nil {
		return x.ViolatedObjectConstraints
	}
	return nil
}

func (x *ProcessAnchoringResponse) GetMissingSnapshotIds() []string {
	if x != nil {
		return x.MissingSnapshotIds
	}
	return nil
}

func (x *ProcessAnchoringResponse) GetMissingWaypointIds() []string {
	if x != nil {
		return x.MissingWaypointIds
	}
	return nil
}

func (x *ProcessAnchoringResponse) GetInvalidHints() []string {
	if x != nil {
		return x.InvalidHints
	}
	return nil
}

// Parameters for how to refine loop closure edges using iterative
// closest point matching.
type ProcessTopologyRequest_ICPParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of iterations to run. Set to zero to skip ICP processing.
	IcpIters *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=icp_iters,json=icpIters,proto3" json:"icp_iters,omitempty"`
	// The maximum distance between points in the point cloud we are willing to
	// accept for matches.
	MaxPointMatchDistance *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=max_point_match_distance,json=maxPointMatchDistance,proto3" json:"max_point_match_distance,omitempty"`
}

func (x *ProcessTopologyRequest_ICPParams) Reset() {
	*x = ProcessTopologyRequest_ICPParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTopologyRequest_ICPParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTopologyRequest_ICPParams) ProtoMessage() {}

func (x *ProcessTopologyRequest_ICPParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTopologyRequest_ICPParams.ProtoReflect.Descriptor instead.
func (*ProcessTopologyRequest_ICPParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ProcessTopologyRequest_ICPParams) GetIcpIters() *wrapperspb.Int32Value {
	if x != nil {
		return x.IcpIters
	}
	return nil
}

func (x *ProcessTopologyRequest_ICPParams) GetMaxPointMatchDistance() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxPointMatchDistance
	}
	return nil
}

// Parameters for how to close loops using odometry. This infers which waypoints
// should be connected to one another based on the odometry measurements in the map.
type ProcessTopologyRequest_OdometryLoopClosureParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum distance between waypoints found by walking a path from one
	// waypoint to the other using only the existing edges in the map. Beyond
	// this distance, we are unwilling to trust odometry.
	MaxLoopClosurePathLength *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=max_loop_closure_path_length,json=maxLoopClosurePathLength,proto3" json:"max_loop_closure_path_length,omitempty"`
	// The minimum distance between waypoints found by walking a path from
	// one waypoint to the other using only the existing edges in the map.
	// Set this higher to avoid creating small shortcuts along the existing path.
	// Note that this is a 2d path length.
	MinLoopClosurePathLength *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=min_loop_closure_path_length,json=minLoopClosurePathLength,proto3" json:"min_loop_closure_path_length,omitempty"`
	// The maximum apparent height change of the created edge that we are
	// willing to accept between waypoints. This avoids closing loops up ramps,
	// stairs, etc. or closing loops where there is significant odometry drift.
	MaxLoopClosureHeightChange *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=max_loop_closure_height_change,json=maxLoopClosureHeightChange,proto3" json:"max_loop_closure_height_change,omitempty"`
	// Once a loop closure candidate is found, the system creates an edge between the
	// candidate waypoints. Only create the edge if it is shorter than this value.
	// Note that this is a 3d edge length.
	MaxLoopClosureEdgeLength *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=max_loop_closure_edge_length,json=maxLoopClosureEdgeLength,proto3" json:"max_loop_closure_edge_length,omitempty"`
	// Use prior loop closures to infer new odometry based loop closures. This is
	// useful when other sources of loop closures (like fiducials) are being used.
	// The existence of those loop closures allows the system to infer other nearby
	// loop closures using odometry. Alternatively, the user may call the ProcessTopology
	// RPC multiple times to achieve the same effect.
	NumExtraLoopClosureIterations *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=num_extra_loop_closure_iterations,json=numExtraLoopClosureIterations,proto3" json:"num_extra_loop_closure_iterations,omitempty"`
}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) Reset() {
	*x = ProcessTopologyRequest_OdometryLoopClosureParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTopologyRequest_OdometryLoopClosureParams) ProtoMessage() {}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTopologyRequest_OdometryLoopClosureParams.ProtoReflect.Descriptor instead.
func (*ProcessTopologyRequest_OdometryLoopClosureParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) GetMaxLoopClosurePathLength() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLoopClosurePathLength
	}
	return nil
}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) GetMinLoopClosurePathLength() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinLoopClosurePathLength
	}
	return nil
}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) GetMaxLoopClosureHeightChange() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLoopClosureHeightChange
	}
	return nil
}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) GetMaxLoopClosureEdgeLength() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLoopClosureEdgeLength
	}
	return nil
}

func (x *ProcessTopologyRequest_OdometryLoopClosureParams) GetNumExtraLoopClosureIterations() *wrapperspb.Int32Value {
	if x != nil {
		return x.NumExtraLoopClosureIterations
	}
	return nil
}

// Parameters for how to close a loop using fiducials (AprilTags). This infers
// which waypoints should be connected to one another based on shared observations
// of AprilTags.
// Note that multiple disconnected subgraphs (for example from multiple recording sessions)
// can be merged this way.
type ProcessTopologyRequest_FiducialLoopClosureParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum distance between waypoints found by walking a path from
	// one waypoint to the other using only the existing edges in the map.
	// Set this higher to avoid creating small shortcuts along the existing path.
	// Note that this is a 2d path length.
	MinLoopClosurePathLength *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=min_loop_closure_path_length,json=minLoopClosurePathLength,proto3" json:"min_loop_closure_path_length,omitempty"`
	// Once a loop closure candidate is found, the system creates an edge between the
	// candidate waypoints. Only create the edge if it is shorter than this value.
	// Note that this is a 3d edge length.
	MaxLoopClosureEdgeLength *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=max_loop_closure_edge_length,json=maxLoopClosureEdgeLength,proto3" json:"max_loop_closure_edge_length,omitempty"`
	// Maximum distance to accept between a waypoint and a fiducial detection to
	// use that fiducial detection for generating loop closure candidates.
	MaxFiducialDistance *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=max_fiducial_distance,json=maxFiducialDistance,proto3" json:"max_fiducial_distance,omitempty"`
	// The maximum apparent height change of the created edge that we are
	// willing to accept between waypoints. This avoids closing loops up ramps,
	// stairs, etc. or closing loops where there is significant odometry drift.
	MaxLoopClosureHeightChange *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=max_loop_closure_height_change,json=maxLoopClosureHeightChange,proto3" json:"max_loop_closure_height_change,omitempty"`
}

func (x *ProcessTopologyRequest_FiducialLoopClosureParams) Reset() {
	*x = ProcessTopologyRequest_FiducialLoopClosureParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTopologyRequest_FiducialLoopClosureParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTopologyRequest_FiducialLoopClosureParams) ProtoMessage() {}

func (x *ProcessTopologyRequest_FiducialLoopClosureParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTopologyRequest_FiducialLoopClosureParams.ProtoReflect.Descriptor instead.
func (*ProcessTopologyRequest_FiducialLoopClosureParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{0, 2}
}

func (x *ProcessTopologyRequest_FiducialLoopClosureParams) GetMinLoopClosurePathLength() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MinLoopClosurePathLength
	}
	return nil
}

func (x *ProcessTopologyRequest_FiducialLoopClosureParams) GetMaxLoopClosureEdgeLength() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLoopClosureEdgeLength
	}
	return nil
}

func (x *ProcessTopologyRequest_FiducialLoopClosureParams) GetMaxFiducialDistance() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxFiducialDistance
	}
	return nil
}

func (x *ProcessTopologyRequest_FiducialLoopClosureParams) GetMaxLoopClosureHeightChange() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLoopClosureHeightChange
	}
	return nil
}

// Parameters for how to check for collisions when creating loop closures. The system
// will avoid creating edges in the map that the robot cannot actually traverse due to
// the presence of nearby obstacles.
type ProcessTopologyRequest_CollisionCheckingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// By default, this is true.
	CheckEdgesForCollision *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=check_edges_for_collision,json=checkEdgesForCollision,proto3" json:"check_edges_for_collision,omitempty"`
	// Assume that the robot is a sphere with this radius. Only accept a
	// loop closure if this spherical robot can travel in a straight line
	// from one waypoint to the other without hitting obstacles.
	CollisionCheckRobotRadius *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=collision_check_robot_radius,json=collisionCheckRobotRadius,proto3" json:"collision_check_robot_radius,omitempty"`
	// Consider significant height variations along the edge (like stairs or ramps)
	// to be obstacles. The edge will not be created if there is a height change along
	// it of more than this value according to the nearby sensor data.
	CollisionCheckHeightVariation *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=collision_check_height_variation,json=collisionCheckHeightVariation,proto3" json:"collision_check_height_variation,omitempty"`
}

func (x *ProcessTopologyRequest_CollisionCheckingParams) Reset() {
	*x = ProcessTopologyRequest_CollisionCheckingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTopologyRequest_CollisionCheckingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTopologyRequest_CollisionCheckingParams) ProtoMessage() {}

func (x *ProcessTopologyRequest_CollisionCheckingParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTopologyRequest_CollisionCheckingParams.ProtoReflect.Descriptor instead.
func (*ProcessTopologyRequest_CollisionCheckingParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{0, 3}
}

func (x *ProcessTopologyRequest_CollisionCheckingParams) GetCheckEdgesForCollision() *wrapperspb.BoolValue {
	if x != nil {
		return x.CheckEdgesForCollision
	}
	return nil
}

func (x *ProcessTopologyRequest_CollisionCheckingParams) GetCollisionCheckRobotRadius() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CollisionCheckRobotRadius
	}
	return nil
}

func (x *ProcessTopologyRequest_CollisionCheckingParams) GetCollisionCheckHeightVariation() *wrapperspb.DoubleValue {
	if x != nil {
		return x.CollisionCheckHeightVariation
	}
	return nil
}

// Parameters which control topology processing. In general, anything which isn't filled out
// will be replaced by reasonable defaults.
type ProcessTopologyRequest_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True by default -- generate loop closure candidates using odometry.
	DoOdometryLoopClosure *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=do_odometry_loop_closure,json=doOdometryLoopClosure,proto3" json:"do_odometry_loop_closure,omitempty"`
	// Parameters for generating loop closure candidates using odometry.
	OdometryLoopClosureParams *ProcessTopologyRequest_OdometryLoopClosureParams `protobuf:"bytes,2,opt,name=odometry_loop_closure_params,json=odometryLoopClosureParams,proto3" json:"odometry_loop_closure_params,omitempty"`
	// Parameters for refining loop closure candidates using iterative closest point
	// cloud matching.
	IcpParams *ProcessTopologyRequest_ICPParams `protobuf:"bytes,3,opt,name=icp_params,json=icpParams,proto3" json:"icp_params,omitempty"`
	// True by default -- generate loop closure candidates using fiducials.
	DoFiducialLoopClosure *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=do_fiducial_loop_closure,json=doFiducialLoopClosure,proto3" json:"do_fiducial_loop_closure,omitempty"`
	// Parameters for generating loop closure candidates using fiducials.
	FiducialLoopClosureParams *ProcessTopologyRequest_FiducialLoopClosureParams `protobuf:"bytes,5,opt,name=fiducial_loop_closure_params,json=fiducialLoopClosureParams,proto3" json:"fiducial_loop_closure_params,omitempty"`
	// Parameters which control rejecting loop closure candidates which
	// collide with obstacles.
	CollisionCheckParams *ProcessTopologyRequest_CollisionCheckingParams `protobuf:"bytes,6,opt,name=collision_check_params,json=collisionCheckParams,proto3" json:"collision_check_params,omitempty"`
	// Causes the processing to time out after this many seconds. If not set, a default of 45 seconds
	// will be used. If this timeout occurs before the overall RPC timeout, a partial result will be
	// returned with ProcessTopologyResponse.timed_out set to true. Processing can be continued by
	// calling ProcessTopology again.
	TimeoutSeconds float64 `protobuf:"fixed64,7,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
}

func (x *ProcessTopologyRequest_Params) Reset() {
	*x = ProcessTopologyRequest_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessTopologyRequest_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTopologyRequest_Params) ProtoMessage() {}

func (x *ProcessTopologyRequest_Params) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTopologyRequest_Params.ProtoReflect.Descriptor instead.
func (*ProcessTopologyRequest_Params) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{0, 4}
}

func (x *ProcessTopologyRequest_Params) GetDoOdometryLoopClosure() *wrapperspb.BoolValue {
	if x != nil {
		return x.DoOdometryLoopClosure
	}
	return nil
}

func (x *ProcessTopologyRequest_Params) GetOdometryLoopClosureParams() *ProcessTopologyRequest_OdometryLoopClosureParams {
	if x != nil {
		return x.OdometryLoopClosureParams
	}
	return nil
}

func (x *ProcessTopologyRequest_Params) GetIcpParams() *ProcessTopologyRequest_ICPParams {
	if x != nil {
		return x.IcpParams
	}
	return nil
}

func (x *ProcessTopologyRequest_Params) GetDoFiducialLoopClosure() *wrapperspb.BoolValue {
	if x != nil {
		return x.DoFiducialLoopClosure
	}
	return nil
}

func (x *ProcessTopologyRequest_Params) GetFiducialLoopClosureParams() *ProcessTopologyRequest_FiducialLoopClosureParams {
	if x != nil {
		return x.FiducialLoopClosureParams
	}
	return nil
}

func (x *ProcessTopologyRequest_Params) GetCollisionCheckParams() *ProcessTopologyRequest_CollisionCheckingParams {
	if x != nil {
		return x.CollisionCheckParams
	}
	return nil
}

func (x *ProcessTopologyRequest_Params) GetTimeoutSeconds() float64 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

// Parameters for procesing an anchoring.
type ProcessAnchoringRequest_Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OptimizerParams   *ProcessAnchoringRequest_Params_OptimizerParams   `protobuf:"bytes,1,opt,name=optimizer_params,json=optimizerParams,proto3" json:"optimizer_params,omitempty"`
	MeasurementParams *ProcessAnchoringRequest_Params_MeasurementParams `protobuf:"bytes,2,opt,name=measurement_params,json=measurementParams,proto3" json:"measurement_params,omitempty"`
	Weights           *ProcessAnchoringRequest_Params_Weights           `protobuf:"bytes,3,opt,name=weights,proto3" json:"weights,omitempty"`
	// If true, the anchoring which already exists on the server will be used as the initial
	// guess for the optimizer. Otherwise, a new anchoring will be generated for every waypoint
	// which doesn't have a value passed in through initial_hint. If no hint is provided,
	// and this value is false, every waypoint will be given a starting anchoring based on
	// the oldest waypoint in the map.
	OptimizeExistingAnchoring *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=optimize_existing_anchoring,json=optimizeExistingAnchoring,proto3" json:"optimize_existing_anchoring,omitempty"`
	// The optimizer will try to keep the orientation of waypoints consistent with gravity.
	// If provided, this is the gravity direction expressed with respect to the seed. This
	// will be interpreted as a unit vector. If not filled out, a default of (0, 0, -1) will be
	// used.
	GravityEwrtSeed *api.Vec3 `protobuf:"bytes,5,opt,name=gravity_ewrt_seed,json=gravityEwrtSeed,proto3" json:"gravity_ewrt_seed,omitempty"`
}

func (x *ProcessAnchoringRequest_Params) Reset() {
	*x = ProcessAnchoringRequest_Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAnchoringRequest_Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAnchoringRequest_Params) ProtoMessage() {}

func (x *ProcessAnchoringRequest_Params) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAnchoringRequest_Params.ProtoReflect.Descriptor instead.
func (*ProcessAnchoringRequest_Params) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ProcessAnchoringRequest_Params) GetOptimizerParams() *ProcessAnchoringRequest_Params_OptimizerParams {
	if x != nil {
		return x.OptimizerParams
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params) GetMeasurementParams() *ProcessAnchoringRequest_Params_MeasurementParams {
	if x != nil {
		return x.MeasurementParams
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params) GetWeights() *ProcessAnchoringRequest_Params_Weights {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params) GetOptimizeExistingAnchoring() *wrapperspb.BoolValue {
	if x != nil {
		return x.OptimizeExistingAnchoring
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params) GetGravityEwrtSeed() *api.Vec3 {
	if x != nil {
		return x.GravityEwrtSeed
	}
	return nil
}

// Parameters affecting the underlying optimizer.
type ProcessAnchoringRequest_Params_OptimizerParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum iterations of the optimizer to run.
	MaxIters *wrapperspb.Int32Value `protobuf:"bytes,1,opt,name=max_iters,json=maxIters,proto3" json:"max_iters,omitempty"`
	// Maximum time the optimizer is allowed to run before giving up.
	MaxTimeSeconds *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=max_time_seconds,json=maxTimeSeconds,proto3" json:"max_time_seconds,omitempty"`
}

func (x *ProcessAnchoringRequest_Params_OptimizerParams) Reset() {
	*x = ProcessAnchoringRequest_Params_OptimizerParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAnchoringRequest_Params_OptimizerParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAnchoringRequest_Params_OptimizerParams) ProtoMessage() {}

func (x *ProcessAnchoringRequest_Params_OptimizerParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAnchoringRequest_Params_OptimizerParams.ProtoReflect.Descriptor instead.
func (*ProcessAnchoringRequest_Params_OptimizerParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *ProcessAnchoringRequest_Params_OptimizerParams) GetMaxIters() *wrapperspb.Int32Value {
	if x != nil {
		return x.MaxIters
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params_OptimizerParams) GetMaxTimeSeconds() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxTimeSeconds
	}
	return nil
}

// Parameters which affect the measurements the optimzier uses to process the anchoring.
type ProcessAnchoringRequest_Params_MeasurementParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, waypoints which share the same kinematic odometry
	// frame will be constrained to one another using it.
	UseKinematicOdometry *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=use_kinematic_odometry,json=useKinematicOdometry,proto3" json:"use_kinematic_odometry,omitempty"`
	// If true, waypoints which share the same visual odometry frame
	// will be constrained to one another using it.
	UseVisualOdometry *wrapperspb.BoolValue `protobuf:"bytes,2,opt,name=use_visual_odometry,json=useVisualOdometry,proto3" json:"use_visual_odometry,omitempty"`
	// If true, waypoints will be constrained so that the apparent pose of the
	// robot w.r.t the waypoint at the time of recording is consistent with gravity.
	UseGyroscopeMeasurements *wrapperspb.BoolValue `protobuf:"bytes,3,opt,name=use_gyroscope_measurements,json=useGyroscopeMeasurements,proto3" json:"use_gyroscope_measurements,omitempty"`
	// If true, edges which were created by topology processing via loop closures will
	// be used as constraints.
	UseLoopClosures *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=use_loop_closures,json=useLoopClosures,proto3" json:"use_loop_closures,omitempty"`
	// If true, world object measurements will be used to constrain waypoints to one another
	// when those waypoints co-observe the same world object.
	UseWorldObjects *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=use_world_objects,json=useWorldObjects,proto3" json:"use_world_objects,omitempty"`
}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) Reset() {
	*x = ProcessAnchoringRequest_Params_MeasurementParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAnchoringRequest_Params_MeasurementParams) ProtoMessage() {}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAnchoringRequest_Params_MeasurementParams.ProtoReflect.Descriptor instead.
func (*ProcessAnchoringRequest_Params_MeasurementParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{7, 0, 1}
}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) GetUseKinematicOdometry() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseKinematicOdometry
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) GetUseVisualOdometry() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseVisualOdometry
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) GetUseGyroscopeMeasurements() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseGyroscopeMeasurements
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) GetUseLoopClosures() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseLoopClosures
	}
	return nil
}

func (x *ProcessAnchoringRequest_Params_MeasurementParams) GetUseWorldObjects() *wrapperspb.BoolValue {
	if x != nil {
		return x.UseWorldObjects
	}
	return nil
}

// Relative weights to use for each of the optimizer's terms. These can be any positive value.
// If set to zero, a reasonable default will be used. In general, the higher the weight, the more
// the optimizer will care about that particular measurement.
type ProcessAnchoringRequest_Params_Weights struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KinematicOdometryWeight float64 `protobuf:"fixed64,1,opt,name=kinematic_odometry_weight,json=kinematicOdometryWeight,proto3" json:"kinematic_odometry_weight,omitempty"`
	VisualOdometryWeight    float64 `protobuf:"fixed64,2,opt,name=visual_odometry_weight,json=visualOdometryWeight,proto3" json:"visual_odometry_weight,omitempty"`
	WorldObjectWeight       float64 `protobuf:"fixed64,3,opt,name=world_object_weight,json=worldObjectWeight,proto3" json:"world_object_weight,omitempty"`
	HintWeight              float64 `protobuf:"fixed64,4,opt,name=hint_weight,json=hintWeight,proto3" json:"hint_weight,omitempty"`
	GyroscopeWeight         float64 `protobuf:"fixed64,5,opt,name=gyroscope_weight,json=gyroscopeWeight,proto3" json:"gyroscope_weight,omitempty"`
	LoopClosureWeight       float64 `protobuf:"fixed64,6,opt,name=loop_closure_weight,json=loopClosureWeight,proto3" json:"loop_closure_weight,omitempty"`
}

func (x *ProcessAnchoringRequest_Params_Weights) Reset() {
	*x = ProcessAnchoringRequest_Params_Weights{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessAnchoringRequest_Params_Weights) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessAnchoringRequest_Params_Weights) ProtoMessage() {}

func (x *ProcessAnchoringRequest_Params_Weights) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessAnchoringRequest_Params_Weights.ProtoReflect.Descriptor instead.
func (*ProcessAnchoringRequest_Params_Weights) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP(), []int{7, 0, 2}
}

func (x *ProcessAnchoringRequest_Params_Weights) GetKinematicOdometryWeight() float64 {
	if x != nil {
		return x.KinematicOdometryWeight
	}
	return 0
}

func (x *ProcessAnchoringRequest_Params_Weights) GetVisualOdometryWeight() float64 {
	if x != nil {
		return x.VisualOdometryWeight
	}
	return 0
}

func (x *ProcessAnchoringRequest_Params_Weights) GetWorldObjectWeight() float64 {
	if x != nil {
		return x.WorldObjectWeight
	}
	return 0
}

func (x *ProcessAnchoringRequest_Params_Weights) GetHintWeight() float64 {
	if x != nil {
		return x.HintWeight
	}
	return 0
}

func (x *ProcessAnchoringRequest_Params_Weights) GetGyroscopeWeight() float64 {
	if x != nil {
		return x.GyroscopeWeight
	}
	return 0
}

func (x *ProcessAnchoringRequest_Params_Weights) GetLoopClosureWeight() float64 {
	if x != nil {
		return x.LoopClosureWeight
	}
	return 0
}

var File_bosdyn_api_graph_nav_map_processing_proto protoreflect.FileDescriptor

var file_bosdyn_api_graph_nav_map_processing_proto_rawDesc = []byte{
	0x0a, 0x29, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x6d, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61,
	0x76, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x6d, 0x61, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x11, 0x0a, 0x16, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x2f, 0x0a, 0x14, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6f,
	0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x61, 0x70, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x1a, 0x9c, 0x01, 0x0a, 0x09, 0x49, 0x43, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x69, 0x63, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x69, 0x63, 0x70, 0x49, 0x74, 0x65, 0x72, 0x73, 0x12, 0x55, 0x0a, 0x18, 0x6d, 0x61, 0x78,
	0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x1a, 0xfe, 0x03, 0x0a, 0x19, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x6f,
	0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x5c,
	0x0a, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5c, 0x0a, 0x1c,
	0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x18, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x60, 0x0a, 0x1e, 0x6d, 0x61,
	0x78, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x1a, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x5c, 0x0a, 0x1c,
	0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x18, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65,
	0x45, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x65, 0x0a, 0x21, 0x6e, 0x75,
	0x6d, 0x5f, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x1d, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4c, 0x6f, 0x6f, 0x70,
	0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x1a, 0x8b, 0x03, 0x0a, 0x19, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x6f,
	0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12,
	0x5c, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x18, 0x6d, 0x69, 0x6e, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x50, 0x61, 0x74, 0x68, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x5c, 0x0a,
	0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x45, 0x64, 0x67, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x50, 0x0a, 0x15, 0x6d,
	0x61, 0x78, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x64,
	0x75, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x60, 0x0a,
	0x1e, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x1a, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73,
	0x75, 0x72, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x1a,
	0xb6, 0x02, 0x0a, 0x17, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x19, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x45, 0x64, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x1c, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x65, 0x0a, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1d, 0x63, 0x6f, 0x6c, 0x6c, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc2, 0x05, 0x0a, 0x06, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x6f, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x15, 0x64, 0x6f, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x6f,
	0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x6f, 0x64, 0x6f,
	0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x46, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x64,
	0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72,
	0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x19, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x55, 0x0a, 0x0a, 0x69, 0x63, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x43, 0x50, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x09,
	0x69, 0x63, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x53, 0x0a, 0x18, 0x64, 0x6f, 0x5f,
	0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c,
	0x6f, 0x73, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x64, 0x6f, 0x46, 0x69, 0x64, 0x75, 0x63,
	0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x12, 0x87,
	0x01, 0x0a, 0x1c, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x6f, 0x6f, 0x70,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x70,
	0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x19, 0x66,
	0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x7a, 0x0a, 0x16, 0x63, 0x6f, 0x6c, 0x6c,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x14,
	0x63, 0x6f, 0x6c, 0x6c, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0xb2, 0x04,
	0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x6e,
	0x65, 0x77, 0x5f, 0x73, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x0b,
	0x6e, 0x65, 0x77, 0x53, 0x75, 0x62, 0x67, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3a, 0x0a, 0x1a, 0x6d,
	0x61, 0x70, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x77, 0x61, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x6d, 0x61, 0x70, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x61, 0x73, 0x4d,
	0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x74, 0x69, 0x6d, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x22, 0x97, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e,
	0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x44,
	0x55, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x22, 0x7c, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x78, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x78, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x79,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x79,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x5f, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x7a, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x79, 0x61, 0x77, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x79, 0x61, 0x77, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x22, 0xbb, 0x01, 0x0a, 0x15, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x55,
	0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x65,
	0x33, 0x5f, 0x63, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x45, 0x33, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x65, 0x33, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f,
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x48, 0x00, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x42,
	0x0d, 0x0a, 0x0b, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x22, 0xb6,
	0x02, 0x0a, 0x12, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x0e, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x72, 0x0a, 0x1f,
	0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x52, 0x1c, 0x73, 0x65, 0x65, 0x64, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74, 0x79,
	0x12, 0x65, 0x0a, 0x1e, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e,
	0x50, 0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x1b, 0x73, 0x65, 0x65, 0x64,
	0x54, 0x66, 0x6f, 0x72, 0x6d, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x22, 0xba, 0x02, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e,
	0x74, 0x12, 0x4e, 0x0a, 0x0d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x12, 0x6e, 0x0a, 0x1d, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74,
	0x61, 0x69, 0x6e, 0x74, 0x79, 0x52, 0x1a, 0x73, 0x65, 0x65, 0x64, 0x54, 0x66, 0x6f, 0x72, 0x6d,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x55, 0x6e, 0x63, 0x65, 0x72, 0x74, 0x61, 0x69, 0x6e, 0x74,
	0x79, 0x12, 0x61, 0x0a, 0x1c, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50,
	0x6f, 0x73, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x19, 0x73, 0x65, 0x65, 0x64, 0x54,
	0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x10, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x52,
	0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xa2, 0x0d,
	0x0a, 0x17, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x48, 0x69,
	0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x1a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x3e, 0x0a, 0x1b, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0xc0, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x6f, 0x0a, 0x10, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0f, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x75, 0x0a, 0x12, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x11, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x56, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x73, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x5a, 0x0a, 0x1b, 0x6f, 0x70,
	0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x19, 0x6f, 0x70, 0x74,
	0x69, 0x6d, 0x69, 0x7a, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x11, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x79, 0x5f, 0x65, 0x77, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x33, 0x52, 0x0f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x79, 0x45, 0x77, 0x72, 0x74,
	0x53, 0x65, 0x65, 0x64, 0x1a, 0x93, 0x01, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a,
	0x65, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x69, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x49, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x54,
	0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x1a, 0x9b, 0x03, 0x0a, 0x11, 0x4d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x50, 0x0a, 0x16, 0x75, 0x73, 0x65, 0x5f, 0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x75, 0x73,
	0x65, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x12, 0x4a, 0x0a, 0x13, 0x75, 0x73, 0x65, 0x5f, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c,
	0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x75, 0x73, 0x65,
	0x56, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x12, 0x58,
	0x0a, 0x1a, 0x75, 0x73, 0x65, 0x5f, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18,
	0x75, 0x73, 0x65, 0x47, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f,
	0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x75, 0x73, 0x65, 0x4c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x73,
	0x12, 0x46, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x75, 0x73, 0x65, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x1a, 0xa7, 0x02, 0x0a, 0x07, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x19, 0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x6b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74,
	0x69, 0x63, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x65,
	0x74, 0x72, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x14, 0x76, 0x69, 0x73, 0x75, 0x61, 0x6c, 0x4f, 0x64, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x11, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x68, 0x69, 0x6e, 0x74, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x68, 0x69, 0x6e,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x67, 0x79, 0x72, 0x6f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0f, 0x67, 0x79, 0x72, 0x6f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x75,
	0x72, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x6c, 0x6f, 0x6f, 0x70, 0x43, 0x6c, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x57, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x8b, 0x09, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x47, 0x0a, 0x10, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x0f, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x5b, 0x0a, 0x14, 0x77,
	0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x20, 0x61, 0x6e, 0x63, 0x68,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f,
	0x77, 0x61, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1c, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x4f, 0x6e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x57, 0x61, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x66, 0x69, 0x6e,
	0x61, 0x6c, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x6c, 0x0a, 0x1d, 0x76,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x1b, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x6b, 0x0a, 0x1b, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x19, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6e, 0x67, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x48, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0xbe, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f,
	0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f,
	0x54, 0x53, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x03, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4d, 0x49, 0x5a,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f,
	0x56, 0x49, 0x4f, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x49, 0x54, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x48, 0x49,
	0x4e, 0x54, 0x53, 0x10, 0x09, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x41, 0x50, 0x5f, 0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x44, 0x55, 0x52,
	0x49, 0x4e, 0x47, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x0a,
	0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_graph_nav_map_processing_proto_rawDescOnce sync.Once
	file_bosdyn_api_graph_nav_map_processing_proto_rawDescData = file_bosdyn_api_graph_nav_map_processing_proto_rawDesc
)

func file_bosdyn_api_graph_nav_map_processing_proto_rawDescGZIP() []byte {
	file_bosdyn_api_graph_nav_map_processing_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_graph_nav_map_processing_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_graph_nav_map_processing_proto_rawDescData)
	})
	return file_bosdyn_api_graph_nav_map_processing_proto_rawDescData
}

var file_bosdyn_api_graph_nav_map_processing_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bosdyn_api_graph_nav_map_processing_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_bosdyn_api_graph_nav_map_processing_proto_goTypes = []interface{}{
	(ProcessTopologyResponse_Status)(0),                      // 0: bosdyn.api.graph_nav.ProcessTopologyResponse.Status
	(ProcessAnchoringResponse_Status)(0),                     // 1: bosdyn.api.graph_nav.ProcessAnchoringResponse.Status
	(*ProcessTopologyRequest)(nil),                           // 2: bosdyn.api.graph_nav.ProcessTopologyRequest
	(*ProcessTopologyResponse)(nil),                          // 3: bosdyn.api.graph_nav.ProcessTopologyResponse
	(*PoseBounds)(nil),                                       // 4: bosdyn.api.graph_nav.PoseBounds
	(*AnchorHintUncertainty)(nil),                            // 5: bosdyn.api.graph_nav.AnchorHintUncertainty
	(*WaypointAnchorHint)(nil),                               // 6: bosdyn.api.graph_nav.WaypointAnchorHint
	(*WorldObjectAnchorHint)(nil),                            // 7: bosdyn.api.graph_nav.WorldObjectAnchorHint
	(*AnchoringHint)(nil),                                    // 8: bosdyn.api.graph_nav.AnchoringHint
	(*ProcessAnchoringRequest)(nil),                          // 9: bosdyn.api.graph_nav.ProcessAnchoringRequest
	(*ProcessAnchoringResponse)(nil),                         // 10: bosdyn.api.graph_nav.ProcessAnchoringResponse
	(*ProcessTopologyRequest_ICPParams)(nil),                 // 11: bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams
	(*ProcessTopologyRequest_OdometryLoopClosureParams)(nil), // 12: bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams
	(*ProcessTopologyRequest_FiducialLoopClosureParams)(nil), // 13: bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams
	(*ProcessTopologyRequest_CollisionCheckingParams)(nil),   // 14: bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams
	(*ProcessTopologyRequest_Params)(nil),                    // 15: bosdyn.api.graph_nav.ProcessTopologyRequest.Params
	(*ProcessAnchoringRequest_Params)(nil),                   // 16: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params
	(*ProcessAnchoringRequest_Params_OptimizerParams)(nil),   // 17: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams
	(*ProcessAnchoringRequest_Params_MeasurementParams)(nil), // 18: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams
	(*ProcessAnchoringRequest_Params_Weights)(nil),           // 19: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights
	(*api.RequestHeader)(nil),                                // 20: bosdyn.api.RequestHeader
	(*api.ResponseHeader)(nil),                               // 21: bosdyn.api.ResponseHeader
	(*Graph)(nil),                                            // 22: bosdyn.api.graph_nav.Graph
	(*api.SE3Covariance)(nil),                                // 23: bosdyn.api.SE3Covariance
	(*Anchor)(nil),                                           // 24: bosdyn.api.graph_nav.Anchor
	(*AnchoredWorldObject)(nil),                              // 25: bosdyn.api.graph_nav.AnchoredWorldObject
	(*wrapperspb.Int32Value)(nil),                            // 26: google.protobuf.Int32Value
	(*wrapperspb.DoubleValue)(nil),                           // 27: google.protobuf.DoubleValue
	(*wrapperspb.BoolValue)(nil),                             // 28: google.protobuf.BoolValue
	(*api.Vec3)(nil),                                         // 29: bosdyn.api.Vec3
}
var file_bosdyn_api_graph_nav_map_processing_proto_depIdxs = []int32{
	20, // 0: bosdyn.api.graph_nav.ProcessTopologyRequest.header:type_name -> bosdyn.api.RequestHeader
	15, // 1: bosdyn.api.graph_nav.ProcessTopologyRequest.params:type_name -> bosdyn.api.graph_nav.ProcessTopologyRequest.Params
	21, // 2: bosdyn.api.graph_nav.ProcessTopologyResponse.header:type_name -> bosdyn.api.ResponseHeader
	0,  // 3: bosdyn.api.graph_nav.ProcessTopologyResponse.status:type_name -> bosdyn.api.graph_nav.ProcessTopologyResponse.Status
	22, // 4: bosdyn.api.graph_nav.ProcessTopologyResponse.new_subgraph:type_name -> bosdyn.api.graph_nav.Graph
	23, // 5: bosdyn.api.graph_nav.AnchorHintUncertainty.se3_covariance:type_name -> bosdyn.api.SE3Covariance
	4,  // 6: bosdyn.api.graph_nav.AnchorHintUncertainty.confidence_bounds:type_name -> bosdyn.api.graph_nav.PoseBounds
	24, // 7: bosdyn.api.graph_nav.WaypointAnchorHint.waypoint_anchor:type_name -> bosdyn.api.graph_nav.Anchor
	5,  // 8: bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_uncertainty:type_name -> bosdyn.api.graph_nav.AnchorHintUncertainty
	4,  // 9: bosdyn.api.graph_nav.WaypointAnchorHint.seed_tform_waypoint_constraint:type_name -> bosdyn.api.graph_nav.PoseBounds
	25, // 10: bosdyn.api.graph_nav.WorldObjectAnchorHint.object_anchor:type_name -> bosdyn.api.graph_nav.AnchoredWorldObject
	5,  // 11: bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_uncertainty:type_name -> bosdyn.api.graph_nav.AnchorHintUncertainty
	4,  // 12: bosdyn.api.graph_nav.WorldObjectAnchorHint.seed_tform_object_constraint:type_name -> bosdyn.api.graph_nav.PoseBounds
	6,  // 13: bosdyn.api.graph_nav.AnchoringHint.waypoint_anchors:type_name -> bosdyn.api.graph_nav.WaypointAnchorHint
	7,  // 14: bosdyn.api.graph_nav.AnchoringHint.world_objects:type_name -> bosdyn.api.graph_nav.WorldObjectAnchorHint
	20, // 15: bosdyn.api.graph_nav.ProcessAnchoringRequest.header:type_name -> bosdyn.api.RequestHeader
	16, // 16: bosdyn.api.graph_nav.ProcessAnchoringRequest.params:type_name -> bosdyn.api.graph_nav.ProcessAnchoringRequest.Params
	8,  // 17: bosdyn.api.graph_nav.ProcessAnchoringRequest.initial_hint:type_name -> bosdyn.api.graph_nav.AnchoringHint
	21, // 18: bosdyn.api.graph_nav.ProcessAnchoringResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 19: bosdyn.api.graph_nav.ProcessAnchoringResponse.status:type_name -> bosdyn.api.graph_nav.ProcessAnchoringResponse.Status
	24, // 20: bosdyn.api.graph_nav.ProcessAnchoringResponse.waypoint_results:type_name -> bosdyn.api.graph_nav.Anchor
	25, // 21: bosdyn.api.graph_nav.ProcessAnchoringResponse.world_object_results:type_name -> bosdyn.api.graph_nav.AnchoredWorldObject
	6,  // 22: bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_waypoint_constraints:type_name -> bosdyn.api.graph_nav.WaypointAnchorHint
	7,  // 23: bosdyn.api.graph_nav.ProcessAnchoringResponse.violated_object_constraints:type_name -> bosdyn.api.graph_nav.WorldObjectAnchorHint
	26, // 24: bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.icp_iters:type_name -> google.protobuf.Int32Value
	27, // 25: bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams.max_point_match_distance:type_name -> google.protobuf.DoubleValue
	27, // 26: bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_path_length:type_name -> google.protobuf.DoubleValue
	27, // 27: bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.min_loop_closure_path_length:type_name -> google.protobuf.DoubleValue
	27, // 28: bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_height_change:type_name -> google.protobuf.DoubleValue
	27, // 29: bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.max_loop_closure_edge_length:type_name -> google.protobuf.DoubleValue
	26, // 30: bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams.num_extra_loop_closure_iterations:type_name -> google.protobuf.Int32Value
	27, // 31: bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.min_loop_closure_path_length:type_name -> google.protobuf.DoubleValue
	27, // 32: bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_edge_length:type_name -> google.protobuf.DoubleValue
	27, // 33: bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_fiducial_distance:type_name -> google.protobuf.DoubleValue
	27, // 34: bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams.max_loop_closure_height_change:type_name -> google.protobuf.DoubleValue
	28, // 35: bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.check_edges_for_collision:type_name -> google.protobuf.BoolValue
	27, // 36: bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_robot_radius:type_name -> google.protobuf.DoubleValue
	27, // 37: bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams.collision_check_height_variation:type_name -> google.protobuf.DoubleValue
	28, // 38: bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_odometry_loop_closure:type_name -> google.protobuf.BoolValue
	12, // 39: bosdyn.api.graph_nav.ProcessTopologyRequest.Params.odometry_loop_closure_params:type_name -> bosdyn.api.graph_nav.ProcessTopologyRequest.OdometryLoopClosureParams
	11, // 40: bosdyn.api.graph_nav.ProcessTopologyRequest.Params.icp_params:type_name -> bosdyn.api.graph_nav.ProcessTopologyRequest.ICPParams
	28, // 41: bosdyn.api.graph_nav.ProcessTopologyRequest.Params.do_fiducial_loop_closure:type_name -> google.protobuf.BoolValue
	13, // 42: bosdyn.api.graph_nav.ProcessTopologyRequest.Params.fiducial_loop_closure_params:type_name -> bosdyn.api.graph_nav.ProcessTopologyRequest.FiducialLoopClosureParams
	14, // 43: bosdyn.api.graph_nav.ProcessTopologyRequest.Params.collision_check_params:type_name -> bosdyn.api.graph_nav.ProcessTopologyRequest.CollisionCheckingParams
	17, // 44: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimizer_params:type_name -> bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams
	18, // 45: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.measurement_params:type_name -> bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams
	19, // 46: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.weights:type_name -> bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.Weights
	28, // 47: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.optimize_existing_anchoring:type_name -> google.protobuf.BoolValue
	29, // 48: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.gravity_ewrt_seed:type_name -> bosdyn.api.Vec3
	26, // 49: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_iters:type_name -> google.protobuf.Int32Value
	27, // 50: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.OptimizerParams.max_time_seconds:type_name -> google.protobuf.DoubleValue
	28, // 51: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_kinematic_odometry:type_name -> google.protobuf.BoolValue
	28, // 52: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_visual_odometry:type_name -> google.protobuf.BoolValue
	28, // 53: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_gyroscope_measurements:type_name -> google.protobuf.BoolValue
	28, // 54: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_loop_closures:type_name -> google.protobuf.BoolValue
	28, // 55: bosdyn.api.graph_nav.ProcessAnchoringRequest.Params.MeasurementParams.use_world_objects:type_name -> google.protobuf.BoolValue
	56, // [56:56] is the sub-list for method output_type
	56, // [56:56] is the sub-list for method input_type
	56, // [56:56] is the sub-list for extension type_name
	56, // [56:56] is the sub-list for extension extendee
	0,  // [0:56] is the sub-list for field type_name
}

func init() { file_bosdyn_api_graph_nav_map_processing_proto_init() }
func file_bosdyn_api_graph_nav_map_processing_proto_init() {
	if File_bosdyn_api_graph_nav_map_processing_proto != nil {
		return
	}
	file_bosdyn_api_graph_nav_map_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTopologyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTopologyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PoseBounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchorHintUncertainty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaypointAnchorHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldObjectAnchorHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchoringHint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAnchoringRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAnchoringResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTopologyRequest_ICPParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTopologyRequest_OdometryLoopClosureParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTopologyRequest_FiducialLoopClosureParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTopologyRequest_CollisionCheckingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessTopologyRequest_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAnchoringRequest_Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAnchoringRequest_Params_OptimizerParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAnchoringRequest_Params_MeasurementParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessAnchoringRequest_Params_Weights); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_graph_nav_map_processing_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*AnchorHintUncertainty_Se3Covariance)(nil),
		(*AnchorHintUncertainty_ConfidenceBounds)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_graph_nav_map_processing_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_graph_nav_map_processing_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_graph_nav_map_processing_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_graph_nav_map_processing_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_graph_nav_map_processing_proto_msgTypes,
	}.Build()
	File_bosdyn_api_graph_nav_map_processing_proto = out.File
	file_bosdyn_api_graph_nav_map_processing_proto_rawDesc = nil
	file_bosdyn_api_graph_nav_map_processing_proto_goTypes = nil
	file_bosdyn_api_graph_nav_map_processing_proto_depIdxs = nil
}
