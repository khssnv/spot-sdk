// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/graph_nav/recording.proto

package graph_nav

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartRecordingResponse_Status int32

const (
	// Status is unknown/unset.
	StartRecordingResponse_STATUS_UNKNOWN StartRecordingResponse_Status = 0
	// Recording has been started.
	StartRecordingResponse_STATUS_OK StartRecordingResponse_Status = 1
	// In this case we tried to start recording, but GraphNav was internally still waiting for
	// some data from the robot.
	StartRecordingResponse_STATUS_COULD_NOT_CREATE_WAYPOINT StartRecordingResponse_Status = 2
	// Can't start recording because the robot is following a route.
	StartRecordingResponse_STATUS_FOLLOWING_ROUTE StartRecordingResponse_Status = 3
	// When recording branches, the robot is not localized to the existing map before starting
	// to record a new branch.
	StartRecordingResponse_STATUS_NOT_LOCALIZED_TO_EXISTING_MAP StartRecordingResponse_Status = 4
	// Can't start recording because the robot doesn't see the required fiducials.
	StartRecordingResponse_STATUS_MISSING_FIDUCIALS StartRecordingResponse_Status = 5
	// Can't start recording because the map was too large for the license.
	StartRecordingResponse_STATUS_MAP_TOO_LARGE_LICENSE StartRecordingResponse_Status = 6
	// A required remote cloud did not exist in the service directory.
	StartRecordingResponse_STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY StartRecordingResponse_Status = 7
	// A required remote cloud did not have data.
	StartRecordingResponse_STATUS_REMOTE_CLOUD_FAILURE_NO_DATA StartRecordingResponse_Status = 8
	// All fiducials are visible but at least one pose could not be determined accurately.
	StartRecordingResponse_STATUS_FIDUCIAL_POSE_NOT_OK StartRecordingResponse_Status = 9
	// When recording branches, the robot is too far from the existing map when starting
	// to record a new branch.
	StartRecordingResponse_STATUS_TOO_FAR_FROM_EXISTING_MAP StartRecordingResponse_Status = 10
)

// Enum value maps for StartRecordingResponse_Status.
var (
	StartRecordingResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_OK",
		2:  "STATUS_COULD_NOT_CREATE_WAYPOINT",
		3:  "STATUS_FOLLOWING_ROUTE",
		4:  "STATUS_NOT_LOCALIZED_TO_EXISTING_MAP",
		5:  "STATUS_MISSING_FIDUCIALS",
		6:  "STATUS_MAP_TOO_LARGE_LICENSE",
		7:  "STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY",
		8:  "STATUS_REMOTE_CLOUD_FAILURE_NO_DATA",
		9:  "STATUS_FIDUCIAL_POSE_NOT_OK",
		10: "STATUS_TOO_FAR_FROM_EXISTING_MAP",
	}
	StartRecordingResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                               0,
		"STATUS_OK":                                    1,
		"STATUS_COULD_NOT_CREATE_WAYPOINT":             2,
		"STATUS_FOLLOWING_ROUTE":                       3,
		"STATUS_NOT_LOCALIZED_TO_EXISTING_MAP":         4,
		"STATUS_MISSING_FIDUCIALS":                     5,
		"STATUS_MAP_TOO_LARGE_LICENSE":                 6,
		"STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY": 7,
		"STATUS_REMOTE_CLOUD_FAILURE_NO_DATA":          8,
		"STATUS_FIDUCIAL_POSE_NOT_OK":                  9,
		"STATUS_TOO_FAR_FROM_EXISTING_MAP":             10,
	}
)

func (x StartRecordingResponse_Status) Enum() *StartRecordingResponse_Status {
	p := new(StartRecordingResponse_Status)
	*p = x
	return p
}

func (x StartRecordingResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StartRecordingResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_recording_proto_enumTypes[0].Descriptor()
}

func (StartRecordingResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_recording_proto_enumTypes[0]
}

func (x StartRecordingResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StartRecordingResponse_Status.Descriptor instead.
func (StartRecordingResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{4, 0}
}

type StopRecordingResponse_Status int32

const (
	// Status is unknown/unset.
	StopRecordingResponse_STATUS_UNKNOWN StopRecordingResponse_Status = 0
	// Recording is stopped.
	StopRecordingResponse_STATUS_OK StopRecordingResponse_Status = 1
	// In this case we tried to stop recording, but had an incorrect localization.
	// graph_nav is expected to be localized to the final waypoint in the chain before
	// we stop recording.
	StopRecordingResponse_STATUS_NOT_LOCALIZED_TO_END StopRecordingResponse_Status = 2
	// The robot is still processing the map it created to where the robot is currently located.
	// You can't stop recording until that processing is finished.  You should not move
	// the robot, then try to stop recording again after 1-2 seconds.
	StopRecordingResponse_STATUS_NOT_READY_YET StopRecordingResponse_Status = 3
)

// Enum value maps for StopRecordingResponse_Status.
var (
	StopRecordingResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_NOT_LOCALIZED_TO_END",
		3: "STATUS_NOT_READY_YET",
	}
	StopRecordingResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":              0,
		"STATUS_OK":                   1,
		"STATUS_NOT_LOCALIZED_TO_END": 2,
		"STATUS_NOT_READY_YET":        3,
	}
)

func (x StopRecordingResponse_Status) Enum() *StopRecordingResponse_Status {
	p := new(StopRecordingResponse_Status)
	*p = x
	return p
}

func (x StopRecordingResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StopRecordingResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_recording_proto_enumTypes[1].Descriptor()
}

func (StopRecordingResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_recording_proto_enumTypes[1]
}

func (x StopRecordingResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StopRecordingResponse_Status.Descriptor instead.
func (StopRecordingResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{6, 0}
}

type CreateWaypointResponse_Status int32

const (
	// Status is unknown/unset.
	CreateWaypointResponse_STATUS_UNKNOWN CreateWaypointResponse_Status = 0
	// The waypoint was successfully created.
	CreateWaypointResponse_STATUS_OK CreateWaypointResponse_Status = 1
	// Clients can only create waypoints when recording.
	CreateWaypointResponse_STATUS_NOT_RECORDING CreateWaypointResponse_Status = 2
	// An internal server error prevented the creation of the waypoint.
	CreateWaypointResponse_STATUS_COULD_NOT_CREATE_WAYPOINT CreateWaypointResponse_Status = 3
	// Could not see the required fiducials.
	CreateWaypointResponse_STATUS_MISSING_FIDUCIALS CreateWaypointResponse_Status = 4
	// The map was too big to create a waypoint based on the license.
	CreateWaypointResponse_STATUS_MAP_TOO_LARGE_LICENSE CreateWaypointResponse_Status = 5
	// A required remote cloud did not exist in the service directory.
	CreateWaypointResponse_STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY CreateWaypointResponse_Status = 6
	// A required remote cloud did not have data.
	CreateWaypointResponse_STATUS_REMOTE_CLOUD_FAILURE_NO_DATA CreateWaypointResponse_Status = 7
	// All fiducials are visible but their pose could not be determined accurately.
	CreateWaypointResponse_STATUS_FIDUCIAL_POSE_NOT_OK CreateWaypointResponse_Status = 8
)

// Enum value maps for CreateWaypointResponse_Status.
var (
	CreateWaypointResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_NOT_RECORDING",
		3: "STATUS_COULD_NOT_CREATE_WAYPOINT",
		4: "STATUS_MISSING_FIDUCIALS",
		5: "STATUS_MAP_TOO_LARGE_LICENSE",
		6: "STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY",
		7: "STATUS_REMOTE_CLOUD_FAILURE_NO_DATA",
		8: "STATUS_FIDUCIAL_POSE_NOT_OK",
	}
	CreateWaypointResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                               0,
		"STATUS_OK":                                    1,
		"STATUS_NOT_RECORDING":                         2,
		"STATUS_COULD_NOT_CREATE_WAYPOINT":             3,
		"STATUS_MISSING_FIDUCIALS":                     4,
		"STATUS_MAP_TOO_LARGE_LICENSE":                 5,
		"STATUS_REMOTE_CLOUD_FAILURE_NOT_IN_DIRECTORY": 6,
		"STATUS_REMOTE_CLOUD_FAILURE_NO_DATA":          7,
		"STATUS_FIDUCIAL_POSE_NOT_OK":                  8,
	}
)

func (x CreateWaypointResponse_Status) Enum() *CreateWaypointResponse_Status {
	p := new(CreateWaypointResponse_Status)
	*p = x
	return p
}

func (x CreateWaypointResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateWaypointResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_recording_proto_enumTypes[2].Descriptor()
}

func (CreateWaypointResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_recording_proto_enumTypes[2]
}

func (x CreateWaypointResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateWaypointResponse_Status.Descriptor instead.
func (CreateWaypointResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{8, 0}
}

type CreateEdgeResponse_Status int32

const (
	// Status is unknown/unset.
	CreateEdgeResponse_STATUS_UNKNOWN CreateEdgeResponse_Status = 0
	// The edge was successfully created.
	CreateEdgeResponse_STATUS_OK CreateEdgeResponse_Status = 1
	// Edge already exists with the given ID.
	CreateEdgeResponse_STATUS_EXISTS CreateEdgeResponse_Status = 2
	// Clients can only create edges when recording.
	CreateEdgeResponse_STATUS_NOT_RECORDING CreateEdgeResponse_Status = 3
	// One or more of the specified waypoints aren't in the map.
	CreateEdgeResponse_STATUS_UNKNOWN_WAYPOINT CreateEdgeResponse_Status = 4
	// Specified edge did not include a transform.
	CreateEdgeResponse_STATUS_MISSING_TRANSFORM CreateEdgeResponse_Status = 5
)

// Enum value maps for CreateEdgeResponse_Status.
var (
	CreateEdgeResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_EXISTS",
		3: "STATUS_NOT_RECORDING",
		4: "STATUS_UNKNOWN_WAYPOINT",
		5: "STATUS_MISSING_TRANSFORM",
	}
	CreateEdgeResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":           0,
		"STATUS_OK":                1,
		"STATUS_EXISTS":            2,
		"STATUS_NOT_RECORDING":     3,
		"STATUS_UNKNOWN_WAYPOINT":  4,
		"STATUS_MISSING_TRANSFORM": 5,
	}
)

func (x CreateEdgeResponse_Status) Enum() *CreateEdgeResponse_Status {
	p := new(CreateEdgeResponse_Status)
	*p = x
	return p
}

func (x CreateEdgeResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateEdgeResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_recording_proto_enumTypes[3].Descriptor()
}

func (CreateEdgeResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_recording_proto_enumTypes[3]
}

func (x CreateEdgeResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateEdgeResponse_Status.Descriptor instead.
func (CreateEdgeResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{10, 0}
}

type GetRecordStatusResponse_MapState int32

const (
	GetRecordStatusResponse_MAP_STATE_UNKNOWN GetRecordStatusResponse_MapState = 0
	// Successfully started recording.
	GetRecordStatusResponse_MAP_STATE_OK GetRecordStatusResponse_MapState = 1
	// Unable to continue recording because a larger map requires an upgraded license.
	GetRecordStatusResponse_MAP_STATE_TOO_LARGE_FOR_LICENSE GetRecordStatusResponse_MapState = 2
)

// Enum value maps for GetRecordStatusResponse_MapState.
var (
	GetRecordStatusResponse_MapState_name = map[int32]string{
		0: "MAP_STATE_UNKNOWN",
		1: "MAP_STATE_OK",
		2: "MAP_STATE_TOO_LARGE_FOR_LICENSE",
	}
	GetRecordStatusResponse_MapState_value = map[string]int32{
		"MAP_STATE_UNKNOWN":               0,
		"MAP_STATE_OK":                    1,
		"MAP_STATE_TOO_LARGE_FOR_LICENSE": 2,
	}
)

func (x GetRecordStatusResponse_MapState) Enum() *GetRecordStatusResponse_MapState {
	p := new(GetRecordStatusResponse_MapState)
	*p = x
	return p
}

func (x GetRecordStatusResponse_MapState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetRecordStatusResponse_MapState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_recording_proto_enumTypes[4].Descriptor()
}

func (GetRecordStatusResponse_MapState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_recording_proto_enumTypes[4]
}

func (x GetRecordStatusResponse_MapState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetRecordStatusResponse_MapState.Descriptor instead.
func (GetRecordStatusResponse_MapState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{12, 0}
}

// The RecordingEnvironment is a set of annotation information and a name for the
// current environment that will persist for all edges and waypoints until it is
// changed or updated
type RecordingEnvironment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This will be prepended to the start of every waypoint name.
	NamePrefix string `protobuf:"bytes,1,opt,name=name_prefix,json=namePrefix,proto3" json:"name_prefix,omitempty"`
	// Persistent waypoint annotation that will be merged in
	// to all waypoints in this recording.
	WaypointEnvironment *Waypoint_Annotations `protobuf:"bytes,2,opt,name=waypoint_environment,json=waypointEnvironment,proto3" json:"waypoint_environment,omitempty"`
	// Persistent edge annotation that will be merged in to all
	// waypoints in this recording.
	EdgeEnvironment *Edge_Annotations `protobuf:"bytes,3,opt,name=edge_environment,json=edgeEnvironment,proto3" json:"edge_environment,omitempty"`
}

func (x *RecordingEnvironment) Reset() {
	*x = RecordingEnvironment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordingEnvironment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordingEnvironment) ProtoMessage() {}

func (x *RecordingEnvironment) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordingEnvironment.ProtoReflect.Descriptor instead.
func (*RecordingEnvironment) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{0}
}

func (x *RecordingEnvironment) GetNamePrefix() string {
	if x != nil {
		return x.NamePrefix
	}
	return ""
}

func (x *RecordingEnvironment) GetWaypointEnvironment() *Waypoint_Annotations {
	if x != nil {
		return x.WaypointEnvironment
	}
	return nil
}

func (x *RecordingEnvironment) GetEdgeEnvironment() *Edge_Annotations {
	if x != nil {
		return x.EdgeEnvironment
	}
	return nil
}

// The SetRecordingEnvironment request message sets a persistent recording environment
// until changed with another SetRecordingEnvironment rpc.
type SetRecordingEnvironmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Persistent environment to use while recording. This allows the
	// user to specify annotations and naming prefixes for new waypoints
	// and edges.
	Environment *RecordingEnvironment `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	// The recording service is protected by a lease. The client must have a
	// lease to the recording service to modify its internal state.
	Lease *api.Lease `protobuf:"bytes,3,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *SetRecordingEnvironmentRequest) Reset() {
	*x = SetRecordingEnvironmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRecordingEnvironmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRecordingEnvironmentRequest) ProtoMessage() {}

func (x *SetRecordingEnvironmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRecordingEnvironmentRequest.ProtoReflect.Descriptor instead.
func (*SetRecordingEnvironmentRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{1}
}

func (x *SetRecordingEnvironmentRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetRecordingEnvironmentRequest) GetEnvironment() *RecordingEnvironment {
	if x != nil {
		return x.Environment
	}
	return nil
}

func (x *SetRecordingEnvironmentRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The SetRecordingEnvironment response message includes the result and status of the request.
type SetRecordingEnvironmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The results/status of the lease provided.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *SetRecordingEnvironmentResponse) Reset() {
	*x = SetRecordingEnvironmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetRecordingEnvironmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetRecordingEnvironmentResponse) ProtoMessage() {}

func (x *SetRecordingEnvironmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetRecordingEnvironmentResponse.ProtoReflect.Descriptor instead.
func (*SetRecordingEnvironmentResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{2}
}

func (x *SetRecordingEnvironmentResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetRecordingEnvironmentResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// The StartRecording request tells the recording service to begin creating waypoints with the
// specified recording_environment.
type StartRecordingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The recording service is protected by a lease. The client must have a
	// lease to the recording service to modify its internal state.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// This will be merged into a copy of the existing persistent recording
	// environment and used as the environment for the created waypoint
	// and the edge from the previous waypoint to the new one.
	// It will not affect the persistent environment.
	RecordingEnvironment *RecordingEnvironment `protobuf:"bytes,3,opt,name=recording_environment,json=recordingEnvironment,proto3" json:"recording_environment,omitempty"`
	// If filled out, asks that the record service verify that the given fiducial IDs
	// are presently visible before starting to record. This is useful for verifying
	// that the robot is where the user thinks it is in an area with known fiducials.
	RequireFiducials []int32 `protobuf:"varint,4,rep,packed,name=require_fiducials,json=requireFiducials,proto3" json:"require_fiducials,omitempty"`
}

func (x *StartRecordingRequest) Reset() {
	*x = StartRecordingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecordingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecordingRequest) ProtoMessage() {}

func (x *StartRecordingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecordingRequest.ProtoReflect.Descriptor instead.
func (*StartRecordingRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{3}
}

func (x *StartRecordingRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartRecordingRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *StartRecordingRequest) GetRecordingEnvironment() *RecordingEnvironment {
	if x != nil {
		return x.RecordingEnvironment
	}
	return nil
}

func (x *StartRecordingRequest) GetRequireFiducials() []int32 {
	if x != nil {
		return x.RequireFiducials
	}
	return nil
}

// The StartRecording response messge returns the first created waypoint, which is made at the location
// the robot was standing when the request was made, in addition to any status information.
type StartRecordingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The waypoint that was just created.
	CreatedWaypoint *Waypoint `protobuf:"bytes,2,opt,name=created_waypoint,json=createdWaypoint,proto3" json:"created_waypoint,omitempty"`
	// The results/status of the lease provided.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,3,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Return status for the request.
	Status StartRecordingResponse_Status `protobuf:"varint,4,opt,name=status,proto3,enum=bosdyn.api.graph_nav.StartRecordingResponse_Status" json:"status,omitempty"`
	// If the status is STATUS_MISSING_FIDUCIALS, these are the fiducials that are not currently
	// visible.
	MissingFiducials []int32 `protobuf:"varint,5,rep,packed,name=missing_fiducials,json=missingFiducials,proto3" json:"missing_fiducials,omitempty"`
	// If the status is STATUS_FIDUCIAL_POSE_NOT_OK, these are the fiducials that could not be
	// localized confidently.
	BadPoseFiducials []int32 `protobuf:"varint,7,rep,packed,name=bad_pose_fiducials,json=badPoseFiducials,proto3" json:"bad_pose_fiducials,omitempty"`
	// Large graphs can only be uploaded if the license permits them. Recording
	// will stop automatically when the graph gets too large. If StartRecording
	// is requested again after the graph gets too large, it will fail, and license
	// status will be filled out.
	LicenseStatus api.LicenseInfo_Status `protobuf:"varint,6,opt,name=license_status,json=licenseStatus,proto3,enum=bosdyn.api.LicenseInfo_Status" json:"license_status,omitempty"`
}

func (x *StartRecordingResponse) Reset() {
	*x = StartRecordingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StartRecordingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartRecordingResponse) ProtoMessage() {}

func (x *StartRecordingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartRecordingResponse.ProtoReflect.Descriptor instead.
func (*StartRecordingResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{4}
}

func (x *StartRecordingResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StartRecordingResponse) GetCreatedWaypoint() *Waypoint {
	if x != nil {
		return x.CreatedWaypoint
	}
	return nil
}

func (x *StartRecordingResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *StartRecordingResponse) GetStatus() StartRecordingResponse_Status {
	if x != nil {
		return x.Status
	}
	return StartRecordingResponse_STATUS_UNKNOWN
}

func (x *StartRecordingResponse) GetMissingFiducials() []int32 {
	if x != nil {
		return x.MissingFiducials
	}
	return nil
}

func (x *StartRecordingResponse) GetBadPoseFiducials() []int32 {
	if x != nil {
		return x.BadPoseFiducials
	}
	return nil
}

func (x *StartRecordingResponse) GetLicenseStatus() api.LicenseInfo_Status {
	if x != nil {
		return x.LicenseStatus
	}
	return api.LicenseInfo_Status(0)
}

// The StopRecording request message tells the robot to no longer continue adding waypoints and
// edges to the graph.
type StopRecordingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The recording service is protected by a lease. The client must have a
	// lease to the recording service to modify its internal state.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *StopRecordingRequest) Reset() {
	*x = StopRecordingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRecordingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRecordingRequest) ProtoMessage() {}

func (x *StopRecordingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRecordingRequest.ProtoReflect.Descriptor instead.
func (*StopRecordingRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{5}
}

func (x *StopRecordingRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopRecordingRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The StopRecording response message contains the status of this request and any useful error
// information if the request fails.
type StopRecordingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The return status for the request.
	Status StopRecordingResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.graph_nav.StopRecordingResponse_Status" json:"status,omitempty"`
	// If not localized to end, specifies which waypoint we are localized to.
	ErrorWaypointLocalizedId string `protobuf:"bytes,3,opt,name=error_waypoint_localized_id,json=errorWaypointLocalizedId,proto3" json:"error_waypoint_localized_id,omitempty"`
	// The results/status of the lease provided.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,4,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *StopRecordingResponse) Reset() {
	*x = StopRecordingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopRecordingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopRecordingResponse) ProtoMessage() {}

func (x *StopRecordingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopRecordingResponse.ProtoReflect.Descriptor instead.
func (*StopRecordingResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{6}
}

func (x *StopRecordingResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StopRecordingResponse) GetStatus() StopRecordingResponse_Status {
	if x != nil {
		return x.Status
	}
	return StopRecordingResponse_STATUS_UNKNOWN
}

func (x *StopRecordingResponse) GetErrorWaypointLocalizedId() string {
	if x != nil {
		return x.ErrorWaypointLocalizedId
	}
	return ""
}

func (x *StopRecordingResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// The CreateWaypoint request message specifies a name and environment the robot should
// use to generate a waypoint in the graph at it's current location.
type CreateWaypointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Name of the waypoint to create. Overrides any naming prefix.
	WaypointName string `protobuf:"bytes,2,opt,name=waypoint_name,json=waypointName,proto3" json:"waypoint_name,omitempty"`
	// This will be merged into a copy of the existing persistent recording
	// environment and used as the environment for the created waypoint
	// and the edge from the previous waypoint to the new one.
	// It will not affect the persistent environment.
	RecordingEnvironment *RecordingEnvironment `protobuf:"bytes,3,opt,name=recording_environment,json=recordingEnvironment,proto3" json:"recording_environment,omitempty"`
	// The recording service is protected by a lease. The client must have a
	// lease to the recording service to modify its internal state.
	Lease *api.Lease `protobuf:"bytes,4,opt,name=lease,proto3" json:"lease,omitempty"`
	// If filled out, asks that the record service verify that the given fiducial IDs
	// are presently visible before creating a waypoint. This is useful for verifying
	// that the robot is where the user thinks it is in an area with known fiducials.
	RequireFiducials []int32 `protobuf:"varint,5,rep,packed,name=require_fiducials,json=requireFiducials,proto3" json:"require_fiducials,omitempty"`
	// Additional world objects to insert into this waypoint.
	WorldObjects []*api.WorldObject `protobuf:"bytes,6,rep,name=world_objects,json=worldObjects,proto3" json:"world_objects,omitempty"`
}

func (x *CreateWaypointRequest) Reset() {
	*x = CreateWaypointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWaypointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWaypointRequest) ProtoMessage() {}

func (x *CreateWaypointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWaypointRequest.ProtoReflect.Descriptor instead.
func (*CreateWaypointRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{7}
}

func (x *CreateWaypointRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateWaypointRequest) GetWaypointName() string {
	if x != nil {
		return x.WaypointName
	}
	return ""
}

func (x *CreateWaypointRequest) GetRecordingEnvironment() *RecordingEnvironment {
	if x != nil {
		return x.RecordingEnvironment
	}
	return nil
}

func (x *CreateWaypointRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *CreateWaypointRequest) GetRequireFiducials() []int32 {
	if x != nil {
		return x.RequireFiducials
	}
	return nil
}

func (x *CreateWaypointRequest) GetWorldObjects() []*api.WorldObject {
	if x != nil {
		return x.WorldObjects
	}
	return nil
}

// The CreateWaypoint response message contains the complete waypoint, and the associated
// edge connecting this waypoint to the graph when the request succeeds.
type CreateWaypointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The waypoint that was just created.
	CreatedWaypoint *Waypoint `protobuf:"bytes,2,opt,name=created_waypoint,json=createdWaypoint,proto3" json:"created_waypoint,omitempty"`
	// The edge connecting the waypoint just created with the last created waypoint in the map.
	CreatedEdge *Edge `protobuf:"bytes,3,opt,name=created_edge,json=createdEdge,proto3" json:"created_edge,omitempty"`
	// Return status for the request.
	Status CreateWaypointResponse_Status `protobuf:"varint,5,opt,name=status,proto3,enum=bosdyn.api.graph_nav.CreateWaypointResponse_Status" json:"status,omitempty"`
	// The results/status of the lease provided.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,4,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// If the status is STATUS_MISSING_FIDUCIALS, the following fiducials
	// were not visible to the robot when trying to create the waypoint.
	MissingFiducials []int32 `protobuf:"varint,6,rep,packed,name=missing_fiducials,json=missingFiducials,proto3" json:"missing_fiducials,omitempty"`
	// If the status is STATUS_FIDUCIAL_POSE_NOT_OK, these are the fiducials that could not be
	// localized confidently.
	BadPoseFiducials []int32 `protobuf:"varint,8,rep,packed,name=bad_pose_fiducials,json=badPoseFiducials,proto3" json:"bad_pose_fiducials,omitempty"`
	// Large graphs can only be uploaded if the license permits them. Recording
	// will stop automatically when the graph gets too large. If CreateWaypointResponse
	// is requested after the graph gets too large, it will fail, and license
	// status will be filled out.
	LicenseStatus api.LicenseInfo_Status `protobuf:"varint,7,opt,name=license_status,json=licenseStatus,proto3,enum=bosdyn.api.LicenseInfo_Status" json:"license_status,omitempty"`
}

func (x *CreateWaypointResponse) Reset() {
	*x = CreateWaypointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWaypointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWaypointResponse) ProtoMessage() {}

func (x *CreateWaypointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWaypointResponse.ProtoReflect.Descriptor instead.
func (*CreateWaypointResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{8}
}

func (x *CreateWaypointResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateWaypointResponse) GetCreatedWaypoint() *Waypoint {
	if x != nil {
		return x.CreatedWaypoint
	}
	return nil
}

func (x *CreateWaypointResponse) GetCreatedEdge() *Edge {
	if x != nil {
		return x.CreatedEdge
	}
	return nil
}

func (x *CreateWaypointResponse) GetStatus() CreateWaypointResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateWaypointResponse_STATUS_UNKNOWN
}

func (x *CreateWaypointResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *CreateWaypointResponse) GetMissingFiducials() []int32 {
	if x != nil {
		return x.MissingFiducials
	}
	return nil
}

func (x *CreateWaypointResponse) GetBadPoseFiducials() []int32 {
	if x != nil {
		return x.BadPoseFiducials
	}
	return nil
}

func (x *CreateWaypointResponse) GetLicenseStatus() api.LicenseInfo_Status {
	if x != nil {
		return x.LicenseStatus
	}
	return api.LicenseInfo_Status(0)
}

// The CreateEdge request message specifies an edge to create between two existing waypoints.
// The edge must not already exist in the map. This can be used to close a loop or to add any
// additional edges.
type CreateEdgeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Create an edge between two existing waypoints in the map with
	// the given parameters.
	Edge *Edge `protobuf:"bytes,2,opt,name=edge,proto3" json:"edge,omitempty"`
	// The recording service is protected by a lease. The client must have a
	// lease to the recording service to modify its internal state.
	Lease *api.Lease `protobuf:"bytes,3,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *CreateEdgeRequest) Reset() {
	*x = CreateEdgeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEdgeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEdgeRequest) ProtoMessage() {}

func (x *CreateEdgeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEdgeRequest.ProtoReflect.Descriptor instead.
func (*CreateEdgeRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{9}
}

func (x *CreateEdgeRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateEdgeRequest) GetEdge() *Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

func (x *CreateEdgeRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The CreateEdge response message contains the status of this request and any useful error
// information if the request fails.
type CreateEdgeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status CreateEdgeResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.graph_nav.CreateEdgeResponse_Status" json:"status,omitempty"`
	// If set, the existing edge that caused the STATUS_EXISTS error.
	ErrorExistingEdge *Edge `protobuf:"bytes,3,opt,name=error_existing_edge,json=errorExistingEdge,proto3" json:"error_existing_edge,omitempty"`
	// The results/status of the lease provided.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,4,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *CreateEdgeResponse) Reset() {
	*x = CreateEdgeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateEdgeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateEdgeResponse) ProtoMessage() {}

func (x *CreateEdgeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateEdgeResponse.ProtoReflect.Descriptor instead.
func (*CreateEdgeResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{10}
}

func (x *CreateEdgeResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *CreateEdgeResponse) GetStatus() CreateEdgeResponse_Status {
	if x != nil {
		return x.Status
	}
	return CreateEdgeResponse_STATUS_UNKNOWN
}

func (x *CreateEdgeResponse) GetErrorExistingEdge() *Edge {
	if x != nil {
		return x.ErrorExistingEdge
	}
	return nil
}

func (x *CreateEdgeResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// The GetRecordStatus request message asks for the current state of the recording service.
type GetRecordStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetRecordStatusRequest) Reset() {
	*x = GetRecordStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordStatusRequest) ProtoMessage() {}

func (x *GetRecordStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordStatusRequest.ProtoReflect.Descriptor instead.
func (*GetRecordStatusRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{11}
}

func (x *GetRecordStatusRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The GetRecordStatus response message returns whether the service is currently recording and what the
// persistent recording environment is at the time the request was recieved.
type GetRecordStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// If true, the record service is actively recording
	// a chain.
	IsRecording bool `protobuf:"varint,2,opt,name=is_recording,json=isRecording,proto3" json:"is_recording,omitempty"`
	// The current persistent recording environment.
	RecordingEnvironment *RecordingEnvironment            `protobuf:"bytes,3,opt,name=recording_environment,json=recordingEnvironment,proto3" json:"recording_environment,omitempty"`
	MapState             GetRecordStatusResponse_MapState `protobuf:"varint,4,opt,name=map_state,json=mapState,proto3,enum=bosdyn.api.graph_nav.GetRecordStatusResponse_MapState" json:"map_state,omitempty"`
}

func (x *GetRecordStatusResponse) Reset() {
	*x = GetRecordStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecordStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecordStatusResponse) ProtoMessage() {}

func (x *GetRecordStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_recording_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecordStatusResponse.ProtoReflect.Descriptor instead.
func (*GetRecordStatusResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP(), []int{12}
}

func (x *GetRecordStatusResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetRecordStatusResponse) GetIsRecording() bool {
	if x != nil {
		return x.IsRecording
	}
	return false
}

func (x *GetRecordStatusResponse) GetRecordingEnvironment() *RecordingEnvironment {
	if x != nil {
		return x.RecordingEnvironment
	}
	return nil
}

func (x *GetRecordStatusResponse) GetMapState() GetRecordStatusResponse_MapState {
	if x != nil {
		return x.MapState
	}
	return GetRecordStatusResponse_MAP_STATE_UNKNOWN
}

var File_bosdyn_api_graph_nav_recording_proto protoreflect.FileDescriptor

var file_bosdyn_api_graph_nav_recording_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x1a, 0x17, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x6d, 0x61, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x14, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x12, 0x5d, 0x0a, 0x14, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x13, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x51, 0x0a, 0x10, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0f, 0x65, 0x64, 0x67, 0x65, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xca, 0x01, 0x0a, 0x1e, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22,
	0x9b, 0x01, 0x0a, 0x1f, 0x53, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x81, 0x02,
	0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f,
	0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c,
	0x73, 0x22, 0xc8, 0x06, 0x0a, 0x16, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x49, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61,
	0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x10, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x33, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69,
	0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62,
	0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x62, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x65,
	0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xf9, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46,
	0x4f, 0x4c, 0x4c, 0x4f, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x03,
	0x12, 0x28, 0x0a, 0x24, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x58, 0x49, 0x53,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x44,
	0x55, 0x43, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x06, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x07, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x08, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x09, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x41, 0x52, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0a, 0x22, 0x72, 0x0a, 0x14,
	0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x22, 0x84, 0x03, 0x0a, 0x15, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4a,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x18, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x66, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x5f, 0x59, 0x45, 0x54, 0x10, 0x03, 0x22, 0xe4, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x15, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x14, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x66,
	0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73,
	0x12, 0x3c, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xb5,
	0x06, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69,
	0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x10, 0x62, 0x61, 0x64, 0x50, 0x6f, 0x73, 0x65, 0x46, 0x69, 0x64, 0x75,
	0x63, 0x69, 0x61, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa7, 0x02, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f,
	0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x44,
	0x55, 0x43, 0x49, 0x41, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x05, 0x12, 0x30, 0x0a, 0x2c, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e,
	0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x06, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x5f, 0x4e, 0x4f, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x4f, 0x4b, 0x10, 0x08, 0x22, 0x9f, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x04, 0x65, 0x64, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0xb9, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x64, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x4a, 0x0a, 0x13,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x11, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x45, 0x64, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x93,
	0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x02, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x41, 0x59, 0x50,
	0x4f, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f,
	0x52, 0x4d, 0x10, 0x05, 0x22, 0x4b, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x80, 0x03, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x15, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x14, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x08, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x58, 0x0a, 0x08, 0x4d, 0x61,
	0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x23, 0x0a, 0x1f, 0x4d, 0x41, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x4f,
	0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e,
	0x53, 0x45, 0x10, 0x02, 0x42, 0x4d, 0x42, 0x0e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_graph_nav_recording_proto_rawDescOnce sync.Once
	file_bosdyn_api_graph_nav_recording_proto_rawDescData = file_bosdyn_api_graph_nav_recording_proto_rawDesc
)

func file_bosdyn_api_graph_nav_recording_proto_rawDescGZIP() []byte {
	file_bosdyn_api_graph_nav_recording_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_graph_nav_recording_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_graph_nav_recording_proto_rawDescData)
	})
	return file_bosdyn_api_graph_nav_recording_proto_rawDescData
}

var file_bosdyn_api_graph_nav_recording_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_bosdyn_api_graph_nav_recording_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_bosdyn_api_graph_nav_recording_proto_goTypes = []interface{}{
	(StartRecordingResponse_Status)(0),      // 0: bosdyn.api.graph_nav.StartRecordingResponse.Status
	(StopRecordingResponse_Status)(0),       // 1: bosdyn.api.graph_nav.StopRecordingResponse.Status
	(CreateWaypointResponse_Status)(0),      // 2: bosdyn.api.graph_nav.CreateWaypointResponse.Status
	(CreateEdgeResponse_Status)(0),          // 3: bosdyn.api.graph_nav.CreateEdgeResponse.Status
	(GetRecordStatusResponse_MapState)(0),   // 4: bosdyn.api.graph_nav.GetRecordStatusResponse.MapState
	(*RecordingEnvironment)(nil),            // 5: bosdyn.api.graph_nav.RecordingEnvironment
	(*SetRecordingEnvironmentRequest)(nil),  // 6: bosdyn.api.graph_nav.SetRecordingEnvironmentRequest
	(*SetRecordingEnvironmentResponse)(nil), // 7: bosdyn.api.graph_nav.SetRecordingEnvironmentResponse
	(*StartRecordingRequest)(nil),           // 8: bosdyn.api.graph_nav.StartRecordingRequest
	(*StartRecordingResponse)(nil),          // 9: bosdyn.api.graph_nav.StartRecordingResponse
	(*StopRecordingRequest)(nil),            // 10: bosdyn.api.graph_nav.StopRecordingRequest
	(*StopRecordingResponse)(nil),           // 11: bosdyn.api.graph_nav.StopRecordingResponse
	(*CreateWaypointRequest)(nil),           // 12: bosdyn.api.graph_nav.CreateWaypointRequest
	(*CreateWaypointResponse)(nil),          // 13: bosdyn.api.graph_nav.CreateWaypointResponse
	(*CreateEdgeRequest)(nil),               // 14: bosdyn.api.graph_nav.CreateEdgeRequest
	(*CreateEdgeResponse)(nil),              // 15: bosdyn.api.graph_nav.CreateEdgeResponse
	(*GetRecordStatusRequest)(nil),          // 16: bosdyn.api.graph_nav.GetRecordStatusRequest
	(*GetRecordStatusResponse)(nil),         // 17: bosdyn.api.graph_nav.GetRecordStatusResponse
	(*Waypoint_Annotations)(nil),            // 18: bosdyn.api.graph_nav.Waypoint.Annotations
	(*Edge_Annotations)(nil),                // 19: bosdyn.api.graph_nav.Edge.Annotations
	(*api.RequestHeader)(nil),               // 20: bosdyn.api.RequestHeader
	(*api.Lease)(nil),                       // 21: bosdyn.api.Lease
	(*api.ResponseHeader)(nil),              // 22: bosdyn.api.ResponseHeader
	(*api.LeaseUseResult)(nil),              // 23: bosdyn.api.LeaseUseResult
	(*Waypoint)(nil),                        // 24: bosdyn.api.graph_nav.Waypoint
	(api.LicenseInfo_Status)(0),             // 25: bosdyn.api.LicenseInfo.Status
	(*api.WorldObject)(nil),                 // 26: bosdyn.api.WorldObject
	(*Edge)(nil),                            // 27: bosdyn.api.graph_nav.Edge
}
var file_bosdyn_api_graph_nav_recording_proto_depIdxs = []int32{
	18, // 0: bosdyn.api.graph_nav.RecordingEnvironment.waypoint_environment:type_name -> bosdyn.api.graph_nav.Waypoint.Annotations
	19, // 1: bosdyn.api.graph_nav.RecordingEnvironment.edge_environment:type_name -> bosdyn.api.graph_nav.Edge.Annotations
	20, // 2: bosdyn.api.graph_nav.SetRecordingEnvironmentRequest.header:type_name -> bosdyn.api.RequestHeader
	5,  // 3: bosdyn.api.graph_nav.SetRecordingEnvironmentRequest.environment:type_name -> bosdyn.api.graph_nav.RecordingEnvironment
	21, // 4: bosdyn.api.graph_nav.SetRecordingEnvironmentRequest.lease:type_name -> bosdyn.api.Lease
	22, // 5: bosdyn.api.graph_nav.SetRecordingEnvironmentResponse.header:type_name -> bosdyn.api.ResponseHeader
	23, // 6: bosdyn.api.graph_nav.SetRecordingEnvironmentResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	20, // 7: bosdyn.api.graph_nav.StartRecordingRequest.header:type_name -> bosdyn.api.RequestHeader
	21, // 8: bosdyn.api.graph_nav.StartRecordingRequest.lease:type_name -> bosdyn.api.Lease
	5,  // 9: bosdyn.api.graph_nav.StartRecordingRequest.recording_environment:type_name -> bosdyn.api.graph_nav.RecordingEnvironment
	22, // 10: bosdyn.api.graph_nav.StartRecordingResponse.header:type_name -> bosdyn.api.ResponseHeader
	24, // 11: bosdyn.api.graph_nav.StartRecordingResponse.created_waypoint:type_name -> bosdyn.api.graph_nav.Waypoint
	23, // 12: bosdyn.api.graph_nav.StartRecordingResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	0,  // 13: bosdyn.api.graph_nav.StartRecordingResponse.status:type_name -> bosdyn.api.graph_nav.StartRecordingResponse.Status
	25, // 14: bosdyn.api.graph_nav.StartRecordingResponse.license_status:type_name -> bosdyn.api.LicenseInfo.Status
	20, // 15: bosdyn.api.graph_nav.StopRecordingRequest.header:type_name -> bosdyn.api.RequestHeader
	21, // 16: bosdyn.api.graph_nav.StopRecordingRequest.lease:type_name -> bosdyn.api.Lease
	22, // 17: bosdyn.api.graph_nav.StopRecordingResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 18: bosdyn.api.graph_nav.StopRecordingResponse.status:type_name -> bosdyn.api.graph_nav.StopRecordingResponse.Status
	23, // 19: bosdyn.api.graph_nav.StopRecordingResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	20, // 20: bosdyn.api.graph_nav.CreateWaypointRequest.header:type_name -> bosdyn.api.RequestHeader
	5,  // 21: bosdyn.api.graph_nav.CreateWaypointRequest.recording_environment:type_name -> bosdyn.api.graph_nav.RecordingEnvironment
	21, // 22: bosdyn.api.graph_nav.CreateWaypointRequest.lease:type_name -> bosdyn.api.Lease
	26, // 23: bosdyn.api.graph_nav.CreateWaypointRequest.world_objects:type_name -> bosdyn.api.WorldObject
	22, // 24: bosdyn.api.graph_nav.CreateWaypointResponse.header:type_name -> bosdyn.api.ResponseHeader
	24, // 25: bosdyn.api.graph_nav.CreateWaypointResponse.created_waypoint:type_name -> bosdyn.api.graph_nav.Waypoint
	27, // 26: bosdyn.api.graph_nav.CreateWaypointResponse.created_edge:type_name -> bosdyn.api.graph_nav.Edge
	2,  // 27: bosdyn.api.graph_nav.CreateWaypointResponse.status:type_name -> bosdyn.api.graph_nav.CreateWaypointResponse.Status
	23, // 28: bosdyn.api.graph_nav.CreateWaypointResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	25, // 29: bosdyn.api.graph_nav.CreateWaypointResponse.license_status:type_name -> bosdyn.api.LicenseInfo.Status
	20, // 30: bosdyn.api.graph_nav.CreateEdgeRequest.header:type_name -> bosdyn.api.RequestHeader
	27, // 31: bosdyn.api.graph_nav.CreateEdgeRequest.edge:type_name -> bosdyn.api.graph_nav.Edge
	21, // 32: bosdyn.api.graph_nav.CreateEdgeRequest.lease:type_name -> bosdyn.api.Lease
	22, // 33: bosdyn.api.graph_nav.CreateEdgeResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 34: bosdyn.api.graph_nav.CreateEdgeResponse.status:type_name -> bosdyn.api.graph_nav.CreateEdgeResponse.Status
	27, // 35: bosdyn.api.graph_nav.CreateEdgeResponse.error_existing_edge:type_name -> bosdyn.api.graph_nav.Edge
	23, // 36: bosdyn.api.graph_nav.CreateEdgeResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	20, // 37: bosdyn.api.graph_nav.GetRecordStatusRequest.header:type_name -> bosdyn.api.RequestHeader
	22, // 38: bosdyn.api.graph_nav.GetRecordStatusResponse.header:type_name -> bosdyn.api.ResponseHeader
	5,  // 39: bosdyn.api.graph_nav.GetRecordStatusResponse.recording_environment:type_name -> bosdyn.api.graph_nav.RecordingEnvironment
	4,  // 40: bosdyn.api.graph_nav.GetRecordStatusResponse.map_state:type_name -> bosdyn.api.graph_nav.GetRecordStatusResponse.MapState
	41, // [41:41] is the sub-list for method output_type
	41, // [41:41] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_bosdyn_api_graph_nav_recording_proto_init() }
func file_bosdyn_api_graph_nav_recording_proto_init() {
	if File_bosdyn_api_graph_nav_recording_proto != nil {
		return
	}
	file_bosdyn_api_graph_nav_map_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordingEnvironment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRecordingEnvironmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetRecordingEnvironmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecordingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StartRecordingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRecordingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopRecordingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWaypointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWaypointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEdgeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateEdgeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_recording_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecordStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_graph_nav_recording_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_graph_nav_recording_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_graph_nav_recording_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_graph_nav_recording_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_graph_nav_recording_proto_msgTypes,
	}.Build()
	File_bosdyn_api_graph_nav_recording_proto = out.File
	file_bosdyn_api_graph_nav_recording_proto_rawDesc = nil
	file_bosdyn_api_graph_nav_recording_proto_goTypes = nil
	file_bosdyn_api_graph_nav_recording_proto_depIdxs = nil
}
