// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/graph_nav/graph_nav_service.proto

package graph_nav

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphNavServiceClient is the client API for GraphNavService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphNavServiceClient interface {
	// Trigger a manual localization. Typically done to provide the initial localization.
	SetLocalization(ctx context.Context, in *SetLocalizationRequest, opts ...grpc.CallOption) (*SetLocalizationResponse, error)
	// Tell GraphNav to navigate/traverse a given route.
	NavigateRoute(ctx context.Context, in *NavigateRouteRequest, opts ...grpc.CallOption) (*NavigateRouteResponse, error)
	// Tell GraphNav to navigate to a waypoint along a route it chooses.
	NavigateTo(ctx context.Context, in *NavigateToRequest, opts ...grpc.CallOption) (*NavigateToResponse, error)
	// Tell GraphNav to navigate to a goal with respect to the current anchoring.
	NavigateToAnchor(ctx context.Context, in *NavigateToAnchorRequest, opts ...grpc.CallOption) (*NavigateToAnchorResponse, error)
	// Get feedback on active navigation command.
	NavigationFeedback(ctx context.Context, in *NavigationFeedbackRequest, opts ...grpc.CallOption) (*NavigationFeedbackResponse, error)
	// Get the localization status and data.
	GetLocalizationState(ctx context.Context, in *GetLocalizationStateRequest, opts ...grpc.CallOption) (*GetLocalizationStateResponse, error)
	// Clears the local graph structure. Also erases any snapshots currently in RAM.
	ClearGraph(ctx context.Context, in *ClearGraphRequest, opts ...grpc.CallOption) (*ClearGraphResponse, error)
	// Download the graph structure.
	DownloadGraph(ctx context.Context, in *DownloadGraphRequest, opts ...grpc.CallOption) (*DownloadGraphResponse, error)
	// Upload the full list of waypoint IDs, graph topology and other small info.
	UploadGraph(ctx context.Context, in *UploadGraphRequest, opts ...grpc.CallOption) (*UploadGraphResponse, error)
	// Uploads large waypoint snapshot as a stream for a particular waypoint.
	UploadWaypointSnapshot(ctx context.Context, opts ...grpc.CallOption) (GraphNavService_UploadWaypointSnapshotClient, error)
	// Uploads large edge snapshot as a stream for a particular edge.
	UploadEdgeSnapshot(ctx context.Context, opts ...grpc.CallOption) (GraphNavService_UploadEdgeSnapshotClient, error)
	// Download waypoint data from the server. If the snapshot exists in disk cache, it will be loaded.
	DownloadWaypointSnapshot(ctx context.Context, in *DownloadWaypointSnapshotRequest, opts ...grpc.CallOption) (GraphNavService_DownloadWaypointSnapshotClient, error)
	// Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
	DownloadEdgeSnapshot(ctx context.Context, in *DownloadEdgeSnapshotRequest, opts ...grpc.CallOption) (GraphNavService_DownloadEdgeSnapshotClient, error)
}

type graphNavServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphNavServiceClient(cc grpc.ClientConnInterface) GraphNavServiceClient {
	return &graphNavServiceClient{cc}
}

func (c *graphNavServiceClient) SetLocalization(ctx context.Context, in *SetLocalizationRequest, opts ...grpc.CallOption) (*SetLocalizationResponse, error) {
	out := new(SetLocalizationResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/SetLocalization", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) NavigateRoute(ctx context.Context, in *NavigateRouteRequest, opts ...grpc.CallOption) (*NavigateRouteResponse, error) {
	out := new(NavigateRouteResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/NavigateRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) NavigateTo(ctx context.Context, in *NavigateToRequest, opts ...grpc.CallOption) (*NavigateToResponse, error) {
	out := new(NavigateToResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/NavigateTo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) NavigateToAnchor(ctx context.Context, in *NavigateToAnchorRequest, opts ...grpc.CallOption) (*NavigateToAnchorResponse, error) {
	out := new(NavigateToAnchorResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/NavigateToAnchor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) NavigationFeedback(ctx context.Context, in *NavigationFeedbackRequest, opts ...grpc.CallOption) (*NavigationFeedbackResponse, error) {
	out := new(NavigationFeedbackResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/NavigationFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) GetLocalizationState(ctx context.Context, in *GetLocalizationStateRequest, opts ...grpc.CallOption) (*GetLocalizationStateResponse, error) {
	out := new(GetLocalizationStateResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/GetLocalizationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) ClearGraph(ctx context.Context, in *ClearGraphRequest, opts ...grpc.CallOption) (*ClearGraphResponse, error) {
	out := new(ClearGraphResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/ClearGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) DownloadGraph(ctx context.Context, in *DownloadGraphRequest, opts ...grpc.CallOption) (*DownloadGraphResponse, error) {
	out := new(DownloadGraphResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/DownloadGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) UploadGraph(ctx context.Context, in *UploadGraphRequest, opts ...grpc.CallOption) (*UploadGraphResponse, error) {
	out := new(UploadGraphResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavService/UploadGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavServiceClient) UploadWaypointSnapshot(ctx context.Context, opts ...grpc.CallOption) (GraphNavService_UploadWaypointSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &GraphNavService_ServiceDesc.Streams[0], "/bosdyn.api.graph_nav.GraphNavService/UploadWaypointSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphNavServiceUploadWaypointSnapshotClient{stream}
	return x, nil
}

type GraphNavService_UploadWaypointSnapshotClient interface {
	Send(*UploadWaypointSnapshotRequest) error
	CloseAndRecv() (*UploadWaypointSnapshotResponse, error)
	grpc.ClientStream
}

type graphNavServiceUploadWaypointSnapshotClient struct {
	grpc.ClientStream
}

func (x *graphNavServiceUploadWaypointSnapshotClient) Send(m *UploadWaypointSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *graphNavServiceUploadWaypointSnapshotClient) CloseAndRecv() (*UploadWaypointSnapshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadWaypointSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphNavServiceClient) UploadEdgeSnapshot(ctx context.Context, opts ...grpc.CallOption) (GraphNavService_UploadEdgeSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &GraphNavService_ServiceDesc.Streams[1], "/bosdyn.api.graph_nav.GraphNavService/UploadEdgeSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphNavServiceUploadEdgeSnapshotClient{stream}
	return x, nil
}

type GraphNavService_UploadEdgeSnapshotClient interface {
	Send(*UploadEdgeSnapshotRequest) error
	CloseAndRecv() (*UploadEdgeSnapshotResponse, error)
	grpc.ClientStream
}

type graphNavServiceUploadEdgeSnapshotClient struct {
	grpc.ClientStream
}

func (x *graphNavServiceUploadEdgeSnapshotClient) Send(m *UploadEdgeSnapshotRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *graphNavServiceUploadEdgeSnapshotClient) CloseAndRecv() (*UploadEdgeSnapshotResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadEdgeSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphNavServiceClient) DownloadWaypointSnapshot(ctx context.Context, in *DownloadWaypointSnapshotRequest, opts ...grpc.CallOption) (GraphNavService_DownloadWaypointSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &GraphNavService_ServiceDesc.Streams[2], "/bosdyn.api.graph_nav.GraphNavService/DownloadWaypointSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphNavServiceDownloadWaypointSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphNavService_DownloadWaypointSnapshotClient interface {
	Recv() (*DownloadWaypointSnapshotResponse, error)
	grpc.ClientStream
}

type graphNavServiceDownloadWaypointSnapshotClient struct {
	grpc.ClientStream
}

func (x *graphNavServiceDownloadWaypointSnapshotClient) Recv() (*DownloadWaypointSnapshotResponse, error) {
	m := new(DownloadWaypointSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *graphNavServiceClient) DownloadEdgeSnapshot(ctx context.Context, in *DownloadEdgeSnapshotRequest, opts ...grpc.CallOption) (GraphNavService_DownloadEdgeSnapshotClient, error) {
	stream, err := c.cc.NewStream(ctx, &GraphNavService_ServiceDesc.Streams[3], "/bosdyn.api.graph_nav.GraphNavService/DownloadEdgeSnapshot", opts...)
	if err != nil {
		return nil, err
	}
	x := &graphNavServiceDownloadEdgeSnapshotClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GraphNavService_DownloadEdgeSnapshotClient interface {
	Recv() (*DownloadEdgeSnapshotResponse, error)
	grpc.ClientStream
}

type graphNavServiceDownloadEdgeSnapshotClient struct {
	grpc.ClientStream
}

func (x *graphNavServiceDownloadEdgeSnapshotClient) Recv() (*DownloadEdgeSnapshotResponse, error) {
	m := new(DownloadEdgeSnapshotResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GraphNavServiceServer is the server API for GraphNavService service.
// All implementations must embed UnimplementedGraphNavServiceServer
// for forward compatibility
type GraphNavServiceServer interface {
	// Trigger a manual localization. Typically done to provide the initial localization.
	SetLocalization(context.Context, *SetLocalizationRequest) (*SetLocalizationResponse, error)
	// Tell GraphNav to navigate/traverse a given route.
	NavigateRoute(context.Context, *NavigateRouteRequest) (*NavigateRouteResponse, error)
	// Tell GraphNav to navigate to a waypoint along a route it chooses.
	NavigateTo(context.Context, *NavigateToRequest) (*NavigateToResponse, error)
	// Tell GraphNav to navigate to a goal with respect to the current anchoring.
	NavigateToAnchor(context.Context, *NavigateToAnchorRequest) (*NavigateToAnchorResponse, error)
	// Get feedback on active navigation command.
	NavigationFeedback(context.Context, *NavigationFeedbackRequest) (*NavigationFeedbackResponse, error)
	// Get the localization status and data.
	GetLocalizationState(context.Context, *GetLocalizationStateRequest) (*GetLocalizationStateResponse, error)
	// Clears the local graph structure. Also erases any snapshots currently in RAM.
	ClearGraph(context.Context, *ClearGraphRequest) (*ClearGraphResponse, error)
	// Download the graph structure.
	DownloadGraph(context.Context, *DownloadGraphRequest) (*DownloadGraphResponse, error)
	// Upload the full list of waypoint IDs, graph topology and other small info.
	UploadGraph(context.Context, *UploadGraphRequest) (*UploadGraphResponse, error)
	// Uploads large waypoint snapshot as a stream for a particular waypoint.
	UploadWaypointSnapshot(GraphNavService_UploadWaypointSnapshotServer) error
	// Uploads large edge snapshot as a stream for a particular edge.
	UploadEdgeSnapshot(GraphNavService_UploadEdgeSnapshotServer) error
	// Download waypoint data from the server. If the snapshot exists in disk cache, it will be loaded.
	DownloadWaypointSnapshot(*DownloadWaypointSnapshotRequest, GraphNavService_DownloadWaypointSnapshotServer) error
	// Download edge data from the server. If the snapshot exists in disk cache, it will be loaded.
	DownloadEdgeSnapshot(*DownloadEdgeSnapshotRequest, GraphNavService_DownloadEdgeSnapshotServer) error
	mustEmbedUnimplementedGraphNavServiceServer()
}

// UnimplementedGraphNavServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGraphNavServiceServer struct {
}

func (UnimplementedGraphNavServiceServer) SetLocalization(context.Context, *SetLocalizationRequest) (*SetLocalizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLocalization not implemented")
}
func (UnimplementedGraphNavServiceServer) NavigateRoute(context.Context, *NavigateRouteRequest) (*NavigateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NavigateRoute not implemented")
}
func (UnimplementedGraphNavServiceServer) NavigateTo(context.Context, *NavigateToRequest) (*NavigateToResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NavigateTo not implemented")
}
func (UnimplementedGraphNavServiceServer) NavigateToAnchor(context.Context, *NavigateToAnchorRequest) (*NavigateToAnchorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NavigateToAnchor not implemented")
}
func (UnimplementedGraphNavServiceServer) NavigationFeedback(context.Context, *NavigationFeedbackRequest) (*NavigationFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NavigationFeedback not implemented")
}
func (UnimplementedGraphNavServiceServer) GetLocalizationState(context.Context, *GetLocalizationStateRequest) (*GetLocalizationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalizationState not implemented")
}
func (UnimplementedGraphNavServiceServer) ClearGraph(context.Context, *ClearGraphRequest) (*ClearGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearGraph not implemented")
}
func (UnimplementedGraphNavServiceServer) DownloadGraph(context.Context, *DownloadGraphRequest) (*DownloadGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadGraph not implemented")
}
func (UnimplementedGraphNavServiceServer) UploadGraph(context.Context, *UploadGraphRequest) (*UploadGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadGraph not implemented")
}
func (UnimplementedGraphNavServiceServer) UploadWaypointSnapshot(GraphNavService_UploadWaypointSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadWaypointSnapshot not implemented")
}
func (UnimplementedGraphNavServiceServer) UploadEdgeSnapshot(GraphNavService_UploadEdgeSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadEdgeSnapshot not implemented")
}
func (UnimplementedGraphNavServiceServer) DownloadWaypointSnapshot(*DownloadWaypointSnapshotRequest, GraphNavService_DownloadWaypointSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadWaypointSnapshot not implemented")
}
func (UnimplementedGraphNavServiceServer) DownloadEdgeSnapshot(*DownloadEdgeSnapshotRequest, GraphNavService_DownloadEdgeSnapshotServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadEdgeSnapshot not implemented")
}
func (UnimplementedGraphNavServiceServer) mustEmbedUnimplementedGraphNavServiceServer() {}

// UnsafeGraphNavServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphNavServiceServer will
// result in compilation errors.
type UnsafeGraphNavServiceServer interface {
	mustEmbedUnimplementedGraphNavServiceServer()
}

func RegisterGraphNavServiceServer(s grpc.ServiceRegistrar, srv GraphNavServiceServer) {
	s.RegisterService(&GraphNavService_ServiceDesc, srv)
}

func _GraphNavService_SetLocalization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLocalizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).SetLocalization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/SetLocalization",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).SetLocalization(ctx, req.(*SetLocalizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_NavigateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).NavigateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/NavigateRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).NavigateRoute(ctx, req.(*NavigateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_NavigateTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigateToRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).NavigateTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/NavigateTo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).NavigateTo(ctx, req.(*NavigateToRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_NavigateToAnchor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigateToAnchorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).NavigateToAnchor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/NavigateToAnchor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).NavigateToAnchor(ctx, req.(*NavigateToAnchorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_NavigationFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NavigationFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).NavigationFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/NavigationFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).NavigationFeedback(ctx, req.(*NavigationFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_GetLocalizationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalizationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).GetLocalizationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/GetLocalizationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).GetLocalizationState(ctx, req.(*GetLocalizationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_ClearGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).ClearGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/ClearGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).ClearGraph(ctx, req.(*ClearGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_DownloadGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).DownloadGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/DownloadGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).DownloadGraph(ctx, req.(*DownloadGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_UploadGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavServiceServer).UploadGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavService/UploadGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavServiceServer).UploadGraph(ctx, req.(*UploadGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavService_UploadWaypointSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GraphNavServiceServer).UploadWaypointSnapshot(&graphNavServiceUploadWaypointSnapshotServer{stream})
}

type GraphNavService_UploadWaypointSnapshotServer interface {
	SendAndClose(*UploadWaypointSnapshotResponse) error
	Recv() (*UploadWaypointSnapshotRequest, error)
	grpc.ServerStream
}

type graphNavServiceUploadWaypointSnapshotServer struct {
	grpc.ServerStream
}

func (x *graphNavServiceUploadWaypointSnapshotServer) SendAndClose(m *UploadWaypointSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *graphNavServiceUploadWaypointSnapshotServer) Recv() (*UploadWaypointSnapshotRequest, error) {
	m := new(UploadWaypointSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GraphNavService_UploadEdgeSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GraphNavServiceServer).UploadEdgeSnapshot(&graphNavServiceUploadEdgeSnapshotServer{stream})
}

type GraphNavService_UploadEdgeSnapshotServer interface {
	SendAndClose(*UploadEdgeSnapshotResponse) error
	Recv() (*UploadEdgeSnapshotRequest, error)
	grpc.ServerStream
}

type graphNavServiceUploadEdgeSnapshotServer struct {
	grpc.ServerStream
}

func (x *graphNavServiceUploadEdgeSnapshotServer) SendAndClose(m *UploadEdgeSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *graphNavServiceUploadEdgeSnapshotServer) Recv() (*UploadEdgeSnapshotRequest, error) {
	m := new(UploadEdgeSnapshotRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GraphNavService_DownloadWaypointSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadWaypointSnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphNavServiceServer).DownloadWaypointSnapshot(m, &graphNavServiceDownloadWaypointSnapshotServer{stream})
}

type GraphNavService_DownloadWaypointSnapshotServer interface {
	Send(*DownloadWaypointSnapshotResponse) error
	grpc.ServerStream
}

type graphNavServiceDownloadWaypointSnapshotServer struct {
	grpc.ServerStream
}

func (x *graphNavServiceDownloadWaypointSnapshotServer) Send(m *DownloadWaypointSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GraphNavService_DownloadEdgeSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadEdgeSnapshotRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GraphNavServiceServer).DownloadEdgeSnapshot(m, &graphNavServiceDownloadEdgeSnapshotServer{stream})
}

type GraphNavService_DownloadEdgeSnapshotServer interface {
	Send(*DownloadEdgeSnapshotResponse) error
	grpc.ServerStream
}

type graphNavServiceDownloadEdgeSnapshotServer struct {
	grpc.ServerStream
}

func (x *graphNavServiceDownloadEdgeSnapshotServer) Send(m *DownloadEdgeSnapshotResponse) error {
	return x.ServerStream.SendMsg(m)
}

// GraphNavService_ServiceDesc is the grpc.ServiceDesc for GraphNavService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphNavService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.graph_nav.GraphNavService",
	HandlerType: (*GraphNavServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLocalization",
			Handler:    _GraphNavService_SetLocalization_Handler,
		},
		{
			MethodName: "NavigateRoute",
			Handler:    _GraphNavService_NavigateRoute_Handler,
		},
		{
			MethodName: "NavigateTo",
			Handler:    _GraphNavService_NavigateTo_Handler,
		},
		{
			MethodName: "NavigateToAnchor",
			Handler:    _GraphNavService_NavigateToAnchor_Handler,
		},
		{
			MethodName: "NavigationFeedback",
			Handler:    _GraphNavService_NavigationFeedback_Handler,
		},
		{
			MethodName: "GetLocalizationState",
			Handler:    _GraphNavService_GetLocalizationState_Handler,
		},
		{
			MethodName: "ClearGraph",
			Handler:    _GraphNavService_ClearGraph_Handler,
		},
		{
			MethodName: "DownloadGraph",
			Handler:    _GraphNavService_DownloadGraph_Handler,
		},
		{
			MethodName: "UploadGraph",
			Handler:    _GraphNavService_UploadGraph_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadWaypointSnapshot",
			Handler:       _GraphNavService_UploadWaypointSnapshot_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UploadEdgeSnapshot",
			Handler:       _GraphNavService_UploadEdgeSnapshot_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadWaypointSnapshot",
			Handler:       _GraphNavService_DownloadWaypointSnapshot_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadEdgeSnapshot",
			Handler:       _GraphNavService_DownloadEdgeSnapshot_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "bosdyn/api/graph_nav/graph_nav_service.proto",
}
