// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/graph_nav/graph_nav.proto

package graph_nav

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetLocalizationRequest_FiducialInit int32

const (
	SetLocalizationRequest_FIDUCIAL_INIT_UNKNOWN           SetLocalizationRequest_FiducialInit = 0 // It is a programming error to use this one.
	SetLocalizationRequest_FIDUCIAL_INIT_NO_FIDUCIAL       SetLocalizationRequest_FiducialInit = 1 // Ignore fiducials during initialization.
	SetLocalizationRequest_FIDUCIAL_INIT_NEAREST           SetLocalizationRequest_FiducialInit = 2 // Localize to the nearest fiducial in any waypoint.
	SetLocalizationRequest_FIDUCIAL_INIT_NEAREST_AT_TARGET SetLocalizationRequest_FiducialInit = 3 // Localize to nearest fiducial at the target waypoint (from initial_guess).
	SetLocalizationRequest_FIDUCIAL_INIT_SPECIFIC          SetLocalizationRequest_FiducialInit = 4 // Localize to the given fiducial at the target waypoint (from initial_guess) if it exists, or any waypoint otherwise.
)

// Enum value maps for SetLocalizationRequest_FiducialInit.
var (
	SetLocalizationRequest_FiducialInit_name = map[int32]string{
		0: "FIDUCIAL_INIT_UNKNOWN",
		1: "FIDUCIAL_INIT_NO_FIDUCIAL",
		2: "FIDUCIAL_INIT_NEAREST",
		3: "FIDUCIAL_INIT_NEAREST_AT_TARGET",
		4: "FIDUCIAL_INIT_SPECIFIC",
	}
	SetLocalizationRequest_FiducialInit_value = map[string]int32{
		"FIDUCIAL_INIT_UNKNOWN":           0,
		"FIDUCIAL_INIT_NO_FIDUCIAL":       1,
		"FIDUCIAL_INIT_NEAREST":           2,
		"FIDUCIAL_INIT_NEAREST_AT_TARGET": 3,
		"FIDUCIAL_INIT_SPECIFIC":          4,
	}
)

func (x SetLocalizationRequest_FiducialInit) Enum() *SetLocalizationRequest_FiducialInit {
	p := new(SetLocalizationRequest_FiducialInit)
	*p = x
	return p
}

func (x SetLocalizationRequest_FiducialInit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetLocalizationRequest_FiducialInit) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[0].Descriptor()
}

func (SetLocalizationRequest_FiducialInit) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[0]
}

func (x SetLocalizationRequest_FiducialInit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetLocalizationRequest_FiducialInit.Descriptor instead.
func (SetLocalizationRequest_FiducialInit) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{0, 0}
}

type SetLocalizationResponse_Status int32

const (
	// The status is unknown/unset.
	SetLocalizationResponse_STATUS_UNKNOWN SetLocalizationResponse_Status = 0
	// Localization success.
	SetLocalizationResponse_STATUS_OK SetLocalizationResponse_Status = 1
	// Robot is experiencing a condition that prevents localization.
	SetLocalizationResponse_STATUS_ROBOT_IMPAIRED SetLocalizationResponse_Status = 2
	// The given waypoint is unknown by the system.
	// This could be due to a client error, or because the graph was changed out from under the
	// client.
	SetLocalizationResponse_STATUS_UNKNOWN_WAYPOINT SetLocalizationResponse_Status = 3
	// Localization was aborted, likely because of a new request.
	SetLocalizationResponse_STATUS_ABORTED SetLocalizationResponse_Status = 4
	// Failed to localize for some other reason; see the error_report for details.
	// This is often because the initial guess was incorrect.
	SetLocalizationResponse_STATUS_FAILED SetLocalizationResponse_Status = 5
	// Failed to localize because the fiducial requested by 'use_fiducial_id' was too far away from
	// the robot.
	SetLocalizationResponse_STATUS_FIDUCIAL_TOO_FAR_AWAY SetLocalizationResponse_Status = 6
	// Failed to localize because the fiducial requested by 'use_fiducial_id' had a detection time that was too
	// far in the past.
	SetLocalizationResponse_STATUS_FIDUCIAL_TOO_OLD SetLocalizationResponse_Status = 7
	// Failed to localize because the fiducial requested by 'use_fiducial_id' did not exist in the map at
	// the required location.
	SetLocalizationResponse_STATUS_NO_MATCHING_FIDUCIAL SetLocalizationResponse_Status = 8
	// Failed to localize because the fiducial requested by 'use_fiducial_id' had an unreliable
	// pose estimation, either in the current detection of that fiducial, or in detections that
	// were saved in the map. Note that when using FIDUCIAL_INIT_SPECIFIC, fiducial detections at
	// the target waypoint will be used so long as they are not uncertain -- otherwise, detections
	// at adjacent waypoints may be used. If there exists no uncertain detection of the fiducial
	// near the target waypoint in the map, the service returns this status.
	SetLocalizationResponse_STATUS_FIDUCIAL_POSE_UNCERTAIN SetLocalizationResponse_Status = 9
	// The localization could not be set, because the map was recorded using a different sensor
	// setup than the robot currently has onboard. See SensorStatus for more details.
	SetLocalizationResponse_STATUS_INCOMPATIBLE_SENSORS SetLocalizationResponse_Status = 10
)

// Enum value maps for SetLocalizationResponse_Status.
var (
	SetLocalizationResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_OK",
		2:  "STATUS_ROBOT_IMPAIRED",
		3:  "STATUS_UNKNOWN_WAYPOINT",
		4:  "STATUS_ABORTED",
		5:  "STATUS_FAILED",
		6:  "STATUS_FIDUCIAL_TOO_FAR_AWAY",
		7:  "STATUS_FIDUCIAL_TOO_OLD",
		8:  "STATUS_NO_MATCHING_FIDUCIAL",
		9:  "STATUS_FIDUCIAL_POSE_UNCERTAIN",
		10: "STATUS_INCOMPATIBLE_SENSORS",
	}
	SetLocalizationResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                 0,
		"STATUS_OK":                      1,
		"STATUS_ROBOT_IMPAIRED":          2,
		"STATUS_UNKNOWN_WAYPOINT":        3,
		"STATUS_ABORTED":                 4,
		"STATUS_FAILED":                  5,
		"STATUS_FIDUCIAL_TOO_FAR_AWAY":   6,
		"STATUS_FIDUCIAL_TOO_OLD":        7,
		"STATUS_NO_MATCHING_FIDUCIAL":    8,
		"STATUS_FIDUCIAL_POSE_UNCERTAIN": 9,
		"STATUS_INCOMPATIBLE_SENSORS":    10,
	}
)

func (x SetLocalizationResponse_Status) Enum() *SetLocalizationResponse_Status {
	p := new(SetLocalizationResponse_Status)
	*p = x
	return p
}

func (x SetLocalizationResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SetLocalizationResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[1].Descriptor()
}

func (SetLocalizationResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[1]
}

func (x SetLocalizationResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SetLocalizationResponse_Status.Descriptor instead.
func (SetLocalizationResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{2, 0}
}

// Indicates whether robot will navigate through areas with poor quality features
type TravelParams_FeatureQualityTolerance int32

const (
	TravelParams_TOLERANCE_UNKNOWN                     TravelParams_FeatureQualityTolerance = 0 // Unknown value
	TravelParams_TOLERANCE_DEFAULT                     TravelParams_FeatureQualityTolerance = 1 // Navigate through default number of waypoints with poor quality features
	TravelParams_TOLERANCE_IGNORE_POOR_FEATURE_QUALITY TravelParams_FeatureQualityTolerance = 2 // Navigate through unlimited number of waypoints with poor quality features
)

// Enum value maps for TravelParams_FeatureQualityTolerance.
var (
	TravelParams_FeatureQualityTolerance_name = map[int32]string{
		0: "TOLERANCE_UNKNOWN",
		1: "TOLERANCE_DEFAULT",
		2: "TOLERANCE_IGNORE_POOR_FEATURE_QUALITY",
	}
	TravelParams_FeatureQualityTolerance_value = map[string]int32{
		"TOLERANCE_UNKNOWN":                     0,
		"TOLERANCE_DEFAULT":                     1,
		"TOLERANCE_IGNORE_POOR_FEATURE_QUALITY": 2,
	}
)

func (x TravelParams_FeatureQualityTolerance) Enum() *TravelParams_FeatureQualityTolerance {
	p := new(TravelParams_FeatureQualityTolerance)
	*p = x
	return p
}

func (x TravelParams_FeatureQualityTolerance) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TravelParams_FeatureQualityTolerance) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[2].Descriptor()
}

func (TravelParams_FeatureQualityTolerance) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[2]
}

func (x TravelParams_FeatureQualityTolerance) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TravelParams_FeatureQualityTolerance.Descriptor instead.
func (TravelParams_FeatureQualityTolerance) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{4, 0}
}

type NavigateToResponse_Status int32

const (
	// An unknown / unexpected error occurred.
	NavigateToResponse_STATUS_UNKNOWN NavigateToResponse_Status = 0
	// Request was accepted.
	NavigateToResponse_STATUS_OK NavigateToResponse_Status = 1
	// [Time error] Client has not done timesync with robot.
	NavigateToResponse_STATUS_NO_TIMESYNC NavigateToResponse_Status = 2
	// [Time error] The command was received after its end time had already passed.
	NavigateToResponse_STATUS_EXPIRED NavigateToResponse_Status = 3
	// [Time error]The command end time was too far in the future.
	NavigateToResponse_STATUS_TOO_DISTANT NavigateToResponse_Status = 4
	// [Robot State Error] Cannot navigate a route if the robot has a critical
	//  perception fault, or behavior fault, or LIDAR not working.
	NavigateToResponse_STATUS_ROBOT_IMPAIRED NavigateToResponse_Status = 5
	// [Robot State Error] Cannot navigate a route while recording a map.
	NavigateToResponse_STATUS_RECORDING NavigateToResponse_Status = 6
	// [Route Error] One or more of the waypoints specified weren't in the map.
	NavigateToResponse_STATUS_UNKNOWN_WAYPOINT NavigateToResponse_Status = 7
	// [Route Error] There is no path to the specified waypoint.
	NavigateToResponse_STATUS_NO_PATH NavigateToResponse_Status = 8
	// [Route Error] Route contained too many waypoints with low-quality features.
	NavigateToResponse_STATUS_FEATURE_DESERT NavigateToResponse_Status = 10
	// [Route Error] Happens when you try to issue a navigate to while the robot is lost.
	NavigateToResponse_STATUS_LOST NavigateToResponse_Status = 11
	// [Route Error] Happens when the current localization doesn't refer to any waypoint in the map (possibly uninitialized localization).
	NavigateToResponse_STATUS_NOT_LOCALIZED_TO_MAP NavigateToResponse_Status = 13
	// [Wrestling error] Happens when graph nav refuses to follow the route you specified.
	NavigateToResponse_STATUS_COULD_NOT_UPDATE_ROUTE NavigateToResponse_Status = 12
	// [Route Error] Happens when you try to issue a navigate to while the robot is stuck. Navigate to a different
	// waypoint, or clear the route and try again.
	NavigateToResponse_STATUS_STUCK NavigateToResponse_Status = 14
	// [Request Error] Happens when you try to continue a command that was either expired, or had an unrecognized id.
	NavigateToResponse_STATUS_UNRECOGNIZED_COMMAND NavigateToResponse_Status = 15
)

// Enum value maps for NavigateToResponse_Status.
var (
	NavigateToResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_OK",
		2:  "STATUS_NO_TIMESYNC",
		3:  "STATUS_EXPIRED",
		4:  "STATUS_TOO_DISTANT",
		5:  "STATUS_ROBOT_IMPAIRED",
		6:  "STATUS_RECORDING",
		7:  "STATUS_UNKNOWN_WAYPOINT",
		8:  "STATUS_NO_PATH",
		10: "STATUS_FEATURE_DESERT",
		11: "STATUS_LOST",
		13: "STATUS_NOT_LOCALIZED_TO_MAP",
		12: "STATUS_COULD_NOT_UPDATE_ROUTE",
		14: "STATUS_STUCK",
		15: "STATUS_UNRECOGNIZED_COMMAND",
	}
	NavigateToResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                0,
		"STATUS_OK":                     1,
		"STATUS_NO_TIMESYNC":            2,
		"STATUS_EXPIRED":                3,
		"STATUS_TOO_DISTANT":            4,
		"STATUS_ROBOT_IMPAIRED":         5,
		"STATUS_RECORDING":              6,
		"STATUS_UNKNOWN_WAYPOINT":       7,
		"STATUS_NO_PATH":                8,
		"STATUS_FEATURE_DESERT":         10,
		"STATUS_LOST":                   11,
		"STATUS_NOT_LOCALIZED_TO_MAP":   13,
		"STATUS_COULD_NOT_UPDATE_ROUTE": 12,
		"STATUS_STUCK":                  14,
		"STATUS_UNRECOGNIZED_COMMAND":   15,
	}
)

func (x NavigateToResponse_Status) Enum() *NavigateToResponse_Status {
	p := new(NavigateToResponse_Status)
	*p = x
	return p
}

func (x NavigateToResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigateToResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[3].Descriptor()
}

func (NavigateToResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[3]
}

func (x NavigateToResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigateToResponse_Status.Descriptor instead.
func (NavigateToResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{6, 0}
}

// This setting applies when a new NavigateRoute command is issued (different route or
// final-waypoint-offset), and command_id indicates a new command.
type RouteFollowingParams_StartRouteBehavior int32

const (
	// The mode is unset.
	RouteFollowingParams_START_UNKNOWN RouteFollowingParams_StartRouteBehavior = 0
	// The robot will find the shortest path to the start of the route, possibly using
	// edges that are not in the route. After going to the start, the robot will follow the
	// route.
	RouteFollowingParams_START_GOTO_START RouteFollowingParams_StartRouteBehavior = 1
	// The robot will find the shortest path to any point on the route, and go to the point
	// that gives that shortest path. Then, the robot will follow the rest of the route from
	// that point.
	// If multiple points on the route are similarly close to the robot, the robot will
	// prefer the earliest on the route.
	// This is the default.
	RouteFollowingParams_START_GOTO_ROUTE RouteFollowingParams_StartRouteBehavior = 2
	// The robot will fail the command with status STATUS_NOT_LOCALIZED_TO_ROUTE.
	RouteFollowingParams_START_FAIL_WHEN_NOT_ON_ROUTE RouteFollowingParams_StartRouteBehavior = 3
)

// Enum value maps for RouteFollowingParams_StartRouteBehavior.
var (
	RouteFollowingParams_StartRouteBehavior_name = map[int32]string{
		0: "START_UNKNOWN",
		1: "START_GOTO_START",
		2: "START_GOTO_ROUTE",
		3: "START_FAIL_WHEN_NOT_ON_ROUTE",
	}
	RouteFollowingParams_StartRouteBehavior_value = map[string]int32{
		"START_UNKNOWN":                0,
		"START_GOTO_START":             1,
		"START_GOTO_ROUTE":             2,
		"START_FAIL_WHEN_NOT_ON_ROUTE": 3,
	}
)

func (x RouteFollowingParams_StartRouteBehavior) Enum() *RouteFollowingParams_StartRouteBehavior {
	p := new(RouteFollowingParams_StartRouteBehavior)
	*p = x
	return p
}

func (x RouteFollowingParams_StartRouteBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteFollowingParams_StartRouteBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[4].Descriptor()
}

func (RouteFollowingParams_StartRouteBehavior) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[4]
}

func (x RouteFollowingParams_StartRouteBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteFollowingParams_StartRouteBehavior.Descriptor instead.
func (RouteFollowingParams_StartRouteBehavior) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{7, 0}
}

// This setting applies when a NavigateRoute command is issued with the same route and
// final-waypoint-offset. It is not necessary that command_id indicate the same command.
// The expected waypoint is the last waypoint that GraphNav was autonomously navigating to.
type RouteFollowingParams_ResumeBehavior int32

const (
	// The mode is unset.
	RouteFollowingParams_RESUME_UNKNOWN RouteFollowingParams_ResumeBehavior = 0
	// The robot will find the shortest path to any point on the route after the
	// furthest-along traversed edge, and go to the point that gives that shortest path.
	// Then, the robot will follow the rest of the route from that point.
	// This is the default.
	RouteFollowingParams_RESUME_RETURN_TO_UNFINISHED_ROUTE RouteFollowingParams_ResumeBehavior = 1
	// The robot will fail the command with status STATUS_NOT_LOCALIZED_TO_ROUTE.
	RouteFollowingParams_RESUME_FAIL_WHEN_NOT_ON_ROUTE RouteFollowingParams_ResumeBehavior = 2
)

// Enum value maps for RouteFollowingParams_ResumeBehavior.
var (
	RouteFollowingParams_ResumeBehavior_name = map[int32]string{
		0: "RESUME_UNKNOWN",
		1: "RESUME_RETURN_TO_UNFINISHED_ROUTE",
		2: "RESUME_FAIL_WHEN_NOT_ON_ROUTE",
	}
	RouteFollowingParams_ResumeBehavior_value = map[string]int32{
		"RESUME_UNKNOWN":                    0,
		"RESUME_RETURN_TO_UNFINISHED_ROUTE": 1,
		"RESUME_FAIL_WHEN_NOT_ON_ROUTE":     2,
	}
)

func (x RouteFollowingParams_ResumeBehavior) Enum() *RouteFollowingParams_ResumeBehavior {
	p := new(RouteFollowingParams_ResumeBehavior)
	*p = x
	return p
}

func (x RouteFollowingParams_ResumeBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteFollowingParams_ResumeBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[5].Descriptor()
}

func (RouteFollowingParams_ResumeBehavior) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[5]
}

func (x RouteFollowingParams_ResumeBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteFollowingParams_ResumeBehavior.Descriptor instead.
func (RouteFollowingParams_ResumeBehavior) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{7, 1}
}

// This setting applies when the robot discovers that the route is blocked.
type RouteFollowingParams_RouteBlockedBehavior int32

const (
	// The mode is unset.
	RouteFollowingParams_ROUTE_BLOCKED_UNKNOWN RouteFollowingParams_RouteBlockedBehavior = 0
	// The robot will find the shortest path to any point after the furthest-along blockage,
	// and after the furthest-along traversed edge, and go to the point that gives that
	// shortest path. Then, the robot will follow the rest of the route from that point.
	// If multiple points on the route are similarly close to the robot, the robot will
	// prefer the earliest on the route.
	// This is the default.
	RouteFollowingParams_ROUTE_BLOCKED_REROUTE RouteFollowingParams_RouteBlockedBehavior = 1
	// The robot will fail the command with status STATUS_STUCK;
	RouteFollowingParams_ROUTE_BLOCKED_FAIL RouteFollowingParams_RouteBlockedBehavior = 2
)

// Enum value maps for RouteFollowingParams_RouteBlockedBehavior.
var (
	RouteFollowingParams_RouteBlockedBehavior_name = map[int32]string{
		0: "ROUTE_BLOCKED_UNKNOWN",
		1: "ROUTE_BLOCKED_REROUTE",
		2: "ROUTE_BLOCKED_FAIL",
	}
	RouteFollowingParams_RouteBlockedBehavior_value = map[string]int32{
		"ROUTE_BLOCKED_UNKNOWN": 0,
		"ROUTE_BLOCKED_REROUTE": 1,
		"ROUTE_BLOCKED_FAIL":    2,
	}
)

func (x RouteFollowingParams_RouteBlockedBehavior) Enum() *RouteFollowingParams_RouteBlockedBehavior {
	p := new(RouteFollowingParams_RouteBlockedBehavior)
	*p = x
	return p
}

func (x RouteFollowingParams_RouteBlockedBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RouteFollowingParams_RouteBlockedBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[6].Descriptor()
}

func (RouteFollowingParams_RouteBlockedBehavior) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[6]
}

func (x RouteFollowingParams_RouteBlockedBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RouteFollowingParams_RouteBlockedBehavior.Descriptor instead.
func (RouteFollowingParams_RouteBlockedBehavior) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{7, 2}
}

type NavigateRouteResponse_Status int32

const (
	// An unknown / unexpected error occurred.
	NavigateRouteResponse_STATUS_UNKNOWN NavigateRouteResponse_Status = 0
	// Request was accepted.
	NavigateRouteResponse_STATUS_OK NavigateRouteResponse_Status = 1
	// [Time Error] Client has not done timesync with robot.
	NavigateRouteResponse_STATUS_NO_TIMESYNC NavigateRouteResponse_Status = 2
	// [Time Error] The command was received after its end time had already passed.
	NavigateRouteResponse_STATUS_EXPIRED NavigateRouteResponse_Status = 3
	// [Time Error] The command end time was too far in the future.
	NavigateRouteResponse_STATUS_TOO_DISTANT NavigateRouteResponse_Status = 4
	// [Robot State Error] Cannot navigate a route if the robot has a crtical
	//  perception fault, or behavior fault, or LIDAR not working.
	NavigateRouteResponse_STATUS_ROBOT_IMPAIRED NavigateRouteResponse_Status = 5
	// [Robot State Error] Cannot navigate a route while recording a map.
	NavigateRouteResponse_STATUS_RECORDING NavigateRouteResponse_Status = 6
	// [Route Error] One or more waypoints/edges are not in the map.
	NavigateRouteResponse_STATUS_UNKNOWN_ROUTE_ELEMENTS NavigateRouteResponse_Status = 8
	// [Route Error] One or more edges do not connect to expected waypoints.
	NavigateRouteResponse_STATUS_INVALID_EDGE NavigateRouteResponse_Status = 9
	// [Route Error] There is no path to the specified route.
	NavigateRouteResponse_STATUS_NO_PATH NavigateRouteResponse_Status = 20
	// [Route Error] Route contained a constraint fault.
	NavigateRouteResponse_STATUS_CONSTRAINT_FAULT NavigateRouteResponse_Status = 11
	// [Route Error] Route contained too many waypoints with low-quality features.
	NavigateRouteResponse_STATUS_FEATURE_DESERT NavigateRouteResponse_Status = 13
	// [Route Error] Happens when you try to issue a navigate route while the robot is lost.
	NavigateRouteResponse_STATUS_LOST NavigateRouteResponse_Status = 14
	// [Route Error] Happens when the current localization doesn't refer to any waypoint
	// in the route (possibly uninitialized localization).
	NavigateRouteResponse_STATUS_NOT_LOCALIZED_TO_ROUTE NavigateRouteResponse_Status = 16
	// [Route Error] Happens when the current localization doesn't refer to any waypoint in the map (possibly uninitialized localization).
	NavigateRouteResponse_STATUS_NOT_LOCALIZED_TO_MAP NavigateRouteResponse_Status = 19
	// [Wrestling Errors] Happens when graph nav refuses to follow the route you specified.  Try saying please?
	NavigateRouteResponse_STATUS_COULD_NOT_UPDATE_ROUTE NavigateRouteResponse_Status = 15
	// [Route Error] Happens when you try to issue a navigate to while the robot is stuck. Navigate a different
	// route, or clear the route and try again.
	NavigateRouteResponse_STATUS_STUCK NavigateRouteResponse_Status = 17
	// [Request Error] Happens when you try to continue a command that was either expired, or had an unrecognized id.
	NavigateRouteResponse_STATUS_UNRECOGNIZED_COMMAND NavigateRouteResponse_Status = 18
)

// Enum value maps for NavigateRouteResponse_Status.
var (
	NavigateRouteResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_OK",
		2:  "STATUS_NO_TIMESYNC",
		3:  "STATUS_EXPIRED",
		4:  "STATUS_TOO_DISTANT",
		5:  "STATUS_ROBOT_IMPAIRED",
		6:  "STATUS_RECORDING",
		8:  "STATUS_UNKNOWN_ROUTE_ELEMENTS",
		9:  "STATUS_INVALID_EDGE",
		20: "STATUS_NO_PATH",
		11: "STATUS_CONSTRAINT_FAULT",
		13: "STATUS_FEATURE_DESERT",
		14: "STATUS_LOST",
		16: "STATUS_NOT_LOCALIZED_TO_ROUTE",
		19: "STATUS_NOT_LOCALIZED_TO_MAP",
		15: "STATUS_COULD_NOT_UPDATE_ROUTE",
		17: "STATUS_STUCK",
		18: "STATUS_UNRECOGNIZED_COMMAND",
	}
	NavigateRouteResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                0,
		"STATUS_OK":                     1,
		"STATUS_NO_TIMESYNC":            2,
		"STATUS_EXPIRED":                3,
		"STATUS_TOO_DISTANT":            4,
		"STATUS_ROBOT_IMPAIRED":         5,
		"STATUS_RECORDING":              6,
		"STATUS_UNKNOWN_ROUTE_ELEMENTS": 8,
		"STATUS_INVALID_EDGE":           9,
		"STATUS_NO_PATH":                20,
		"STATUS_CONSTRAINT_FAULT":       11,
		"STATUS_FEATURE_DESERT":         13,
		"STATUS_LOST":                   14,
		"STATUS_NOT_LOCALIZED_TO_ROUTE": 16,
		"STATUS_NOT_LOCALIZED_TO_MAP":   19,
		"STATUS_COULD_NOT_UPDATE_ROUTE": 15,
		"STATUS_STUCK":                  17,
		"STATUS_UNRECOGNIZED_COMMAND":   18,
	}
)

func (x NavigateRouteResponse_Status) Enum() *NavigateRouteResponse_Status {
	p := new(NavigateRouteResponse_Status)
	*p = x
	return p
}

func (x NavigateRouteResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigateRouteResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[7].Descriptor()
}

func (NavigateRouteResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[7]
}

func (x NavigateRouteResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigateRouteResponse_Status.Descriptor instead.
func (NavigateRouteResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{9, 0}
}

type NavigateToAnchorResponse_Status int32

const (
	// An unknown / unexpected error occurred.
	NavigateToAnchorResponse_STATUS_UNKNOWN NavigateToAnchorResponse_Status = 0
	// Request was accepted.
	NavigateToAnchorResponse_STATUS_OK NavigateToAnchorResponse_Status = 1
	// [Time error] Client has not done timesync with robot.
	NavigateToAnchorResponse_STATUS_NO_TIMESYNC NavigateToAnchorResponse_Status = 2
	// [Time error] The command was received after its end time had already passed.
	NavigateToAnchorResponse_STATUS_EXPIRED NavigateToAnchorResponse_Status = 3
	// [Time error]The command end time was too far in the future.
	NavigateToAnchorResponse_STATUS_TOO_DISTANT NavigateToAnchorResponse_Status = 4
	// [Robot State Error] Cannot navigate a route if the robot has a critical
	//  perception fault, or behavior fault, or LIDAR not working.
	NavigateToAnchorResponse_STATUS_ROBOT_IMPAIRED NavigateToAnchorResponse_Status = 5
	// [Robot State Error] Cannot navigate a route while recording a map.
	NavigateToAnchorResponse_STATUS_RECORDING NavigateToAnchorResponse_Status = 6
	// [Route Error] There is no anchoring.
	NavigateToAnchorResponse_STATUS_NO_ANCHORING NavigateToAnchorResponse_Status = 7
	// [Route Error] There is no path to a waypoint near the specified goal.
	//               If any waypoints were found (but no path), the error_waypoint_ids field
	//               will be filled.
	NavigateToAnchorResponse_STATUS_NO_PATH NavigateToAnchorResponse_Status = 8
	// [Route Error] Route contained too many waypoints with low-quality features.
	NavigateToAnchorResponse_STATUS_FEATURE_DESERT NavigateToAnchorResponse_Status = 10
	// [Route Error] Happens when you try to issue a navigate to while the robot is lost.
	NavigateToAnchorResponse_STATUS_LOST NavigateToAnchorResponse_Status = 11
	// [Route Error] Happens when the current localization doesn't refer to any waypoint in the map (possibly uninitialized localization).
	NavigateToAnchorResponse_STATUS_NOT_LOCALIZED_TO_MAP NavigateToAnchorResponse_Status = 13
	// [Wrestling error] Happens when graph nav refuses to follow the route you specified.
	NavigateToAnchorResponse_STATUS_COULD_NOT_UPDATE_ROUTE NavigateToAnchorResponse_Status = 12
	// [Route Error] Happens when you try to issue a navigate to while the robot is stuck. Navigate to a different
	// waypoint, or clear the route and try again.
	NavigateToAnchorResponse_STATUS_STUCK NavigateToAnchorResponse_Status = 14
	// [Request Error] Happens when you try to continue a command that was either expired, or had an unrecognized id.
	NavigateToAnchorResponse_STATUS_UNRECOGNIZED_COMMAND NavigateToAnchorResponse_Status = 15
	// [Route Error] The pose is invalid, or known to be unachievable (upside-down, etc).
	NavigateToAnchorResponse_STATUS_INVALID_POSE NavigateToAnchorResponse_Status = 16
)

// Enum value maps for NavigateToAnchorResponse_Status.
var (
	NavigateToAnchorResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_OK",
		2:  "STATUS_NO_TIMESYNC",
		3:  "STATUS_EXPIRED",
		4:  "STATUS_TOO_DISTANT",
		5:  "STATUS_ROBOT_IMPAIRED",
		6:  "STATUS_RECORDING",
		7:  "STATUS_NO_ANCHORING",
		8:  "STATUS_NO_PATH",
		10: "STATUS_FEATURE_DESERT",
		11: "STATUS_LOST",
		13: "STATUS_NOT_LOCALIZED_TO_MAP",
		12: "STATUS_COULD_NOT_UPDATE_ROUTE",
		14: "STATUS_STUCK",
		15: "STATUS_UNRECOGNIZED_COMMAND",
		16: "STATUS_INVALID_POSE",
	}
	NavigateToAnchorResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                0,
		"STATUS_OK":                     1,
		"STATUS_NO_TIMESYNC":            2,
		"STATUS_EXPIRED":                3,
		"STATUS_TOO_DISTANT":            4,
		"STATUS_ROBOT_IMPAIRED":         5,
		"STATUS_RECORDING":              6,
		"STATUS_NO_ANCHORING":           7,
		"STATUS_NO_PATH":                8,
		"STATUS_FEATURE_DESERT":         10,
		"STATUS_LOST":                   11,
		"STATUS_NOT_LOCALIZED_TO_MAP":   13,
		"STATUS_COULD_NOT_UPDATE_ROUTE": 12,
		"STATUS_STUCK":                  14,
		"STATUS_UNRECOGNIZED_COMMAND":   15,
		"STATUS_INVALID_POSE":           16,
	}
)

func (x NavigateToAnchorResponse_Status) Enum() *NavigateToAnchorResponse_Status {
	p := new(NavigateToAnchorResponse_Status)
	*p = x
	return p
}

func (x NavigateToAnchorResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigateToAnchorResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[8].Descriptor()
}

func (NavigateToAnchorResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[8]
}

func (x NavigateToAnchorResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigateToAnchorResponse_Status.Descriptor instead.
func (NavigateToAnchorResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{11, 0}
}

type NavigationFeedbackResponse_Status int32

const (
	// An unknown / unexpected error occurred.
	NavigationFeedbackResponse_STATUS_UNKNOWN NavigationFeedbackResponse_Status = 0
	// The robot is currently, successfully following the route.
	NavigationFeedbackResponse_STATUS_FOLLOWING_ROUTE NavigationFeedbackResponse_Status = 1
	// The robot has reached the final goal of the navigation request.
	NavigationFeedbackResponse_STATUS_REACHED_GOAL NavigationFeedbackResponse_Status = 2
	// There's no route currently being navigated.
	// This can happen if no command has been issued, or if the graph has been changed during
	// navigation.
	NavigationFeedbackResponse_STATUS_NO_ROUTE NavigationFeedbackResponse_Status = 3
	// Robot is not localized to a route.
	NavigationFeedbackResponse_STATUS_NO_LOCALIZATION NavigationFeedbackResponse_Status = 4
	// Robot appears to be lost.
	NavigationFeedbackResponse_STATUS_LOST NavigationFeedbackResponse_Status = 5
	// Robot appears stuck against an obstacle.
	NavigationFeedbackResponse_STATUS_STUCK NavigationFeedbackResponse_Status = 6
	// The command expired.
	NavigationFeedbackResponse_STATUS_COMMAND_TIMED_OUT NavigationFeedbackResponse_Status = 7
	// Cannot navigate a route if the robot has a crtical perception fault, or behavior fault,
	// or LIDAR not working. See impared_status for details.
	NavigationFeedbackResponse_STATUS_ROBOT_IMPAIRED NavigationFeedbackResponse_Status = 8
	// The route constraints were not feasible.
	NavigationFeedbackResponse_STATUS_CONSTRAINT_FAULT NavigationFeedbackResponse_Status = 11
	// The command was replaced by a new command
	NavigationFeedbackResponse_STATUS_COMMAND_OVERRIDDEN NavigationFeedbackResponse_Status = 12
	// The localization or route changed mid-traverse.
	NavigationFeedbackResponse_STATUS_NOT_LOCALIZED_TO_ROUTE NavigationFeedbackResponse_Status = 13
	// The lease is no longer valid.
	NavigationFeedbackResponse_STATUS_LEASE_ERROR NavigationFeedbackResponse_Status = 14
)

// Enum value maps for NavigationFeedbackResponse_Status.
var (
	NavigationFeedbackResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_FOLLOWING_ROUTE",
		2:  "STATUS_REACHED_GOAL",
		3:  "STATUS_NO_ROUTE",
		4:  "STATUS_NO_LOCALIZATION",
		5:  "STATUS_LOST",
		6:  "STATUS_STUCK",
		7:  "STATUS_COMMAND_TIMED_OUT",
		8:  "STATUS_ROBOT_IMPAIRED",
		11: "STATUS_CONSTRAINT_FAULT",
		12: "STATUS_COMMAND_OVERRIDDEN",
		13: "STATUS_NOT_LOCALIZED_TO_ROUTE",
		14: "STATUS_LEASE_ERROR",
	}
	NavigationFeedbackResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                0,
		"STATUS_FOLLOWING_ROUTE":        1,
		"STATUS_REACHED_GOAL":           2,
		"STATUS_NO_ROUTE":               3,
		"STATUS_NO_LOCALIZATION":        4,
		"STATUS_LOST":                   5,
		"STATUS_STUCK":                  6,
		"STATUS_COMMAND_TIMED_OUT":      7,
		"STATUS_ROBOT_IMPAIRED":         8,
		"STATUS_CONSTRAINT_FAULT":       11,
		"STATUS_COMMAND_OVERRIDDEN":     12,
		"STATUS_NOT_LOCALIZED_TO_ROUTE": 13,
		"STATUS_LEASE_ERROR":            14,
	}
)

func (x NavigationFeedbackResponse_Status) Enum() *NavigationFeedbackResponse_Status {
	p := new(NavigationFeedbackResponse_Status)
	*p = x
	return p
}

func (x NavigationFeedbackResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NavigationFeedbackResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[9].Descriptor()
}

func (NavigationFeedbackResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[9]
}

func (x NavigationFeedbackResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NavigationFeedbackResponse_Status.Descriptor instead.
func (NavigationFeedbackResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{13, 0}
}

type ClearGraphResponse_Status int32

const (
	ClearGraphResponse_STATUS_UNKNOWN ClearGraphResponse_Status = 0
	ClearGraphResponse_STATUS_OK      ClearGraphResponse_Status = 1
	// Graph Nav is currently recording a map. You must call
	// StopRecording from the recording service to continue.
	ClearGraphResponse_STATUS_RECORDING ClearGraphResponse_Status = 2
)

// Enum value maps for ClearGraphResponse_Status.
var (
	ClearGraphResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_RECORDING",
	}
	ClearGraphResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":   0,
		"STATUS_OK":        1,
		"STATUS_RECORDING": 2,
	}
)

func (x ClearGraphResponse_Status) Enum() *ClearGraphResponse_Status {
	p := new(ClearGraphResponse_Status)
	*p = x
	return p
}

func (x ClearGraphResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ClearGraphResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[10].Descriptor()
}

func (ClearGraphResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[10]
}

func (x ClearGraphResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ClearGraphResponse_Status.Descriptor instead.
func (ClearGraphResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{19, 0}
}

type UploadGraphResponse_Status int32

const (
	UploadGraphResponse_STATUS_UNKNOWN UploadGraphResponse_Status = 0
	UploadGraphResponse_STATUS_OK      UploadGraphResponse_Status = 1
	// Can't upload the graph because it was too large for the license.
	UploadGraphResponse_STATUS_MAP_TOO_LARGE_LICENSE UploadGraphResponse_Status = 3
	// The graph is invalid topologically, for example containing missing waypoints referenced by edges.
	UploadGraphResponse_STATUS_INVALID_GRAPH        UploadGraphResponse_Status = 4
	UploadGraphResponse_STATUS_INCOMPATIBLE_SENSORS UploadGraphResponse_Status = 5
)

// Enum value maps for UploadGraphResponse_Status.
var (
	UploadGraphResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		3: "STATUS_MAP_TOO_LARGE_LICENSE",
		4: "STATUS_INVALID_GRAPH",
		5: "STATUS_INCOMPATIBLE_SENSORS",
	}
	UploadGraphResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":               0,
		"STATUS_OK":                    1,
		"STATUS_MAP_TOO_LARGE_LICENSE": 3,
		"STATUS_INVALID_GRAPH":         4,
		"STATUS_INCOMPATIBLE_SENSORS":  5,
	}
)

func (x UploadGraphResponse_Status) Enum() *UploadGraphResponse_Status {
	p := new(UploadGraphResponse_Status)
	*p = x
	return p
}

func (x UploadGraphResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadGraphResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[11].Descriptor()
}

func (UploadGraphResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[11]
}

func (x UploadGraphResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadGraphResponse_Status.Descriptor instead.
func (UploadGraphResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{21, 0}
}

type UploadWaypointSnapshotResponse_Status int32

const (
	// Unset.
	UploadWaypointSnapshotResponse_STATUS_UNKNOWN UploadWaypointSnapshotResponse_Status = 0
	// Success.
	UploadWaypointSnapshotResponse_STATUS_OK UploadWaypointSnapshotResponse_Status = 1
	// The data in this waypoint snapshot is not compatible with the
	// current configuration of the robot. Check sensor_status for
	// more details.
	UploadWaypointSnapshotResponse_STATUS_INCOMPATIBLE_SENSORS UploadWaypointSnapshotResponse_Status = 2
)

// Enum value maps for UploadWaypointSnapshotResponse_Status.
var (
	UploadWaypointSnapshotResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INCOMPATIBLE_SENSORS",
	}
	UploadWaypointSnapshotResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":              0,
		"STATUS_OK":                   1,
		"STATUS_INCOMPATIBLE_SENSORS": 2,
	}
)

func (x UploadWaypointSnapshotResponse_Status) Enum() *UploadWaypointSnapshotResponse_Status {
	p := new(UploadWaypointSnapshotResponse_Status)
	*p = x
	return p
}

func (x UploadWaypointSnapshotResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UploadWaypointSnapshotResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[12].Descriptor()
}

func (UploadWaypointSnapshotResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[12]
}

func (x UploadWaypointSnapshotResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UploadWaypointSnapshotResponse_Status.Descriptor instead.
func (UploadWaypointSnapshotResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{25, 0}
}

type DownloadWaypointSnapshotResponse_Status int32

const (
	DownloadWaypointSnapshotResponse_STATUS_UNKNOWN DownloadWaypointSnapshotResponse_Status = 0
	DownloadWaypointSnapshotResponse_STATUS_OK      DownloadWaypointSnapshotResponse_Status = 1
	// Error where the given snapshot ID does not exist.
	DownloadWaypointSnapshotResponse_STATUS_SNAPSHOT_DOES_NOT_EXIST DownloadWaypointSnapshotResponse_Status = 2
)

// Enum value maps for DownloadWaypointSnapshotResponse_Status.
var (
	DownloadWaypointSnapshotResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_SNAPSHOT_DOES_NOT_EXIST",
	}
	DownloadWaypointSnapshotResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                 0,
		"STATUS_OK":                      1,
		"STATUS_SNAPSHOT_DOES_NOT_EXIST": 2,
	}
)

func (x DownloadWaypointSnapshotResponse_Status) Enum() *DownloadWaypointSnapshotResponse_Status {
	p := new(DownloadWaypointSnapshotResponse_Status)
	*p = x
	return p
}

func (x DownloadWaypointSnapshotResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadWaypointSnapshotResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[13].Descriptor()
}

func (DownloadWaypointSnapshotResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[13]
}

func (x DownloadWaypointSnapshotResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadWaypointSnapshotResponse_Status.Descriptor instead.
func (DownloadWaypointSnapshotResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{29, 0}
}

type DownloadEdgeSnapshotResponse_Status int32

const (
	DownloadEdgeSnapshotResponse_STATUS_UNKNOWN DownloadEdgeSnapshotResponse_Status = 0
	DownloadEdgeSnapshotResponse_STATUS_OK      DownloadEdgeSnapshotResponse_Status = 1
	// Error where the given snapshot ID does not exist.
	DownloadEdgeSnapshotResponse_STATUS_SNAPSHOT_DOES_NOT_EXIST DownloadEdgeSnapshotResponse_Status = 2
)

// Enum value maps for DownloadEdgeSnapshotResponse_Status.
var (
	DownloadEdgeSnapshotResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_SNAPSHOT_DOES_NOT_EXIST",
	}
	DownloadEdgeSnapshotResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                 0,
		"STATUS_OK":                      1,
		"STATUS_SNAPSHOT_DOES_NOT_EXIST": 2,
	}
)

func (x DownloadEdgeSnapshotResponse_Status) Enum() *DownloadEdgeSnapshotResponse_Status {
	p := new(DownloadEdgeSnapshotResponse_Status)
	*p = x
	return p
}

func (x DownloadEdgeSnapshotResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DownloadEdgeSnapshotResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[14].Descriptor()
}

func (DownloadEdgeSnapshotResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes[14]
}

func (x DownloadEdgeSnapshotResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DownloadEdgeSnapshotResponse_Status.Descriptor instead.
func (DownloadEdgeSnapshotResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{31, 0}
}

// The SetLocalization request is used to initialize or reset the localization of GraphNav
// to a map. A localization consists of a waypoint ID, and a pose of the robot relative to that waypoint.
// GraphNav uses the localization to decide how to navigate through a map.
// The SetLocalizationRequest contains parameters to help find a correct localization. For example,
// AprilTags (fiducials) may be used to set the localization, or the caller can provide an explicit
// guess of the localization.
// Once the SetLocalizationRequest completes, the current localization to the map
// will be modified, and can be retrieved using a GetLocalizationStateRequest.
type SetLocalizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Operator-supplied guess at localization.
	InitialGuess *Localization `protobuf:"bytes,3,opt,name=initial_guess,json=initialGuess,proto3" json:"initial_guess,omitempty"`
	// Robot pose when the initial_guess was made.
	// This overcomes the race that occurs when the client is trying to initialize a moving robot.
	// GraphNav will use its local ko_tform_body and this ko_tform_body to update the initial
	// localization guess, if necessary.
	KoTformBody *api.SE3Pose `protobuf:"bytes,4,opt,name=ko_tform_body,json=koTformBody,proto3" json:"ko_tform_body,omitempty"`
	// The max distance [meters] is how far away the robot is allowed to localize from the position supplied
	// in the initial guess. If not specified, the offset is used directly. Otherwise it searches a neighborhood
	// of the given size.
	MaxDistance float64 `protobuf:"fixed64,5,opt,name=max_distance,json=maxDistance,proto3" json:"max_distance,omitempty"`
	// The max yaw [radians] is how different the localized yaw is allowed to be from the supplied yaw
	// in the initial guess. If not specified, the offset is used directly. Otherwise it searches a neighborhood
	// of the given size.
	MaxYaw float64 `protobuf:"fixed64,6,opt,name=max_yaw,json=maxYaw,proto3" json:"max_yaw,omitempty"`
	// Tells the initializer whether to use fiducials, and how to use them.
	FiducialInit SetLocalizationRequest_FiducialInit `protobuf:"varint,7,opt,name=fiducial_init,json=fiducialInit,proto3,enum=bosdyn.api.graph_nav.SetLocalizationRequest_FiducialInit" json:"fiducial_init,omitempty"`
	// If using FIDUCIAL_INIT_SPECIFIC, this is the specific fiducial ID to use for initialization.
	// If no detection of this fiducial exists, the service will return STATUS_NO_MATCHING_FIDUCIAL.
	// If detections exist, but are low quality, STATUS_FIDUCIAL_TOO_FAR_AWAY, FIDUCIAL_TOO_OLD, or FIDUCIAL_POSE_UNCERTAIN will be returned.
	UseFiducialId int32 `protobuf:"varint,8,opt,name=use_fiducial_id,json=useFiducialId,proto3" json:"use_fiducial_id,omitempty"`
	// If true, and we are using fiducials during initialization, will run ICP after the fiducial
	// was used for an initial guess.
	RefineFiducialResultWithIcp bool `protobuf:"varint,9,opt,name=refine_fiducial_result_with_icp,json=refineFiducialResultWithIcp,proto3" json:"refine_fiducial_result_with_icp,omitempty"`
	// If true, consider how nearby localizations appear (like turned 180).
	DoAmbiguityCheck bool `protobuf:"varint,10,opt,name=do_ambiguity_check,json=doAmbiguityCheck,proto3" json:"do_ambiguity_check,omitempty"`
	// If using FIDUCIAL_INIT_SPECIFIC and this is true, the initializer will only consider
	// fiducial detections from the target waypoint (from initial_guess). Otherwise, if the
	// target waypoint does not contain a good measurement of the desired fiducial, nearby waypoints
	// may be used to infer the robot's location.
	RestrictFiducialDetectionsToTargetWaypoint bool `protobuf:"varint,11,opt,name=restrict_fiducial_detections_to_target_waypoint,json=restrictFiducialDetectionsToTargetWaypoint,proto3" json:"restrict_fiducial_detections_to_target_waypoint,omitempty"`
}

func (x *SetLocalizationRequest) Reset() {
	*x = SetLocalizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLocalizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLocalizationRequest) ProtoMessage() {}

func (x *SetLocalizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLocalizationRequest.ProtoReflect.Descriptor instead.
func (*SetLocalizationRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{0}
}

func (x *SetLocalizationRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetLocalizationRequest) GetInitialGuess() *Localization {
	if x != nil {
		return x.InitialGuess
	}
	return nil
}

func (x *SetLocalizationRequest) GetKoTformBody() *api.SE3Pose {
	if x != nil {
		return x.KoTformBody
	}
	return nil
}

func (x *SetLocalizationRequest) GetMaxDistance() float64 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *SetLocalizationRequest) GetMaxYaw() float64 {
	if x != nil {
		return x.MaxYaw
	}
	return 0
}

func (x *SetLocalizationRequest) GetFiducialInit() SetLocalizationRequest_FiducialInit {
	if x != nil {
		return x.FiducialInit
	}
	return SetLocalizationRequest_FIDUCIAL_INIT_UNKNOWN
}

func (x *SetLocalizationRequest) GetUseFiducialId() int32 {
	if x != nil {
		return x.UseFiducialId
	}
	return 0
}

func (x *SetLocalizationRequest) GetRefineFiducialResultWithIcp() bool {
	if x != nil {
		return x.RefineFiducialResultWithIcp
	}
	return false
}

func (x *SetLocalizationRequest) GetDoAmbiguityCheck() bool {
	if x != nil {
		return x.DoAmbiguityCheck
	}
	return false
}

func (x *SetLocalizationRequest) GetRestrictFiducialDetectionsToTargetWaypoint() bool {
	if x != nil {
		return x.RestrictFiducialDetectionsToTargetWaypoint
	}
	return false
}

// Info on whether the robot's current sensor setup is compatible with the recorded data
// in the map.
type SensorCompatibilityStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If true, the loaded map has LIDAR data in it.
	MapHasLidarData bool `protobuf:"varint,1,opt,name=map_has_lidar_data,json=mapHasLidarData,proto3" json:"map_has_lidar_data,omitempty"`
	// If true, the robot is currently configured to use LIDAR data.
	RobotConfiguredForLidar bool `protobuf:"varint,2,opt,name=robot_configured_for_lidar,json=robotConfiguredForLidar,proto3" json:"robot_configured_for_lidar,omitempty"`
}

func (x *SensorCompatibilityStatus) Reset() {
	*x = SensorCompatibilityStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SensorCompatibilityStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SensorCompatibilityStatus) ProtoMessage() {}

func (x *SensorCompatibilityStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SensorCompatibilityStatus.ProtoReflect.Descriptor instead.
func (*SensorCompatibilityStatus) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{1}
}

func (x *SensorCompatibilityStatus) GetMapHasLidarData() bool {
	if x != nil {
		return x.MapHasLidarData
	}
	return false
}

func (x *SensorCompatibilityStatus) GetRobotConfiguredForLidar() bool {
	if x != nil {
		return x.RobotConfiguredForLidar
	}
	return false
}

// The SetLocalization response message contains the resulting localization to the map.
type SetLocalizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Result of using the lease.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Return status for the request.
	Status SetLocalizationResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.graph_nav.SetLocalizationResponse_Status" json:"status,omitempty"`
	// If set, describes the reason the status is not OK.
	ErrorReport string `protobuf:"bytes,4,opt,name=error_report,json=errorReport,proto3" json:"error_report,omitempty"`
	// Result of localization.
	Localization *Localization `protobuf:"bytes,5,opt,name=localization,proto3" json:"localization,omitempty"`
	// Alternative information if the localization is ambiguous.
	SuspectedAmbiguity *SetLocalizationResponse_SuspectedAmbiguity `protobuf:"bytes,7,opt,name=suspected_ambiguity,json=suspectedAmbiguity,proto3" json:"suspected_ambiguity,omitempty"`
	// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
	ImpairedState *api.RobotImpairedState `protobuf:"bytes,8,opt,name=impaired_state,json=impairedState,proto3" json:"impaired_state,omitempty"`
	// This status determines whether the robot has compatible sensors for the
	// map that was recorded. Note that if sensors aren't working, STATUS_IMPARIED
	// will be returned, rather than STATUS_INCOMPATIBLE_SENSORS.
	SensorStatus *SensorCompatibilityStatus `protobuf:"bytes,9,opt,name=sensor_status,json=sensorStatus,proto3" json:"sensor_status,omitempty"`
}

func (x *SetLocalizationResponse) Reset() {
	*x = SetLocalizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLocalizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLocalizationResponse) ProtoMessage() {}

func (x *SetLocalizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLocalizationResponse.ProtoReflect.Descriptor instead.
func (*SetLocalizationResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{2}
}

func (x *SetLocalizationResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SetLocalizationResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *SetLocalizationResponse) GetStatus() SetLocalizationResponse_Status {
	if x != nil {
		return x.Status
	}
	return SetLocalizationResponse_STATUS_UNKNOWN
}

func (x *SetLocalizationResponse) GetErrorReport() string {
	if x != nil {
		return x.ErrorReport
	}
	return ""
}

func (x *SetLocalizationResponse) GetLocalization() *Localization {
	if x != nil {
		return x.Localization
	}
	return nil
}

func (x *SetLocalizationResponse) GetSuspectedAmbiguity() *SetLocalizationResponse_SuspectedAmbiguity {
	if x != nil {
		return x.SuspectedAmbiguity
	}
	return nil
}

func (x *SetLocalizationResponse) GetImpairedState() *api.RobotImpairedState {
	if x != nil {
		return x.ImpairedState
	}
	return nil
}

func (x *SetLocalizationResponse) GetSensorStatus() *SensorCompatibilityStatus {
	if x != nil {
		return x.SensorStatus
	}
	return nil
}

type RouteGenParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RouteGenParams) Reset() {
	*x = RouteGenParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteGenParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteGenParams) ProtoMessage() {}

func (x *RouteGenParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteGenParams.ProtoReflect.Descriptor instead.
func (*RouteGenParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{3}
}

// Parameters describing how to travel along a route.
type TravelParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Threshold for the maximum distance [meters] that defines when we have reached
	// the final waypoint.
	MaxDistance float64 `protobuf:"fixed64,1,opt,name=max_distance,json=maxDistance,proto3" json:"max_distance,omitempty"`
	// Threshold for the maximum yaw [radians] that defines when we have reached
	// the final waypoint (ignored if ignore_final_yaw is set to true).
	MaxYaw float64 `protobuf:"fixed64,2,opt,name=max_yaw,json=maxYaw,proto3" json:"max_yaw,omitempty"`
	// Speed the robot should use.
	// Omit to let the robot choose.
	VelocityLimit *api.SE2VelocityLimit `protobuf:"bytes,3,opt,name=velocity_limit,json=velocityLimit,proto3" json:"velocity_limit,omitempty"`
	// If true, the robot will only try to achieve
	// the final translation of the route. Otherwise,
	// it will attempt to achieve the yaw as well.
	IgnoreFinalYaw          bool                                 `protobuf:"varint,4,opt,name=ignore_final_yaw,json=ignoreFinalYaw,proto3" json:"ignore_final_yaw,omitempty"`
	FeatureQualityTolerance TravelParams_FeatureQualityTolerance `protobuf:"varint,5,opt,name=feature_quality_tolerance,json=featureQualityTolerance,proto3,enum=bosdyn.api.graph_nav.TravelParams_FeatureQualityTolerance" json:"feature_quality_tolerance,omitempty"`
	// Disable directed exploration to skip blocked portions of route
	DisableDirectedExploration bool `protobuf:"varint,6,opt,name=disable_directed_exploration,json=disableDirectedExploration,proto3" json:"disable_directed_exploration,omitempty"`
	// Disable alternate-route-finding; overrides the per-edge setting in the map.
	DisableAlternateRouteFinding bool `protobuf:"varint,8,opt,name=disable_alternate_route_finding,json=disableAlternateRouteFinding,proto3" json:"disable_alternate_route_finding,omitempty"`
}

func (x *TravelParams) Reset() {
	*x = TravelParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TravelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TravelParams) ProtoMessage() {}

func (x *TravelParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TravelParams.ProtoReflect.Descriptor instead.
func (*TravelParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{4}
}

func (x *TravelParams) GetMaxDistance() float64 {
	if x != nil {
		return x.MaxDistance
	}
	return 0
}

func (x *TravelParams) GetMaxYaw() float64 {
	if x != nil {
		return x.MaxYaw
	}
	return 0
}

func (x *TravelParams) GetVelocityLimit() *api.SE2VelocityLimit {
	if x != nil {
		return x.VelocityLimit
	}
	return nil
}

func (x *TravelParams) GetIgnoreFinalYaw() bool {
	if x != nil {
		return x.IgnoreFinalYaw
	}
	return false
}

func (x *TravelParams) GetFeatureQualityTolerance() TravelParams_FeatureQualityTolerance {
	if x != nil {
		return x.FeatureQualityTolerance
	}
	return TravelParams_TOLERANCE_UNKNOWN
}

func (x *TravelParams) GetDisableDirectedExploration() bool {
	if x != nil {
		return x.DisableDirectedExploration
	}
	return false
}

func (x *TravelParams) GetDisableAlternateRouteFinding() bool {
	if x != nil {
		return x.DisableAlternateRouteFinding
	}
	return false
}

// The NavigateToRequest can be used to command GraphNav to drive the robot to a specific waypoint.
// GraphNav will plan a path through the map which most efficiently gets the robot to the specified goal waypoint.
// Parameters are provided which influence how GraphNav will generate and follow the path.
// This RPC returns immediately after the request is processed. It does not block until GraphNav completes the path
// to the goal waypoint. The user is expected to periodically check the status of the NavigateTo command using
// the NavigationFeedbackRequest RPC.
type NavigateToRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Leases to show ownership of the robot and the graph.
	Leases []*api.Lease `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
	// ID of the waypoint to go to.
	DestinationWaypointId string `protobuf:"bytes,3,opt,name=destination_waypoint_id,json=destinationWaypointId,proto3" json:"destination_waypoint_id,omitempty"`
	// Preferences on how to pick the route.
	RouteParams *RouteGenParams `protobuf:"bytes,4,opt,name=route_params,json=routeParams,proto3" json:"route_params,omitempty"`
	// Parameters that define how to traverse and end the route.
	TravelParams *TravelParams `protobuf:"bytes,5,opt,name=travel_params,json=travelParams,proto3" json:"travel_params,omitempty"`
	// The timestamp (in robot time) that the navigation command is valid until.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Identifier provided by the time sync service to verify time sync between robot and client.
	ClockIdentifier string `protobuf:"bytes,7,opt,name=clock_identifier,json=clockIdentifier,proto3" json:"clock_identifier,omitempty"`
	// If provided, graph_nav will move the robot to an SE2 pose relative to the waypoint.
	// Note that the robot will treat this as a simple goto request. It will first arrive at the
	// destination waypoint, and then travel in a straight line from the destination waypoint to the
	// offset goal, attempting to avoid obstacles along the way.
	DestinationWaypointTformBodyGoal *api.SE2Pose `protobuf:"bytes,8,opt,name=destination_waypoint_tform_body_goal,json=destinationWaypointTformBodyGoal,proto3" json:"destination_waypoint_tform_body_goal,omitempty"`
	// Unique identifier for the command. If 0, this is a new command, otherwise it is a continuation
	// of an existing command. If this is a continuation of an existing command, all parameters will be
	// ignored, and the old parameters will be preserved.
	CommandId uint32 `protobuf:"varint,9,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
}

func (x *NavigateToRequest) Reset() {
	*x = NavigateToRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateToRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateToRequest) ProtoMessage() {}

func (x *NavigateToRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateToRequest.ProtoReflect.Descriptor instead.
func (*NavigateToRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{5}
}

func (x *NavigateToRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigateToRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *NavigateToRequest) GetDestinationWaypointId() string {
	if x != nil {
		return x.DestinationWaypointId
	}
	return ""
}

func (x *NavigateToRequest) GetRouteParams() *RouteGenParams {
	if x != nil {
		return x.RouteParams
	}
	return nil
}

func (x *NavigateToRequest) GetTravelParams() *TravelParams {
	if x != nil {
		return x.TravelParams
	}
	return nil
}

func (x *NavigateToRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NavigateToRequest) GetClockIdentifier() string {
	if x != nil {
		return x.ClockIdentifier
	}
	return ""
}

func (x *NavigateToRequest) GetDestinationWaypointTformBodyGoal() *api.SE2Pose {
	if x != nil {
		return x.DestinationWaypointTformBodyGoal
	}
	return nil
}

func (x *NavigateToRequest) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

// Response to a NavigateToRequest. This is returned immediately after the request is processed. A command_id
// is provided to specify the ID that the user may use to poll the system for feedback on the NavigateTo command.
type NavigateToResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Results of using the various leases.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,2,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
	// Return status for the request.
	Status NavigateToResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.graph_nav.NavigateToResponse_Status" json:"status,omitempty"`
	// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
	ImpairedState *api.RobotImpairedState `protobuf:"bytes,6,opt,name=impaired_state,json=impairedState,proto3" json:"impaired_state,omitempty"`
	// Unique identifier for the command, If 0, command was not accepted.
	CommandId uint32 `protobuf:"varint,4,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// On a relevant error status code, these fields contain the waypoint/edge IDs that caused the error.
	ErrorWaypointIds []string `protobuf:"bytes,5,rep,name=error_waypoint_ids,json=errorWaypointIds,proto3" json:"error_waypoint_ids,omitempty"`
}

func (x *NavigateToResponse) Reset() {
	*x = NavigateToResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateToResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateToResponse) ProtoMessage() {}

func (x *NavigateToResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateToResponse.ProtoReflect.Descriptor instead.
func (*NavigateToResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{6}
}

func (x *NavigateToResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigateToResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

func (x *NavigateToResponse) GetStatus() NavigateToResponse_Status {
	if x != nil {
		return x.Status
	}
	return NavigateToResponse_STATUS_UNKNOWN
}

func (x *NavigateToResponse) GetImpairedState() *api.RobotImpairedState {
	if x != nil {
		return x.ImpairedState
	}
	return nil
}

func (x *NavigateToResponse) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *NavigateToResponse) GetErrorWaypointIds() []string {
	if x != nil {
		return x.ErrorWaypointIds
	}
	return nil
}

// These parameters are specific to how the robot follows a specified route in NavigateRoute.
type RouteFollowingParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewCmdBehavior       RouteFollowingParams_StartRouteBehavior   `protobuf:"varint,1,opt,name=new_cmd_behavior,json=newCmdBehavior,proto3,enum=bosdyn.api.graph_nav.RouteFollowingParams_StartRouteBehavior" json:"new_cmd_behavior,omitempty"`
	ExistingCmdBehavior  RouteFollowingParams_ResumeBehavior       `protobuf:"varint,2,opt,name=existing_cmd_behavior,json=existingCmdBehavior,proto3,enum=bosdyn.api.graph_nav.RouteFollowingParams_ResumeBehavior" json:"existing_cmd_behavior,omitempty"`
	RouteBlockedBehavior RouteFollowingParams_RouteBlockedBehavior `protobuf:"varint,3,opt,name=route_blocked_behavior,json=routeBlockedBehavior,proto3,enum=bosdyn.api.graph_nav.RouteFollowingParams_RouteBlockedBehavior" json:"route_blocked_behavior,omitempty"`
}

func (x *RouteFollowingParams) Reset() {
	*x = RouteFollowingParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteFollowingParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteFollowingParams) ProtoMessage() {}

func (x *RouteFollowingParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteFollowingParams.ProtoReflect.Descriptor instead.
func (*RouteFollowingParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{7}
}

func (x *RouteFollowingParams) GetNewCmdBehavior() RouteFollowingParams_StartRouteBehavior {
	if x != nil {
		return x.NewCmdBehavior
	}
	return RouteFollowingParams_START_UNKNOWN
}

func (x *RouteFollowingParams) GetExistingCmdBehavior() RouteFollowingParams_ResumeBehavior {
	if x != nil {
		return x.ExistingCmdBehavior
	}
	return RouteFollowingParams_RESUME_UNKNOWN
}

func (x *RouteFollowingParams) GetRouteBlockedBehavior() RouteFollowingParams_RouteBlockedBehavior {
	if x != nil {
		return x.RouteBlockedBehavior
	}
	return RouteFollowingParams_ROUTE_BLOCKED_UNKNOWN
}

// A NavigateRoute request message specifies a route of waypoints/edges and parameters
// about how to get there. Like NavigateTo, this command returns immediately upon
// processing and provides a command_id that the user can use along with a NavigationFeedbackRequest RPC to
// poll the system for feedback on this command. The RPC does not block until the route is completed.
type NavigateRouteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot.
	Leases []*api.Lease `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
	// A route for the robot to follow.
	Route *Route `protobuf:"bytes,3,opt,name=route,proto3" json:"route,omitempty"`
	// What should the robot do if it is not at the expected point in the route, or the route is
	// blocked.
	RouteFollowParams *RouteFollowingParams `protobuf:"bytes,9,opt,name=route_follow_params,json=routeFollowParams,proto3" json:"route_follow_params,omitempty"`
	// How to travel the route.
	TravelParams *TravelParams `protobuf:"bytes,4,opt,name=travel_params,json=travelParams,proto3" json:"travel_params,omitempty"`
	// The timestamp (in robot time) that the navigation command is valid until.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Identifier provided by the time sync service to verify time sync between robot and client.
	ClockIdentifier string `protobuf:"bytes,6,opt,name=clock_identifier,json=clockIdentifier,proto3" json:"clock_identifier,omitempty"`
	// If provided, graph_nav will move the robot to an SE2 pose relative to the final waypoint
	// in the route.
	// Note that the robot will treat this as a simple goto request. It will first arrive at the
	// destination waypoint, and then travel in a straight line from the destination waypoint to the
	// offset goal, attempting to avoid obstacles along the way.
	DestinationWaypointTformBodyGoal *api.SE2Pose `protobuf:"bytes,7,opt,name=destination_waypoint_tform_body_goal,json=destinationWaypointTformBodyGoal,proto3" json:"destination_waypoint_tform_body_goal,omitempty"`
	// Unique identifier for the command. If 0, this is a new command, otherwise it is a continuation
	// of an existing command.
	CommandId uint32 `protobuf:"varint,8,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
}

func (x *NavigateRouteRequest) Reset() {
	*x = NavigateRouteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateRouteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateRouteRequest) ProtoMessage() {}

func (x *NavigateRouteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateRouteRequest.ProtoReflect.Descriptor instead.
func (*NavigateRouteRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{8}
}

func (x *NavigateRouteRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigateRouteRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *NavigateRouteRequest) GetRoute() *Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *NavigateRouteRequest) GetRouteFollowParams() *RouteFollowingParams {
	if x != nil {
		return x.RouteFollowParams
	}
	return nil
}

func (x *NavigateRouteRequest) GetTravelParams() *TravelParams {
	if x != nil {
		return x.TravelParams
	}
	return nil
}

func (x *NavigateRouteRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NavigateRouteRequest) GetClockIdentifier() string {
	if x != nil {
		return x.ClockIdentifier
	}
	return ""
}

func (x *NavigateRouteRequest) GetDestinationWaypointTformBodyGoal() *api.SE2Pose {
	if x != nil {
		return x.DestinationWaypointTformBodyGoal
	}
	return nil
}

func (x *NavigateRouteRequest) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

// Response to a NavigateRouteRequest. This is returned immediately after the request is processed. A command_id
// is provided to specify the ID that the user may use to poll the system for feedback on the NavigateRoute command.
type NavigateRouteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,2,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
	// Return status for the request.
	Status NavigateRouteResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.graph_nav.NavigateRouteResponse_Status" json:"status,omitempty"`
	// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
	ImpairedState *api.RobotImpairedState `protobuf:"bytes,7,opt,name=impaired_state,json=impairedState,proto3" json:"impaired_state,omitempty"`
	// Unique identifier for the command, If 0, command was not accepted.
	CommandId uint32 `protobuf:"varint,4,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// On a relevant error status code, these fields contain the waypoint/edge IDs that caused the error.
	ErrorWaypointIds []string `protobuf:"bytes,5,rep,name=error_waypoint_ids,json=errorWaypointIds,proto3" json:"error_waypoint_ids,omitempty"`
	// On a relevant error status code (STATUS_INVALID_EDGE), this is populated with the edge ID's that cased the error.
	ErrorEdgeIds []*Edge_Id `protobuf:"bytes,6,rep,name=error_edge_ids,json=errorEdgeIds,proto3" json:"error_edge_ids,omitempty"`
}

func (x *NavigateRouteResponse) Reset() {
	*x = NavigateRouteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateRouteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateRouteResponse) ProtoMessage() {}

func (x *NavigateRouteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateRouteResponse.ProtoReflect.Descriptor instead.
func (*NavigateRouteResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{9}
}

func (x *NavigateRouteResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigateRouteResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

func (x *NavigateRouteResponse) GetStatus() NavigateRouteResponse_Status {
	if x != nil {
		return x.Status
	}
	return NavigateRouteResponse_STATUS_UNKNOWN
}

func (x *NavigateRouteResponse) GetImpairedState() *api.RobotImpairedState {
	if x != nil {
		return x.ImpairedState
	}
	return nil
}

func (x *NavigateRouteResponse) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *NavigateRouteResponse) GetErrorWaypointIds() []string {
	if x != nil {
		return x.ErrorWaypointIds
	}
	return nil
}

func (x *NavigateRouteResponse) GetErrorEdgeIds() []*Edge_Id {
	if x != nil {
		return x.ErrorEdgeIds
	}
	return nil
}

// The NavigateToAnchorRequest can be used to command GraphNav to drive the robot to a specific
// place in an anchoring. GraphNav will find the waypoint that has the shortest path length from
// robot's current position but is still close to the goal. GraphNav will plan a path through the
// map which most efficiently gets the robot to the goal waypoint, and will then travel
// in a straight line from the destination waypoint to the offset goal, attempting to avoid
// obstacles along the way.
// Parameters are provided which influence how GraphNav will generate and follow the path.
// This RPC returns immediately after the request is processed. It does not block until GraphNav
// completes the path to the goal waypoint. The user is expected to periodically check the status
// of the NavigateToAnchor command using the NavigationFeedbackRequest RPC.
type NavigateToAnchorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Leases to show ownership of the robot and the graph.
	Leases []*api.Lease `protobuf:"bytes,2,rep,name=leases,proto3" json:"leases,omitempty"`
	// The goal, expressed with respect to the seed frame of the current anchoring.
	// The robot will use the z value to find the goal waypoint, but the final z height the robot
	// achieves will depend on the terrain height at the offset from the goal.
	SeedTformGoal *api.SE3Pose `protobuf:"bytes,3,opt,name=seed_tform_goal,json=seedTformGoal,proto3" json:"seed_tform_goal,omitempty"`
	// These parameters control selection of the goal waypoint. In seed frame, they are the x, y,
	// and z tolerances with respect to the goal pose within which waypoints will be considered.
	// If these values are negative, or too small, reasonable defaults will be used.
	GoalWaypointRtSeedEwrtSeedTolerance *api.Vec3 `protobuf:"bytes,4,opt,name=goal_waypoint_rt_seed_ewrt_seed_tolerance,json=goalWaypointRtSeedEwrtSeedTolerance,proto3" json:"goal_waypoint_rt_seed_ewrt_seed_tolerance,omitempty"`
	// Preferences on how to pick the route.
	RouteParams *RouteGenParams `protobuf:"bytes,6,opt,name=route_params,json=routeParams,proto3" json:"route_params,omitempty"`
	// Parameters that define how to traverse and end the route.
	TravelParams *TravelParams `protobuf:"bytes,7,opt,name=travel_params,json=travelParams,proto3" json:"travel_params,omitempty"`
	// The timestamp (in robot time) that the navigation command is valid until.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// Identifier provided by the time sync service to verify time sync between robot and client.
	ClockIdentifier string `protobuf:"bytes,9,opt,name=clock_identifier,json=clockIdentifier,proto3" json:"clock_identifier,omitempty"`
	// Unique identifier for the command. If 0, this is a new command, otherwise it is a continuation
	// of an existing command. If this is a continuation of an existing command, all parameters will be
	// ignored, and the old parameters will be preserved.
	CommandId uint32 `protobuf:"varint,10,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
}

func (x *NavigateToAnchorRequest) Reset() {
	*x = NavigateToAnchorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateToAnchorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateToAnchorRequest) ProtoMessage() {}

func (x *NavigateToAnchorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateToAnchorRequest.ProtoReflect.Descriptor instead.
func (*NavigateToAnchorRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{10}
}

func (x *NavigateToAnchorRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigateToAnchorRequest) GetLeases() []*api.Lease {
	if x != nil {
		return x.Leases
	}
	return nil
}

func (x *NavigateToAnchorRequest) GetSeedTformGoal() *api.SE3Pose {
	if x != nil {
		return x.SeedTformGoal
	}
	return nil
}

func (x *NavigateToAnchorRequest) GetGoalWaypointRtSeedEwrtSeedTolerance() *api.Vec3 {
	if x != nil {
		return x.GoalWaypointRtSeedEwrtSeedTolerance
	}
	return nil
}

func (x *NavigateToAnchorRequest) GetRouteParams() *RouteGenParams {
	if x != nil {
		return x.RouteParams
	}
	return nil
}

func (x *NavigateToAnchorRequest) GetTravelParams() *TravelParams {
	if x != nil {
		return x.TravelParams
	}
	return nil
}

func (x *NavigateToAnchorRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *NavigateToAnchorRequest) GetClockIdentifier() string {
	if x != nil {
		return x.ClockIdentifier
	}
	return ""
}

func (x *NavigateToAnchorRequest) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

// Response to a NavigateToAnchorRequest. This is returned immediately after the request is
// processed. A command_id is provided to specify the ID that the user may use to poll the system
// for feedback on the NavigateTo command.
type NavigateToAnchorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Results of using the various leases.
	LeaseUseResults []*api.LeaseUseResult `protobuf:"bytes,2,rep,name=lease_use_results,json=leaseUseResults,proto3" json:"lease_use_results,omitempty"`
	// Return status for the request.
	Status NavigateToAnchorResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.graph_nav.NavigateToAnchorResponse_Status" json:"status,omitempty"`
	// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
	ImpairedState *api.RobotImpairedState `protobuf:"bytes,6,opt,name=impaired_state,json=impairedState,proto3" json:"impaired_state,omitempty"`
	// Unique identifier for the command, If 0, command was not accepted.
	CommandId uint32 `protobuf:"varint,4,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// On a relevant error status code, these fields contain the waypoint/edge IDs that caused the error.
	ErrorWaypointIds []string `protobuf:"bytes,5,rep,name=error_waypoint_ids,json=errorWaypointIds,proto3" json:"error_waypoint_ids,omitempty"`
}

func (x *NavigateToAnchorResponse) Reset() {
	*x = NavigateToAnchorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigateToAnchorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigateToAnchorResponse) ProtoMessage() {}

func (x *NavigateToAnchorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigateToAnchorResponse.ProtoReflect.Descriptor instead.
func (*NavigateToAnchorResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{11}
}

func (x *NavigateToAnchorResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigateToAnchorResponse) GetLeaseUseResults() []*api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResults
	}
	return nil
}

func (x *NavigateToAnchorResponse) GetStatus() NavigateToAnchorResponse_Status {
	if x != nil {
		return x.Status
	}
	return NavigateToAnchorResponse_STATUS_UNKNOWN
}

func (x *NavigateToAnchorResponse) GetImpairedState() *api.RobotImpairedState {
	if x != nil {
		return x.ImpairedState
	}
	return nil
}

func (x *NavigateToAnchorResponse) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *NavigateToAnchorResponse) GetErrorWaypointIds() []string {
	if x != nil {
		return x.ErrorWaypointIds
	}
	return nil
}

// The NavigationFeedback request message uses the command_id of a navigation request to get
// the robot's progress and current status for the command. Note that all commands return immediately
// after they are processed, and the robot will continue to execute the command asynchronously until
// it times out or completes. New commands override old ones.
type NavigationFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier for the command, provided by nav command response.
	// Omit to get feedback on currently executing command.
	CommandId uint32 `protobuf:"varint,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
}

func (x *NavigationFeedbackRequest) Reset() {
	*x = NavigationFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationFeedbackRequest) ProtoMessage() {}

func (x *NavigationFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationFeedbackRequest.ProtoReflect.Descriptor instead.
func (*NavigationFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{12}
}

func (x *NavigationFeedbackRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigationFeedbackRequest) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

// The NavigationFeedback response message returns the robot's
// progress and current status for the command.
type NavigationFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status NavigationFeedbackResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.graph_nav.NavigationFeedbackResponse_Status" json:"status,omitempty"`
	// If the status is ROBOT_IMPAIRED, this is why the robot is impaired.
	ImpairedState *api.RobotImpairedState `protobuf:"bytes,6,opt,name=impaired_state,json=impairedState,proto3" json:"impaired_state,omitempty"`
	// Remaining part of current route.
	RemainingRoute *Route `protobuf:"bytes,3,opt,name=remaining_route,json=remainingRoute,proto3" json:"remaining_route,omitempty"`
	// ID of the command this feedback corresponds to.
	CommandId uint32 `protobuf:"varint,4,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// The most recent transform describing the robot's pose relative to the navigation goal.
	LastKoTformGoal *api.SE3Pose `protobuf:"bytes,5,opt,name=last_ko_tform_goal,json=lastKoTformGoal,proto3" json:"last_ko_tform_goal,omitempty"`
	// Indicates whether the robot's body is currently in motion.
	BodyMovementStatus api.SE2TrajectoryCommand_Feedback_BodyMovementStatus `protobuf:"varint,7,opt,name=body_movement_status,json=bodyMovementStatus,proto3,enum=bosdyn.api.SE2TrajectoryCommand_Feedback_BodyMovementStatus" json:"body_movement_status,omitempty"`
}

func (x *NavigationFeedbackResponse) Reset() {
	*x = NavigationFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NavigationFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NavigationFeedbackResponse) ProtoMessage() {}

func (x *NavigationFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NavigationFeedbackResponse.ProtoReflect.Descriptor instead.
func (*NavigationFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{13}
}

func (x *NavigationFeedbackResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *NavigationFeedbackResponse) GetStatus() NavigationFeedbackResponse_Status {
	if x != nil {
		return x.Status
	}
	return NavigationFeedbackResponse_STATUS_UNKNOWN
}

func (x *NavigationFeedbackResponse) GetImpairedState() *api.RobotImpairedState {
	if x != nil {
		return x.ImpairedState
	}
	return nil
}

func (x *NavigationFeedbackResponse) GetRemainingRoute() *Route {
	if x != nil {
		return x.RemainingRoute
	}
	return nil
}

func (x *NavigationFeedbackResponse) GetCommandId() uint32 {
	if x != nil {
		return x.CommandId
	}
	return 0
}

func (x *NavigationFeedbackResponse) GetLastKoTformGoal() *api.SE3Pose {
	if x != nil {
		return x.LastKoTformGoal
	}
	return nil
}

func (x *NavigationFeedbackResponse) GetBodyMovementStatus() api.SE2TrajectoryCommand_Feedback_BodyMovementStatus {
	if x != nil {
		return x.BodyMovementStatus
	}
	return api.SE2TrajectoryCommand_Feedback_BodyMovementStatus(0)
}

// The GetLocalizationState request message requests the current localization state and any other
// live data from the robot if desired. The localization consists of a waypoint ID and the relative
// pose of the robot with respect to that waypoint.
type GetLocalizationStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return the localization relative to this waypoint, if specified.
	WaypointId string `protobuf:"bytes,8,opt,name=waypoint_id,json=waypointId,proto3" json:"waypoint_id,omitempty"`
	// If true, request the live edge-segmented point cloud that was used
	// to generate this localization.
	RequestLivePointCloud bool `protobuf:"varint,2,opt,name=request_live_point_cloud,json=requestLivePointCloud,proto3" json:"request_live_point_cloud,omitempty"`
	// If true, request the live images from realsense cameras at the time of
	// localization.
	RequestLiveImages bool `protobuf:"varint,3,opt,name=request_live_images,json=requestLiveImages,proto3" json:"request_live_images,omitempty"`
	// If true, request the live terrain maps at the time of localization.
	RequestLiveTerrainMaps bool `protobuf:"varint,4,opt,name=request_live_terrain_maps,json=requestLiveTerrainMaps,proto3" json:"request_live_terrain_maps,omitempty"`
	// If true, reqeuest the live world objects at the time of localization.
	RequestLiveWorldObjects bool `protobuf:"varint,5,opt,name=request_live_world_objects,json=requestLiveWorldObjects,proto3" json:"request_live_world_objects,omitempty"`
	// If true, requests the full live robot state at the time of localization.
	RequestLiveRobotState bool `protobuf:"varint,6,opt,name=request_live_robot_state,json=requestLiveRobotState,proto3" json:"request_live_robot_state,omitempty"`
	// If true, the smallest available encoding will be used for the live point cloud
	// data. If false, three 32 bit floats will be used per point in the point cloud.
	CompressLivePointCloud bool `protobuf:"varint,7,opt,name=compress_live_point_cloud,json=compressLivePointCloud,proto3" json:"compress_live_point_cloud,omitempty"`
}

func (x *GetLocalizationStateRequest) Reset() {
	*x = GetLocalizationStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalizationStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalizationStateRequest) ProtoMessage() {}

func (x *GetLocalizationStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalizationStateRequest.ProtoReflect.Descriptor instead.
func (*GetLocalizationStateRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{14}
}

func (x *GetLocalizationStateRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetLocalizationStateRequest) GetWaypointId() string {
	if x != nil {
		return x.WaypointId
	}
	return ""
}

func (x *GetLocalizationStateRequest) GetRequestLivePointCloud() bool {
	if x != nil {
		return x.RequestLivePointCloud
	}
	return false
}

func (x *GetLocalizationStateRequest) GetRequestLiveImages() bool {
	if x != nil {
		return x.RequestLiveImages
	}
	return false
}

func (x *GetLocalizationStateRequest) GetRequestLiveTerrainMaps() bool {
	if x != nil {
		return x.RequestLiveTerrainMaps
	}
	return false
}

func (x *GetLocalizationStateRequest) GetRequestLiveWorldObjects() bool {
	if x != nil {
		return x.RequestLiveWorldObjects
	}
	return false
}

func (x *GetLocalizationStateRequest) GetRequestLiveRobotState() bool {
	if x != nil {
		return x.RequestLiveRobotState
	}
	return false
}

func (x *GetLocalizationStateRequest) GetCompressLivePointCloud() bool {
	if x != nil {
		return x.CompressLivePointCloud
	}
	return false
}

// Message describing the state of a remote point cloud service (such as a velodyne).
type RemotePointCloudStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the point cloud service.
	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	// Boolean indicating if the point cloud service was registered in the robot's directory with
	// the provided name.
	ExistsInDirectory bool `protobuf:"varint,2,opt,name=exists_in_directory,json=existsInDirectory,proto3" json:"exists_in_directory,omitempty"`
	// Boolean indicating if the point cloud service is currently outputting data.
	HasData bool `protobuf:"varint,3,opt,name=has_data,json=hasData,proto3" json:"has_data,omitempty"`
}

func (x *RemotePointCloudStatus) Reset() {
	*x = RemotePointCloudStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemotePointCloudStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemotePointCloudStatus) ProtoMessage() {}

func (x *RemotePointCloudStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemotePointCloudStatus.ProtoReflect.Descriptor instead.
func (*RemotePointCloudStatus) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{15}
}

func (x *RemotePointCloudStatus) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RemotePointCloudStatus) GetExistsInDirectory() bool {
	if x != nil {
		return x.ExistsInDirectory
	}
	return false
}

func (x *RemotePointCloudStatus) GetHasData() bool {
	if x != nil {
		return x.HasData
	}
	return false
}

// Message describing whether or not graph nav is lost, and if it is lost, how lost it is.
// If robot is lost, this state can be reset by either:
//    * Driving to an area where the robot's localization improves.
//    * Calling SetLocalization RPC.
type LostDetectorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether or not the robot is currently lost.  If this is true, graph nav will reject
	// NavigateTo or NavigateRoute RPC's.
	IsLost bool `protobuf:"varint,1,opt,name=is_lost,json=isLost,proto3" json:"is_lost,omitempty"`
}

func (x *LostDetectorState) Reset() {
	*x = LostDetectorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LostDetectorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LostDetectorState) ProtoMessage() {}

func (x *LostDetectorState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LostDetectorState.ProtoReflect.Descriptor instead.
func (*LostDetectorState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{16}
}

func (x *LostDetectorState) GetIsLost() bool {
	if x != nil {
		return x.IsLost
	}
	return false
}

// The GetLocalizationState response message returns the current localization and robot state, as well
// as any requested live data information.
type GetLocalizationStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Where the robot currently is. If a waypoint_id was specified in the request, this localization
	// will be relative to that waypoint.
	Localization *Localization `protobuf:"bytes,2,opt,name=localization,proto3" json:"localization,omitempty"`
	// Robot kinematic state at time of localization.
	RobotKinematics *api.KinematicState `protobuf:"bytes,4,opt,name=robot_kinematics,json=robotKinematics,proto3" json:"robot_kinematics,omitempty"`
	// Status of one or more remote point cloud services (such as velodyne).
	RemoteCloudStatus []*RemotePointCloudStatus `protobuf:"bytes,5,rep,name=remote_cloud_status,json=remoteCloudStatus,proto3" json:"remote_cloud_status,omitempty"`
	// Contains live data at the time of localization, with elements only filled out
	// if requested.
	LiveData *WaypointSnapshot `protobuf:"bytes,6,opt,name=live_data,json=liveData,proto3" json:"live_data,omitempty"`
	// If the robot drives around without a good localization for a while, eventually
	// it becomes "lost."  I.E. it has a localization, but it no longer trusts
	// that the localization it has is accurate.  Lost detector state is
	// available through this message.
	LostDetectorState *LostDetectorState `protobuf:"bytes,7,opt,name=lost_detector_state,json=lostDetectorState,proto3" json:"lost_detector_state,omitempty"`
}

func (x *GetLocalizationStateResponse) Reset() {
	*x = GetLocalizationStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalizationStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalizationStateResponse) ProtoMessage() {}

func (x *GetLocalizationStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalizationStateResponse.ProtoReflect.Descriptor instead.
func (*GetLocalizationStateResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{17}
}

func (x *GetLocalizationStateResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetLocalizationStateResponse) GetLocalization() *Localization {
	if x != nil {
		return x.Localization
	}
	return nil
}

func (x *GetLocalizationStateResponse) GetRobotKinematics() *api.KinematicState {
	if x != nil {
		return x.RobotKinematics
	}
	return nil
}

func (x *GetLocalizationStateResponse) GetRemoteCloudStatus() []*RemotePointCloudStatus {
	if x != nil {
		return x.RemoteCloudStatus
	}
	return nil
}

func (x *GetLocalizationStateResponse) GetLiveData() *WaypointSnapshot {
	if x != nil {
		return x.LiveData
	}
	return nil
}

func (x *GetLocalizationStateResponse) GetLostDetectorState() *LostDetectorState {
	if x != nil {
		return x.LostDetectorState
	}
	return nil
}

// Clears the graph on the server. Also clears GraphNav's localization to the graph.
// Note that waypoint and edge snapshots may still be cached on the server after this
// operation. This RPC may not be used while recording a map.
type ClearGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of graph-nav service.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *ClearGraphRequest) Reset() {
	*x = ClearGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearGraphRequest) ProtoMessage() {}

func (x *ClearGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearGraphRequest.ProtoReflect.Descriptor instead.
func (*ClearGraphRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{18}
}

func (x *ClearGraphRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ClearGraphRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// The results of the ClearGraphRequest.
type ClearGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Status of the ClearGraphResponse.
	Status ClearGraphResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.graph_nav.ClearGraphResponse_Status" json:"status,omitempty"`
}

func (x *ClearGraphResponse) Reset() {
	*x = ClearGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearGraphResponse) ProtoMessage() {}

func (x *ClearGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearGraphResponse.ProtoReflect.Descriptor instead.
func (*ClearGraphResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{19}
}

func (x *ClearGraphResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ClearGraphResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *ClearGraphResponse) GetStatus() ClearGraphResponse_Status {
	if x != nil {
		return x.Status
	}
	return ClearGraphResponse_STATUS_UNKNOWN
}

// Uploads a graph to the server. This graph will be appended to the graph that
// currently exists on the server.
type UploadGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Structure of the graph containing waypoints and edges without
	// underlying sensor data.
	Graph *Graph `protobuf:"bytes,2,opt,name=graph,proto3" json:"graph,omitempty"`
	// The Lease to show ownership of graph-nav service.
	Lease *api.Lease `protobuf:"bytes,3,opt,name=lease,proto3" json:"lease,omitempty"`
	// If this is true, generate an (overwrite the) anchoring on upload.
	GenerateNewAnchoring bool `protobuf:"varint,4,opt,name=generate_new_anchoring,json=generateNewAnchoring,proto3" json:"generate_new_anchoring,omitempty"`
}

func (x *UploadGraphRequest) Reset() {
	*x = UploadGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGraphRequest) ProtoMessage() {}

func (x *UploadGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGraphRequest.ProtoReflect.Descriptor instead.
func (*UploadGraphRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{20}
}

func (x *UploadGraphRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UploadGraphRequest) GetGraph() *Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

func (x *UploadGraphRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *UploadGraphRequest) GetGenerateNewAnchoring() bool {
	if x != nil {
		return x.GenerateNewAnchoring
	}
	return false
}

// Response to the UploadGraphRequest. After uploading a graph, the user is expected
// to upload large data at waypoints and edges (called snapshots). The response provides
// a list of snapshot IDs which are not yet cached on the server. Snapshots with these IDs should
// be uploaded by the client.
type UploadGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Status for an upload request.
	Status UploadGraphResponse_Status `protobuf:"varint,8,opt,name=status,proto3,enum=bosdyn.api.graph_nav.UploadGraphResponse_Status" json:"status,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// The waypoint snapshot ids for which there was cached data.
	LoadedWaypointSnapshotIds []string `protobuf:"bytes,3,rep,name=loaded_waypoint_snapshot_ids,json=loadedWaypointSnapshotIds,proto3" json:"loaded_waypoint_snapshot_ids,omitempty"`
	// The waypoint snapshot ids for which there is no cached data.
	UnknownWaypointSnapshotIds []string `protobuf:"bytes,4,rep,name=unknown_waypoint_snapshot_ids,json=unknownWaypointSnapshotIds,proto3" json:"unknown_waypoint_snapshot_ids,omitempty"`
	// The edge snapshot ids for which there was cached data.
	LoadedEdgeSnapshotIds []string `protobuf:"bytes,5,rep,name=loaded_edge_snapshot_ids,json=loadedEdgeSnapshotIds,proto3" json:"loaded_edge_snapshot_ids,omitempty"`
	// The edge snapshot ids for which there was no cached data.
	UnknownEdgeSnapshotIds []string `protobuf:"bytes,6,rep,name=unknown_edge_snapshot_ids,json=unknownEdgeSnapshotIds,proto3" json:"unknown_edge_snapshot_ids,omitempty"`
	// Large graphs can only be uploaded if the license permits them.
	LicenseStatus api.LicenseInfo_Status     `protobuf:"varint,7,opt,name=license_status,json=licenseStatus,proto3,enum=bosdyn.api.LicenseInfo_Status" json:"license_status,omitempty"`
	SensorStatus  *SensorCompatibilityStatus `protobuf:"bytes,9,opt,name=sensor_status,json=sensorStatus,proto3" json:"sensor_status,omitempty"`
}

func (x *UploadGraphResponse) Reset() {
	*x = UploadGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadGraphResponse) ProtoMessage() {}

func (x *UploadGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadGraphResponse.ProtoReflect.Descriptor instead.
func (*UploadGraphResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{21}
}

func (x *UploadGraphResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UploadGraphResponse) GetStatus() UploadGraphResponse_Status {
	if x != nil {
		return x.Status
	}
	return UploadGraphResponse_STATUS_UNKNOWN
}

func (x *UploadGraphResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *UploadGraphResponse) GetLoadedWaypointSnapshotIds() []string {
	if x != nil {
		return x.LoadedWaypointSnapshotIds
	}
	return nil
}

func (x *UploadGraphResponse) GetUnknownWaypointSnapshotIds() []string {
	if x != nil {
		return x.UnknownWaypointSnapshotIds
	}
	return nil
}

func (x *UploadGraphResponse) GetLoadedEdgeSnapshotIds() []string {
	if x != nil {
		return x.LoadedEdgeSnapshotIds
	}
	return nil
}

func (x *UploadGraphResponse) GetUnknownEdgeSnapshotIds() []string {
	if x != nil {
		return x.UnknownEdgeSnapshotIds
	}
	return nil
}

func (x *UploadGraphResponse) GetLicenseStatus() api.LicenseInfo_Status {
	if x != nil {
		return x.LicenseStatus
	}
	return api.LicenseInfo_Status(0)
}

func (x *UploadGraphResponse) GetSensorStatus() *SensorCompatibilityStatus {
	if x != nil {
		return x.SensorStatus
	}
	return nil
}

// The DownloadGraphRequest requests that the server send the graph (waypoints and edges)
// to the client. Note that the returned Graph message contains only the topological
// structure of the map, and not any large sensor data. Large sensor data should be downloaded
// using DownloadWaypointSnapshotRequest and DownloadEdgeSnapshotRequest. Both snapshots and
// the graph are required to exist on the server for GraphNav to localize and navigate.
type DownloadGraphRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *DownloadGraphRequest) Reset() {
	*x = DownloadGraphRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadGraphRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadGraphRequest) ProtoMessage() {}

func (x *DownloadGraphRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadGraphRequest.ProtoReflect.Descriptor instead.
func (*DownloadGraphRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{22}
}

func (x *DownloadGraphRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The DownloadGraph response message includes the current graph on the robot.
type DownloadGraphResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The structure of the graph.
	Graph *Graph `protobuf:"bytes,2,opt,name=graph,proto3" json:"graph,omitempty"`
}

func (x *DownloadGraphResponse) Reset() {
	*x = DownloadGraphResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadGraphResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadGraphResponse) ProtoMessage() {}

func (x *DownloadGraphResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadGraphResponse.ProtoReflect.Descriptor instead.
func (*DownloadGraphResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{23}
}

func (x *DownloadGraphResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DownloadGraphResponse) GetGraph() *Graph {
	if x != nil {
		return x.Graph
	}
	return nil
}

// Used to upload waypoint snapshot in chunks for a specific waypoint snapshot. Waypoint
// snapshots consist of the large sensor data at each waypoint.
// Chunks will be streamed one at a time to the server. Chunk streaming is required to prevent
// overwhelming gRPC with large http requests.
type UploadWaypointSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Serialized bytes of a WaypointSnapshot message, restricted to a chunk no larger than 4MB in size.
	// To break the data into chunks, first serialize it to bytes. Then, send the bytes in order as DataChunk objects.
	// The chunks will be concatenated together on the server, and deserialized.
	Chunk *api.DataChunk `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	// The Leases to show ownership of the graph-nav service.
	Lease *api.Lease `protobuf:"bytes,4,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *UploadWaypointSnapshotRequest) Reset() {
	*x = UploadWaypointSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadWaypointSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadWaypointSnapshotRequest) ProtoMessage() {}

func (x *UploadWaypointSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadWaypointSnapshotRequest.ProtoReflect.Descriptor instead.
func (*UploadWaypointSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{24}
}

func (x *UploadWaypointSnapshotRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UploadWaypointSnapshotRequest) GetChunk() *api.DataChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *UploadWaypointSnapshotRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// One response for the entire WaypointSnapshot after all chunks have
// been concatenated and deserialized.
type UploadWaypointSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult                   `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	Status         UploadWaypointSnapshotResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.graph_nav.UploadWaypointSnapshotResponse_Status" json:"status,omitempty"`
	SensorStatus   *SensorCompatibilityStatus            `protobuf:"bytes,4,opt,name=sensor_status,json=sensorStatus,proto3" json:"sensor_status,omitempty"`
}

func (x *UploadWaypointSnapshotResponse) Reset() {
	*x = UploadWaypointSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadWaypointSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadWaypointSnapshotResponse) ProtoMessage() {}

func (x *UploadWaypointSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadWaypointSnapshotResponse.ProtoReflect.Descriptor instead.
func (*UploadWaypointSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{25}
}

func (x *UploadWaypointSnapshotResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UploadWaypointSnapshotResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *UploadWaypointSnapshotResponse) GetStatus() UploadWaypointSnapshotResponse_Status {
	if x != nil {
		return x.Status
	}
	return UploadWaypointSnapshotResponse_STATUS_UNKNOWN
}

func (x *UploadWaypointSnapshotResponse) GetSensorStatus() *SensorCompatibilityStatus {
	if x != nil {
		return x.SensorStatus
	}
	return nil
}

// Used to upload edge data in chunks for a specific edge snapshot. Edge snapshots contain
// large sensor data associated with each edge.
// Chunks will be streamed one at a time to the server. Chunk streaming is required to prevent
// overwhelming gRPC with large http requests.
type UploadEdgeSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Serialized bytes of a EdgeSnapshot message, restricted to a chunk no larger than 4MB in size.
	// To break the data into chunks, first serialize it to bytes. Then, send the bytes in order as DataChunk objects.
	// The chunks will be concatenated together on the server, and deserialized
	Chunk *api.DataChunk `protobuf:"bytes,4,opt,name=chunk,proto3" json:"chunk,omitempty"`
	// The Leases to show ownership of the graph-nav service.
	Lease *api.Lease `protobuf:"bytes,5,opt,name=lease,proto3" json:"lease,omitempty"`
}

func (x *UploadEdgeSnapshotRequest) Reset() {
	*x = UploadEdgeSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadEdgeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadEdgeSnapshotRequest) ProtoMessage() {}

func (x *UploadEdgeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadEdgeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*UploadEdgeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{26}
}

func (x *UploadEdgeSnapshotRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UploadEdgeSnapshotRequest) GetChunk() *api.DataChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *UploadEdgeSnapshotRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

// One response for the entire EdgeSnapshot after all chunks have
// been concatenated and deserialized.
type UploadEdgeSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
}

func (x *UploadEdgeSnapshotResponse) Reset() {
	*x = UploadEdgeSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UploadEdgeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadEdgeSnapshotResponse) ProtoMessage() {}

func (x *UploadEdgeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadEdgeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*UploadEdgeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{27}
}

func (x *UploadEdgeSnapshotResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *UploadEdgeSnapshotResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

// The DownloadWaypointSnapshot request asks for a specific waypoint snapshot id to
// be downloaded and has parameters to decrease the amount of data downloaded. After
// recording a map, first call the DownloadGraph RPC. Then, for each waypoint snapshot id,
// request the waypoint snapshot from the server using the DownloadWaypointSnapshot RPC.
type DownloadWaypointSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// ID of the snapshot associated with a waypoint.
	WaypointSnapshotId string `protobuf:"bytes,2,opt,name=waypoint_snapshot_id,json=waypointSnapshotId,proto3" json:"waypoint_snapshot_id,omitempty"`
	// If true, download the full images and point clouds from
	// each camera.
	DownloadImages bool `protobuf:"varint,3,opt,name=download_images,json=downloadImages,proto3" json:"download_images,omitempty"`
	// If true, the point cloud will be compressed using the smallest
	// available point cloud encoding. If false, three 32-bit floats will
	// be used per point.
	CompressPointCloud bool `protobuf:"varint,4,opt,name=compress_point_cloud,json=compressPointCloud,proto3" json:"compress_point_cloud,omitempty"`
	// Skip downloading the point cloud, and only download other data such as images or world
	// objects.
	DoNotDownloadPointCloud bool `protobuf:"varint,5,opt,name=do_not_download_point_cloud,json=doNotDownloadPointCloud,proto3" json:"do_not_download_point_cloud,omitempty"`
}

func (x *DownloadWaypointSnapshotRequest) Reset() {
	*x = DownloadWaypointSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadWaypointSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadWaypointSnapshotRequest) ProtoMessage() {}

func (x *DownloadWaypointSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadWaypointSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DownloadWaypointSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{28}
}

func (x *DownloadWaypointSnapshotRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DownloadWaypointSnapshotRequest) GetWaypointSnapshotId() string {
	if x != nil {
		return x.WaypointSnapshotId
	}
	return ""
}

func (x *DownloadWaypointSnapshotRequest) GetDownloadImages() bool {
	if x != nil {
		return x.DownloadImages
	}
	return false
}

func (x *DownloadWaypointSnapshotRequest) GetCompressPointCloud() bool {
	if x != nil {
		return x.CompressPointCloud
	}
	return false
}

func (x *DownloadWaypointSnapshotRequest) GetDoNotDownloadPointCloud() bool {
	if x != nil {
		return x.DoNotDownloadPointCloud
	}
	return false
}

// The DownloadWaypointSnapshot response streams the data of the waypoint snapshot id
// currently being downloaded in data chunks no larger than 4MB in size. It is necessary
// to stream these data to avoid overwhelming gRPC with large http requests.
type DownloadWaypointSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status DownloadWaypointSnapshotResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse_Status" json:"status,omitempty"`
	// ID of the snapshot associated with a waypoint.
	WaypointSnapshotId string `protobuf:"bytes,4,opt,name=waypoint_snapshot_id,json=waypointSnapshotId,proto3" json:"waypoint_snapshot_id,omitempty"`
	// Chunk of data to download. Responses are sent in sequence until the
	// data chunk is complete. After receiving all chunks, concatenate them
	// into a single byte string. Then, deserialize the byte string into a
	// WaypointSnapshot object.
	Chunk *api.DataChunk `protobuf:"bytes,5,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *DownloadWaypointSnapshotResponse) Reset() {
	*x = DownloadWaypointSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadWaypointSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadWaypointSnapshotResponse) ProtoMessage() {}

func (x *DownloadWaypointSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadWaypointSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DownloadWaypointSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{29}
}

func (x *DownloadWaypointSnapshotResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DownloadWaypointSnapshotResponse) GetStatus() DownloadWaypointSnapshotResponse_Status {
	if x != nil {
		return x.Status
	}
	return DownloadWaypointSnapshotResponse_STATUS_UNKNOWN
}

func (x *DownloadWaypointSnapshotResponse) GetWaypointSnapshotId() string {
	if x != nil {
		return x.WaypointSnapshotId
	}
	return ""
}

func (x *DownloadWaypointSnapshotResponse) GetChunk() *api.DataChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// The DownloadEdgeSnapshot request asks for a specific edge snapshot id to
// be downloaded. Edge snapshots contain the large sensor data stored in each edge.
type DownloadEdgeSnapshotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// ID of the data associated with an edge.
	EdgeSnapshotId string `protobuf:"bytes,2,opt,name=edge_snapshot_id,json=edgeSnapshotId,proto3" json:"edge_snapshot_id,omitempty"`
}

func (x *DownloadEdgeSnapshotRequest) Reset() {
	*x = DownloadEdgeSnapshotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadEdgeSnapshotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadEdgeSnapshotRequest) ProtoMessage() {}

func (x *DownloadEdgeSnapshotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadEdgeSnapshotRequest.ProtoReflect.Descriptor instead.
func (*DownloadEdgeSnapshotRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{30}
}

func (x *DownloadEdgeSnapshotRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DownloadEdgeSnapshotRequest) GetEdgeSnapshotId() string {
	if x != nil {
		return x.EdgeSnapshotId
	}
	return ""
}

// The DownloadEdgeSnapshot response streams the data of the edge snapshot id
// currently being downloaded in data chunks no larger than 4MB in size. It is necessary
// to stream these data to avoid overwhelming gRPC with large http requests.
type DownloadEdgeSnapshotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status DownloadEdgeSnapshotResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse_Status" json:"status,omitempty"`
	// ID of the snapshot associated with an edge.
	EdgeSnapshotId string `protobuf:"bytes,4,opt,name=edge_snapshot_id,json=edgeSnapshotId,proto3" json:"edge_snapshot_id,omitempty"`
	// Chunk of data to download. Responses are sent in sequence until the
	// data chunk is complete. After receiving all chunks, concatenate them
	// into a single byte string. Then, deserialize the byte string into an
	// EdgeSnapshot object.
	Chunk *api.DataChunk `protobuf:"bytes,5,opt,name=chunk,proto3" json:"chunk,omitempty"`
}

func (x *DownloadEdgeSnapshotResponse) Reset() {
	*x = DownloadEdgeSnapshotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownloadEdgeSnapshotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadEdgeSnapshotResponse) ProtoMessage() {}

func (x *DownloadEdgeSnapshotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadEdgeSnapshotResponse.ProtoReflect.Descriptor instead.
func (*DownloadEdgeSnapshotResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{31}
}

func (x *DownloadEdgeSnapshotResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DownloadEdgeSnapshotResponse) GetStatus() DownloadEdgeSnapshotResponse_Status {
	if x != nil {
		return x.Status
	}
	return DownloadEdgeSnapshotResponse_STATUS_UNKNOWN
}

func (x *DownloadEdgeSnapshotResponse) GetEdgeSnapshotId() string {
	if x != nil {
		return x.EdgeSnapshotId
	}
	return ""
}

func (x *DownloadEdgeSnapshotResponse) GetChunk() *api.DataChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type SetLocalizationResponse_SuspectedAmbiguity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Example of a potentially ambiguous localization near the
	// result of the initialization.
	AlternateRobotTformWaypoint *api.SE3Pose `protobuf:"bytes,1,opt,name=alternate_robot_tform_waypoint,json=alternateRobotTformWaypoint,proto3" json:"alternate_robot_tform_waypoint,omitempty"`
}

func (x *SetLocalizationResponse_SuspectedAmbiguity) Reset() {
	*x = SetLocalizationResponse_SuspectedAmbiguity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetLocalizationResponse_SuspectedAmbiguity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetLocalizationResponse_SuspectedAmbiguity) ProtoMessage() {}

func (x *SetLocalizationResponse_SuspectedAmbiguity) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetLocalizationResponse_SuspectedAmbiguity.ProtoReflect.Descriptor instead.
func (*SetLocalizationResponse_SuspectedAmbiguity) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SetLocalizationResponse_SuspectedAmbiguity) GetAlternateRobotTformWaypoint() *api.SE3Pose {
	if x != nil {
		return x.AlternateRobotTformWaypoint
	}
	return nil
}

var File_bosdyn_api_graph_nav_graph_nav_proto protoreflect.FileDescriptor

var file_bosdyn_api_graph_nav_graph_nav_proto_rawDesc = []byte{
	0x0a, 0x24, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x1a, 0x1e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x6e, 0x61, 0x76, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x6d, 0x61, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x06,
	0x0a, 0x16, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x0d, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x67, 0x75, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x47,
	0x75, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x0d, 0x6b, 0x6f, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65,
	0x52, 0x0b, 0x6b, 0x6f, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x79, 0x61, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x59, 0x61, 0x77, 0x12, 0x5e, 0x0a, 0x0d, 0x66, 0x69, 0x64,
	0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x0c, 0x66, 0x69, 0x64,
	0x75, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x75, 0x73, 0x65,
	0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x49,
	0x64, 0x12, 0x44, 0x0a, 0x1f, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x5f, 0x66, 0x69, 0x64, 0x75,
	0x63, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x69, 0x63, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x72, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x63, 0x70, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x5f, 0x61, 0x6d,
	0x62, 0x69, 0x67, 0x75, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x6f, 0x41, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x69, 0x74, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x63, 0x0a, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c,
	0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x46,
	0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x46,
	0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x44, 0x55, 0x43, 0x49,
	0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x4f, 0x5f, 0x46, 0x49, 0x44, 0x55, 0x43,
	0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41,
	0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x54, 0x5f, 0x54, 0x41, 0x52,
	0x47, 0x45, 0x54, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41,
	0x4c, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10,
	0x04, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6d, 0x61, 0x70,
	0x48, 0x61, 0x73, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x1a,
	0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x6c, 0x69, 0x64, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x17, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x46, 0x6f, 0x72, 0x4c, 0x69, 0x64, 0x61, 0x72, 0x22, 0xfe, 0x07, 0x0a, 0x17, 0x53, 0x65,
	0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x46, 0x0a, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x71, 0x0a, 0x13, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x69, 0x74, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d,
	0x62, 0x69, 0x67, 0x75, 0x69, 0x74, 0x79, 0x52, 0x12, 0x73, 0x75, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x41, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x69, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x0e, 0x69,
	0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x6e, 0x0a, 0x12, 0x53, 0x75, 0x73, 0x70,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x62, 0x69, 0x67, 0x75, 0x69, 0x74, 0x79, 0x12, 0x58,
	0x0a, 0x1e, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x1b, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d,
	0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xaf, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x42, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x46, 0x41, 0x52,
	0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4f,
	0x4c, 0x44, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x49, 0x44, 0x55, 0x43,
	0x49, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55, 0x4e,
	0x43, 0x45, 0x52, 0x54, 0x41, 0x49, 0x4e, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x53, 0x10, 0x0a, 0x22, 0x10, 0x0a, 0x0e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xae, 0x04, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x5f, 0x79, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x59, 0x61, 0x77, 0x12, 0x43, 0x0a, 0x0e, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53,
	0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x0d, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x79,
	0x61, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6c, 0x59, 0x61, 0x77, 0x12, 0x76, 0x0a, 0x19, 0x66, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x74, 0x6f, 0x6c, 0x65,
	0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e,
	0x61, 0x76, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x17, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x40, 0x0a, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x65, 0x64, 0x45, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x72, 0x0a, 0x17, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54,
	0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x52, 0x5f, 0x46, 0x45, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10, 0x02, 0x22, 0xa1, 0x04,
	0x0a, 0x11, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x65,
	0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x63, 0x0a,
	0x24, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x64, 0x79,
	0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x50, 0x6f, 0x73, 0x65,
	0x52, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x47, 0x6f,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49,
	0x64, 0x22, 0xe4, 0x05, 0x0a, 0x12, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x54, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a,
	0x0e, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x73, 0x22, 0xf4, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e,
	0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f,
	0x42, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14,
	0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10,
	0x07, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x50,
	0x41, 0x54, 0x48, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x45, 0x52, 0x54, 0x10, 0x0a,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10,
	0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x50,
	0x10, 0x0d, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55,
	0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x53, 0x54, 0x55, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43,
	0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10, 0x0f, 0x22, 0xb2, 0x05, 0x0a, 0x14, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x67, 0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x62, 0x65, 0x68,
	0x61, 0x76, 0x69, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e,
	0x61, 0x76, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e,
	0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x43,
	0x6d, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x6d, 0x0a, 0x15, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x42, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x52, 0x13, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6d,
	0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x75, 0x0a, 0x16, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76,
	0x69, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x52, 0x14, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x22, 0x75, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x72, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x52, 0x54, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x47, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x5f, 0x57, 0x48, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x03, 0x22, 0x6e, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x75, 0x6d,
	0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x53,
	0x55, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a,
	0x21, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f, 0x54,
	0x4f, 0x5f, 0x55, 0x4e, 0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x45, 0x44, 0x5f, 0x52, 0x4f, 0x55,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x52, 0x45, 0x53, 0x55, 0x4d, 0x45, 0x5f, 0x46,
	0x41, 0x49, 0x4c, 0x5f, 0x57, 0x48, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4f, 0x4e, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x02, 0x22, 0x64, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12,
	0x19, 0x0a, 0x15, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x52, 0x45, 0x52, 0x4f,
	0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02, 0x22, 0xb2, 0x04,
	0x0a, 0x14, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x6c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x66, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x11, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x47, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61,
	0x76, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x63,
	0x0a, 0x24, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x20, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x47,
	0x6f, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x22, 0x8e, 0x07, 0x0a, 0x15, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e,
	0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49,
	0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6d,
	0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x2e, 0x49, 0x64, 0x52,
	0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x64, 0x67, 0x65, 0x49, 0x64, 0x73, 0x22, 0xd3, 0x03,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x59, 0x4e,
	0x43, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x58,
	0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x54, 0x10, 0x04, 0x12,
	0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f,
	0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x53, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10, 0x14,
	0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x44, 0x45, 0x53, 0x45, 0x52, 0x54, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x0e, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x5a, 0x45,
	0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c,
	0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x13, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x0f,
	0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x55, 0x43, 0x4b,
	0x10, 0x11, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x52,
	0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x12, 0x22, 0xb1, 0x04, 0x0a, 0x17, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x0f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x65,
	0x64, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x6f, 0x61, 0x6c, 0x12, 0x68, 0x0a, 0x29, 0x67, 0x6f,
	0x61, 0x6c, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x72, 0x74, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x5f, 0x65, 0x77, 0x72, 0x74, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x6c, 0x65, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52,
	0x23, 0x67, 0x6f, 0x61, 0x6c, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x74, 0x53,
	0x65, 0x65, 0x64, 0x45, 0x77, 0x72, 0x74, 0x53, 0x65, 0x65, 0x64, 0x54, 0x6f, 0x6c, 0x65, 0x72,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61,
	0x76, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x47, 0x65, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x47, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x54, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a,
	0x10, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x85, 0x06, 0x0a, 0x18, 0x4e, 0x61, 0x76, 0x69,
	0x67, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x0f, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x12, 0x4d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x35, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x54, 0x6f, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x6d, 0x70, 0x61, 0x69, 0x72,
	0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x49, 0x64, 0x73, 0x22, 0x89, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x54,
	0x49, 0x4d, 0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x03, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x41, 0x4e, 0x43, 0x48, 0x4f, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x07, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x41, 0x54,
	0x48, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x45,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x45, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x0b, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x41, 0x50, 0x10, 0x0d,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x4f, 0x55, 0x54,
	0x45, 0x10, 0x0c, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x55, 0x43, 0x4b, 0x10, 0x0e, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x10, 0x22,
	0x6d, 0x0a, 0x19, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xd7,
	0x06, 0x0a, 0x1a, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x37, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x69, 0x6d, 0x70, 0x61, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x6d, 0x70,
	0x61, 0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0d, 0x69, 0x6d, 0x70, 0x61,
	0x69, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52,
	0x0e, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x40,
	0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6b, 0x6f, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x67, 0x6f, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52,
	0x0f, 0x6c, 0x61, 0x73, 0x74, 0x4b, 0x6f, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x47, 0x6f, 0x61, 0x6c,
	0x12, 0x6e, 0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x54,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f,
	0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x62, 0x6f,
	0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xd5, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x4f, 0x4c, 0x4c, 0x4f, 0x57,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x5f, 0x47, 0x4f,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e,
	0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4c, 0x4f, 0x53, 0x54, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x53, 0x54, 0x55, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44,
	0x5f, 0x4f, 0x55, 0x54, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x41, 0x49, 0x52, 0x45, 0x44, 0x10,
	0x08, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x0b, 0x12, 0x1d,
	0x0a, 0x19, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x5f, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x0c, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x4f, 0x43, 0x41,
	0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x10, 0x0d,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x0e, 0x22, 0xc6, 0x03, 0x0a, 0x1b, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x5f, 0x6d, 0x61,
	0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x65, 0x72, 0x72, 0x61, 0x69, 0x6e, 0x4d, 0x61, 0x70, 0x73,
	0x12, 0x3b, 0x0a, 0x1a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65,
	0x5f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x76,
	0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x15, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x22, 0x86, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x13, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x5f, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x49, 0x6e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x19, 0x0a, 0x08, 0x68, 0x61, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x68, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2c, 0x0a, 0x11, 0x4c, 0x6f,
	0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x69, 0x73, 0x4c, 0x6f, 0x73, 0x74, 0x22, 0xdd, 0x03, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x46, 0x0a,
	0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x10, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6b,
	0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x69, 0x6e,
	0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x4b, 0x69, 0x6e, 0x65, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x73, 0x12, 0x5c, 0x0a, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x08, 0x6c, 0x69, 0x76, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x57, 0x0a, 0x13, 0x6c, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x2e, 0x4c, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x6c, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x6f, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x12, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61,
	0x76, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x41, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x52,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x22, 0xd9, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x31, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x05, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x16,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69,
	0x6e, 0x67, 0x22, 0xf9, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3f,
	0x0a, 0x1c, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x19, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x57, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12,
	0x41, 0x0a, 0x1d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1a, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49,
	0x64, 0x73, 0x12, 0x37, 0x0a, 0x18, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x5f, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x45, 0x64, 0x67, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x19, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x49, 0x64, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a,
	0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x41, 0x50, 0x5f,
	0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53,
	0x45, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x10, 0x04, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54,
	0x49, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x53, 0x10, 0x05, 0x22, 0x49,
	0x0a, 0x14, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x7e, 0x0a, 0x15, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x47, 0x72, 0x61,
	0x70, 0x68, 0x52, 0x05, 0x67, 0x72, 0x61, 0x70, 0x68, 0x22, 0xa8, 0x01, 0x0a, 0x1d, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x05, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x22, 0x93, 0x03, 0x0a, 0x1e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x54, 0x0a, 0x0d, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x61,
	0x74, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c,
	0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x53, 0x10, 0x02, 0x22, 0xa4, 0x01, 0x0a, 0x19, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x63,
	0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x22, 0x96, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73,
	0x65, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x55, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x9f, 0x02, 0x0a, 0x1f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x14, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x12, 0x3c,
	0x0a, 0x1b, 0x64, 0x6f, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x17, 0x64, 0x6f, 0x4e, 0x6f, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x22, 0xdd, 0x02, 0x0a,
	0x20, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x14,
	0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2b,
	0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x4f, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x22, 0x7a, 0x0a, 0x1b,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x28,
	0x0a, 0x10, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x64, 0x67, 0x65, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22, 0xcd, 0x02, 0x0a, 0x1c, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x51, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x64, 0x67,
	0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x28, 0x0a, 0x10, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x65, 0x64, 0x67, 0x65,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x4f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x02, 0x42, 0x4c, 0x42, 0x0d, 0x47, 0x72, 0x61, 0x70,
	0x68, 0x4e, 0x61, 0x76, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f,
	0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67,
	0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_graph_nav_graph_nav_proto_rawDescOnce sync.Once
	file_bosdyn_api_graph_nav_graph_nav_proto_rawDescData = file_bosdyn_api_graph_nav_graph_nav_proto_rawDesc
)

func file_bosdyn_api_graph_nav_graph_nav_proto_rawDescGZIP() []byte {
	file_bosdyn_api_graph_nav_graph_nav_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_graph_nav_graph_nav_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_graph_nav_graph_nav_proto_rawDescData)
	})
	return file_bosdyn_api_graph_nav_graph_nav_proto_rawDescData
}

var file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes = make([]protoimpl.EnumInfo, 15)
var file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_bosdyn_api_graph_nav_graph_nav_proto_goTypes = []interface{}{
	(SetLocalizationRequest_FiducialInit)(0),                  // 0: bosdyn.api.graph_nav.SetLocalizationRequest.FiducialInit
	(SetLocalizationResponse_Status)(0),                       // 1: bosdyn.api.graph_nav.SetLocalizationResponse.Status
	(TravelParams_FeatureQualityTolerance)(0),                 // 2: bosdyn.api.graph_nav.TravelParams.FeatureQualityTolerance
	(NavigateToResponse_Status)(0),                            // 3: bosdyn.api.graph_nav.NavigateToResponse.Status
	(RouteFollowingParams_StartRouteBehavior)(0),              // 4: bosdyn.api.graph_nav.RouteFollowingParams.StartRouteBehavior
	(RouteFollowingParams_ResumeBehavior)(0),                  // 5: bosdyn.api.graph_nav.RouteFollowingParams.ResumeBehavior
	(RouteFollowingParams_RouteBlockedBehavior)(0),            // 6: bosdyn.api.graph_nav.RouteFollowingParams.RouteBlockedBehavior
	(NavigateRouteResponse_Status)(0),                         // 7: bosdyn.api.graph_nav.NavigateRouteResponse.Status
	(NavigateToAnchorResponse_Status)(0),                      // 8: bosdyn.api.graph_nav.NavigateToAnchorResponse.Status
	(NavigationFeedbackResponse_Status)(0),                    // 9: bosdyn.api.graph_nav.NavigationFeedbackResponse.Status
	(ClearGraphResponse_Status)(0),                            // 10: bosdyn.api.graph_nav.ClearGraphResponse.Status
	(UploadGraphResponse_Status)(0),                           // 11: bosdyn.api.graph_nav.UploadGraphResponse.Status
	(UploadWaypointSnapshotResponse_Status)(0),                // 12: bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.Status
	(DownloadWaypointSnapshotResponse_Status)(0),              // 13: bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.Status
	(DownloadEdgeSnapshotResponse_Status)(0),                  // 14: bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.Status
	(*SetLocalizationRequest)(nil),                            // 15: bosdyn.api.graph_nav.SetLocalizationRequest
	(*SensorCompatibilityStatus)(nil),                         // 16: bosdyn.api.graph_nav.SensorCompatibilityStatus
	(*SetLocalizationResponse)(nil),                           // 17: bosdyn.api.graph_nav.SetLocalizationResponse
	(*RouteGenParams)(nil),                                    // 18: bosdyn.api.graph_nav.RouteGenParams
	(*TravelParams)(nil),                                      // 19: bosdyn.api.graph_nav.TravelParams
	(*NavigateToRequest)(nil),                                 // 20: bosdyn.api.graph_nav.NavigateToRequest
	(*NavigateToResponse)(nil),                                // 21: bosdyn.api.graph_nav.NavigateToResponse
	(*RouteFollowingParams)(nil),                              // 22: bosdyn.api.graph_nav.RouteFollowingParams
	(*NavigateRouteRequest)(nil),                              // 23: bosdyn.api.graph_nav.NavigateRouteRequest
	(*NavigateRouteResponse)(nil),                             // 24: bosdyn.api.graph_nav.NavigateRouteResponse
	(*NavigateToAnchorRequest)(nil),                           // 25: bosdyn.api.graph_nav.NavigateToAnchorRequest
	(*NavigateToAnchorResponse)(nil),                          // 26: bosdyn.api.graph_nav.NavigateToAnchorResponse
	(*NavigationFeedbackRequest)(nil),                         // 27: bosdyn.api.graph_nav.NavigationFeedbackRequest
	(*NavigationFeedbackResponse)(nil),                        // 28: bosdyn.api.graph_nav.NavigationFeedbackResponse
	(*GetLocalizationStateRequest)(nil),                       // 29: bosdyn.api.graph_nav.GetLocalizationStateRequest
	(*RemotePointCloudStatus)(nil),                            // 30: bosdyn.api.graph_nav.RemotePointCloudStatus
	(*LostDetectorState)(nil),                                 // 31: bosdyn.api.graph_nav.LostDetectorState
	(*GetLocalizationStateResponse)(nil),                      // 32: bosdyn.api.graph_nav.GetLocalizationStateResponse
	(*ClearGraphRequest)(nil),                                 // 33: bosdyn.api.graph_nav.ClearGraphRequest
	(*ClearGraphResponse)(nil),                                // 34: bosdyn.api.graph_nav.ClearGraphResponse
	(*UploadGraphRequest)(nil),                                // 35: bosdyn.api.graph_nav.UploadGraphRequest
	(*UploadGraphResponse)(nil),                               // 36: bosdyn.api.graph_nav.UploadGraphResponse
	(*DownloadGraphRequest)(nil),                              // 37: bosdyn.api.graph_nav.DownloadGraphRequest
	(*DownloadGraphResponse)(nil),                             // 38: bosdyn.api.graph_nav.DownloadGraphResponse
	(*UploadWaypointSnapshotRequest)(nil),                     // 39: bosdyn.api.graph_nav.UploadWaypointSnapshotRequest
	(*UploadWaypointSnapshotResponse)(nil),                    // 40: bosdyn.api.graph_nav.UploadWaypointSnapshotResponse
	(*UploadEdgeSnapshotRequest)(nil),                         // 41: bosdyn.api.graph_nav.UploadEdgeSnapshotRequest
	(*UploadEdgeSnapshotResponse)(nil),                        // 42: bosdyn.api.graph_nav.UploadEdgeSnapshotResponse
	(*DownloadWaypointSnapshotRequest)(nil),                   // 43: bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest
	(*DownloadWaypointSnapshotResponse)(nil),                  // 44: bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse
	(*DownloadEdgeSnapshotRequest)(nil),                       // 45: bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest
	(*DownloadEdgeSnapshotResponse)(nil),                      // 46: bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse
	(*SetLocalizationResponse_SuspectedAmbiguity)(nil),        // 47: bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity
	(*api.RequestHeader)(nil),                                 // 48: bosdyn.api.RequestHeader
	(*Localization)(nil),                                      // 49: bosdyn.api.graph_nav.Localization
	(*api.SE3Pose)(nil),                                       // 50: bosdyn.api.SE3Pose
	(*api.ResponseHeader)(nil),                                // 51: bosdyn.api.ResponseHeader
	(*api.LeaseUseResult)(nil),                                // 52: bosdyn.api.LeaseUseResult
	(*api.RobotImpairedState)(nil),                            // 53: bosdyn.api.RobotImpairedState
	(*api.SE2VelocityLimit)(nil),                              // 54: bosdyn.api.SE2VelocityLimit
	(*api.Lease)(nil),                                         // 55: bosdyn.api.Lease
	(*timestamppb.Timestamp)(nil),                             // 56: google.protobuf.Timestamp
	(*api.SE2Pose)(nil),                                       // 57: bosdyn.api.SE2Pose
	(*Route)(nil),                                             // 58: bosdyn.api.graph_nav.Route
	(*Edge_Id)(nil),                                           // 59: bosdyn.api.graph_nav.Edge.Id
	(*api.Vec3)(nil),                                          // 60: bosdyn.api.Vec3
	(api.SE2TrajectoryCommand_Feedback_BodyMovementStatus)(0), // 61: bosdyn.api.SE2TrajectoryCommand.Feedback.BodyMovementStatus
	(*api.KinematicState)(nil),                                // 62: bosdyn.api.KinematicState
	(*WaypointSnapshot)(nil),                                  // 63: bosdyn.api.graph_nav.WaypointSnapshot
	(*Graph)(nil),                                             // 64: bosdyn.api.graph_nav.Graph
	(api.LicenseInfo_Status)(0),                               // 65: bosdyn.api.LicenseInfo.Status
	(*api.DataChunk)(nil),                                     // 66: bosdyn.api.DataChunk
}
var file_bosdyn_api_graph_nav_graph_nav_proto_depIdxs = []int32{
	48,  // 0: bosdyn.api.graph_nav.SetLocalizationRequest.header:type_name -> bosdyn.api.RequestHeader
	49,  // 1: bosdyn.api.graph_nav.SetLocalizationRequest.initial_guess:type_name -> bosdyn.api.graph_nav.Localization
	50,  // 2: bosdyn.api.graph_nav.SetLocalizationRequest.ko_tform_body:type_name -> bosdyn.api.SE3Pose
	0,   // 3: bosdyn.api.graph_nav.SetLocalizationRequest.fiducial_init:type_name -> bosdyn.api.graph_nav.SetLocalizationRequest.FiducialInit
	51,  // 4: bosdyn.api.graph_nav.SetLocalizationResponse.header:type_name -> bosdyn.api.ResponseHeader
	52,  // 5: bosdyn.api.graph_nav.SetLocalizationResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	1,   // 6: bosdyn.api.graph_nav.SetLocalizationResponse.status:type_name -> bosdyn.api.graph_nav.SetLocalizationResponse.Status
	49,  // 7: bosdyn.api.graph_nav.SetLocalizationResponse.localization:type_name -> bosdyn.api.graph_nav.Localization
	47,  // 8: bosdyn.api.graph_nav.SetLocalizationResponse.suspected_ambiguity:type_name -> bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity
	53,  // 9: bosdyn.api.graph_nav.SetLocalizationResponse.impaired_state:type_name -> bosdyn.api.RobotImpairedState
	16,  // 10: bosdyn.api.graph_nav.SetLocalizationResponse.sensor_status:type_name -> bosdyn.api.graph_nav.SensorCompatibilityStatus
	54,  // 11: bosdyn.api.graph_nav.TravelParams.velocity_limit:type_name -> bosdyn.api.SE2VelocityLimit
	2,   // 12: bosdyn.api.graph_nav.TravelParams.feature_quality_tolerance:type_name -> bosdyn.api.graph_nav.TravelParams.FeatureQualityTolerance
	48,  // 13: bosdyn.api.graph_nav.NavigateToRequest.header:type_name -> bosdyn.api.RequestHeader
	55,  // 14: bosdyn.api.graph_nav.NavigateToRequest.leases:type_name -> bosdyn.api.Lease
	18,  // 15: bosdyn.api.graph_nav.NavigateToRequest.route_params:type_name -> bosdyn.api.graph_nav.RouteGenParams
	19,  // 16: bosdyn.api.graph_nav.NavigateToRequest.travel_params:type_name -> bosdyn.api.graph_nav.TravelParams
	56,  // 17: bosdyn.api.graph_nav.NavigateToRequest.end_time:type_name -> google.protobuf.Timestamp
	57,  // 18: bosdyn.api.graph_nav.NavigateToRequest.destination_waypoint_tform_body_goal:type_name -> bosdyn.api.SE2Pose
	51,  // 19: bosdyn.api.graph_nav.NavigateToResponse.header:type_name -> bosdyn.api.ResponseHeader
	52,  // 20: bosdyn.api.graph_nav.NavigateToResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	3,   // 21: bosdyn.api.graph_nav.NavigateToResponse.status:type_name -> bosdyn.api.graph_nav.NavigateToResponse.Status
	53,  // 22: bosdyn.api.graph_nav.NavigateToResponse.impaired_state:type_name -> bosdyn.api.RobotImpairedState
	4,   // 23: bosdyn.api.graph_nav.RouteFollowingParams.new_cmd_behavior:type_name -> bosdyn.api.graph_nav.RouteFollowingParams.StartRouteBehavior
	5,   // 24: bosdyn.api.graph_nav.RouteFollowingParams.existing_cmd_behavior:type_name -> bosdyn.api.graph_nav.RouteFollowingParams.ResumeBehavior
	6,   // 25: bosdyn.api.graph_nav.RouteFollowingParams.route_blocked_behavior:type_name -> bosdyn.api.graph_nav.RouteFollowingParams.RouteBlockedBehavior
	48,  // 26: bosdyn.api.graph_nav.NavigateRouteRequest.header:type_name -> bosdyn.api.RequestHeader
	55,  // 27: bosdyn.api.graph_nav.NavigateRouteRequest.leases:type_name -> bosdyn.api.Lease
	58,  // 28: bosdyn.api.graph_nav.NavigateRouteRequest.route:type_name -> bosdyn.api.graph_nav.Route
	22,  // 29: bosdyn.api.graph_nav.NavigateRouteRequest.route_follow_params:type_name -> bosdyn.api.graph_nav.RouteFollowingParams
	19,  // 30: bosdyn.api.graph_nav.NavigateRouteRequest.travel_params:type_name -> bosdyn.api.graph_nav.TravelParams
	56,  // 31: bosdyn.api.graph_nav.NavigateRouteRequest.end_time:type_name -> google.protobuf.Timestamp
	57,  // 32: bosdyn.api.graph_nav.NavigateRouteRequest.destination_waypoint_tform_body_goal:type_name -> bosdyn.api.SE2Pose
	51,  // 33: bosdyn.api.graph_nav.NavigateRouteResponse.header:type_name -> bosdyn.api.ResponseHeader
	52,  // 34: bosdyn.api.graph_nav.NavigateRouteResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	7,   // 35: bosdyn.api.graph_nav.NavigateRouteResponse.status:type_name -> bosdyn.api.graph_nav.NavigateRouteResponse.Status
	53,  // 36: bosdyn.api.graph_nav.NavigateRouteResponse.impaired_state:type_name -> bosdyn.api.RobotImpairedState
	59,  // 37: bosdyn.api.graph_nav.NavigateRouteResponse.error_edge_ids:type_name -> bosdyn.api.graph_nav.Edge.Id
	48,  // 38: bosdyn.api.graph_nav.NavigateToAnchorRequest.header:type_name -> bosdyn.api.RequestHeader
	55,  // 39: bosdyn.api.graph_nav.NavigateToAnchorRequest.leases:type_name -> bosdyn.api.Lease
	50,  // 40: bosdyn.api.graph_nav.NavigateToAnchorRequest.seed_tform_goal:type_name -> bosdyn.api.SE3Pose
	60,  // 41: bosdyn.api.graph_nav.NavigateToAnchorRequest.goal_waypoint_rt_seed_ewrt_seed_tolerance:type_name -> bosdyn.api.Vec3
	18,  // 42: bosdyn.api.graph_nav.NavigateToAnchorRequest.route_params:type_name -> bosdyn.api.graph_nav.RouteGenParams
	19,  // 43: bosdyn.api.graph_nav.NavigateToAnchorRequest.travel_params:type_name -> bosdyn.api.graph_nav.TravelParams
	56,  // 44: bosdyn.api.graph_nav.NavigateToAnchorRequest.end_time:type_name -> google.protobuf.Timestamp
	51,  // 45: bosdyn.api.graph_nav.NavigateToAnchorResponse.header:type_name -> bosdyn.api.ResponseHeader
	52,  // 46: bosdyn.api.graph_nav.NavigateToAnchorResponse.lease_use_results:type_name -> bosdyn.api.LeaseUseResult
	8,   // 47: bosdyn.api.graph_nav.NavigateToAnchorResponse.status:type_name -> bosdyn.api.graph_nav.NavigateToAnchorResponse.Status
	53,  // 48: bosdyn.api.graph_nav.NavigateToAnchorResponse.impaired_state:type_name -> bosdyn.api.RobotImpairedState
	48,  // 49: bosdyn.api.graph_nav.NavigationFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	51,  // 50: bosdyn.api.graph_nav.NavigationFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	9,   // 51: bosdyn.api.graph_nav.NavigationFeedbackResponse.status:type_name -> bosdyn.api.graph_nav.NavigationFeedbackResponse.Status
	53,  // 52: bosdyn.api.graph_nav.NavigationFeedbackResponse.impaired_state:type_name -> bosdyn.api.RobotImpairedState
	58,  // 53: bosdyn.api.graph_nav.NavigationFeedbackResponse.remaining_route:type_name -> bosdyn.api.graph_nav.Route
	50,  // 54: bosdyn.api.graph_nav.NavigationFeedbackResponse.last_ko_tform_goal:type_name -> bosdyn.api.SE3Pose
	61,  // 55: bosdyn.api.graph_nav.NavigationFeedbackResponse.body_movement_status:type_name -> bosdyn.api.SE2TrajectoryCommand.Feedback.BodyMovementStatus
	48,  // 56: bosdyn.api.graph_nav.GetLocalizationStateRequest.header:type_name -> bosdyn.api.RequestHeader
	51,  // 57: bosdyn.api.graph_nav.GetLocalizationStateResponse.header:type_name -> bosdyn.api.ResponseHeader
	49,  // 58: bosdyn.api.graph_nav.GetLocalizationStateResponse.localization:type_name -> bosdyn.api.graph_nav.Localization
	62,  // 59: bosdyn.api.graph_nav.GetLocalizationStateResponse.robot_kinematics:type_name -> bosdyn.api.KinematicState
	30,  // 60: bosdyn.api.graph_nav.GetLocalizationStateResponse.remote_cloud_status:type_name -> bosdyn.api.graph_nav.RemotePointCloudStatus
	63,  // 61: bosdyn.api.graph_nav.GetLocalizationStateResponse.live_data:type_name -> bosdyn.api.graph_nav.WaypointSnapshot
	31,  // 62: bosdyn.api.graph_nav.GetLocalizationStateResponse.lost_detector_state:type_name -> bosdyn.api.graph_nav.LostDetectorState
	48,  // 63: bosdyn.api.graph_nav.ClearGraphRequest.header:type_name -> bosdyn.api.RequestHeader
	55,  // 64: bosdyn.api.graph_nav.ClearGraphRequest.lease:type_name -> bosdyn.api.Lease
	51,  // 65: bosdyn.api.graph_nav.ClearGraphResponse.header:type_name -> bosdyn.api.ResponseHeader
	52,  // 66: bosdyn.api.graph_nav.ClearGraphResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	10,  // 67: bosdyn.api.graph_nav.ClearGraphResponse.status:type_name -> bosdyn.api.graph_nav.ClearGraphResponse.Status
	48,  // 68: bosdyn.api.graph_nav.UploadGraphRequest.header:type_name -> bosdyn.api.RequestHeader
	64,  // 69: bosdyn.api.graph_nav.UploadGraphRequest.graph:type_name -> bosdyn.api.graph_nav.Graph
	55,  // 70: bosdyn.api.graph_nav.UploadGraphRequest.lease:type_name -> bosdyn.api.Lease
	51,  // 71: bosdyn.api.graph_nav.UploadGraphResponse.header:type_name -> bosdyn.api.ResponseHeader
	11,  // 72: bosdyn.api.graph_nav.UploadGraphResponse.status:type_name -> bosdyn.api.graph_nav.UploadGraphResponse.Status
	52,  // 73: bosdyn.api.graph_nav.UploadGraphResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	65,  // 74: bosdyn.api.graph_nav.UploadGraphResponse.license_status:type_name -> bosdyn.api.LicenseInfo.Status
	16,  // 75: bosdyn.api.graph_nav.UploadGraphResponse.sensor_status:type_name -> bosdyn.api.graph_nav.SensorCompatibilityStatus
	48,  // 76: bosdyn.api.graph_nav.DownloadGraphRequest.header:type_name -> bosdyn.api.RequestHeader
	51,  // 77: bosdyn.api.graph_nav.DownloadGraphResponse.header:type_name -> bosdyn.api.ResponseHeader
	64,  // 78: bosdyn.api.graph_nav.DownloadGraphResponse.graph:type_name -> bosdyn.api.graph_nav.Graph
	48,  // 79: bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.header:type_name -> bosdyn.api.RequestHeader
	66,  // 80: bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.chunk:type_name -> bosdyn.api.DataChunk
	55,  // 81: bosdyn.api.graph_nav.UploadWaypointSnapshotRequest.lease:type_name -> bosdyn.api.Lease
	51,  // 82: bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.header:type_name -> bosdyn.api.ResponseHeader
	52,  // 83: bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	12,  // 84: bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.status:type_name -> bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.Status
	16,  // 85: bosdyn.api.graph_nav.UploadWaypointSnapshotResponse.sensor_status:type_name -> bosdyn.api.graph_nav.SensorCompatibilityStatus
	48,  // 86: bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.header:type_name -> bosdyn.api.RequestHeader
	66,  // 87: bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.chunk:type_name -> bosdyn.api.DataChunk
	55,  // 88: bosdyn.api.graph_nav.UploadEdgeSnapshotRequest.lease:type_name -> bosdyn.api.Lease
	51,  // 89: bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.header:type_name -> bosdyn.api.ResponseHeader
	52,  // 90: bosdyn.api.graph_nav.UploadEdgeSnapshotResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	48,  // 91: bosdyn.api.graph_nav.DownloadWaypointSnapshotRequest.header:type_name -> bosdyn.api.RequestHeader
	51,  // 92: bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.header:type_name -> bosdyn.api.ResponseHeader
	13,  // 93: bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.status:type_name -> bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.Status
	66,  // 94: bosdyn.api.graph_nav.DownloadWaypointSnapshotResponse.chunk:type_name -> bosdyn.api.DataChunk
	48,  // 95: bosdyn.api.graph_nav.DownloadEdgeSnapshotRequest.header:type_name -> bosdyn.api.RequestHeader
	51,  // 96: bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.header:type_name -> bosdyn.api.ResponseHeader
	14,  // 97: bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.status:type_name -> bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.Status
	66,  // 98: bosdyn.api.graph_nav.DownloadEdgeSnapshotResponse.chunk:type_name -> bosdyn.api.DataChunk
	50,  // 99: bosdyn.api.graph_nav.SetLocalizationResponse.SuspectedAmbiguity.alternate_robot_tform_waypoint:type_name -> bosdyn.api.SE3Pose
	100, // [100:100] is the sub-list for method output_type
	100, // [100:100] is the sub-list for method input_type
	100, // [100:100] is the sub-list for extension type_name
	100, // [100:100] is the sub-list for extension extendee
	0,   // [0:100] is the sub-list for field type_name
}

func init() { file_bosdyn_api_graph_nav_graph_nav_proto_init() }
func file_bosdyn_api_graph_nav_graph_nav_proto_init() {
	if File_bosdyn_api_graph_nav_graph_nav_proto != nil {
		return
	}
	file_bosdyn_api_graph_nav_nav_proto_init()
	file_bosdyn_api_graph_nav_map_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLocalizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SensorCompatibilityStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLocalizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteGenParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TravelParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateToRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateToResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteFollowingParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateRouteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateRouteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateToAnchorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigateToAnchorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NavigationFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalizationStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemotePointCloudStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LostDetectorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalizationStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadGraphRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadGraphResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadWaypointSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadWaypointSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadEdgeSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UploadEdgeSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadWaypointSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadWaypointSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadEdgeSnapshotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownloadEdgeSnapshotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetLocalizationResponse_SuspectedAmbiguity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_graph_nav_graph_nav_proto_rawDesc,
			NumEnums:      15,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_graph_nav_graph_nav_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_graph_nav_graph_nav_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_graph_nav_graph_nav_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_graph_nav_graph_nav_proto_msgTypes,
	}.Build()
	File_bosdyn_api_graph_nav_graph_nav_proto = out.File
	file_bosdyn_api_graph_nav_graph_nav_proto_rawDesc = nil
	file_bosdyn_api_graph_nav_graph_nav_proto_goTypes = nil
	file_bosdyn_api_graph_nav_graph_nav_proto_depIdxs = nil
}
