// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/graph_nav/recording_service.proto

package graph_nav

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GraphNavRecordingServiceClient is the client API for GraphNavRecordingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GraphNavRecordingServiceClient interface {
	// Start recording the map from the current localization.
	// Creates a waypoint if you are starting to record. Otherwise, waits until you are
	// sufficiently far away from the previous waypoint.
	StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*StartRecordingResponse, error)
	// Stop recording the map from the current localization.
	StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*StopRecordingResponse, error)
	// Create a new waypoint at the current localization.
	CreateWaypoint(ctx context.Context, in *CreateWaypointRequest, opts ...grpc.CallOption) (*CreateWaypointResponse, error)
	// Set the environmnent and name prefix to use for the recording.
	SetRecordingEnvironment(ctx context.Context, in *SetRecordingEnvironmentRequest, opts ...grpc.CallOption) (*SetRecordingEnvironmentResponse, error)
	// Create an arbitrary edge between two waypoints.
	CreateEdge(ctx context.Context, in *CreateEdgeRequest, opts ...grpc.CallOption) (*CreateEdgeResponse, error)
	// Tells the client the internal state of the record service, and the structure of the map that has been recorded
	// so far.
	GetRecordStatus(ctx context.Context, in *GetRecordStatusRequest, opts ...grpc.CallOption) (*GetRecordStatusResponse, error)
}

type graphNavRecordingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGraphNavRecordingServiceClient(cc grpc.ClientConnInterface) GraphNavRecordingServiceClient {
	return &graphNavRecordingServiceClient{cc}
}

func (c *graphNavRecordingServiceClient) StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*StartRecordingResponse, error) {
	out := new(StartRecordingResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavRecordingService/StartRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavRecordingServiceClient) StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*StopRecordingResponse, error) {
	out := new(StopRecordingResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavRecordingService/StopRecording", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavRecordingServiceClient) CreateWaypoint(ctx context.Context, in *CreateWaypointRequest, opts ...grpc.CallOption) (*CreateWaypointResponse, error) {
	out := new(CreateWaypointResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateWaypoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavRecordingServiceClient) SetRecordingEnvironment(ctx context.Context, in *SetRecordingEnvironmentRequest, opts ...grpc.CallOption) (*SetRecordingEnvironmentResponse, error) {
	out := new(SetRecordingEnvironmentResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavRecordingService/SetRecordingEnvironment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavRecordingServiceClient) CreateEdge(ctx context.Context, in *CreateEdgeRequest, opts ...grpc.CallOption) (*CreateEdgeResponse, error) {
	out := new(CreateEdgeResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *graphNavRecordingServiceClient) GetRecordStatus(ctx context.Context, in *GetRecordStatusRequest, opts ...grpc.CallOption) (*GetRecordStatusResponse, error) {
	out := new(GetRecordStatusResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.graph_nav.GraphNavRecordingService/GetRecordStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GraphNavRecordingServiceServer is the server API for GraphNavRecordingService service.
// All implementations must embed UnimplementedGraphNavRecordingServiceServer
// for forward compatibility
type GraphNavRecordingServiceServer interface {
	// Start recording the map from the current localization.
	// Creates a waypoint if you are starting to record. Otherwise, waits until you are
	// sufficiently far away from the previous waypoint.
	StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error)
	// Stop recording the map from the current localization.
	StopRecording(context.Context, *StopRecordingRequest) (*StopRecordingResponse, error)
	// Create a new waypoint at the current localization.
	CreateWaypoint(context.Context, *CreateWaypointRequest) (*CreateWaypointResponse, error)
	// Set the environmnent and name prefix to use for the recording.
	SetRecordingEnvironment(context.Context, *SetRecordingEnvironmentRequest) (*SetRecordingEnvironmentResponse, error)
	// Create an arbitrary edge between two waypoints.
	CreateEdge(context.Context, *CreateEdgeRequest) (*CreateEdgeResponse, error)
	// Tells the client the internal state of the record service, and the structure of the map that has been recorded
	// so far.
	GetRecordStatus(context.Context, *GetRecordStatusRequest) (*GetRecordStatusResponse, error)
	mustEmbedUnimplementedGraphNavRecordingServiceServer()
}

// UnimplementedGraphNavRecordingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGraphNavRecordingServiceServer struct {
}

func (UnimplementedGraphNavRecordingServiceServer) StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedGraphNavRecordingServiceServer) StopRecording(context.Context, *StopRecordingRequest) (*StopRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedGraphNavRecordingServiceServer) CreateWaypoint(context.Context, *CreateWaypointRequest) (*CreateWaypointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWaypoint not implemented")
}
func (UnimplementedGraphNavRecordingServiceServer) SetRecordingEnvironment(context.Context, *SetRecordingEnvironmentRequest) (*SetRecordingEnvironmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRecordingEnvironment not implemented")
}
func (UnimplementedGraphNavRecordingServiceServer) CreateEdge(context.Context, *CreateEdgeRequest) (*CreateEdgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEdge not implemented")
}
func (UnimplementedGraphNavRecordingServiceServer) GetRecordStatus(context.Context, *GetRecordStatusRequest) (*GetRecordStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordStatus not implemented")
}
func (UnimplementedGraphNavRecordingServiceServer) mustEmbedUnimplementedGraphNavRecordingServiceServer() {
}

// UnsafeGraphNavRecordingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GraphNavRecordingServiceServer will
// result in compilation errors.
type UnsafeGraphNavRecordingServiceServer interface {
	mustEmbedUnimplementedGraphNavRecordingServiceServer()
}

func RegisterGraphNavRecordingServiceServer(s grpc.ServiceRegistrar, srv GraphNavRecordingServiceServer) {
	s.RegisterService(&GraphNavRecordingService_ServiceDesc, srv)
}

func _GraphNavRecordingService_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavRecordingServiceServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavRecordingService/StartRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavRecordingServiceServer).StartRecording(ctx, req.(*StartRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavRecordingService_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavRecordingServiceServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavRecordingService/StopRecording",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavRecordingServiceServer).StopRecording(ctx, req.(*StopRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavRecordingService_CreateWaypoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWaypointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavRecordingServiceServer).CreateWaypoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateWaypoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavRecordingServiceServer).CreateWaypoint(ctx, req.(*CreateWaypointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavRecordingService_SetRecordingEnvironment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetRecordingEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavRecordingServiceServer).SetRecordingEnvironment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavRecordingService/SetRecordingEnvironment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavRecordingServiceServer).SetRecordingEnvironment(ctx, req.(*SetRecordingEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavRecordingService_CreateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEdgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavRecordingServiceServer).CreateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavRecordingService/CreateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavRecordingServiceServer).CreateEdge(ctx, req.(*CreateEdgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GraphNavRecordingService_GetRecordStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphNavRecordingServiceServer).GetRecordStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.graph_nav.GraphNavRecordingService/GetRecordStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphNavRecordingServiceServer).GetRecordStatus(ctx, req.(*GetRecordStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GraphNavRecordingService_ServiceDesc is the grpc.ServiceDesc for GraphNavRecordingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GraphNavRecordingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.graph_nav.GraphNavRecordingService",
	HandlerType: (*GraphNavRecordingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartRecording",
			Handler:    _GraphNavRecordingService_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _GraphNavRecordingService_StopRecording_Handler,
		},
		{
			MethodName: "CreateWaypoint",
			Handler:    _GraphNavRecordingService_CreateWaypoint_Handler,
		},
		{
			MethodName: "SetRecordingEnvironment",
			Handler:    _GraphNavRecordingService_SetRecordingEnvironment_Handler,
		},
		{
			MethodName: "CreateEdge",
			Handler:    _GraphNavRecordingService_CreateEdge_Handler,
		},
		{
			MethodName: "GetRecordStatus",
			Handler:    _GraphNavRecordingService_GetRecordStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/graph_nav/recording_service.proto",
}
