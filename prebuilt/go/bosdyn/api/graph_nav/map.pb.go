// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/graph_nav/map.proto

package graph_nav

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	spot "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api/spot"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Indicator of whether or not the waypoint and edge annotations are complete and filled out.
type AnnotationState int32

const (
	// No assertions made about this annotation.
	AnnotationState_ANNOTATION_STATE_UNKNOWN AnnotationState = 0
	// This annotation and all of its fields have been deliberately set.
	AnnotationState_ANNOTATION_STATE_SET AnnotationState = 1
	// This annotation has been deliberately set to "no annotation" -- any subfields are unset.
	AnnotationState_ANNOTATION_STATE_NONE AnnotationState = 2
)

// Enum value maps for AnnotationState.
var (
	AnnotationState_name = map[int32]string{
		0: "ANNOTATION_STATE_UNKNOWN",
		1: "ANNOTATION_STATE_SET",
		2: "ANNOTATION_STATE_NONE",
	}
	AnnotationState_value = map[string]int32{
		"ANNOTATION_STATE_UNKNOWN": 0,
		"ANNOTATION_STATE_SET":     1,
		"ANNOTATION_STATE_NONE":    2,
	}
)

func (x AnnotationState) Enum() *AnnotationState {
	p := new(AnnotationState)
	*p = x
	return p
}

func (x AnnotationState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AnnotationState) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_map_proto_enumTypes[0].Descriptor()
}

func (AnnotationState) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_map_proto_enumTypes[0]
}

func (x AnnotationState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AnnotationState.Descriptor instead.
func (AnnotationState) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0}
}

type Waypoint_WaypointSource int32

const (
	Waypoint_WAYPOINT_SOURCE_UNKNOWN Waypoint_WaypointSource = 0
	// Waypoints from the robot's location during recording.
	Waypoint_WAYPOINT_SOURCE_ROBOT_PATH Waypoint_WaypointSource = 1
	// Waypoints with user-requested placement.
	Waypoint_WAYPOINT_SOURCE_USER_REQUEST Waypoint_WaypointSource = 2
	// Waypoints that may help find alternate routes.
	Waypoint_WAYPOINT_SOURCE_ALTERNATE_ROUTE_FINDING Waypoint_WaypointSource = 3
)

// Enum value maps for Waypoint_WaypointSource.
var (
	Waypoint_WaypointSource_name = map[int32]string{
		0: "WAYPOINT_SOURCE_UNKNOWN",
		1: "WAYPOINT_SOURCE_ROBOT_PATH",
		2: "WAYPOINT_SOURCE_USER_REQUEST",
		3: "WAYPOINT_SOURCE_ALTERNATE_ROUTE_FINDING",
	}
	Waypoint_WaypointSource_value = map[string]int32{
		"WAYPOINT_SOURCE_UNKNOWN":                 0,
		"WAYPOINT_SOURCE_ROBOT_PATH":              1,
		"WAYPOINT_SOURCE_USER_REQUEST":            2,
		"WAYPOINT_SOURCE_ALTERNATE_ROUTE_FINDING": 3,
	}
)

func (x Waypoint_WaypointSource) Enum() *Waypoint_WaypointSource {
	p := new(Waypoint_WaypointSource)
	*p = x
	return p
}

func (x Waypoint_WaypointSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Waypoint_WaypointSource) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_map_proto_enumTypes[1].Descriptor()
}

func (Waypoint_WaypointSource) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_map_proto_enumTypes[1]
}

func (x Waypoint_WaypointSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Waypoint_WaypointSource.Descriptor instead.
func (Waypoint_WaypointSource) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0, 0}
}

type Edge_EdgeSource int32

const (
	Edge_EDGE_SOURCE_UNKNOWN Edge_EdgeSource = 0
	// Edges with transforms from odometry.
	Edge_EDGE_SOURCE_ODOMETRY Edge_EdgeSource = 1
	// Edges with transforms from a short chain of other edges.
	Edge_EDGE_SOURCE_SMALL_LOOP_CLOSURE Edge_EdgeSource = 2
	// Edges with transforms from multiple fiducial observations.
	Edge_EDGE_SOURCE_FIDUCIAL_LOOP_CLOSURE Edge_EdgeSource = 3
	// Edges that may help find alternate routes.
	Edge_EDGE_SOURCE_ALTERNATE_ROUTE_FINDING Edge_EdgeSource = 4
	// Created via a CreateEdge RPC.
	Edge_EDGE_SOURCE_USER_REQUEST Edge_EdgeSource = 5
)

// Enum value maps for Edge_EdgeSource.
var (
	Edge_EdgeSource_name = map[int32]string{
		0: "EDGE_SOURCE_UNKNOWN",
		1: "EDGE_SOURCE_ODOMETRY",
		2: "EDGE_SOURCE_SMALL_LOOP_CLOSURE",
		3: "EDGE_SOURCE_FIDUCIAL_LOOP_CLOSURE",
		4: "EDGE_SOURCE_ALTERNATE_ROUTE_FINDING",
		5: "EDGE_SOURCE_USER_REQUEST",
	}
	Edge_EdgeSource_value = map[string]int32{
		"EDGE_SOURCE_UNKNOWN":                 0,
		"EDGE_SOURCE_ODOMETRY":                1,
		"EDGE_SOURCE_SMALL_LOOP_CLOSURE":      2,
		"EDGE_SOURCE_FIDUCIAL_LOOP_CLOSURE":   3,
		"EDGE_SOURCE_ALTERNATE_ROUTE_FINDING": 4,
		"EDGE_SOURCE_USER_REQUEST":            5,
	}
)

func (x Edge_EdgeSource) Enum() *Edge_EdgeSource {
	p := new(Edge_EdgeSource)
	*p = x
	return p
}

func (x Edge_EdgeSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Edge_EdgeSource) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_map_proto_enumTypes[2].Descriptor()
}

func (Edge_EdgeSource) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_map_proto_enumTypes[2]
}

func (x Edge_EdgeSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Edge_EdgeSource.Descriptor instead.
func (Edge_EdgeSource) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{2, 0}
}

type Edge_Annotations_DirectionConstraint int32

const (
	// We don't know if there are direction constraints.
	Edge_Annotations_DIRECTION_CONSTRAINT_UNKNOWN Edge_Annotations_DirectionConstraint = 0
	// The robot must not turn while walking the edge, but can face either waypoint.
	Edge_Annotations_DIRECTION_CONSTRAINT_NO_TURN Edge_Annotations_DirectionConstraint = 1
	// Robot should walk the edge face-first.
	Edge_Annotations_DIRECTION_CONSTRAINT_FORWARD Edge_Annotations_DirectionConstraint = 2
	// Robot should walk the edge rear-first.
	Edge_Annotations_DIRECTION_CONSTRAINT_REVERSE Edge_Annotations_DirectionConstraint = 3
	// No constraints on which way the robot faces.
	Edge_Annotations_DIRECTION_CONSTRAINT_NONE Edge_Annotations_DirectionConstraint = 4
)

// Enum value maps for Edge_Annotations_DirectionConstraint.
var (
	Edge_Annotations_DirectionConstraint_name = map[int32]string{
		0: "DIRECTION_CONSTRAINT_UNKNOWN",
		1: "DIRECTION_CONSTRAINT_NO_TURN",
		2: "DIRECTION_CONSTRAINT_FORWARD",
		3: "DIRECTION_CONSTRAINT_REVERSE",
		4: "DIRECTION_CONSTRAINT_NONE",
	}
	Edge_Annotations_DirectionConstraint_value = map[string]int32{
		"DIRECTION_CONSTRAINT_UNKNOWN": 0,
		"DIRECTION_CONSTRAINT_NO_TURN": 1,
		"DIRECTION_CONSTRAINT_FORWARD": 2,
		"DIRECTION_CONSTRAINT_REVERSE": 3,
		"DIRECTION_CONSTRAINT_NONE":    4,
	}
)

func (x Edge_Annotations_DirectionConstraint) Enum() *Edge_Annotations_DirectionConstraint {
	p := new(Edge_Annotations_DirectionConstraint)
	*p = x
	return p
}

func (x Edge_Annotations_DirectionConstraint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Edge_Annotations_DirectionConstraint) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_graph_nav_map_proto_enumTypes[3].Descriptor()
}

func (Edge_Annotations_DirectionConstraint) Type() protoreflect.EnumType {
	return &file_bosdyn_api_graph_nav_map_proto_enumTypes[3]
}

func (x Edge_Annotations_DirectionConstraint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Edge_Annotations_DirectionConstraint.Descriptor instead.
func (Edge_Annotations_DirectionConstraint) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{2, 1, 0}
}

// A base element of the graph nav map. A waypoint consists of a reference frame, a name,
// a unique ID, annotations, and sensor data.
type Waypoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the waypoint. Unique across all maps.
	// This identifier does not have to be updated when its fields change.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of this waypoint's Snapshot data.
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// Transform from the KO frame (at time of recording) to the waypoint.
	WaypointTformKo *api.SE3Pose `protobuf:"bytes,3,opt,name=waypoint_tform_ko,json=waypointTformKo,proto3" json:"waypoint_tform_ko,omitempty"`
	// Annotations specific to the current waypoint.
	Annotations *Waypoint_Annotations `protobuf:"bytes,4,opt,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *Waypoint) Reset() {
	*x = Waypoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waypoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waypoint) ProtoMessage() {}

func (x *Waypoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waypoint.ProtoReflect.Descriptor instead.
func (*Waypoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0}
}

func (x *Waypoint) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Waypoint) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *Waypoint) GetWaypointTformKo() *api.SE3Pose {
	if x != nil {
		return x.WaypointTformKo
	}
	return nil
}

func (x *Waypoint) GetAnnotations() *Waypoint_Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Relevant data collected at the waypoint.
// May be used for localization or automatically generating annotations, for example.
// Should be indexed by a waypoint's "snapshot_id" field.
type WaypointSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of this snapshot.
	// Snapshots are immutable -- if any of the other fields change, this ID must also change.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Any images captured at the waypoint.
	Images []*api.ImageResponse `protobuf:"bytes,2,rep,name=images,proto3" json:"images,omitempty"`
	// Aggregated point cloud data.
	PointCloud *api.PointCloud `protobuf:"bytes,3,opt,name=point_cloud,json=pointCloud,proto3" json:"point_cloud,omitempty"`
	// Perception objects seen at snapshot time.
	Objects []*api.WorldObject `protobuf:"bytes,4,rep,name=objects,proto3" json:"objects,omitempty"`
	// Full robot state during snapshot.
	RobotState *api.RobotState `protobuf:"bytes,5,opt,name=robot_state,json=robotState,proto3" json:"robot_state,omitempty"`
	// Robot grid data.
	RobotLocalGrids []*api.LocalGrid `protobuf:"bytes,6,rep,name=robot_local_grids,json=robotLocalGrids,proto3" json:"robot_local_grids,omitempty"`
	// If true, the point cloud of this snapshot has been processed.
	IsPointCloudProcessed bool `protobuf:"varint,8,opt,name=is_point_cloud_processed,json=isPointCloudProcessed,proto3" json:"is_point_cloud_processed,omitempty"`
	// If this snapshot is a modified version of the raw snapshot with the given ID (for example, it has been processed),
	// a new unique ID will we assigned to this field. If the field is empty, this is the raw version of the snapshot.
	VersionId string `protobuf:"bytes,9,opt,name=version_id,json=versionId,proto3" json:"version_id,omitempty"`
	// If true, the point cloud contains data from a remote point cloud service,
	// such as LIDAR.
	HasRemotePointCloudSensor bool `protobuf:"varint,10,opt,name=has_remote_point_cloud_sensor,json=hasRemotePointCloudSensor,proto3" json:"has_remote_point_cloud_sensor,omitempty"`
	// Transform from the robot body to the remote point cloud sensor's
	// reference frame.
	BodyTformRemotePointCloudSensor *api.SE3Pose `protobuf:"bytes,11,opt,name=body_tform_remote_point_cloud_sensor,json=bodyTformRemotePointCloudSensor,proto3" json:"body_tform_remote_point_cloud_sensor,omitempty"`
	// Defines the payloads attached to the robot at this waypoint.
	Payloads []*api.Payload `protobuf:"bytes,12,rep,name=payloads,proto3" json:"payloads,omitempty"`
}

func (x *WaypointSnapshot) Reset() {
	*x = WaypointSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaypointSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaypointSnapshot) ProtoMessage() {}

func (x *WaypointSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaypointSnapshot.ProtoReflect.Descriptor instead.
func (*WaypointSnapshot) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{1}
}

func (x *WaypointSnapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WaypointSnapshot) GetImages() []*api.ImageResponse {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *WaypointSnapshot) GetPointCloud() *api.PointCloud {
	if x != nil {
		return x.PointCloud
	}
	return nil
}

func (x *WaypointSnapshot) GetObjects() []*api.WorldObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *WaypointSnapshot) GetRobotState() *api.RobotState {
	if x != nil {
		return x.RobotState
	}
	return nil
}

func (x *WaypointSnapshot) GetRobotLocalGrids() []*api.LocalGrid {
	if x != nil {
		return x.RobotLocalGrids
	}
	return nil
}

func (x *WaypointSnapshot) GetIsPointCloudProcessed() bool {
	if x != nil {
		return x.IsPointCloudProcessed
	}
	return false
}

func (x *WaypointSnapshot) GetVersionId() string {
	if x != nil {
		return x.VersionId
	}
	return ""
}

func (x *WaypointSnapshot) GetHasRemotePointCloudSensor() bool {
	if x != nil {
		return x.HasRemotePointCloudSensor
	}
	return false
}

func (x *WaypointSnapshot) GetBodyTformRemotePointCloudSensor() *api.SE3Pose {
	if x != nil {
		return x.BodyTformRemotePointCloudSensor
	}
	return nil
}

func (x *WaypointSnapshot) GetPayloads() []*api.Payload {
	if x != nil {
		return x.Payloads
	}
	return nil
}

// A base element of the graph nav map. Edges consist of a directed edge from one
// waypoint to another and a transform that estimates the relationship in 3D space
// between the two waypoints.
type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of this Edge.
	// Edges are mutable -- the identifier does not have to be updated when other fields change.
	Id *Edge_Id `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Identifier of this edge's Snapshot data.
	SnapshotId string `protobuf:"bytes,2,opt,name=snapshot_id,json=snapshotId,proto3" json:"snapshot_id,omitempty"`
	// Describes the transform between the "from" waypoint and the "to" waypoint.
	FromTformTo *api.SE3Pose `protobuf:"bytes,3,opt,name=from_tform_to,json=fromTformTo,proto3" json:"from_tform_to,omitempty"`
	// Annotations specific to the current edge.
	Annotations *Edge_Annotations `protobuf:"bytes,4,opt,name=annotations,proto3" json:"annotations,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{2}
}

func (x *Edge) GetId() *Edge_Id {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Edge) GetSnapshotId() string {
	if x != nil {
		return x.SnapshotId
	}
	return ""
}

func (x *Edge) GetFromTformTo() *api.SE3Pose {
	if x != nil {
		return x.FromTformTo
	}
	return nil
}

func (x *Edge) GetAnnotations() *Edge_Annotations {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// Relevant data collected along the edge.
// May be used for automatically generating annotations, for example.
type EdgeSnapshot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of this snapshot.
	// Snapshots are immutable -- if any of the other fields change, this ID must also change.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Sampling of stances as robot traversed this edge.
	Stances []*EdgeSnapshot_Stance `protobuf:"bytes,2,rep,name=stances,proto3" json:"stances,omitempty"`
}

func (x *EdgeSnapshot) Reset() {
	*x = EdgeSnapshot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSnapshot) ProtoMessage() {}

func (x *EdgeSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSnapshot.ProtoReflect.Descriptor instead.
func (*EdgeSnapshot) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{3}
}

func (x *EdgeSnapshot) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *EdgeSnapshot) GetStances() []*EdgeSnapshot_Stance {
	if x != nil {
		return x.Stances
	}
	return nil
}

// This associates a waypoint with a common reference frame, which is not necessarily metric.
type Anchor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the waypoint.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pose of the waypoint in the seed frame.
	SeedTformWaypoint *api.SE3Pose `protobuf:"bytes,2,opt,name=seed_tform_waypoint,json=seedTformWaypoint,proto3" json:"seed_tform_waypoint,omitempty"`
}

func (x *Anchor) Reset() {
	*x = Anchor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anchor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anchor) ProtoMessage() {}

func (x *Anchor) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anchor.ProtoReflect.Descriptor instead.
func (*Anchor) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{4}
}

func (x *Anchor) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Anchor) GetSeedTformWaypoint() *api.SE3Pose {
	if x != nil {
		return x.SeedTformWaypoint
	}
	return nil
}

// This associates a world object with a common reference frame, which is not necessarily metric.
type AnchoredWorldObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the world object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Pose of the object in the seed frame.
	SeedTformObject *api.SE3Pose `protobuf:"bytes,2,opt,name=seed_tform_object,json=seedTformObject,proto3" json:"seed_tform_object,omitempty"`
}

func (x *AnchoredWorldObject) Reset() {
	*x = AnchoredWorldObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnchoredWorldObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnchoredWorldObject) ProtoMessage() {}

func (x *AnchoredWorldObject) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnchoredWorldObject.ProtoReflect.Descriptor instead.
func (*AnchoredWorldObject) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{5}
}

func (x *AnchoredWorldObject) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnchoredWorldObject) GetSeedTformObject() *api.SE3Pose {
	if x != nil {
		return x.SeedTformObject
	}
	return nil
}

type Anchoring struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The waypoint ids for the graph, expressed in a common reference frame, which is not
	// necessarily metric. If there is no anchoring, this is empty.
	Anchors []*Anchor `protobuf:"bytes,1,rep,name=anchors,proto3" json:"anchors,omitempty"`
	// World objects, located in the common reference frame.
	Objects []*AnchoredWorldObject `protobuf:"bytes,2,rep,name=objects,proto3" json:"objects,omitempty"`
}

func (x *Anchoring) Reset() {
	*x = Anchoring{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Anchoring) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Anchoring) ProtoMessage() {}

func (x *Anchoring) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Anchoring.ProtoReflect.Descriptor instead.
func (*Anchoring) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{6}
}

func (x *Anchoring) GetAnchors() []*Anchor {
	if x != nil {
		return x.Anchors
	}
	return nil
}

func (x *Anchoring) GetObjects() []*AnchoredWorldObject {
	if x != nil {
		return x.Objects
	}
	return nil
}

// This is an arbitrary collection of waypoints and edges. The edges and waypoints are not required
// to be connected. A waypoint may belong to multiple graphs. This message is used to pass around
// information about a graph's topology, and is used to serialize map topology to and from files.
// Note that the graph does not contain any of the waypoint/edge data (which is found in snapshots).
// Snapshots are stored separately.
type Graph struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The waypoints for the graph (containing frames, annotations, and sensor data).
	Waypoints []*Waypoint `protobuf:"bytes,1,rep,name=waypoints,proto3" json:"waypoints,omitempty"`
	// The edges connecting the graph's waypoints.
	Edges []*Edge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges,omitempty"`
	// The anchoring (mapping from waypoints to their pose in a shared reference frame).
	Anchoring *Anchoring `protobuf:"bytes,3,opt,name=anchoring,proto3" json:"anchoring,omitempty"`
}

func (x *Graph) Reset() {
	*x = Graph{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{7}
}

func (x *Graph) GetWaypoints() []*Waypoint {
	if x != nil {
		return x.Waypoints
	}
	return nil
}

func (x *Graph) GetEdges() []*Edge {
	if x != nil {
		return x.Edges
	}
	return nil
}

func (x *Graph) GetAnchoring() *Anchoring {
	if x != nil {
		return x.Anchoring
	}
	return nil
}

// Annotations understood by BostonDynamics systems.
type Waypoint_Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Human-friendly name of the waypoint. For example, "Kitchen Fridge"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The time that the waypoint was created while recording a map.
	CreationTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
	// Estimate of the variance of ICP when performed at this waypoint, collected at record time.
	IcpVariance *api.SE3Covariance `protobuf:"bytes,2,opt,name=icp_variance,json=icpVariance,proto3" json:"icp_variance,omitempty"`
	// Options for how to localize to a waypoint (if at all).
	ScanMatchRegion *Waypoint_Annotations_LocalizeRegion `protobuf:"bytes,3,opt,name=scan_match_region,json=scanMatchRegion,proto3" json:"scan_match_region,omitempty"`
	// How this waypoint was made.
	WaypointSource Waypoint_WaypointSource `protobuf:"varint,5,opt,name=waypoint_source,json=waypointSource,proto3,enum=bosdyn.api.graph_nav.Waypoint_WaypointSource" json:"waypoint_source,omitempty"`
}

func (x *Waypoint_Annotations) Reset() {
	*x = Waypoint_Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waypoint_Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waypoint_Annotations) ProtoMessage() {}

func (x *Waypoint_Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waypoint_Annotations.ProtoReflect.Descriptor instead.
func (*Waypoint_Annotations) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Waypoint_Annotations) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Waypoint_Annotations) GetCreationTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTime
	}
	return nil
}

func (x *Waypoint_Annotations) GetIcpVariance() *api.SE3Covariance {
	if x != nil {
		return x.IcpVariance
	}
	return nil
}

func (x *Waypoint_Annotations) GetScanMatchRegion() *Waypoint_Annotations_LocalizeRegion {
	if x != nil {
		return x.ScanMatchRegion
	}
	return nil
}

func (x *Waypoint_Annotations) GetWaypointSource() Waypoint_WaypointSource {
	if x != nil {
		return x.WaypointSource
	}
	return Waypoint_WAYPOINT_SOURCE_UNKNOWN
}

type Waypoint_Annotations_LocalizeRegion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Check this before reading other fields.
	State AnnotationState `protobuf:"varint,1,opt,name=state,proto3,enum=bosdyn.api.graph_nav.AnnotationState" json:"state,omitempty"`
	// Types that are assignable to Region:
	//	*Waypoint_Annotations_LocalizeRegion_DefaultRegion
	//	*Waypoint_Annotations_LocalizeRegion_Empty_
	//	*Waypoint_Annotations_LocalizeRegion_Circle
	Region isWaypoint_Annotations_LocalizeRegion_Region `protobuf_oneof:"region"`
}

func (x *Waypoint_Annotations_LocalizeRegion) Reset() {
	*x = Waypoint_Annotations_LocalizeRegion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waypoint_Annotations_LocalizeRegion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waypoint_Annotations_LocalizeRegion) ProtoMessage() {}

func (x *Waypoint_Annotations_LocalizeRegion) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waypoint_Annotations_LocalizeRegion.ProtoReflect.Descriptor instead.
func (*Waypoint_Annotations_LocalizeRegion) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Waypoint_Annotations_LocalizeRegion) GetState() AnnotationState {
	if x != nil {
		return x.State
	}
	return AnnotationState_ANNOTATION_STATE_UNKNOWN
}

func (m *Waypoint_Annotations_LocalizeRegion) GetRegion() isWaypoint_Annotations_LocalizeRegion_Region {
	if m != nil {
		return m.Region
	}
	return nil
}

func (x *Waypoint_Annotations_LocalizeRegion) GetDefaultRegion() *Waypoint_Annotations_LocalizeRegion_Default {
	if x, ok := x.GetRegion().(*Waypoint_Annotations_LocalizeRegion_DefaultRegion); ok {
		return x.DefaultRegion
	}
	return nil
}

func (x *Waypoint_Annotations_LocalizeRegion) GetEmpty() *Waypoint_Annotations_LocalizeRegion_Empty {
	if x, ok := x.GetRegion().(*Waypoint_Annotations_LocalizeRegion_Empty_); ok {
		return x.Empty
	}
	return nil
}

func (x *Waypoint_Annotations_LocalizeRegion) GetCircle() *Waypoint_Annotations_LocalizeRegion_Circle2D {
	if x, ok := x.GetRegion().(*Waypoint_Annotations_LocalizeRegion_Circle); ok {
		return x.Circle
	}
	return nil
}

type isWaypoint_Annotations_LocalizeRegion_Region interface {
	isWaypoint_Annotations_LocalizeRegion_Region()
}

type Waypoint_Annotations_LocalizeRegion_DefaultRegion struct {
	// Oneof field that describes the waypoint's location as a default region (no special features/traits).
	DefaultRegion *Waypoint_Annotations_LocalizeRegion_Default `protobuf:"bytes,2,opt,name=default_region,json=defaultRegion,proto3,oneof"`
}

type Waypoint_Annotations_LocalizeRegion_Empty_ struct {
	// Oneof field that describes the waypoint's location as a empty/featureless region.
	Empty *Waypoint_Annotations_LocalizeRegion_Empty `protobuf:"bytes,3,opt,name=empty,proto3,oneof"`
}

type Waypoint_Annotations_LocalizeRegion_Circle struct {
	// Oneof field that describes the waypoint's location as a circular region.
	Circle *Waypoint_Annotations_LocalizeRegion_Circle2D `protobuf:"bytes,4,opt,name=circle,proto3,oneof"`
}

func (*Waypoint_Annotations_LocalizeRegion_DefaultRegion) isWaypoint_Annotations_LocalizeRegion_Region() {
}

func (*Waypoint_Annotations_LocalizeRegion_Empty_) isWaypoint_Annotations_LocalizeRegion_Region() {}

func (*Waypoint_Annotations_LocalizeRegion_Circle) isWaypoint_Annotations_LocalizeRegion_Region() {}

// Use the default region to localize in.
type Waypoint_Annotations_LocalizeRegion_Default struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Waypoint_Annotations_LocalizeRegion_Default) Reset() {
	*x = Waypoint_Annotations_LocalizeRegion_Default{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waypoint_Annotations_LocalizeRegion_Default) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waypoint_Annotations_LocalizeRegion_Default) ProtoMessage() {}

func (x *Waypoint_Annotations_LocalizeRegion_Default) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waypoint_Annotations_LocalizeRegion_Default.ProtoReflect.Descriptor instead.
func (*Waypoint_Annotations_LocalizeRegion_Default) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

// Do not localize to this waypoint.
type Waypoint_Annotations_LocalizeRegion_Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Waypoint_Annotations_LocalizeRegion_Empty) Reset() {
	*x = Waypoint_Annotations_LocalizeRegion_Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waypoint_Annotations_LocalizeRegion_Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waypoint_Annotations_LocalizeRegion_Empty) ProtoMessage() {}

func (x *Waypoint_Annotations_LocalizeRegion_Empty) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waypoint_Annotations_LocalizeRegion_Empty.ProtoReflect.Descriptor instead.
func (*Waypoint_Annotations_LocalizeRegion_Empty) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0, 0, 0, 1}
}

// Indicates the number of meters away we can be from this waypoint we can be before scan
// matching.
// - If zero, the default value is used.
// - If less than zero, no scan matching will be performed at this waypoint.
// - If greater than zero, scan matching will only be performed if the robot is at most this
//   far away from the waypoint.
// Distance calculation is done in the 2d plane with respect to the waypoint.
type Waypoint_Annotations_LocalizeRegion_Circle2D struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dist_2D float64 `protobuf:"fixed64,1,opt,name=dist_2d,json=dist2d,proto3" json:"dist_2d,omitempty"` // meters.
}

func (x *Waypoint_Annotations_LocalizeRegion_Circle2D) Reset() {
	*x = Waypoint_Annotations_LocalizeRegion_Circle2D{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Waypoint_Annotations_LocalizeRegion_Circle2D) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Waypoint_Annotations_LocalizeRegion_Circle2D) ProtoMessage() {}

func (x *Waypoint_Annotations_LocalizeRegion_Circle2D) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Waypoint_Annotations_LocalizeRegion_Circle2D.ProtoReflect.Descriptor instead.
func (*Waypoint_Annotations_LocalizeRegion_Circle2D) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{0, 0, 0, 2}
}

func (x *Waypoint_Annotations_LocalizeRegion_Circle2D) GetDist_2D() float64 {
	if x != nil {
		return x.Dist_2D
	}
	return 0
}

// An edge is uniquely identified by the waypoints it connects.
// Two waypoints will only ever be connected by a single edge.
// That edge is traversable in either direction.
type Edge_Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the "from" waypoint.
	FromWaypoint string `protobuf:"bytes,1,opt,name=from_waypoint,json=fromWaypoint,proto3" json:"from_waypoint,omitempty"`
	// Identifier of the "to" waypoint.
	ToWaypoint string `protobuf:"bytes,2,opt,name=to_waypoint,json=toWaypoint,proto3" json:"to_waypoint,omitempty"`
}

func (x *Edge_Id) Reset() {
	*x = Edge_Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge_Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge_Id) ProtoMessage() {}

func (x *Edge_Id) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge_Id.ProtoReflect.Descriptor instead.
func (*Edge_Id) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Edge_Id) GetFromWaypoint() string {
	if x != nil {
		return x.FromWaypoint
	}
	return ""
}

func (x *Edge_Id) GetToWaypoint() string {
	if x != nil {
		return x.ToWaypoint
	}
	return ""
}

// Annotations understood by BostonDynamics systems.
type Edge_Annotations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Velocity limits to use while traversing the edge.
	// These are maxima and minima, NOT target speeds.
	// NOTE: as of 2.4 this is deprecated. Please use mobility_params.vel_limit.
	//
	// Deprecated: Do not use.
	VelLimit *api.SE2VelocityLimit `protobuf:"bytes,1,opt,name=vel_limit,json=velLimit,proto3" json:"vel_limit,omitempty"`
	// Stairs information/parameters specific to the edge.
	Stairs *Edge_Annotations_StairData `protobuf:"bytes,2,opt,name=stairs,proto3" json:"stairs,omitempty"`
	// Direction constraints for how the robot must move and the directions it can face
	// when traversing the edge.
	DirectionConstraint Edge_Annotations_DirectionConstraint `protobuf:"varint,4,opt,name=direction_constraint,json=directionConstraint,proto3,enum=bosdyn.api.graph_nav.Edge_Annotations_DirectionConstraint" json:"direction_constraint,omitempty"`
	// If true, the robot must be aligned with the edge in yaw before traversing it.
	RequireAlignment *wrapperspb.BoolValue `protobuf:"bytes,5,opt,name=require_alignment,json=requireAlignment,proto3" json:"require_alignment,omitempty"`
	// If true, the edge crosses flat ground and the robot shouldn't try to climb over obstacles.
	FlatGround *wrapperspb.BoolValue `protobuf:"bytes,6,opt,name=flat_ground,json=flatGround,proto3" json:"flat_ground,omitempty"`
	// Terrain coefficient of friction user hint. This value must be postive and will clamped if
	// necessary on the robot side. Best suggested values lie in the range between 0.4 and 0.8
	// (which is the robot's default.)
	// WARNING: deprecated as of 2.1. Use mobility_params instead, which includes ground_mu_hint
	// as part of the terrain_params.
	//
	// Deprecated: Do not use.
	GroundMuHint *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=ground_mu_hint,json=groundMuHint,proto3" json:"ground_mu_hint,omitempty"`
	// If true, the edge crosses over grated metal. This changes some parameters of the robot's
	// perception system to allow it to see grated floors bettter.
	// WARNING: deprecated as of 2.1. Use mobility_params instead, which includes grated_floor
	// as part of the terrain_params.
	//
	// Deprecated: Do not use.
	GratedFloor *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=grated_floor,json=gratedFloor,proto3" json:"grated_floor,omitempty"`
	// Overrides the following fields of the mobility parameters to whatever is
	// stored in the map. For example, if this FieldMask contains "stair_hint" and
	// "terrain_params.enable_grated_floor", then the map will be
	// annotated with "stair_hint" and "enable_grated_floor" settings. An empty FieldMask means all fields are active
	// annotations. Note that the more conservative of the velocity limit stored in the mobility parameters and the
	// TravelParams of the entire route will be used for this edge (regardless of what override_mobility_params says).
	OverrideMobilityParams *fieldmaskpb.FieldMask `protobuf:"bytes,9,opt,name=override_mobility_params,json=overrideMobilityParams,proto3" json:"override_mobility_params,omitempty"`
	// Contains terrain parameters, swing height, obstacle avoidance parameters, etc.
	// When the robot crosses this edge, it will use the mobility parameters here.
	MobilityParams *spot.MobilityParams `protobuf:"bytes,10,opt,name=mobility_params,json=mobilityParams,proto3" json:"mobility_params,omitempty"`
	// Assign edges a cost; used when finding the "shortest" (lowest cost) path.
	Cost *wrapperspb.DoubleValue `protobuf:"bytes,11,opt,name=cost,proto3" json:"cost,omitempty"`
	// How this edge was made.
	EdgeSource Edge_EdgeSource `protobuf:"varint,12,opt,name=edge_source,json=edgeSource,proto3,enum=bosdyn.api.graph_nav.Edge_EdgeSource" json:"edge_source,omitempty"`
	// If true, disables alternate-route-finding for this edge.
	DisableAlternateRouteFinding bool `protobuf:"varint,13,opt,name=disable_alternate_route_finding,json=disableAlternateRouteFinding,proto3" json:"disable_alternate_route_finding,omitempty"`
}

func (x *Edge_Annotations) Reset() {
	*x = Edge_Annotations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge_Annotations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge_Annotations) ProtoMessage() {}

func (x *Edge_Annotations) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge_Annotations.ProtoReflect.Descriptor instead.
func (*Edge_Annotations) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{2, 1}
}

// Deprecated: Do not use.
func (x *Edge_Annotations) GetVelLimit() *api.SE2VelocityLimit {
	if x != nil {
		return x.VelLimit
	}
	return nil
}

func (x *Edge_Annotations) GetStairs() *Edge_Annotations_StairData {
	if x != nil {
		return x.Stairs
	}
	return nil
}

func (x *Edge_Annotations) GetDirectionConstraint() Edge_Annotations_DirectionConstraint {
	if x != nil {
		return x.DirectionConstraint
	}
	return Edge_Annotations_DIRECTION_CONSTRAINT_UNKNOWN
}

func (x *Edge_Annotations) GetRequireAlignment() *wrapperspb.BoolValue {
	if x != nil {
		return x.RequireAlignment
	}
	return nil
}

func (x *Edge_Annotations) GetFlatGround() *wrapperspb.BoolValue {
	if x != nil {
		return x.FlatGround
	}
	return nil
}

// Deprecated: Do not use.
func (x *Edge_Annotations) GetGroundMuHint() *wrapperspb.DoubleValue {
	if x != nil {
		return x.GroundMuHint
	}
	return nil
}

// Deprecated: Do not use.
func (x *Edge_Annotations) GetGratedFloor() *wrapperspb.BoolValue {
	if x != nil {
		return x.GratedFloor
	}
	return nil
}

func (x *Edge_Annotations) GetOverrideMobilityParams() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.OverrideMobilityParams
	}
	return nil
}

func (x *Edge_Annotations) GetMobilityParams() *spot.MobilityParams {
	if x != nil {
		return x.MobilityParams
	}
	return nil
}

func (x *Edge_Annotations) GetCost() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Cost
	}
	return nil
}

func (x *Edge_Annotations) GetEdgeSource() Edge_EdgeSource {
	if x != nil {
		return x.EdgeSource
	}
	return Edge_EDGE_SOURCE_UNKNOWN
}

func (x *Edge_Annotations) GetDisableAlternateRouteFinding() bool {
	if x != nil {
		return x.DisableAlternateRouteFinding
	}
	return false
}

// Defines any parameters of the stairs
type Edge_Annotations_StairData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Check this before reading other fields.
	State AnnotationState `protobuf:"varint,1,opt,name=state,proto3,enum=bosdyn.api.graph_nav.AnnotationState" json:"state,omitempty"`
	//  Parameters describing a straight staircase.
	StraightStaircase *api.StraightStaircase `protobuf:"bytes,2,opt,name=straight_staircase,json=straightStaircase,proto3" json:"straight_staircase,omitempty"`
}

func (x *Edge_Annotations_StairData) Reset() {
	*x = Edge_Annotations_StairData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge_Annotations_StairData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge_Annotations_StairData) ProtoMessage() {}

func (x *Edge_Annotations_StairData) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge_Annotations_StairData.ProtoReflect.Descriptor instead.
func (*Edge_Annotations_StairData) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *Edge_Annotations_StairData) GetState() AnnotationState {
	if x != nil {
		return x.State
	}
	return AnnotationState_ANNOTATION_STATE_UNKNOWN
}

func (x *Edge_Annotations_StairData) GetStraightStaircase() *api.StraightStaircase {
	if x != nil {
		return x.StraightStaircase
	}
	return nil
}

type EdgeSnapshot_Stance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of the stance.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// List of all the foot positions for a single stance.
	FootStates []*api.FootState `protobuf:"bytes,2,rep,name=foot_states,json=footStates,proto3" json:"foot_states,omitempty"`
	// KO Body position corresponding to this stance.
	KoTformBody *api.SE3Pose `protobuf:"bytes,3,opt,name=ko_tform_body,json=koTformBody,proto3" json:"ko_tform_body,omitempty"`
	// Vision Body position corresponding to this stance.
	VisionTformBody *api.SE3Pose `protobuf:"bytes,5,opt,name=vision_tform_body,json=visionTformBody,proto3" json:"vision_tform_body,omitempty"`
	// Does this stance correspond to a planar ground region.
	PlanarGround *wrapperspb.BoolValue `protobuf:"bytes,4,opt,name=planar_ground,json=planarGround,proto3" json:"planar_ground,omitempty"`
}

func (x *EdgeSnapshot_Stance) Reset() {
	*x = EdgeSnapshot_Stance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeSnapshot_Stance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeSnapshot_Stance) ProtoMessage() {}

func (x *EdgeSnapshot_Stance) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_graph_nav_map_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeSnapshot_Stance.ProtoReflect.Descriptor instead.
func (*EdgeSnapshot_Stance) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_graph_nav_map_proto_rawDescGZIP(), []int{3, 0}
}

func (x *EdgeSnapshot_Stance) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *EdgeSnapshot_Stance) GetFootStates() []*api.FootState {
	if x != nil {
		return x.FootStates
	}
	return nil
}

func (x *EdgeSnapshot_Stance) GetKoTformBody() *api.SE3Pose {
	if x != nil {
		return x.KoTformBody
	}
	return nil
}

func (x *EdgeSnapshot_Stance) GetVisionTformBody() *api.SE3Pose {
	if x != nil {
		return x.VisionTformBody
	}
	return nil
}

func (x *EdgeSnapshot_Stance) GetPlanarGround() *wrapperspb.BoolValue {
	if x != nil {
		return x.PlanarGround
	}
	return nil
}

var File_bosdyn_api_graph_nav_map_proto protoreflect.FileDescriptor

var file_bosdyn_api_graph_nav_map_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2f, 0x6d, 0x61, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2f, 0x72, 0x6f,
	0x62, 0x6f, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x74,
	0x61, 0x69, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x09, 0x0a,
	0x08, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x11, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6b, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0f, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x4b, 0x6f, 0x12, 0x4c, 0x0a, 0x0b, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x95, 0x06, 0x0a, 0x0b, 0x41, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a,
	0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c,
	0x0a, 0x0c, 0x69, 0x63, 0x70, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x45, 0x33, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x69, 0x63, 0x70, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x65, 0x0a, 0x11,
	0x73, 0x63, 0x61, 0x6e, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x63, 0x61, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f,
	0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x57, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0e, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0xb3, 0x03, 0x0a, 0x0e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x6a, 0x0a, 0x0e, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x5c, 0x0a, 0x06, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x42, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72,
	0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x69, 0x72, 0x63,
	0x6c, 0x65, 0x32, 0x44, 0x48, 0x00, 0x52, 0x06, 0x63, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x1a, 0x09,
	0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x1a, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x23, 0x0a, 0x08, 0x43, 0x69, 0x72, 0x63, 0x6c, 0x65, 0x32, 0x44, 0x12, 0x17,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x74, 0x5f, 0x32, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x06, 0x64, 0x69, 0x73, 0x74, 0x32, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10,
	0x01, 0x12, 0x20, 0x0a, 0x1c, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x10, 0x02, 0x12, 0x2b, 0x0a, 0x27, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f,
	0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45,
	0x5f, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03,
	0x22, 0xec, 0x04, 0x0a, 0x10, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x31, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x12, 0x31, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0a, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x11, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69,
	0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x52,
	0x0f, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x73,
	0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x40, 0x0a, 0x1d, 0x68, 0x61, 0x73, 0x5f,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x19, 0x68, 0x61, 0x73, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x62, 0x0a, 0x24, 0x62, 0x6f,
	0x64, 0x79, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x65, 0x6e, 0x73,
	0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x1f, 0x62,
	0x6f, 0x64, 0x79, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x12, 0x2f,
	0x0a, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x08, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x22,
	0xcb, 0x0d, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x2e, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33,
	0x50, 0x6f, 0x73, 0x65, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x54,
	0x6f, 0x12, 0x48, 0x0a, 0x0b, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4a, 0x0a, 0x02, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x5f, 0x77, 0x61, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xcf, 0x09, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x76, 0x65, 0x6c, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x76, 0x65,
	0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64,
	0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x69, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x06, 0x73, 0x74, 0x61, 0x69, 0x72, 0x73,
	0x12, 0x6d, 0x0a, 0x14, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x13, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12,
	0x47, 0x0a, 0x11, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x41,
	0x6c, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x6c, 0x61, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x61, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x6d, 0x75, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x4d, 0x75, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x41, 0x0a,
	0x0c, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x6f, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0b, 0x67, 0x72, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x12, 0x54, 0x0a, 0x18, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x16,
	0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x70, 0x6f,
	0x74, 0x2e, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x52, 0x0e, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x30, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0a,
	0x65, 0x64, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x1f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x65, 0x5f,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1c, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x1a, 0x96, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x69, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x3b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x12,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x69, 0x72, 0x63, 0x61,
	0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68, 0x74, 0x53, 0x74,
	0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x65, 0x52, 0x11, 0x73, 0x74, 0x72, 0x61, 0x69, 0x67, 0x68,
	0x74, 0x53, 0x74, 0x61, 0x69, 0x72, 0x63, 0x61, 0x73, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x5f,
	0x54, 0x55, 0x52, 0x4e, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54, 0x5f, 0x46,
	0x4f, 0x52, 0x57, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x49, 0x52, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49, 0x4e, 0x54,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x49,
	0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x41, 0x49,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x04, 0x22, 0xd1, 0x01, 0x0a, 0x0a, 0x45, 0x64,
	0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x44, 0x47, 0x45,
	0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x4f, 0x44, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x45,
	0x44, 0x47, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c,
	0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12,
	0x25, 0x0a, 0x21, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x46,
	0x49, 0x44, 0x55, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x4c, 0x4f, 0x4f, 0x50, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x27, 0x0a, 0x23, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x54, 0x45, 0x5f,
	0x52, 0x4f, 0x55, 0x54, 0x45, 0x5f, 0x46, 0x49, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12,
	0x1c, 0x0a, 0x18, 0x45, 0x44, 0x47, 0x45, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x05, 0x22, 0x9b, 0x03,
	0x0a, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43,
	0x0a, 0x07, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x07, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x1a, 0xb5, 0x02, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x38,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x66, 0x6f, 0x6f, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x0d, 0x6b, 0x6f, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0b, 0x6b, 0x6f,
	0x54, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3f, 0x0a, 0x11, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x6c,
	0x61, 0x6e, 0x61, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x6e, 0x61, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x5d, 0x0a, 0x06, 0x41,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x43, 0x0a, 0x13, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x11, 0x73, 0x65, 0x65, 0x64, 0x54, 0x66, 0x6f,
	0x72, 0x6d, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x66, 0x0a, 0x13, 0x41, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x3f, 0x0a, 0x11, 0x73, 0x65, 0x65, 0x64, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73,
	0x65, 0x52, 0x0f, 0x73, 0x65, 0x65, 0x64, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x36, 0x0a, 0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67,
	0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x52,
	0x07, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76,
	0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x65, 0x64, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xb6, 0x01,
	0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x3c, 0x0a, 0x09, 0x77, 0x61, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61,
	0x76, 0x2e, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x77, 0x61, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61, 0x76, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x52, 0x05, 0x65, 0x64, 0x67, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6e, 0x61,
	0x76, 0x2e, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x61, 0x6e, 0x63,
	0x68, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x2a, 0x64, 0x0a, 0x0f, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x4e, 0x4e,
	0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4e, 0x4e, 0x4f, 0x54,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x4e, 0x4e, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x42, 0x47, 0x42, 0x08,
	0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x5f, 0x6e, 0x61, 0x76, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_graph_nav_map_proto_rawDescOnce sync.Once
	file_bosdyn_api_graph_nav_map_proto_rawDescData = file_bosdyn_api_graph_nav_map_proto_rawDesc
)

func file_bosdyn_api_graph_nav_map_proto_rawDescGZIP() []byte {
	file_bosdyn_api_graph_nav_map_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_graph_nav_map_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_graph_nav_map_proto_rawDescData)
	})
	return file_bosdyn_api_graph_nav_map_proto_rawDescData
}

var file_bosdyn_api_graph_nav_map_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bosdyn_api_graph_nav_map_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_bosdyn_api_graph_nav_map_proto_goTypes = []interface{}{
	(AnnotationState)(0),                                 // 0: bosdyn.api.graph_nav.AnnotationState
	(Waypoint_WaypointSource)(0),                         // 1: bosdyn.api.graph_nav.Waypoint.WaypointSource
	(Edge_EdgeSource)(0),                                 // 2: bosdyn.api.graph_nav.Edge.EdgeSource
	(Edge_Annotations_DirectionConstraint)(0),            // 3: bosdyn.api.graph_nav.Edge.Annotations.DirectionConstraint
	(*Waypoint)(nil),                                     // 4: bosdyn.api.graph_nav.Waypoint
	(*WaypointSnapshot)(nil),                             // 5: bosdyn.api.graph_nav.WaypointSnapshot
	(*Edge)(nil),                                         // 6: bosdyn.api.graph_nav.Edge
	(*EdgeSnapshot)(nil),                                 // 7: bosdyn.api.graph_nav.EdgeSnapshot
	(*Anchor)(nil),                                       // 8: bosdyn.api.graph_nav.Anchor
	(*AnchoredWorldObject)(nil),                          // 9: bosdyn.api.graph_nav.AnchoredWorldObject
	(*Anchoring)(nil),                                    // 10: bosdyn.api.graph_nav.Anchoring
	(*Graph)(nil),                                        // 11: bosdyn.api.graph_nav.Graph
	(*Waypoint_Annotations)(nil),                         // 12: bosdyn.api.graph_nav.Waypoint.Annotations
	(*Waypoint_Annotations_LocalizeRegion)(nil),          // 13: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion
	(*Waypoint_Annotations_LocalizeRegion_Default)(nil),  // 14: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default
	(*Waypoint_Annotations_LocalizeRegion_Empty)(nil),    // 15: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty
	(*Waypoint_Annotations_LocalizeRegion_Circle2D)(nil), // 16: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D
	(*Edge_Id)(nil),                                      // 17: bosdyn.api.graph_nav.Edge.Id
	(*Edge_Annotations)(nil),                             // 18: bosdyn.api.graph_nav.Edge.Annotations
	(*Edge_Annotations_StairData)(nil),                   // 19: bosdyn.api.graph_nav.Edge.Annotations.StairData
	(*EdgeSnapshot_Stance)(nil),                          // 20: bosdyn.api.graph_nav.EdgeSnapshot.Stance
	(*api.SE3Pose)(nil),                                  // 21: bosdyn.api.SE3Pose
	(*api.ImageResponse)(nil),                            // 22: bosdyn.api.ImageResponse
	(*api.PointCloud)(nil),                               // 23: bosdyn.api.PointCloud
	(*api.WorldObject)(nil),                              // 24: bosdyn.api.WorldObject
	(*api.RobotState)(nil),                               // 25: bosdyn.api.RobotState
	(*api.LocalGrid)(nil),                                // 26: bosdyn.api.LocalGrid
	(*api.Payload)(nil),                                  // 27: bosdyn.api.Payload
	(*timestamppb.Timestamp)(nil),                        // 28: google.protobuf.Timestamp
	(*api.SE3Covariance)(nil),                            // 29: bosdyn.api.SE3Covariance
	(*api.SE2VelocityLimit)(nil),                         // 30: bosdyn.api.SE2VelocityLimit
	(*wrapperspb.BoolValue)(nil),                         // 31: google.protobuf.BoolValue
	(*wrapperspb.DoubleValue)(nil),                       // 32: google.protobuf.DoubleValue
	(*fieldmaskpb.FieldMask)(nil),                        // 33: google.protobuf.FieldMask
	(*spot.MobilityParams)(nil),                          // 34: bosdyn.api.spot.MobilityParams
	(*api.StraightStaircase)(nil),                        // 35: bosdyn.api.StraightStaircase
	(*api.FootState)(nil),                                // 36: bosdyn.api.FootState
}
var file_bosdyn_api_graph_nav_map_proto_depIdxs = []int32{
	21, // 0: bosdyn.api.graph_nav.Waypoint.waypoint_tform_ko:type_name -> bosdyn.api.SE3Pose
	12, // 1: bosdyn.api.graph_nav.Waypoint.annotations:type_name -> bosdyn.api.graph_nav.Waypoint.Annotations
	22, // 2: bosdyn.api.graph_nav.WaypointSnapshot.images:type_name -> bosdyn.api.ImageResponse
	23, // 3: bosdyn.api.graph_nav.WaypointSnapshot.point_cloud:type_name -> bosdyn.api.PointCloud
	24, // 4: bosdyn.api.graph_nav.WaypointSnapshot.objects:type_name -> bosdyn.api.WorldObject
	25, // 5: bosdyn.api.graph_nav.WaypointSnapshot.robot_state:type_name -> bosdyn.api.RobotState
	26, // 6: bosdyn.api.graph_nav.WaypointSnapshot.robot_local_grids:type_name -> bosdyn.api.LocalGrid
	21, // 7: bosdyn.api.graph_nav.WaypointSnapshot.body_tform_remote_point_cloud_sensor:type_name -> bosdyn.api.SE3Pose
	27, // 8: bosdyn.api.graph_nav.WaypointSnapshot.payloads:type_name -> bosdyn.api.Payload
	17, // 9: bosdyn.api.graph_nav.Edge.id:type_name -> bosdyn.api.graph_nav.Edge.Id
	21, // 10: bosdyn.api.graph_nav.Edge.from_tform_to:type_name -> bosdyn.api.SE3Pose
	18, // 11: bosdyn.api.graph_nav.Edge.annotations:type_name -> bosdyn.api.graph_nav.Edge.Annotations
	20, // 12: bosdyn.api.graph_nav.EdgeSnapshot.stances:type_name -> bosdyn.api.graph_nav.EdgeSnapshot.Stance
	21, // 13: bosdyn.api.graph_nav.Anchor.seed_tform_waypoint:type_name -> bosdyn.api.SE3Pose
	21, // 14: bosdyn.api.graph_nav.AnchoredWorldObject.seed_tform_object:type_name -> bosdyn.api.SE3Pose
	8,  // 15: bosdyn.api.graph_nav.Anchoring.anchors:type_name -> bosdyn.api.graph_nav.Anchor
	9,  // 16: bosdyn.api.graph_nav.Anchoring.objects:type_name -> bosdyn.api.graph_nav.AnchoredWorldObject
	4,  // 17: bosdyn.api.graph_nav.Graph.waypoints:type_name -> bosdyn.api.graph_nav.Waypoint
	6,  // 18: bosdyn.api.graph_nav.Graph.edges:type_name -> bosdyn.api.graph_nav.Edge
	10, // 19: bosdyn.api.graph_nav.Graph.anchoring:type_name -> bosdyn.api.graph_nav.Anchoring
	28, // 20: bosdyn.api.graph_nav.Waypoint.Annotations.creation_time:type_name -> google.protobuf.Timestamp
	29, // 21: bosdyn.api.graph_nav.Waypoint.Annotations.icp_variance:type_name -> bosdyn.api.SE3Covariance
	13, // 22: bosdyn.api.graph_nav.Waypoint.Annotations.scan_match_region:type_name -> bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion
	1,  // 23: bosdyn.api.graph_nav.Waypoint.Annotations.waypoint_source:type_name -> bosdyn.api.graph_nav.Waypoint.WaypointSource
	0,  // 24: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.state:type_name -> bosdyn.api.graph_nav.AnnotationState
	14, // 25: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.default_region:type_name -> bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Default
	15, // 26: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.empty:type_name -> bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Empty
	16, // 27: bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.circle:type_name -> bosdyn.api.graph_nav.Waypoint.Annotations.LocalizeRegion.Circle2D
	30, // 28: bosdyn.api.graph_nav.Edge.Annotations.vel_limit:type_name -> bosdyn.api.SE2VelocityLimit
	19, // 29: bosdyn.api.graph_nav.Edge.Annotations.stairs:type_name -> bosdyn.api.graph_nav.Edge.Annotations.StairData
	3,  // 30: bosdyn.api.graph_nav.Edge.Annotations.direction_constraint:type_name -> bosdyn.api.graph_nav.Edge.Annotations.DirectionConstraint
	31, // 31: bosdyn.api.graph_nav.Edge.Annotations.require_alignment:type_name -> google.protobuf.BoolValue
	31, // 32: bosdyn.api.graph_nav.Edge.Annotations.flat_ground:type_name -> google.protobuf.BoolValue
	32, // 33: bosdyn.api.graph_nav.Edge.Annotations.ground_mu_hint:type_name -> google.protobuf.DoubleValue
	31, // 34: bosdyn.api.graph_nav.Edge.Annotations.grated_floor:type_name -> google.protobuf.BoolValue
	33, // 35: bosdyn.api.graph_nav.Edge.Annotations.override_mobility_params:type_name -> google.protobuf.FieldMask
	34, // 36: bosdyn.api.graph_nav.Edge.Annotations.mobility_params:type_name -> bosdyn.api.spot.MobilityParams
	32, // 37: bosdyn.api.graph_nav.Edge.Annotations.cost:type_name -> google.protobuf.DoubleValue
	2,  // 38: bosdyn.api.graph_nav.Edge.Annotations.edge_source:type_name -> bosdyn.api.graph_nav.Edge.EdgeSource
	0,  // 39: bosdyn.api.graph_nav.Edge.Annotations.StairData.state:type_name -> bosdyn.api.graph_nav.AnnotationState
	35, // 40: bosdyn.api.graph_nav.Edge.Annotations.StairData.straight_staircase:type_name -> bosdyn.api.StraightStaircase
	28, // 41: bosdyn.api.graph_nav.EdgeSnapshot.Stance.timestamp:type_name -> google.protobuf.Timestamp
	36, // 42: bosdyn.api.graph_nav.EdgeSnapshot.Stance.foot_states:type_name -> bosdyn.api.FootState
	21, // 43: bosdyn.api.graph_nav.EdgeSnapshot.Stance.ko_tform_body:type_name -> bosdyn.api.SE3Pose
	21, // 44: bosdyn.api.graph_nav.EdgeSnapshot.Stance.vision_tform_body:type_name -> bosdyn.api.SE3Pose
	31, // 45: bosdyn.api.graph_nav.EdgeSnapshot.Stance.planar_ground:type_name -> google.protobuf.BoolValue
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_bosdyn_api_graph_nav_map_proto_init() }
func file_bosdyn_api_graph_nav_map_proto_init() {
	if File_bosdyn_api_graph_nav_map_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_graph_nav_map_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waypoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WaypointSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSnapshot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anchor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnchoredWorldObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Anchoring); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Graph); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waypoint_Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waypoint_Annotations_LocalizeRegion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waypoint_Annotations_LocalizeRegion_Default); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waypoint_Annotations_LocalizeRegion_Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Waypoint_Annotations_LocalizeRegion_Circle2D); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge_Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge_Annotations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge_Annotations_StairData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_graph_nav_map_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeSnapshot_Stance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_graph_nav_map_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Waypoint_Annotations_LocalizeRegion_DefaultRegion)(nil),
		(*Waypoint_Annotations_LocalizeRegion_Empty_)(nil),
		(*Waypoint_Annotations_LocalizeRegion_Circle)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_graph_nav_map_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_graph_nav_map_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_graph_nav_map_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_graph_nav_map_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_graph_nav_map_proto_msgTypes,
	}.Build()
	File_bosdyn_api_graph_nav_map_proto = out.File
	file_bosdyn_api_graph_nav_map_proto_rawDesc = nil
	file_bosdyn_api_graph_nav_map_proto_goTypes = nil
	file_bosdyn_api_graph_nav_map_proto_depIdxs = nil
}
