// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/robot_id.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Robot identity information, which should be static while robot is powered-on.
type RobotId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique string identifier for the particular robot.
	SerialNumber string `protobuf:"bytes,1,opt,name=serial_number,json=serialNumber,proto3" json:"serial_number,omitempty"`
	// Type of robot.  E.g., 'spot'.
	Species string `protobuf:"bytes,2,opt,name=species,proto3" json:"species,omitempty"`
	// Robot version/platform.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Version information about software running on the robot.
	SoftwareRelease *RobotSoftwareRelease `protobuf:"bytes,4,opt,name=software_release,json=softwareRelease,proto3" json:"software_release,omitempty"`
	// Optional, customer-supplied nickname.
	Nickname string `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// Computer Serial Number. Unlike serial_number, which identifies a complete robot,
	// the computer_serial_number identifies the computer hardware used in the robot.
	ComputerSerialNumber string `protobuf:"bytes,6,opt,name=computer_serial_number,json=computerSerialNumber,proto3" json:"computer_serial_number,omitempty"`
}

func (x *RobotId) Reset() {
	*x = RobotId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_id_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotId) ProtoMessage() {}

func (x *RobotId) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_id_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotId.ProtoReflect.Descriptor instead.
func (*RobotId) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_id_proto_rawDescGZIP(), []int{0}
}

func (x *RobotId) GetSerialNumber() string {
	if x != nil {
		return x.SerialNumber
	}
	return ""
}

func (x *RobotId) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *RobotId) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RobotId) GetSoftwareRelease() *RobotSoftwareRelease {
	if x != nil {
		return x.SoftwareRelease
	}
	return nil
}

func (x *RobotId) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RobotId) GetComputerSerialNumber() string {
	if x != nil {
		return x.ComputerSerialNumber
	}
	return ""
}

// The software versioning number for a release.
type SoftwareVersion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Signficant changes to software.
	MajorVersion int32 `protobuf:"varint,1,opt,name=major_version,json=majorVersion,proto3" json:"major_version,omitempty"`
	// Normal changes to software.
	MinorVersion int32 `protobuf:"varint,2,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
	// Fixes which should not change intended capabilities or affect compatibility.
	PatchLevel int32 `protobuf:"varint,3,opt,name=patch_level,json=patchLevel,proto3" json:"patch_level,omitempty"`
}

func (x *SoftwareVersion) Reset() {
	*x = SoftwareVersion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_id_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SoftwareVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SoftwareVersion) ProtoMessage() {}

func (x *SoftwareVersion) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_id_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SoftwareVersion.ProtoReflect.Descriptor instead.
func (*SoftwareVersion) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_id_proto_rawDescGZIP(), []int{1}
}

func (x *SoftwareVersion) GetMajorVersion() int32 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *SoftwareVersion) GetMinorVersion() int32 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

func (x *SoftwareVersion) GetPatchLevel() int32 {
	if x != nil {
		return x.PatchLevel
	}
	return 0
}

// Description of the software release currently running on the robot.
type RobotSoftwareRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The software version, e.g., 2.0.1
	Version *SoftwareVersion `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The name of the robot, e.g., '20190601'
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Kind of software release.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// Timestamp of the changeset.
	ChangesetDate *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=changeset_date,json=changesetDate,proto3" json:"changeset_date,omitempty"`
	// Changeset hash.
	Changeset string `protobuf:"bytes,5,opt,name=changeset,proto3" json:"changeset,omitempty"`
	// API version.  E.g., 2.14.5.
	ApiVersion string `protobuf:"bytes,6,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Extra information associated with the build.
	BuildInformation string `protobuf:"bytes,7,opt,name=build_information,json=buildInformation,proto3" json:"build_information,omitempty"`
	// Date/time when release was installed.
	InstallDate *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=install_date,json=installDate,proto3" json:"install_date,omitempty"`
	// Other information about the build.
	Parameters []*Parameter `protobuf:"bytes,9,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *RobotSoftwareRelease) Reset() {
	*x = RobotSoftwareRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_id_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotSoftwareRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotSoftwareRelease) ProtoMessage() {}

func (x *RobotSoftwareRelease) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_id_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotSoftwareRelease.ProtoReflect.Descriptor instead.
func (*RobotSoftwareRelease) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_id_proto_rawDescGZIP(), []int{2}
}

func (x *RobotSoftwareRelease) GetVersion() *SoftwareVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *RobotSoftwareRelease) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RobotSoftwareRelease) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RobotSoftwareRelease) GetChangesetDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ChangesetDate
	}
	return nil
}

func (x *RobotSoftwareRelease) GetChangeset() string {
	if x != nil {
		return x.Changeset
	}
	return ""
}

func (x *RobotSoftwareRelease) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *RobotSoftwareRelease) GetBuildInformation() string {
	if x != nil {
		return x.BuildInformation
	}
	return ""
}

func (x *RobotSoftwareRelease) GetInstallDate() *timestamppb.Timestamp {
	if x != nil {
		return x.InstallDate
	}
	return nil
}

func (x *RobotSoftwareRelease) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// The RobotId request message sent to a robot to learn it's basic identification information.
type RobotIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"` // Common request/response header.
}

func (x *RobotIdRequest) Reset() {
	*x = RobotIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_id_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotIdRequest) ProtoMessage() {}

func (x *RobotIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_id_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotIdRequest.ProtoReflect.Descriptor instead.
func (*RobotIdRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_id_proto_rawDescGZIP(), []int{3}
}

func (x *RobotIdRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The RobotId response message, including the ID information for a robot.
type RobotIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header  *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`                  // Common request/response header.
	RobotId *RobotId        `protobuf:"bytes,2,opt,name=robot_id,json=robotId,proto3" json:"robot_id,omitempty"` // The requested RobotId information.
}

func (x *RobotIdResponse) Reset() {
	*x = RobotIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_robot_id_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotIdResponse) ProtoMessage() {}

func (x *RobotIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_robot_id_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotIdResponse.ProtoReflect.Descriptor instead.
func (*RobotIdResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_robot_id_proto_rawDescGZIP(), []int{4}
}

func (x *RobotIdResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RobotIdResponse) GetRobotId() *RobotId {
	if x != nil {
		return x.RobotId
	}
	return nil
}

var File_bosdyn_api_robot_id_proto protoreflect.FileDescriptor

var file_bosdyn_api_robot_id_proto_rawDesc = []byte{
	0x0a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x6f, 0x62,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x81, 0x02,
	0x0a, 0x07, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53,
	0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x0f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x22, 0x7c, 0x0a, 0x0f, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x6a,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x69, 0x6e,
	0x6f, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x63, 0x68, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x9a, 0x03, 0x0a, 0x14, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x43, 0x0a, 0x0e,
	0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x75, 0x0a, 0x0f, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x08, 0x72, 0x6f, 0x62, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x52,
	0x07, 0x72, 0x6f, 0x62, 0x6f, 0x74, 0x49, 0x64, 0x42, 0x41, 0x42, 0x0c, 0x52, 0x6f, 0x62, 0x6f,
	0x74, 0x49, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74,
	0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_robot_id_proto_rawDescOnce sync.Once
	file_bosdyn_api_robot_id_proto_rawDescData = file_bosdyn_api_robot_id_proto_rawDesc
)

func file_bosdyn_api_robot_id_proto_rawDescGZIP() []byte {
	file_bosdyn_api_robot_id_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_robot_id_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_robot_id_proto_rawDescData)
	})
	return file_bosdyn_api_robot_id_proto_rawDescData
}

var file_bosdyn_api_robot_id_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_bosdyn_api_robot_id_proto_goTypes = []interface{}{
	(*RobotId)(nil),               // 0: bosdyn.api.RobotId
	(*SoftwareVersion)(nil),       // 1: bosdyn.api.SoftwareVersion
	(*RobotSoftwareRelease)(nil),  // 2: bosdyn.api.RobotSoftwareRelease
	(*RobotIdRequest)(nil),        // 3: bosdyn.api.RobotIdRequest
	(*RobotIdResponse)(nil),       // 4: bosdyn.api.RobotIdResponse
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*Parameter)(nil),             // 6: bosdyn.api.Parameter
	(*RequestHeader)(nil),         // 7: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),        // 8: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_robot_id_proto_depIdxs = []int32{
	2, // 0: bosdyn.api.RobotId.software_release:type_name -> bosdyn.api.RobotSoftwareRelease
	1, // 1: bosdyn.api.RobotSoftwareRelease.version:type_name -> bosdyn.api.SoftwareVersion
	5, // 2: bosdyn.api.RobotSoftwareRelease.changeset_date:type_name -> google.protobuf.Timestamp
	5, // 3: bosdyn.api.RobotSoftwareRelease.install_date:type_name -> google.protobuf.Timestamp
	6, // 4: bosdyn.api.RobotSoftwareRelease.parameters:type_name -> bosdyn.api.Parameter
	7, // 5: bosdyn.api.RobotIdRequest.header:type_name -> bosdyn.api.RequestHeader
	8, // 6: bosdyn.api.RobotIdResponse.header:type_name -> bosdyn.api.ResponseHeader
	0, // 7: bosdyn.api.RobotIdResponse.robot_id:type_name -> bosdyn.api.RobotId
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_bosdyn_api_robot_id_proto_init() }
func file_bosdyn_api_robot_id_proto_init() {
	if File_bosdyn_api_robot_id_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_parameter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_robot_id_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_id_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SoftwareVersion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_id_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotSoftwareRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_id_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_robot_id_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_robot_id_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_robot_id_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_robot_id_proto_depIdxs,
		MessageInfos:      file_bosdyn_api_robot_id_proto_msgTypes,
	}.Build()
	File_bosdyn_api_robot_id_proto = out.File
	file_bosdyn_api_robot_id_proto_rawDesc = nil
	file_bosdyn_api_robot_id_proto_goTypes = nil
	file_bosdyn_api_robot_id_proto_depIdxs = nil
}
