// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/world_object.proto

package api

import (
	docking "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api/docking"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A type for the world object, which is associated with whatever properties the world object includes. This can
// be used to request specific kinds of objects; for example, a request for only fiducials.
type WorldObjectType int32

const (
	WorldObjectType_WORLD_OBJECT_UNKNOWN           WorldObjectType = 0
	WorldObjectType_WORLD_OBJECT_DRAWABLE          WorldObjectType = 1
	WorldObjectType_WORLD_OBJECT_APRILTAG          WorldObjectType = 2
	WorldObjectType_WORLD_OBJECT_IMAGE_COORDINATES WorldObjectType = 5
	WorldObjectType_WORLD_OBJECT_DOCK              WorldObjectType = 6
)

// Enum value maps for WorldObjectType.
var (
	WorldObjectType_name = map[int32]string{
		0: "WORLD_OBJECT_UNKNOWN",
		1: "WORLD_OBJECT_DRAWABLE",
		2: "WORLD_OBJECT_APRILTAG",
		5: "WORLD_OBJECT_IMAGE_COORDINATES",
		6: "WORLD_OBJECT_DOCK",
	}
	WorldObjectType_value = map[string]int32{
		"WORLD_OBJECT_UNKNOWN":           0,
		"WORLD_OBJECT_DRAWABLE":          1,
		"WORLD_OBJECT_APRILTAG":          2,
		"WORLD_OBJECT_IMAGE_COORDINATES": 5,
		"WORLD_OBJECT_DOCK":              6,
	}
)

func (x WorldObjectType) Enum() *WorldObjectType {
	p := new(WorldObjectType)
	*p = x
	return p
}

func (x WorldObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorldObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_world_object_proto_enumTypes[0].Descriptor()
}

func (WorldObjectType) Type() protoreflect.EnumType {
	return &file_bosdyn_api_world_object_proto_enumTypes[0]
}

func (x WorldObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorldObjectType.Descriptor instead.
func (WorldObjectType) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{0}
}

type MutateWorldObjectRequest_Action int32

const (
	// Invalid action.
	MutateWorldObjectRequest_ACTION_UNKNOWN MutateWorldObjectRequest_Action = 0
	// Add a new object.
	MutateWorldObjectRequest_ACTION_ADD MutateWorldObjectRequest_Action = 1
	// Change an existing objected (ID'd by integer ID number). This is
	// only allowed to change objects added by the API-user, and not
	// objects detected by Spot's perception system.
	MutateWorldObjectRequest_ACTION_CHANGE MutateWorldObjectRequest_Action = 2
	// Delete the object, ID'd by integer ID number. This is
	// only allowed to change objects added by the API-user, and not
	// objects detected by Spot's perception system.
	MutateWorldObjectRequest_ACTION_DELETE MutateWorldObjectRequest_Action = 3
)

// Enum value maps for MutateWorldObjectRequest_Action.
var (
	MutateWorldObjectRequest_Action_name = map[int32]string{
		0: "ACTION_UNKNOWN",
		1: "ACTION_ADD",
		2: "ACTION_CHANGE",
		3: "ACTION_DELETE",
	}
	MutateWorldObjectRequest_Action_value = map[string]int32{
		"ACTION_UNKNOWN": 0,
		"ACTION_ADD":     1,
		"ACTION_CHANGE":  2,
		"ACTION_DELETE":  3,
	}
)

func (x MutateWorldObjectRequest_Action) Enum() *MutateWorldObjectRequest_Action {
	p := new(MutateWorldObjectRequest_Action)
	*p = x
	return p
}

func (x MutateWorldObjectRequest_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutateWorldObjectRequest_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_world_object_proto_enumTypes[1].Descriptor()
}

func (MutateWorldObjectRequest_Action) Type() protoreflect.EnumType {
	return &file_bosdyn_api_world_object_proto_enumTypes[1]
}

func (x MutateWorldObjectRequest_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MutateWorldObjectRequest_Action.Descriptor instead.
func (MutateWorldObjectRequest_Action) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{3, 0}
}

type MutateWorldObjectResponse_Status int32

const (
	// Status of request is unknown. Check the status code of the response header.
	MutateWorldObjectResponse_STATUS_UNKNOWN MutateWorldObjectResponse_Status = 0
	// Request was accepted; GetObjectListResponse must still be checked to verify the changes.
	MutateWorldObjectResponse_STATUS_OK MutateWorldObjectResponse_Status = 1
	// The mutation object's ID is unknown such that the service could not recognize this object.
	// This error applies to the CHANGE and DELETE actions, since it must identify the object by
	// it's id number given by the service.
	MutateWorldObjectResponse_STATUS_INVALID_MUTATION_ID MutateWorldObjectResponse_Status = 2
	// The mutation request is not allowed because it is attempting to change or delete an object
	// detected by Spot's perception system.
	MutateWorldObjectResponse_STATUS_NO_PERMISSION MutateWorldObjectResponse_Status = 3
)

// Enum value maps for MutateWorldObjectResponse_Status.
var (
	MutateWorldObjectResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_INVALID_MUTATION_ID",
		3: "STATUS_NO_PERMISSION",
	}
	MutateWorldObjectResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":             0,
		"STATUS_OK":                  1,
		"STATUS_INVALID_MUTATION_ID": 2,
		"STATUS_NO_PERMISSION":       3,
	}
)

func (x MutateWorldObjectResponse_Status) Enum() *MutateWorldObjectResponse_Status {
	p := new(MutateWorldObjectResponse_Status)
	*p = x
	return p
}

func (x MutateWorldObjectResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MutateWorldObjectResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_world_object_proto_enumTypes[2].Descriptor()
}

func (MutateWorldObjectResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_world_object_proto_enumTypes[2]
}

func (x MutateWorldObjectResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MutateWorldObjectResponse_Status.Descriptor instead.
func (MutateWorldObjectResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{4, 0}
}

type AprilTagProperties_AprilTagPoseStatus int32

const (
	AprilTagProperties_STATUS_UNKNOWN AprilTagProperties_AprilTagPoseStatus = 0
	// No known issues with the pose estimate.
	AprilTagProperties_STATUS_OK AprilTagProperties_AprilTagPoseStatus = 1
	// The orientation of the tag is ambiguous.
	AprilTagProperties_STATUS_AMBIGUOUS AprilTagProperties_AprilTagPoseStatus = 2
	// The pose may be unreliable due to high reprojection error.
	AprilTagProperties_STATUS_HIGH_ERROR AprilTagProperties_AprilTagPoseStatus = 3
)

// Enum value maps for AprilTagProperties_AprilTagPoseStatus.
var (
	AprilTagProperties_AprilTagPoseStatus_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_AMBIGUOUS",
		3: "STATUS_HIGH_ERROR",
	}
	AprilTagProperties_AprilTagPoseStatus_value = map[string]int32{
		"STATUS_UNKNOWN":    0,
		"STATUS_OK":         1,
		"STATUS_AMBIGUOUS":  2,
		"STATUS_HIGH_ERROR": 3,
	}
)

func (x AprilTagProperties_AprilTagPoseStatus) Enum() *AprilTagProperties_AprilTagPoseStatus {
	p := new(AprilTagProperties_AprilTagPoseStatus)
	*p = x
	return p
}

func (x AprilTagProperties_AprilTagPoseStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AprilTagProperties_AprilTagPoseStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_world_object_proto_enumTypes[3].Descriptor()
}

func (AprilTagProperties_AprilTagPoseStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_world_object_proto_enumTypes[3]
}

func (x AprilTagProperties_AprilTagPoseStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AprilTagProperties_AprilTagPoseStatus.Descriptor instead.
func (AprilTagProperties_AprilTagPoseStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{7, 0}
}

// The world object message is used to describe different objects seen by a robot. It contains information
// about the properties of the object in addition to a unique id and the transform snapshot.
// The world object uses "properties" to describe different traits about the object, such as image coordinates
// associated with the camera the object was detected in. A world object can have multiple different properties
// that are all associated with the single object.
type WorldObject struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique integer identifier that will be consistent for the duration of a robot's battery life
	// The id is set internally by the world object service.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// A human readable name for the world object. Note that this differs from any frame_name's associated
	// with the object (since there can be multiple frames describing a single object).
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Time in robot time clock at which this object was most recently detected and valid.
	AcquisitionTime *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=acquisition_time,json=acquisitionTime,proto3" json:"acquisition_time,omitempty"`
	// A tree-based collection of transformations, which will include the transformations to each
	// of the returned world objects in addition to transformations to the common frames ("vision",
	// "body", "odom"). All transforms within the snapshot are at the acquisition time of the world object.
	// Note that each object's frame names are defined within the properties submessage. For example,
	// the apriltag frame name is defined in the AprilTagProperties message as "frame_name_fiducial"
	TransformsSnapshot *FrameTreeSnapshot `protobuf:"bytes,31,opt,name=transforms_snapshot,json=transformsSnapshot,proto3" json:"transforms_snapshot,omitempty"`
	// The drawable properties describe geometric shapes associated with an object.
	DrawableProperties []*DrawableProperties `protobuf:"bytes,5,rep,name=drawable_properties,json=drawableProperties,proto3" json:"drawable_properties,omitempty"`
	// The apriltag properties describe any fiducial identifying an object.
	ApriltagProperties *AprilTagProperties `protobuf:"bytes,6,opt,name=apriltag_properties,json=apriltagProperties,proto3" json:"apriltag_properties,omitempty"`
	// The image properties describe any camera and image coordinates associated with an object.
	ImageProperties *ImageProperties `protobuf:"bytes,9,opt,name=image_properties,json=imageProperties,proto3" json:"image_properties,omitempty"`
	// Properties describing a dock
	DockProperties *DockProperties `protobuf:"bytes,10,opt,name=dock_properties,json=dockProperties,proto3" json:"dock_properties,omitempty"`
	// A ray pointing at the object.  Useful in cases where position is unknown but direction is
	// known.
	RayProperties *RayProperties `protobuf:"bytes,11,opt,name=ray_properties,json=rayProperties,proto3" json:"ray_properties,omitempty"`
	// Bounding box in the world, oriented at the location provided in the transforms_snapshot.
	BoundingBoxProperties *BoundingBoxProperties `protobuf:"bytes,12,opt,name=bounding_box_properties,json=boundingBoxProperties,proto3" json:"bounding_box_properties,omitempty"`
	// An extra field for application-specific object properties.
	AdditionalProperties *anypb.Any `protobuf:"bytes,100,opt,name=additional_properties,json=additionalProperties,proto3" json:"additional_properties,omitempty"`
}

func (x *WorldObject) Reset() {
	*x = WorldObject{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorldObject) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorldObject) ProtoMessage() {}

func (x *WorldObject) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorldObject.ProtoReflect.Descriptor instead.
func (*WorldObject) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{0}
}

func (x *WorldObject) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *WorldObject) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorldObject) GetAcquisitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AcquisitionTime
	}
	return nil
}

func (x *WorldObject) GetTransformsSnapshot() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshot
	}
	return nil
}

func (x *WorldObject) GetDrawableProperties() []*DrawableProperties {
	if x != nil {
		return x.DrawableProperties
	}
	return nil
}

func (x *WorldObject) GetApriltagProperties() *AprilTagProperties {
	if x != nil {
		return x.ApriltagProperties
	}
	return nil
}

func (x *WorldObject) GetImageProperties() *ImageProperties {
	if x != nil {
		return x.ImageProperties
	}
	return nil
}

func (x *WorldObject) GetDockProperties() *DockProperties {
	if x != nil {
		return x.DockProperties
	}
	return nil
}

func (x *WorldObject) GetRayProperties() *RayProperties {
	if x != nil {
		return x.RayProperties
	}
	return nil
}

func (x *WorldObject) GetBoundingBoxProperties() *BoundingBoxProperties {
	if x != nil {
		return x.BoundingBoxProperties
	}
	return nil
}

func (x *WorldObject) GetAdditionalProperties() *anypb.Any {
	if x != nil {
		return x.AdditionalProperties
	}
	return nil
}

// The ListWorldObject request message, which can optionally include filters for the object type or timestamp.
type ListWorldObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Optional filters to apply to the world object request
	// Specific type of object; can request multiple different properties
	ObjectType []WorldObjectType `protobuf:"varint,2,rep,packed,name=object_type,json=objectType,proto3,enum=bosdyn.api.WorldObjectType" json:"object_type,omitempty"`
	// Timestamp to filter objects based on. The time should be in robot time
	// All objects with header timestamps after (>) timestamp_filter will be returned
	TimestampFilter *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp_filter,json=timestampFilter,proto3" json:"timestamp_filter,omitempty"`
}

func (x *ListWorldObjectRequest) Reset() {
	*x = ListWorldObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorldObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorldObjectRequest) ProtoMessage() {}

func (x *ListWorldObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorldObjectRequest.ProtoReflect.Descriptor instead.
func (*ListWorldObjectRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{1}
}

func (x *ListWorldObjectRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListWorldObjectRequest) GetObjectType() []WorldObjectType {
	if x != nil {
		return x.ObjectType
	}
	return nil
}

func (x *ListWorldObjectRequest) GetTimestampFilter() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampFilter
	}
	return nil
}

// The ListWorldObject response message, which contains all of the current world objects in the
// robot's perception scene.
type ListWorldObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The currently perceived world objects.
	WorldObjects []*WorldObject `protobuf:"bytes,2,rep,name=world_objects,json=worldObjects,proto3" json:"world_objects,omitempty"`
}

func (x *ListWorldObjectResponse) Reset() {
	*x = ListWorldObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorldObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorldObjectResponse) ProtoMessage() {}

func (x *ListWorldObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorldObjectResponse.ProtoReflect.Descriptor instead.
func (*ListWorldObjectResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{2}
}

func (x *ListWorldObjectResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListWorldObjectResponse) GetWorldObjects() []*WorldObject {
	if x != nil {
		return x.WorldObjects
	}
	return nil
}

// The MutateWorldObject request message, which specifies the type of mutation and which object
// the mutation should be applied to.
type MutateWorldObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The mutation for this request.
	Mutation *MutateWorldObjectRequest_Mutation `protobuf:"bytes,2,opt,name=mutation,proto3" json:"mutation,omitempty"`
}

func (x *MutateWorldObjectRequest) Reset() {
	*x = MutateWorldObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateWorldObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateWorldObjectRequest) ProtoMessage() {}

func (x *MutateWorldObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateWorldObjectRequest.ProtoReflect.Descriptor instead.
func (*MutateWorldObjectRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{3}
}

func (x *MutateWorldObjectRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MutateWorldObjectRequest) GetMutation() *MutateWorldObjectRequest_Mutation {
	if x != nil {
		return x.Mutation
	}
	return nil
}

// The MutateWorldObject response message, which includes the world object id for the object that
// the mutation was applied to if the request succeeds.
type MutateWorldObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Return status for the request.
	Status MutateWorldObjectResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.MutateWorldObjectResponse_Status" json:"status,omitempty"`
	// ID set by the world object service for the mutated object
	MutatedObjectId int32 `protobuf:"varint,4,opt,name=mutated_object_id,json=mutatedObjectId,proto3" json:"mutated_object_id,omitempty"`
}

func (x *MutateWorldObjectResponse) Reset() {
	*x = MutateWorldObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateWorldObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateWorldObjectResponse) ProtoMessage() {}

func (x *MutateWorldObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateWorldObjectResponse.ProtoReflect.Descriptor instead.
func (*MutateWorldObjectResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{4}
}

func (x *MutateWorldObjectResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MutateWorldObjectResponse) GetStatus() MutateWorldObjectResponse_Status {
	if x != nil {
		return x.Status
	}
	return MutateWorldObjectResponse_STATUS_UNKNOWN
}

func (x *MutateWorldObjectResponse) GetMutatedObjectId() int32 {
	if x != nil {
		return x.MutatedObjectId
	}
	return 0
}

//  World object properties describing image coordinates associated with an object or scene.
type ImageProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Camera Source of such as "back", "frontleft", etc.
	CameraSource string `protobuf:"bytes,1,opt,name=camera_source,json=cameraSource,proto3" json:"camera_source,omitempty"`
	// Types that are assignable to ImageData:
	//	*ImageProperties_Coordinates
	//	*ImageProperties_Keypoints
	ImageData isImageProperties_ImageData `protobuf_oneof:"image_data"`
	// Camera parameters.
	ImageSource *ImageSource `protobuf:"bytes,5,opt,name=image_source,json=imageSource,proto3" json:"image_source,omitempty"`
	// Image that produced the data.
	ImageCapture *ImageCapture `protobuf:"bytes,6,opt,name=image_capture,json=imageCapture,proto3" json:"image_capture,omitempty"`
	// Frame name for the object described by image coordinates.
	FrameNameImageCoordinates string `protobuf:"bytes,3,opt,name=frame_name_image_coordinates,json=frameNameImageCoordinates,proto3" json:"frame_name_image_coordinates,omitempty"`
}

func (x *ImageProperties) Reset() {
	*x = ImageProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageProperties) ProtoMessage() {}

func (x *ImageProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageProperties.ProtoReflect.Descriptor instead.
func (*ImageProperties) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{5}
}

func (x *ImageProperties) GetCameraSource() string {
	if x != nil {
		return x.CameraSource
	}
	return ""
}

func (m *ImageProperties) GetImageData() isImageProperties_ImageData {
	if m != nil {
		return m.ImageData
	}
	return nil
}

func (x *ImageProperties) GetCoordinates() *Polygon {
	if x, ok := x.GetImageData().(*ImageProperties_Coordinates); ok {
		return x.Coordinates
	}
	return nil
}

func (x *ImageProperties) GetKeypoints() *KeypointSet {
	if x, ok := x.GetImageData().(*ImageProperties_Keypoints); ok {
		return x.Keypoints
	}
	return nil
}

func (x *ImageProperties) GetImageSource() *ImageSource {
	if x != nil {
		return x.ImageSource
	}
	return nil
}

func (x *ImageProperties) GetImageCapture() *ImageCapture {
	if x != nil {
		return x.ImageCapture
	}
	return nil
}

func (x *ImageProperties) GetFrameNameImageCoordinates() string {
	if x != nil {
		return x.FrameNameImageCoordinates
	}
	return ""
}

type isImageProperties_ImageData interface {
	isImageProperties_ImageData()
}

type ImageProperties_Coordinates struct {
	// Image coordinates of the corners of a polygon (pixels of x[row], y[col]) in either
	// clockwise/counter clockwise order
	Coordinates *Polygon `protobuf:"bytes,2,opt,name=coordinates,proto3,oneof"`
}

type ImageProperties_Keypoints struct {
	// A set of keypoints and their associated metadata.
	Keypoints *KeypointSet `protobuf:"bytes,4,opt,name=keypoints,proto3,oneof"`
}

func (*ImageProperties_Coordinates) isImageProperties_ImageData() {}

func (*ImageProperties_Keypoints) isImageProperties_ImageData() {}

// World object properties describing a dock
type DockProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Consistent id associated with a given dock.
	DockId uint32 `protobuf:"varint,1,opt,name=dock_id,json=dockId,proto3" json:"dock_id,omitempty"`
	// Type of dock.
	Type docking.DockType `protobuf:"varint,2,opt,name=type,proto3,enum=bosdyn.api.docking.DockType" json:"type,omitempty"`
	// The frame name for the location of dock origin. This will be included in the transform snapshot.
	FrameNameDock string `protobuf:"bytes,3,opt,name=frame_name_dock,json=frameNameDock,proto3" json:"frame_name_dock,omitempty"`
	// Availability if the dock can be used
	Unavailable bool `protobuf:"varint,4,opt,name=unavailable,proto3" json:"unavailable,omitempty"`
	// The dock is an unconfirmed prior detection
	FromPrior bool `protobuf:"varint,5,opt,name=from_prior,json=fromPrior,proto3" json:"from_prior,omitempty"`
}

func (x *DockProperties) Reset() {
	*x = DockProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockProperties) ProtoMessage() {}

func (x *DockProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockProperties.ProtoReflect.Descriptor instead.
func (*DockProperties) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{6}
}

func (x *DockProperties) GetDockId() uint32 {
	if x != nil {
		return x.DockId
	}
	return 0
}

func (x *DockProperties) GetType() docking.DockType {
	if x != nil {
		return x.Type
	}
	return docking.DockType(0)
}

func (x *DockProperties) GetFrameNameDock() string {
	if x != nil {
		return x.FrameNameDock
	}
	return ""
}

func (x *DockProperties) GetUnavailable() bool {
	if x != nil {
		return x.Unavailable
	}
	return false
}

func (x *DockProperties) GetFromPrior() bool {
	if x != nil {
		return x.FromPrior
	}
	return false
}

//  World object properties describing a fiducial object.
type AprilTagProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Consistent integer id associated with a given apriltag. April Tag detections will be from the
	// tag family 36h11.
	TagId int32 `protobuf:"varint,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	// Apriltag size in meters, where x is the row/width length and y is the
	// height/col length of the tag
	Dimensions *Vec2 `protobuf:"bytes,2,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// The frame name for the raw version of this fiducial. This will be included in the transform snapshot.
	FrameNameFiducial string `protobuf:"bytes,3,opt,name=frame_name_fiducial,json=frameNameFiducial,proto3" json:"frame_name_fiducial,omitempty"`
	// Status of the pose estimation of the unfiltered fiducial frame.
	FiducialPoseStatus AprilTagProperties_AprilTagPoseStatus `protobuf:"varint,8,opt,name=fiducial_pose_status,json=fiducialPoseStatus,proto3,enum=bosdyn.api.AprilTagProperties_AprilTagPoseStatus" json:"fiducial_pose_status,omitempty"`
	// The frame name for the filtered version of this fiducial. This will be included in the transform snapshot.
	FrameNameFiducialFiltered string `protobuf:"bytes,4,opt,name=frame_name_fiducial_filtered,json=frameNameFiducialFiltered,proto3" json:"frame_name_fiducial_filtered,omitempty"`
	// Status of the pose estimation of the filtered fiducial frame.
	FiducialFilteredPoseStatus AprilTagProperties_AprilTagPoseStatus `protobuf:"varint,9,opt,name=fiducial_filtered_pose_status,json=fiducialFilteredPoseStatus,proto3,enum=bosdyn.api.AprilTagProperties_AprilTagPoseStatus" json:"fiducial_filtered_pose_status,omitempty"`
	// The frame name for the camera that detected this fiducial.
	FrameNameCamera string `protobuf:"bytes,7,opt,name=frame_name_camera,json=frameNameCamera,proto3" json:"frame_name_camera,omitempty"`
	// A 6 x 6 Covariance matrix representing the marginal uncertainty of the last detection.
	// The rows/columns are:
	// rx, ry, rz, tx, ty, tz
	// which represent incremental rotation and translation along the x, y, and z axes of the
	// given frame, respectively.
	// This is computed using the Jacobian of the pose estimation algorithm.
	DetectionCovariance *SE3Covariance `protobuf:"bytes,5,opt,name=detection_covariance,json=detectionCovariance,proto3" json:"detection_covariance,omitempty"`
	// The frame that the detection covariance is expressed in.
	DetectionCovarianceReferenceFrame string `protobuf:"bytes,6,opt,name=detection_covariance_reference_frame,json=detectionCovarianceReferenceFrame,proto3" json:"detection_covariance_reference_frame,omitempty"`
}

func (x *AprilTagProperties) Reset() {
	*x = AprilTagProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AprilTagProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AprilTagProperties) ProtoMessage() {}

func (x *AprilTagProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AprilTagProperties.ProtoReflect.Descriptor instead.
func (*AprilTagProperties) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{7}
}

func (x *AprilTagProperties) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

func (x *AprilTagProperties) GetDimensions() *Vec2 {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *AprilTagProperties) GetFrameNameFiducial() string {
	if x != nil {
		return x.FrameNameFiducial
	}
	return ""
}

func (x *AprilTagProperties) GetFiducialPoseStatus() AprilTagProperties_AprilTagPoseStatus {
	if x != nil {
		return x.FiducialPoseStatus
	}
	return AprilTagProperties_STATUS_UNKNOWN
}

func (x *AprilTagProperties) GetFrameNameFiducialFiltered() string {
	if x != nil {
		return x.FrameNameFiducialFiltered
	}
	return ""
}

func (x *AprilTagProperties) GetFiducialFilteredPoseStatus() AprilTagProperties_AprilTagPoseStatus {
	if x != nil {
		return x.FiducialFilteredPoseStatus
	}
	return AprilTagProperties_STATUS_UNKNOWN
}

func (x *AprilTagProperties) GetFrameNameCamera() string {
	if x != nil {
		return x.FrameNameCamera
	}
	return ""
}

func (x *AprilTagProperties) GetDetectionCovariance() *SE3Covariance {
	if x != nil {
		return x.DetectionCovariance
	}
	return nil
}

func (x *AprilTagProperties) GetDetectionCovarianceReferenceFrame() string {
	if x != nil {
		return x.DetectionCovarianceReferenceFrame
	}
	return ""
}

type RayProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Ray, usually pointing from the camera to the object.
	Ray *Ray `protobuf:"bytes,1,opt,name=ray,proto3" json:"ray,omitempty"`
	// Frame the ray is expressed with respect to.
	Frame string `protobuf:"bytes,2,opt,name=frame,proto3" json:"frame,omitempty"`
}

func (x *RayProperties) Reset() {
	*x = RayProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RayProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayProperties) ProtoMessage() {}

func (x *RayProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayProperties.ProtoReflect.Descriptor instead.
func (*RayProperties) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{8}
}

func (x *RayProperties) GetRay() *Ray {
	if x != nil {
		return x.Ray
	}
	return nil
}

func (x *RayProperties) GetFrame() string {
	if x != nil {
		return x.Frame
	}
	return ""
}

type BoundingBoxProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Oriented Bounding Box, with position and orientation at the frame provided in the
	// transforms snapshot.
	//
	// The size of the box is expressed with respect to the frame.
	SizeEwrtFrame *Vec3 `protobuf:"bytes,1,opt,name=size_ewrt_frame,json=sizeEwrtFrame,proto3" json:"size_ewrt_frame,omitempty"`
	// Frame the size is expressed with respect to.
	Frame string `protobuf:"bytes,2,opt,name=frame,proto3" json:"frame,omitempty"`
}

func (x *BoundingBoxProperties) Reset() {
	*x = BoundingBoxProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoundingBoxProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBoxProperties) ProtoMessage() {}

func (x *BoundingBoxProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBoxProperties.ProtoReflect.Descriptor instead.
func (*BoundingBoxProperties) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{9}
}

func (x *BoundingBoxProperties) GetSizeEwrtFrame() *Vec3 {
	if x != nil {
		return x.SizeEwrtFrame
	}
	return nil
}

func (x *BoundingBoxProperties) GetFrame() string {
	if x != nil {
		return x.Frame
	}
	return ""
}

// The drawing and visualization information for a world object.
type DrawableProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Color of the object.
	Color *DrawableProperties_Color `protobuf:"bytes,1,opt,name=color,proto3" json:"color,omitempty"`
	// Label to be drawn at the origin of the object.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Drawn objects in wireframe.
	Wireframe bool `protobuf:"varint,3,opt,name=wireframe,proto3" json:"wireframe,omitempty"`
	// The object to draw, e.g. a Sphere.
	//
	// Types that are assignable to Drawable:
	//	*DrawableProperties_Frame
	//	*DrawableProperties_Sphere
	//	*DrawableProperties_Box
	//	*DrawableProperties_Arrow
	//	*DrawableProperties_Capsule
	//	*DrawableProperties_Cylinder
	//	*DrawableProperties_Linestrip
	//	*DrawableProperties_Points
	Drawable isDrawableProperties_Drawable `protobuf_oneof:"drawable"`
	// The frame name for the drawable object. This will optionally be
	// included in the frame tree snapshot.
	FrameNameDrawable string `protobuf:"bytes,12,opt,name=frame_name_drawable,json=frameNameDrawable,proto3" json:"frame_name_drawable,omitempty"`
}

func (x *DrawableProperties) Reset() {
	*x = DrawableProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableProperties) ProtoMessage() {}

func (x *DrawableProperties) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableProperties.ProtoReflect.Descriptor instead.
func (*DrawableProperties) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{10}
}

func (x *DrawableProperties) GetColor() *DrawableProperties_Color {
	if x != nil {
		return x.Color
	}
	return nil
}

func (x *DrawableProperties) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DrawableProperties) GetWireframe() bool {
	if x != nil {
		return x.Wireframe
	}
	return false
}

func (m *DrawableProperties) GetDrawable() isDrawableProperties_Drawable {
	if m != nil {
		return m.Drawable
	}
	return nil
}

func (x *DrawableProperties) GetFrame() *DrawableFrame {
	if x, ok := x.GetDrawable().(*DrawableProperties_Frame); ok {
		return x.Frame
	}
	return nil
}

func (x *DrawableProperties) GetSphere() *DrawableSphere {
	if x, ok := x.GetDrawable().(*DrawableProperties_Sphere); ok {
		return x.Sphere
	}
	return nil
}

func (x *DrawableProperties) GetBox() *DrawableBox {
	if x, ok := x.GetDrawable().(*DrawableProperties_Box); ok {
		return x.Box
	}
	return nil
}

func (x *DrawableProperties) GetArrow() *DrawableArrow {
	if x, ok := x.GetDrawable().(*DrawableProperties_Arrow); ok {
		return x.Arrow
	}
	return nil
}

func (x *DrawableProperties) GetCapsule() *DrawableCapsule {
	if x, ok := x.GetDrawable().(*DrawableProperties_Capsule); ok {
		return x.Capsule
	}
	return nil
}

func (x *DrawableProperties) GetCylinder() *DrawableCylinder {
	if x, ok := x.GetDrawable().(*DrawableProperties_Cylinder); ok {
		return x.Cylinder
	}
	return nil
}

func (x *DrawableProperties) GetLinestrip() *DrawableLineStrip {
	if x, ok := x.GetDrawable().(*DrawableProperties_Linestrip); ok {
		return x.Linestrip
	}
	return nil
}

func (x *DrawableProperties) GetPoints() *DrawablePoints {
	if x, ok := x.GetDrawable().(*DrawableProperties_Points); ok {
		return x.Points
	}
	return nil
}

func (x *DrawableProperties) GetFrameNameDrawable() string {
	if x != nil {
		return x.FrameNameDrawable
	}
	return ""
}

type isDrawableProperties_Drawable interface {
	isDrawableProperties_Drawable()
}

type DrawableProperties_Frame struct {
	Frame *DrawableFrame `protobuf:"bytes,4,opt,name=frame,proto3,oneof"` // A drawable frame (oneof drawable field).
}

type DrawableProperties_Sphere struct {
	Sphere *DrawableSphere `protobuf:"bytes,5,opt,name=sphere,proto3,oneof"` // A drawable sphere (oneof drawable field).
}

type DrawableProperties_Box struct {
	Box *DrawableBox `protobuf:"bytes,6,opt,name=box,proto3,oneof"` // A drawable box (oneof drawable field).
}

type DrawableProperties_Arrow struct {
	Arrow *DrawableArrow `protobuf:"bytes,7,opt,name=arrow,proto3,oneof"` // A drawable arrow (oneof drawable field).
}

type DrawableProperties_Capsule struct {
	Capsule *DrawableCapsule `protobuf:"bytes,8,opt,name=capsule,proto3,oneof"` // A drawable capsule (oneof drawable field).
}

type DrawableProperties_Cylinder struct {
	Cylinder *DrawableCylinder `protobuf:"bytes,9,opt,name=cylinder,proto3,oneof"` // A drawable cylinder (oneof drawable field).
}

type DrawableProperties_Linestrip struct {
	Linestrip *DrawableLineStrip `protobuf:"bytes,10,opt,name=linestrip,proto3,oneof"` // A drawable linestrip (oneof drawable field).
}

type DrawableProperties_Points struct {
	Points *DrawablePoints `protobuf:"bytes,11,opt,name=points,proto3,oneof"` // A drawable set of points (oneof drawable field).
}

func (*DrawableProperties_Frame) isDrawableProperties_Drawable() {}

func (*DrawableProperties_Sphere) isDrawableProperties_Drawable() {}

func (*DrawableProperties_Box) isDrawableProperties_Drawable() {}

func (*DrawableProperties_Arrow) isDrawableProperties_Drawable() {}

func (*DrawableProperties_Capsule) isDrawableProperties_Drawable() {}

func (*DrawableProperties_Cylinder) isDrawableProperties_Drawable() {}

func (*DrawableProperties_Linestrip) isDrawableProperties_Drawable() {}

func (*DrawableProperties_Points) isDrawableProperties_Drawable() {}

// A coordinate frame drawing object, describing how large to render the arrows.
type DrawableFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArrowLength float64 `protobuf:"fixed64,1,opt,name=arrow_length,json=arrowLength,proto3" json:"arrow_length,omitempty"`
	ArrowRadius float64 `protobuf:"fixed64,2,opt,name=arrow_radius,json=arrowRadius,proto3" json:"arrow_radius,omitempty"`
}

func (x *DrawableFrame) Reset() {
	*x = DrawableFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableFrame) ProtoMessage() {}

func (x *DrawableFrame) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableFrame.ProtoReflect.Descriptor instead.
func (*DrawableFrame) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{11}
}

func (x *DrawableFrame) GetArrowLength() float64 {
	if x != nil {
		return x.ArrowLength
	}
	return 0
}

func (x *DrawableFrame) GetArrowRadius() float64 {
	if x != nil {
		return x.ArrowRadius
	}
	return 0
}

// A sphere drawing object.
type DrawableSphere struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Radius float64 `protobuf:"fixed64,1,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *DrawableSphere) Reset() {
	*x = DrawableSphere{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableSphere) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableSphere) ProtoMessage() {}

func (x *DrawableSphere) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableSphere.ProtoReflect.Descriptor instead.
func (*DrawableSphere) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{12}
}

func (x *DrawableSphere) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// A three dimensional box drawing object.
type DrawableBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size *Vec3 `protobuf:"bytes,1,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *DrawableBox) Reset() {
	*x = DrawableBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableBox) ProtoMessage() {}

func (x *DrawableBox) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableBox.ProtoReflect.Descriptor instead.
func (*DrawableBox) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{13}
}

func (x *DrawableBox) GetSize() *Vec3 {
	if x != nil {
		return x.Size
	}
	return nil
}

// A directed arrow drawing object.
type DrawableArrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *Vec3   `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	Radius    float64 `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *DrawableArrow) Reset() {
	*x = DrawableArrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableArrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableArrow) ProtoMessage() {}

func (x *DrawableArrow) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableArrow.ProtoReflect.Descriptor instead.
func (*DrawableArrow) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{14}
}

func (x *DrawableArrow) GetDirection() *Vec3 {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *DrawableArrow) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// A oval-like capsule drawing object.
type DrawableCapsule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *Vec3   `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	Radius    float64 `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *DrawableCapsule) Reset() {
	*x = DrawableCapsule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableCapsule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableCapsule) ProtoMessage() {}

func (x *DrawableCapsule) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableCapsule.ProtoReflect.Descriptor instead.
func (*DrawableCapsule) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{15}
}

func (x *DrawableCapsule) GetDirection() *Vec3 {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *DrawableCapsule) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// A cylinder drawing object.
type DrawableCylinder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *Vec3   `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	Radius    float64 `protobuf:"fixed64,2,opt,name=radius,proto3" json:"radius,omitempty"`
}

func (x *DrawableCylinder) Reset() {
	*x = DrawableCylinder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableCylinder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableCylinder) ProtoMessage() {}

func (x *DrawableCylinder) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableCylinder.ProtoReflect.Descriptor instead.
func (*DrawableCylinder) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{16}
}

func (x *DrawableCylinder) GetDirection() *Vec3 {
	if x != nil {
		return x.Direction
	}
	return nil
}

func (x *DrawableCylinder) GetRadius() float64 {
	if x != nil {
		return x.Radius
	}
	return 0
}

// A line strip drawing object.
type DrawableLineStrip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points *Vec3 `protobuf:"bytes,1,opt,name=points,proto3" json:"points,omitempty"`
}

func (x *DrawableLineStrip) Reset() {
	*x = DrawableLineStrip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableLineStrip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableLineStrip) ProtoMessage() {}

func (x *DrawableLineStrip) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableLineStrip.ProtoReflect.Descriptor instead.
func (*DrawableLineStrip) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{17}
}

func (x *DrawableLineStrip) GetPoints() *Vec3 {
	if x != nil {
		return x.Points
	}
	return nil
}

// A set of points drawing object.
type DrawablePoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Points []*Vec3 `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
}

func (x *DrawablePoints) Reset() {
	*x = DrawablePoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawablePoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawablePoints) ProtoMessage() {}

func (x *DrawablePoints) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawablePoints.ProtoReflect.Descriptor instead.
func (*DrawablePoints) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{18}
}

func (x *DrawablePoints) GetPoints() []*Vec3 {
	if x != nil {
		return x.Points
	}
	return nil
}

type MutateWorldObjectRequest_Mutation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The action (add, change, or delete) to be applied to a world object.
	Action MutateWorldObjectRequest_Action `protobuf:"varint,1,opt,name=action,proto3,enum=bosdyn.api.MutateWorldObjectRequest_Action" json:"action,omitempty"`
	// World object to be mutated.
	// If an object is being changed/deleted, then the world object id must match a world
	// object id known by the service.
	Object *WorldObject `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
}

func (x *MutateWorldObjectRequest_Mutation) Reset() {
	*x = MutateWorldObjectRequest_Mutation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MutateWorldObjectRequest_Mutation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MutateWorldObjectRequest_Mutation) ProtoMessage() {}

func (x *MutateWorldObjectRequest_Mutation) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MutateWorldObjectRequest_Mutation.ProtoReflect.Descriptor instead.
func (*MutateWorldObjectRequest_Mutation) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{3, 0}
}

func (x *MutateWorldObjectRequest_Mutation) GetAction() MutateWorldObjectRequest_Action {
	if x != nil {
		return x.Action
	}
	return MutateWorldObjectRequest_ACTION_UNKNOWN
}

func (x *MutateWorldObjectRequest_Mutation) GetObject() *WorldObject {
	if x != nil {
		return x.Object
	}
	return nil
}

// RGBA values for color ranging from [0,255] for R/G/B, and [0,1] for A.
type DrawableProperties_Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Red value ranging from [0,255].
	R int32 `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
	/// Green value ranging from [0,255].
	G int32 `protobuf:"varint,2,opt,name=g,proto3" json:"g,omitempty"`
	// Blue value ranging from [0,255].
	B int32 `protobuf:"varint,3,opt,name=b,proto3" json:"b,omitempty"`
	// Alpha (transparency) value ranging from [0,1].
	A float64 `protobuf:"fixed64,4,opt,name=a,proto3" json:"a,omitempty"`
}

func (x *DrawableProperties_Color) Reset() {
	*x = DrawableProperties_Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_world_object_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrawableProperties_Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrawableProperties_Color) ProtoMessage() {}

func (x *DrawableProperties_Color) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_world_object_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrawableProperties_Color.ProtoReflect.Descriptor instead.
func (*DrawableProperties_Color) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_world_object_proto_rawDescGZIP(), []int{10, 0}
}

func (x *DrawableProperties_Color) GetR() int32 {
	if x != nil {
		return x.R
	}
	return 0
}

func (x *DrawableProperties_Color) GetG() int32 {
	if x != nil {
		return x.G
	}
	return 0
}

func (x *DrawableProperties_Color) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *DrawableProperties_Color) GetA() float64 {
	if x != nil {
		return x.A
	}
	return 0
}

var File_bosdyn_api_world_object_proto protoreflect.FileDescriptor

var file_bosdyn_api_world_object_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x6f, 0x72,
	0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x20, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2f,
	0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74,
	0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x73, 0x70, 0x61, 0x72, 0x73, 0x65, 0x5f, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x05, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x61,
	0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x12, 0x4f, 0x0a, 0x13, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x12, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x13, 0x61, 0x70, 0x72, 0x69, 0x6c, 0x74, 0x61, 0x67, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x72, 0x69, 0x6c, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x12, 0x61, 0x70, 0x72, 0x69, 0x6c, 0x74, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0f, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f,
	0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x0e, 0x64, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x0d, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x17, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x62, 0x6f, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x15, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x49,
	0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x6e, 0x79, 0x52, 0x14, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0xd0, 0x01, 0x0a, 0x16, 0x4c, 0x69,
	0x73, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0d,
	0x77, 0x6f, 0x72, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x77, 0x6f,
	0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0xef, 0x02, 0x0a, 0x18, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x49, 0x0a, 0x08, 0x6d, 0x75,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6d, 0x75, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x80, 0x01, 0x0a, 0x08, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x52, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x44, 0x44, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x03, 0x22, 0xa8, 0x02, 0x0a,
	0x19, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x74, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x22, 0x65, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f,
	0x4d, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x22, 0xf2, 0x02, 0x0a, 0x0f, 0x49, 0x6d, 0x61, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63,
	0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x50, 0x6f, 0x6c, 0x79, 0x67, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6b, 0x65, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3d,
	0x0a, 0x0d, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x12, 0x3f, 0x0a,
	0x1c, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x42, 0x0c,
	0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0xc4, 0x01, 0x0a,
	0x0e, 0x44, 0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x6f,
	0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x22, 0xda, 0x05, 0x0a, 0x12, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x54, 0x61, 0x67,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32, 0x52, 0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x64, 0x75, 0x63,
	0x69, 0x61, 0x6c, 0x12, 0x63, 0x0a, 0x14, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x70, 0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x70, 0x72, 0x69, 0x6c, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x2e, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x50, 0x6f,
	0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x1c, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x74, 0x0a, 0x1d, 0x66, 0x69, 0x64,
	0x75, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x70,
	0x6f, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x70,
	0x72, 0x69, 0x6c, 0x54, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x2e, 0x41, 0x70, 0x72, 0x69, 0x6c, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x1a, 0x66, 0x69, 0x64, 0x75, 0x63, 0x69, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x61,
	0x6d, 0x65, 0x72, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x12, 0x4c, 0x0a, 0x14, 0x64,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x13, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x24, 0x64, 0x65, 0x74,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x21, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x64, 0x0a, 0x12, 0x41, 0x70,
	0x72, 0x69, 0x6c, 0x54, 0x61, 0x67, 0x50, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4b, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x4d,
	0x42, 0x49, 0x47, 0x55, 0x4f, 0x55, 0x53, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x22, 0x48, 0x0a, 0x0d, 0x52, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x21, 0x0a, 0x03, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x79, 0x52,
	0x03, 0x72, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x67, 0x0a, 0x15, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x65, 0x77, 0x72, 0x74,
	0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x0d,
	0x73, 0x69, 0x7a, 0x65, 0x45, 0x77, 0x72, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x22, 0xb4, 0x05, 0x0a, 0x12, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09,
	0x77, 0x69, 0x72, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x77, 0x69, 0x72, 0x65, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a,
	0x06, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x70, 0x68, 0x65, 0x72, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72,
	0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x78, 0x48, 0x00, 0x52, 0x03, 0x62, 0x6f, 0x78,
	0x12, 0x31, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72,
	0x72, 0x6f, 0x77, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x63, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08,
	0x63, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x69, 0x70, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69,
	0x6e, 0x65, 0x73, 0x74, 0x72, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x72, 0x61, 0x77,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3f, 0x0a,
	0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x01, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x62,
	0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x61, 0x42, 0x0a,
	0x0a, 0x08, 0x64, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x55, 0x0a, 0x0d, 0x44, 0x72,
	0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x72, 0x72, 0x6f, 0x77, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x5f, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x52, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x22, 0x28, 0x0a, 0x0e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x70, 0x68,
	0x65, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x0b, 0x44,
	0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x78, 0x12, 0x24, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x22, 0x57, 0x0a, 0x0d, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x72, 0x72, 0x6f,
	0x77, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x22, 0x59, 0x0a, 0x0f, 0x44, 0x72, 0x61,
	0x77, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x70, 0x73, 0x75, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63,
	0x33, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61,
	0x64, 0x69, 0x75, 0x73, 0x22, 0x5a, 0x0a, 0x10, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x09, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64, 0x69,
	0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75, 0x73,
	0x22, 0x3d, 0x0a, 0x11, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x3a, 0x0a, 0x0e, 0x44, 0x72, 0x61, 0x77, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56,
	0x65, 0x63, 0x33, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2a, 0x9c, 0x01, 0x0a, 0x0f,
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52,
	0x4c, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x52, 0x41, 0x57, 0x41, 0x42,
	0x4c, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x50, 0x52, 0x49, 0x4c, 0x54, 0x41, 0x47, 0x10, 0x02, 0x12,
	0x22, 0x0a, 0x1e, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f,
	0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x49, 0x4e, 0x41, 0x54, 0x45,
	0x53, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4c, 0x44, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x10, 0x06, 0x42, 0x45, 0x42, 0x10, 0x57, 0x6f,
	0x72, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e,
	0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75,
	0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_world_object_proto_rawDescOnce sync.Once
	file_bosdyn_api_world_object_proto_rawDescData = file_bosdyn_api_world_object_proto_rawDesc
)

func file_bosdyn_api_world_object_proto_rawDescGZIP() []byte {
	file_bosdyn_api_world_object_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_world_object_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_world_object_proto_rawDescData)
	})
	return file_bosdyn_api_world_object_proto_rawDescData
}

var file_bosdyn_api_world_object_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_bosdyn_api_world_object_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_bosdyn_api_world_object_proto_goTypes = []interface{}{
	(WorldObjectType)(0),                       // 0: bosdyn.api.WorldObjectType
	(MutateWorldObjectRequest_Action)(0),       // 1: bosdyn.api.MutateWorldObjectRequest.Action
	(MutateWorldObjectResponse_Status)(0),      // 2: bosdyn.api.MutateWorldObjectResponse.Status
	(AprilTagProperties_AprilTagPoseStatus)(0), // 3: bosdyn.api.AprilTagProperties.AprilTagPoseStatus
	(*WorldObject)(nil),                        // 4: bosdyn.api.WorldObject
	(*ListWorldObjectRequest)(nil),             // 5: bosdyn.api.ListWorldObjectRequest
	(*ListWorldObjectResponse)(nil),            // 6: bosdyn.api.ListWorldObjectResponse
	(*MutateWorldObjectRequest)(nil),           // 7: bosdyn.api.MutateWorldObjectRequest
	(*MutateWorldObjectResponse)(nil),          // 8: bosdyn.api.MutateWorldObjectResponse
	(*ImageProperties)(nil),                    // 9: bosdyn.api.ImageProperties
	(*DockProperties)(nil),                     // 10: bosdyn.api.DockProperties
	(*AprilTagProperties)(nil),                 // 11: bosdyn.api.AprilTagProperties
	(*RayProperties)(nil),                      // 12: bosdyn.api.RayProperties
	(*BoundingBoxProperties)(nil),              // 13: bosdyn.api.BoundingBoxProperties
	(*DrawableProperties)(nil),                 // 14: bosdyn.api.DrawableProperties
	(*DrawableFrame)(nil),                      // 15: bosdyn.api.DrawableFrame
	(*DrawableSphere)(nil),                     // 16: bosdyn.api.DrawableSphere
	(*DrawableBox)(nil),                        // 17: bosdyn.api.DrawableBox
	(*DrawableArrow)(nil),                      // 18: bosdyn.api.DrawableArrow
	(*DrawableCapsule)(nil),                    // 19: bosdyn.api.DrawableCapsule
	(*DrawableCylinder)(nil),                   // 20: bosdyn.api.DrawableCylinder
	(*DrawableLineStrip)(nil),                  // 21: bosdyn.api.DrawableLineStrip
	(*DrawablePoints)(nil),                     // 22: bosdyn.api.DrawablePoints
	(*MutateWorldObjectRequest_Mutation)(nil),  // 23: bosdyn.api.MutateWorldObjectRequest.Mutation
	(*DrawableProperties_Color)(nil),           // 24: bosdyn.api.DrawableProperties.Color
	(*timestamppb.Timestamp)(nil),              // 25: google.protobuf.Timestamp
	(*FrameTreeSnapshot)(nil),                  // 26: bosdyn.api.FrameTreeSnapshot
	(*anypb.Any)(nil),                          // 27: google.protobuf.Any
	(*RequestHeader)(nil),                      // 28: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),                     // 29: bosdyn.api.ResponseHeader
	(*Polygon)(nil),                            // 30: bosdyn.api.Polygon
	(*KeypointSet)(nil),                        // 31: bosdyn.api.KeypointSet
	(*ImageSource)(nil),                        // 32: bosdyn.api.ImageSource
	(*ImageCapture)(nil),                       // 33: bosdyn.api.ImageCapture
	(docking.DockType)(0),                      // 34: bosdyn.api.docking.DockType
	(*Vec2)(nil),                               // 35: bosdyn.api.Vec2
	(*SE3Covariance)(nil),                      // 36: bosdyn.api.SE3Covariance
	(*Ray)(nil),                                // 37: bosdyn.api.Ray
	(*Vec3)(nil),                               // 38: bosdyn.api.Vec3
}
var file_bosdyn_api_world_object_proto_depIdxs = []int32{
	25, // 0: bosdyn.api.WorldObject.acquisition_time:type_name -> google.protobuf.Timestamp
	26, // 1: bosdyn.api.WorldObject.transforms_snapshot:type_name -> bosdyn.api.FrameTreeSnapshot
	14, // 2: bosdyn.api.WorldObject.drawable_properties:type_name -> bosdyn.api.DrawableProperties
	11, // 3: bosdyn.api.WorldObject.apriltag_properties:type_name -> bosdyn.api.AprilTagProperties
	9,  // 4: bosdyn.api.WorldObject.image_properties:type_name -> bosdyn.api.ImageProperties
	10, // 5: bosdyn.api.WorldObject.dock_properties:type_name -> bosdyn.api.DockProperties
	12, // 6: bosdyn.api.WorldObject.ray_properties:type_name -> bosdyn.api.RayProperties
	13, // 7: bosdyn.api.WorldObject.bounding_box_properties:type_name -> bosdyn.api.BoundingBoxProperties
	27, // 8: bosdyn.api.WorldObject.additional_properties:type_name -> google.protobuf.Any
	28, // 9: bosdyn.api.ListWorldObjectRequest.header:type_name -> bosdyn.api.RequestHeader
	0,  // 10: bosdyn.api.ListWorldObjectRequest.object_type:type_name -> bosdyn.api.WorldObjectType
	25, // 11: bosdyn.api.ListWorldObjectRequest.timestamp_filter:type_name -> google.protobuf.Timestamp
	29, // 12: bosdyn.api.ListWorldObjectResponse.header:type_name -> bosdyn.api.ResponseHeader
	4,  // 13: bosdyn.api.ListWorldObjectResponse.world_objects:type_name -> bosdyn.api.WorldObject
	28, // 14: bosdyn.api.MutateWorldObjectRequest.header:type_name -> bosdyn.api.RequestHeader
	23, // 15: bosdyn.api.MutateWorldObjectRequest.mutation:type_name -> bosdyn.api.MutateWorldObjectRequest.Mutation
	29, // 16: bosdyn.api.MutateWorldObjectResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 17: bosdyn.api.MutateWorldObjectResponse.status:type_name -> bosdyn.api.MutateWorldObjectResponse.Status
	30, // 18: bosdyn.api.ImageProperties.coordinates:type_name -> bosdyn.api.Polygon
	31, // 19: bosdyn.api.ImageProperties.keypoints:type_name -> bosdyn.api.KeypointSet
	32, // 20: bosdyn.api.ImageProperties.image_source:type_name -> bosdyn.api.ImageSource
	33, // 21: bosdyn.api.ImageProperties.image_capture:type_name -> bosdyn.api.ImageCapture
	34, // 22: bosdyn.api.DockProperties.type:type_name -> bosdyn.api.docking.DockType
	35, // 23: bosdyn.api.AprilTagProperties.dimensions:type_name -> bosdyn.api.Vec2
	3,  // 24: bosdyn.api.AprilTagProperties.fiducial_pose_status:type_name -> bosdyn.api.AprilTagProperties.AprilTagPoseStatus
	3,  // 25: bosdyn.api.AprilTagProperties.fiducial_filtered_pose_status:type_name -> bosdyn.api.AprilTagProperties.AprilTagPoseStatus
	36, // 26: bosdyn.api.AprilTagProperties.detection_covariance:type_name -> bosdyn.api.SE3Covariance
	37, // 27: bosdyn.api.RayProperties.ray:type_name -> bosdyn.api.Ray
	38, // 28: bosdyn.api.BoundingBoxProperties.size_ewrt_frame:type_name -> bosdyn.api.Vec3
	24, // 29: bosdyn.api.DrawableProperties.color:type_name -> bosdyn.api.DrawableProperties.Color
	15, // 30: bosdyn.api.DrawableProperties.frame:type_name -> bosdyn.api.DrawableFrame
	16, // 31: bosdyn.api.DrawableProperties.sphere:type_name -> bosdyn.api.DrawableSphere
	17, // 32: bosdyn.api.DrawableProperties.box:type_name -> bosdyn.api.DrawableBox
	18, // 33: bosdyn.api.DrawableProperties.arrow:type_name -> bosdyn.api.DrawableArrow
	19, // 34: bosdyn.api.DrawableProperties.capsule:type_name -> bosdyn.api.DrawableCapsule
	20, // 35: bosdyn.api.DrawableProperties.cylinder:type_name -> bosdyn.api.DrawableCylinder
	21, // 36: bosdyn.api.DrawableProperties.linestrip:type_name -> bosdyn.api.DrawableLineStrip
	22, // 37: bosdyn.api.DrawableProperties.points:type_name -> bosdyn.api.DrawablePoints
	38, // 38: bosdyn.api.DrawableBox.size:type_name -> bosdyn.api.Vec3
	38, // 39: bosdyn.api.DrawableArrow.direction:type_name -> bosdyn.api.Vec3
	38, // 40: bosdyn.api.DrawableCapsule.direction:type_name -> bosdyn.api.Vec3
	38, // 41: bosdyn.api.DrawableCylinder.direction:type_name -> bosdyn.api.Vec3
	38, // 42: bosdyn.api.DrawableLineStrip.points:type_name -> bosdyn.api.Vec3
	38, // 43: bosdyn.api.DrawablePoints.points:type_name -> bosdyn.api.Vec3
	1,  // 44: bosdyn.api.MutateWorldObjectRequest.Mutation.action:type_name -> bosdyn.api.MutateWorldObjectRequest.Action
	4,  // 45: bosdyn.api.MutateWorldObjectRequest.Mutation.object:type_name -> bosdyn.api.WorldObject
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_bosdyn_api_world_object_proto_init() }
func file_bosdyn_api_world_object_proto_init() {
	if File_bosdyn_api_world_object_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_image_proto_init()
	file_bosdyn_api_sparse_features_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_world_object_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorldObject); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorldObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorldObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateWorldObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateWorldObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImageProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AprilTagProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RayProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoundingBoxProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableSphere); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableArrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableCapsule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableCylinder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableLineStrip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawablePoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MutateWorldObjectRequest_Mutation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_world_object_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrawableProperties_Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_world_object_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ImageProperties_Coordinates)(nil),
		(*ImageProperties_Keypoints)(nil),
	}
	file_bosdyn_api_world_object_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*DrawableProperties_Frame)(nil),
		(*DrawableProperties_Sphere)(nil),
		(*DrawableProperties_Box)(nil),
		(*DrawableProperties_Arrow)(nil),
		(*DrawableProperties_Capsule)(nil),
		(*DrawableProperties_Cylinder)(nil),
		(*DrawableProperties_Linestrip)(nil),
		(*DrawableProperties_Points)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_world_object_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_world_object_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_world_object_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_world_object_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_world_object_proto_msgTypes,
	}.Build()
	File_bosdyn_api_world_object_proto = out.File
	file_bosdyn_api_world_object_proto_rawDesc = nil
	file_bosdyn_api_world_object_proto_goTypes = nil
	file_bosdyn_api_world_object_proto_depIdxs = nil
}
