// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/data_index.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PageInfo_PageFormat int32

const (
	// Unset -- do not use.
	PageInfo_FORMAT_UNKNOWN PageInfo_PageFormat = 0
	// Data is stored in a .bddf file
	PageInfo_FORMAT_BDDF_FILE PageInfo_PageFormat = 1
)

// Enum value maps for PageInfo_PageFormat.
var (
	PageInfo_PageFormat_name = map[int32]string{
		0: "FORMAT_UNKNOWN",
		1: "FORMAT_BDDF_FILE",
	}
	PageInfo_PageFormat_value = map[string]int32{
		"FORMAT_UNKNOWN":   0,
		"FORMAT_BDDF_FILE": 1,
	}
)

func (x PageInfo_PageFormat) Enum() *PageInfo_PageFormat {
	p := new(PageInfo_PageFormat)
	*p = x
	return p
}

func (x PageInfo_PageFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PageInfo_PageFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_index_proto_enumTypes[0].Descriptor()
}

func (PageInfo_PageFormat) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_index_proto_enumTypes[0]
}

func (x PageInfo_PageFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PageInfo_PageFormat.Descriptor instead.
func (PageInfo_PageFormat) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{3, 0}
}

type PageInfo_Compression int32

const (
	// Not set -- do not use.
	PageInfo_COMPRESSION_UNKNOWN PageInfo_Compression = 0
	// Data is not compressed.
	PageInfo_COMPRESSION_NONE PageInfo_Compression = 1
	// Data uses gzip compression.
	PageInfo_COMPRESSION_GZIP PageInfo_Compression = 2
	// Data uses zstd compression.
	PageInfo_COMPRESSION_ZSTD PageInfo_Compression = 3
)

// Enum value maps for PageInfo_Compression.
var (
	PageInfo_Compression_name = map[int32]string{
		0: "COMPRESSION_UNKNOWN",
		1: "COMPRESSION_NONE",
		2: "COMPRESSION_GZIP",
		3: "COMPRESSION_ZSTD",
	}
	PageInfo_Compression_value = map[string]int32{
		"COMPRESSION_UNKNOWN": 0,
		"COMPRESSION_NONE":    1,
		"COMPRESSION_GZIP":    2,
		"COMPRESSION_ZSTD":    3,
	}
)

func (x PageInfo_Compression) Enum() *PageInfo_Compression {
	p := new(PageInfo_Compression)
	*p = x
	return p
}

func (x PageInfo_Compression) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PageInfo_Compression) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_index_proto_enumTypes[1].Descriptor()
}

func (PageInfo_Compression) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_index_proto_enumTypes[1]
}

func (x PageInfo_Compression) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PageInfo_Compression.Descriptor instead.
func (PageInfo_Compression) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{3, 1}
}

type DeletePageStatus_Status int32

const (
	DeletePageStatus_STATUS_UNKNOWN         DeletePageStatus_Status = 0
	DeletePageStatus_STATUS_DELETED         DeletePageStatus_Status = 1
	DeletePageStatus_STATUS_DELETION_FAILED DeletePageStatus_Status = 2
	DeletePageStatus_STATUS_NOT_FOUND       DeletePageStatus_Status = 3
)

// Enum value maps for DeletePageStatus_Status.
var (
	DeletePageStatus_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_DELETED",
		2: "STATUS_DELETION_FAILED",
		3: "STATUS_NOT_FOUND",
	}
	DeletePageStatus_Status_value = map[string]int32{
		"STATUS_UNKNOWN":         0,
		"STATUS_DELETED":         1,
		"STATUS_DELETION_FAILED": 2,
		"STATUS_NOT_FOUND":       3,
	}
)

func (x DeletePageStatus_Status) Enum() *DeletePageStatus_Status {
	p := new(DeletePageStatus_Status)
	*p = x
	return p
}

func (x DeletePageStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeletePageStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_index_proto_enumTypes[2].Descriptor()
}

func (DeletePageStatus_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_index_proto_enumTypes[2]
}

func (x DeletePageStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeletePageStatus_Status.Descriptor instead.
func (DeletePageStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{22, 0}
}

// Specification for selecting of GRPC logs.
type GrpcSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *GrpcSpec) Reset() {
	*x = GrpcSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcSpec) ProtoMessage() {}

func (x *GrpcSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcSpec.ProtoReflect.Descriptor instead.
func (*GrpcSpec) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{0}
}

func (x *GrpcSpec) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// Specification for selecting of blob messages.
type BlobSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set, require the message source to match this.
	Source string `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// If set, require the message type to match this value.
	MessageType string `protobuf:"bytes,2,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// If set, require the channel to match this value (or channel_glob, if set).
	Channel string `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	// Optionally require the channel to match a glob (or channel, if set)..
	// For example, 'gps/*' will match all channels starting with 'gps/'.
	ChannelGlob string `protobuf:"bytes,4,opt,name=channel_glob,json=channelGlob,proto3" json:"channel_glob,omitempty"`
}

func (x *BlobSpec) Reset() {
	*x = BlobSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobSpec) ProtoMessage() {}

func (x *BlobSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobSpec.ProtoReflect.Descriptor instead.
func (*BlobSpec) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{1}
}

func (x *BlobSpec) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *BlobSpec) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *BlobSpec) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *BlobSpec) GetChannelGlob() string {
	if x != nil {
		return x.ChannelGlob
	}
	return ""
}

// Specification for selecting Events.
type EventSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source          string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Type            string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Level           *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=level,proto3" json:"level,omitempty"`
	LogPreserveHint Event_LogPreserveHint  `protobuf:"varint,4,opt,name=log_preserve_hint,json=logPreserveHint,proto3,enum=bosdyn.api.Event_LogPreserveHint" json:"log_preserve_hint,omitempty"`
}

func (x *EventSpec) Reset() {
	*x = EventSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSpec) ProtoMessage() {}

func (x *EventSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSpec.ProtoReflect.Descriptor instead.
func (*EventSpec) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{2}
}

func (x *EventSpec) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *EventSpec) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *EventSpec) GetLevel() *wrapperspb.Int32Value {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *EventSpec) GetLogPreserveHint() Event_LogPreserveHint {
	if x != nil {
		return x.LogPreserveHint
	}
	return Event_LOG_PRESERVE_HINT_UNSET
}

// A unit of data storage.
// This may be a bddf data file.
// Like a file, this data may be downloaded or deleted all together for example.
type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`         // Identifier unique to robot.
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`     // Relative path to file, if file storage.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"` // Name of service/client which provided the data.
	// Time range of the relevant data in the page.
	TimeRange   *TimeRange           `protobuf:"bytes,4,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	NumTicks    int64                `protobuf:"varint,5,opt,name=num_ticks,json=numTicks,proto3" json:"num_ticks,omitempty"`       // Number of time samples or blobs.
	TotalBytes  int64                `protobuf:"varint,6,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"` // Total size of data in the page.
	Format      PageInfo_PageFormat  `protobuf:"varint,7,opt,name=format,proto3,enum=bosdyn.api.PageInfo_PageFormat" json:"format,omitempty"`
	Compression PageInfo_Compression `protobuf:"varint,8,opt,name=compression,proto3,enum=bosdyn.api.PageInfo_Compression" json:"compression,omitempty"`
	// True if data is still being written into this page, false if page is complete.
	IsOpen bool `protobuf:"varint,9,opt,name=is_open,json=isOpen,proto3" json:"is_open,omitempty"`
	// True if data is marked as having been downloaded.
	IsDownloaded bool `protobuf:"varint,10,opt,name=is_downloaded,json=isDownloaded,proto3" json:"is_downloaded,omitempty"`
	// If this exists, the page was deleted from the robot at the specified time.
	DeletedTimestamp *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=deleted_timestamp,json=deletedTimestamp,proto3" json:"deleted_timestamp,omitempty"`
	// If this exists, download from this page was started at the specified time.
	DownloadStartedTimestamp *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=download_started_timestamp,json=downloadStartedTimestamp,proto3" json:"download_started_timestamp,omitempty"`
	// True if data has been requested to be preserved.
	RequestPreserve bool `protobuf:"varint,13,opt,name=request_preserve,json=requestPreserve,proto3" json:"request_preserve,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{3}
}

func (x *PageInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PageInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PageInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *PageInfo) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *PageInfo) GetNumTicks() int64 {
	if x != nil {
		return x.NumTicks
	}
	return 0
}

func (x *PageInfo) GetTotalBytes() int64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *PageInfo) GetFormat() PageInfo_PageFormat {
	if x != nil {
		return x.Format
	}
	return PageInfo_FORMAT_UNKNOWN
}

func (x *PageInfo) GetCompression() PageInfo_Compression {
	if x != nil {
		return x.Compression
	}
	return PageInfo_COMPRESSION_UNKNOWN
}

func (x *PageInfo) GetIsOpen() bool {
	if x != nil {
		return x.IsOpen
	}
	return false
}

func (x *PageInfo) GetIsDownloaded() bool {
	if x != nil {
		return x.IsDownloaded
	}
	return false
}

func (x *PageInfo) GetDeletedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedTimestamp
	}
	return nil
}

func (x *PageInfo) GetDownloadStartedTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.DownloadStartedTimestamp
	}
	return nil
}

func (x *PageInfo) GetRequestPreserve() bool {
	if x != nil {
		return x.RequestPreserve
	}
	return false
}

// A set of pages of data which contain specied GRPC request and response messages.
type GrpcPages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRange  `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Spec      *GrpcSpec   `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Pages     []*PageInfo `protobuf:"bytes,3,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *GrpcPages) Reset() {
	*x = GrpcPages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GrpcPages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GrpcPages) ProtoMessage() {}

func (x *GrpcPages) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GrpcPages.ProtoReflect.Descriptor instead.
func (*GrpcPages) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{4}
}

func (x *GrpcPages) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *GrpcPages) GetSpec() *GrpcSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *GrpcPages) GetPages() []*PageInfo {
	if x != nil {
		return x.Pages
	}
	return nil
}

// A set of blob messages of a given channel/msgtype within a given data page.
type BlobPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec *BlobSpec `protobuf:"bytes,1,opt,name=spec,proto3" json:"spec,omitempty"`
	Page *PageInfo `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
}

func (x *BlobPage) Reset() {
	*x = BlobPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobPage) ProtoMessage() {}

func (x *BlobPage) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobPage.ProtoReflect.Descriptor instead.
func (*BlobPage) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{5}
}

func (x *BlobPage) GetSpec() *BlobSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *BlobPage) GetPage() *PageInfo {
	if x != nil {
		return x.Page
	}
	return nil
}

// A set of pages of data which contain specified Blob messages from the data-buffer.
type BlobPages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRange  `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Pages     []*BlobPage `protobuf:"bytes,3,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *BlobPages) Reset() {
	*x = BlobPages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlobPages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobPages) ProtoMessage() {}

func (x *BlobPages) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobPages.ProtoReflect.Descriptor instead.
func (*BlobPages) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{6}
}

func (x *BlobPages) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *BlobPages) GetPages() []*BlobPage {
	if x != nil {
		return x.Pages
	}
	return nil
}

// A set of pages and the associated time range they cover.
type PagesAndTimestamp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange *TimeRange  `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Pages     []*PageInfo `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *PagesAndTimestamp) Reset() {
	*x = PagesAndTimestamp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagesAndTimestamp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagesAndTimestamp) ProtoMessage() {}

func (x *PagesAndTimestamp) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagesAndTimestamp.ProtoReflect.Descriptor instead.
func (*PagesAndTimestamp) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{7}
}

func (x *PagesAndTimestamp) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *PagesAndTimestamp) GetPages() []*PageInfo {
	if x != nil {
		return x.Pages
	}
	return nil
}

// A query for pages containing the desired data.
type DataQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timespan for data we want to query
	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Request for pages containing different kinds of data.
	Blobs []*BlobSpec `protobuf:"bytes,2,rep,name=blobs,proto3" json:"blobs,omitempty"`
	// return pages of text-messages during the specified timespan
	TextMessages bool `protobuf:"varint,3,opt,name=text_messages,json=textMessages,proto3" json:"text_messages,omitempty"`
	// return pages of events
	Events bool `protobuf:"varint,4,opt,name=events,proto3" json:"events,omitempty"`
	// return pages of operator comments during the specified timespan
	Comments bool `protobuf:"varint,6,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *DataQuery) Reset() {
	*x = DataQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataQuery) ProtoMessage() {}

func (x *DataQuery) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataQuery.ProtoReflect.Descriptor instead.
func (*DataQuery) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{8}
}

func (x *DataQuery) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DataQuery) GetBlobs() []*BlobSpec {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *DataQuery) GetTextMessages() bool {
	if x != nil {
		return x.TextMessages
	}
	return false
}

func (x *DataQuery) GetEvents() bool {
	if x != nil {
		return x.Events
	}
	return false
}

func (x *DataQuery) GetComments() bool {
	if x != nil {
		return x.Comments
	}
	return false
}

// Description of data matching a given DataQuery.
type DataIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeRange    *TimeRange         `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Blobs        []*BlobPages       `protobuf:"bytes,2,rep,name=blobs,proto3" json:"blobs,omitempty"`
	TextMessages *PagesAndTimestamp `protobuf:"bytes,3,opt,name=text_messages,json=textMessages,proto3" json:"text_messages,omitempty"`
	Events       *PagesAndTimestamp `protobuf:"bytes,4,opt,name=events,proto3" json:"events,omitempty"`
	Comments     *PagesAndTimestamp `protobuf:"bytes,6,opt,name=comments,proto3" json:"comments,omitempty"`
}

func (x *DataIndex) Reset() {
	*x = DataIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataIndex) ProtoMessage() {}

func (x *DataIndex) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataIndex.ProtoReflect.Descriptor instead.
func (*DataIndex) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{9}
}

func (x *DataIndex) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DataIndex) GetBlobs() []*BlobPages {
	if x != nil {
		return x.Blobs
	}
	return nil
}

func (x *DataIndex) GetTextMessages() *PagesAndTimestamp {
	if x != nil {
		return x.TextMessages
	}
	return nil
}

func (x *DataIndex) GetEvents() *PagesAndTimestamp {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *DataIndex) GetComments() *PagesAndTimestamp {
	if x != nil {
		return x.Comments
	}
	return nil
}

// A request for Events and/or OperatorComments over a given time range.
type EventsCommentsSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timespan for data we want to query
	TimeRange *TimeRange `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Return events which match the request.
	Events []*EventSpec `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	// Return operator comments which match the request.
	Comments bool `protobuf:"varint,3,opt,name=comments,proto3" json:"comments,omitempty"`
	// Maximum number of events to return (limited to 1024).
	MaxEvents uint32 `protobuf:"varint,4,opt,name=max_events,json=maxEvents,proto3" json:"max_events,omitempty"`
	// Maximum number of comments to return (limited to 1024).
	MaxComments uint32 `protobuf:"varint,5,opt,name=max_comments,json=maxComments,proto3" json:"max_comments,omitempty"`
}

func (x *EventsCommentsSpec) Reset() {
	*x = EventsCommentsSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsCommentsSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsCommentsSpec) ProtoMessage() {}

func (x *EventsCommentsSpec) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsCommentsSpec.ProtoReflect.Descriptor instead.
func (*EventsCommentsSpec) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{10}
}

func (x *EventsCommentsSpec) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventsCommentsSpec) GetEvents() []*EventSpec {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventsCommentsSpec) GetComments() bool {
	if x != nil {
		return x.Comments
	}
	return false
}

func (x *EventsCommentsSpec) GetMaxEvents() uint32 {
	if x != nil {
		return x.MaxEvents
	}
	return 0
}

func (x *EventsCommentsSpec) GetMaxComments() uint32 {
	if x != nil {
		return x.MaxComments
	}
	return 0
}

// Requested Events and/or OperatorComments.
type EventsComments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timespan for data
	TimeRange        *TimeRange         `protobuf:"bytes,1,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	Events           []*Event           `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	OperatorComments []*OperatorComment `protobuf:"bytes,3,rep,name=operator_comments,json=operatorComments,proto3" json:"operator_comments,omitempty"`
	// True if the number of events returned was limited by query maximum.
	EventsLimited bool `protobuf:"varint,4,opt,name=events_limited,json=eventsLimited,proto3" json:"events_limited,omitempty"`
	// True if the number of comments returned was limited by query maximum.
	OperatorCommentsLimited bool `protobuf:"varint,5,opt,name=operator_comments_limited,json=operatorCommentsLimited,proto3" json:"operator_comments_limited,omitempty"`
}

func (x *EventsComments) Reset() {
	*x = EventsComments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventsComments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventsComments) ProtoMessage() {}

func (x *EventsComments) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventsComments.ProtoReflect.Descriptor instead.
func (*EventsComments) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{11}
}

func (x *EventsComments) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *EventsComments) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *EventsComments) GetOperatorComments() []*OperatorComment {
	if x != nil {
		return x.OperatorComments
	}
	return nil
}

func (x *EventsComments) GetEventsLimited() bool {
	if x != nil {
		return x.EventsLimited
	}
	return false
}

func (x *EventsComments) GetOperatorCommentsLimited() bool {
	if x != nil {
		return x.OperatorCommentsLimited
	}
	return false
}

type DataBufferStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumDataBufferPages   int64       `protobuf:"varint,1,opt,name=num_data_buffer_pages,json=numDataBufferPages,proto3" json:"num_data_buffer_pages,omitempty"`
	DataBufferTotalBytes int64       `protobuf:"varint,2,opt,name=data_buffer_total_bytes,json=dataBufferTotalBytes,proto3" json:"data_buffer_total_bytes,omitempty"`
	NumComments          int64       `protobuf:"varint,3,opt,name=num_comments,json=numComments,proto3" json:"num_comments,omitempty"`
	NumEvents            int64       `protobuf:"varint,4,opt,name=num_events,json=numEvents,proto3" json:"num_events,omitempty"`
	BlobSpecs            []*BlobSpec `protobuf:"bytes,5,rep,name=blob_specs,json=blobSpecs,proto3" json:"blob_specs,omitempty"`
}

func (x *DataBufferStatus) Reset() {
	*x = DataBufferStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBufferStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBufferStatus) ProtoMessage() {}

func (x *DataBufferStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBufferStatus.ProtoReflect.Descriptor instead.
func (*DataBufferStatus) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{12}
}

func (x *DataBufferStatus) GetNumDataBufferPages() int64 {
	if x != nil {
		return x.NumDataBufferPages
	}
	return 0
}

func (x *DataBufferStatus) GetDataBufferTotalBytes() int64 {
	if x != nil {
		return x.DataBufferTotalBytes
	}
	return 0
}

func (x *DataBufferStatus) GetNumComments() int64 {
	if x != nil {
		return x.NumComments
	}
	return 0
}

func (x *DataBufferStatus) GetNumEvents() int64 {
	if x != nil {
		return x.NumEvents
	}
	return 0
}

func (x *DataBufferStatus) GetBlobSpecs() []*BlobSpec {
	if x != nil {
		return x.BlobSpecs
	}
	return nil
}

// GRPC request for data index information.
type GetDataIndexResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	DataIndex *DataIndex      `protobuf:"bytes,2,opt,name=data_index,json=dataIndex,proto3" json:"data_index,omitempty"`
}

func (x *GetDataIndexResponse) Reset() {
	*x = GetDataIndexResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataIndexResponse) ProtoMessage() {}

func (x *GetDataIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataIndexResponse.ProtoReflect.Descriptor instead.
func (*GetDataIndexResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{13}
}

func (x *GetDataIndexResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDataIndexResponse) GetDataIndex() *DataIndex {
	if x != nil {
		return x.DataIndex
	}
	return nil
}

// GRPC response with requested data index information.
type GetDataIndexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	DataQuery *DataQuery     `protobuf:"bytes,2,opt,name=data_query,json=dataQuery,proto3" json:"data_query,omitempty"`
}

func (x *GetDataIndexRequest) Reset() {
	*x = GetDataIndexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataIndexRequest) ProtoMessage() {}

func (x *GetDataIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataIndexRequest.ProtoReflect.Descriptor instead.
func (*GetDataIndexRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{14}
}

func (x *GetDataIndexRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDataIndexRequest) GetDataQuery() *DataQuery {
	if x != nil {
		return x.DataQuery
	}
	return nil
}

// GRPC request for Events and OperatorComments.
type GetEventsCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header              *RequestHeader      `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	EventCommentRequest *EventsCommentsSpec `protobuf:"bytes,2,opt,name=event_comment_request,json=eventCommentRequest,proto3" json:"event_comment_request,omitempty"`
}

func (x *GetEventsCommentsRequest) Reset() {
	*x = GetEventsCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsCommentsRequest) ProtoMessage() {}

func (x *GetEventsCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsCommentsRequest.ProtoReflect.Descriptor instead.
func (*GetEventsCommentsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{15}
}

func (x *GetEventsCommentsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetEventsCommentsRequest) GetEventCommentRequest() *EventsCommentsSpec {
	if x != nil {
		return x.EventCommentRequest
	}
	return nil
}

// GRPC response with requested Events and OperatorComments.
type GetEventsCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header         *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	EventsComments *EventsComments `protobuf:"bytes,2,opt,name=events_comments,json=eventsComments,proto3" json:"events_comments,omitempty"`
}

func (x *GetEventsCommentsResponse) Reset() {
	*x = GetEventsCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEventsCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEventsCommentsResponse) ProtoMessage() {}

func (x *GetEventsCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEventsCommentsResponse.ProtoReflect.Descriptor instead.
func (*GetEventsCommentsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{16}
}

func (x *GetEventsCommentsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetEventsCommentsResponse) GetEventsComments() *EventsComments {
	if x != nil {
		return x.EventsComments
	}
	return nil
}

type GetDataBufferStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	GetBlobSpecs bool           `protobuf:"varint,2,opt,name=get_blob_specs,json=getBlobSpecs,proto3" json:"get_blob_specs,omitempty"`
}

func (x *GetDataBufferStatusRequest) Reset() {
	*x = GetDataBufferStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataBufferStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataBufferStatusRequest) ProtoMessage() {}

func (x *GetDataBufferStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataBufferStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDataBufferStatusRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{17}
}

func (x *GetDataBufferStatusRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDataBufferStatusRequest) GetGetBlobSpecs() bool {
	if x != nil {
		return x.GetBlobSpecs
	}
	return false
}

type GetDataBufferStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header           *ResponseHeader   `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	DataBufferStatus *DataBufferStatus `protobuf:"bytes,2,opt,name=data_buffer_status,json=dataBufferStatus,proto3" json:"data_buffer_status,omitempty"`
}

func (x *GetDataBufferStatusResponse) Reset() {
	*x = GetDataBufferStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataBufferStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataBufferStatusResponse) ProtoMessage() {}

func (x *GetDataBufferStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataBufferStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDataBufferStatusResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{18}
}

func (x *GetDataBufferStatusResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDataBufferStatusResponse) GetDataBufferStatus() *DataBufferStatus {
	if x != nil {
		return x.DataBufferStatus
	}
	return nil
}

type GetDataPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header    *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	TimeRange *TimeRange     `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
}

func (x *GetDataPagesRequest) Reset() {
	*x = GetDataPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataPagesRequest) ProtoMessage() {}

func (x *GetDataPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataPagesRequest.ProtoReflect.Descriptor instead.
func (*GetDataPagesRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{19}
}

func (x *GetDataPagesRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDataPagesRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

type GetDataPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	Pages  []*PageInfo     `protobuf:"bytes,2,rep,name=pages,proto3" json:"pages,omitempty"`
}

func (x *GetDataPagesResponse) Reset() {
	*x = GetDataPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataPagesResponse) ProtoMessage() {}

func (x *GetDataPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataPagesResponse.ProtoReflect.Descriptor instead.
func (*GetDataPagesResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{20}
}

func (x *GetDataPagesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDataPagesResponse) GetPages() []*PageInfo {
	if x != nil {
		return x.Pages
	}
	return nil
}

// GRPC request to delete pages. Both time_range and page_ids can be set.
type DeleteDataPagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Delete all pages in this time range
	TimeRange *TimeRange `protobuf:"bytes,2,opt,name=time_range,json=timeRange,proto3" json:"time_range,omitempty"`
	// Delete all pages with matching ids
	PageIds []string `protobuf:"bytes,3,rep,name=page_ids,json=pageIds,proto3" json:"page_ids,omitempty"`
}

func (x *DeleteDataPagesRequest) Reset() {
	*x = DeleteDataPagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataPagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataPagesRequest) ProtoMessage() {}

func (x *DeleteDataPagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataPagesRequest.ProtoReflect.Descriptor instead.
func (*DeleteDataPagesRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{21}
}

func (x *DeleteDataPagesRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteDataPagesRequest) GetTimeRange() *TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return nil
}

func (x *DeleteDataPagesRequest) GetPageIds() []string {
	if x != nil {
		return x.PageIds
	}
	return nil
}

type DeletePageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageId string                  `protobuf:"bytes,1,opt,name=page_id,json=pageId,proto3" json:"page_id,omitempty"`
	Status DeletePageStatus_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.DeletePageStatus_Status" json:"status,omitempty"`
}

func (x *DeletePageStatus) Reset() {
	*x = DeletePageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePageStatus) ProtoMessage() {}

func (x *DeletePageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePageStatus.ProtoReflect.Descriptor instead.
func (*DeletePageStatus) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{22}
}

func (x *DeletePageStatus) GetPageId() string {
	if x != nil {
		return x.PageId
	}
	return ""
}

func (x *DeletePageStatus) GetStatus() DeletePageStatus_Status {
	if x != nil {
		return x.Status
	}
	return DeletePageStatus_STATUS_UNKNOWN
}

type DeleteDataPagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header       *ResponseHeader     `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	BytesDeleted int64               `protobuf:"varint,2,opt,name=bytes_deleted,json=bytesDeleted,proto3" json:"bytes_deleted,omitempty"`
	Status       []*DeletePageStatus `protobuf:"bytes,3,rep,name=status,proto3" json:"status,omitempty"`
}

func (x *DeleteDataPagesResponse) Reset() {
	*x = DeleteDataPagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_index_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDataPagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDataPagesResponse) ProtoMessage() {}

func (x *DeleteDataPagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_index_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDataPagesResponse.ProtoReflect.Descriptor instead.
func (*DeleteDataPagesResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_index_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteDataPagesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DeleteDataPagesResponse) GetBytesDeleted() int64 {
	if x != nil {
		return x.BytesDeleted
	}
	return 0
}

func (x *DeleteDataPagesResponse) GetStatus() []*DeletePageStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

var File_bosdyn_api_data_index_proto protoreflect.FileDescriptor

var file_bosdyn_api_data_index_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d,
	0x0a, 0x08, 0x47, 0x72, 0x70, 0x63, 0x53, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x82, 0x01,
	0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x67, 0x6c, 0x6f, 0x62, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x6c,
	0x6f, 0x62, 0x22, 0xb9, 0x01, 0x0a, 0x09, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x4d, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f,
	0x68, 0x69, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f,
	0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x52, 0x0f, 0x6c,
	0x6f, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x22, 0xe5,
	0x05, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6e, 0x75, 0x6d, 0x5f, 0x74, 0x69, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6e, 0x75, 0x6d, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x58, 0x0a, 0x1a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x18, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x22, 0x36, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54,
	0x5f, 0x42, 0x44, 0x44, 0x46, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x22, 0x68, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x43,
	0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f,
	0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x5a, 0x49, 0x50, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4d, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f,
	0x5a, 0x53, 0x54, 0x44, 0x10, 0x03, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x47, 0x72, 0x70, 0x63, 0x50,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x72, 0x70, 0x63, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73,
	0x22, 0x5e, 0x0a, 0x08, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65,
	0x22, 0x6d, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x34, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x67, 0x65, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x75, 0x0a, 0x11, 0x50, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74,
	0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0xa4, 0x02, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x34, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x42, 0x6c, 0x6f, 0x62, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x62, 0x73,
	0x12, 0x42, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73, 0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x73,
	0x41, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xd7, 0x01, 0x0a, 0x12, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x12, 0x34, 0x0a,
	0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x0a,
	0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x22, 0x9e, 0x02, 0x0a, 0x0e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x22, 0xf3, 0x01, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x62, 0x6c,
	0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x7e, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xa1, 0x01, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x15, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x52, 0x13, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x94,
	0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x43, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x43, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x75, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x62, 0x6c,
	0x6f, 0x62, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x70, 0x65, 0x63, 0x73, 0x22, 0x9d, 0x01, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x4a, 0x0a, 0x12, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75,
	0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7e, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x76, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70,
	0x61, 0x67, 0x65, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x62,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x03, 0x22, 0xa8, 0x01, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x50, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x43, 0x42,
	0x0e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73,
	0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62,
	0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_data_index_proto_rawDescOnce sync.Once
	file_bosdyn_api_data_index_proto_rawDescData = file_bosdyn_api_data_index_proto_rawDesc
)

func file_bosdyn_api_data_index_proto_rawDescGZIP() []byte {
	file_bosdyn_api_data_index_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_data_index_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_data_index_proto_rawDescData)
	})
	return file_bosdyn_api_data_index_proto_rawDescData
}

var file_bosdyn_api_data_index_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bosdyn_api_data_index_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_bosdyn_api_data_index_proto_goTypes = []interface{}{
	(PageInfo_PageFormat)(0),            // 0: bosdyn.api.PageInfo.PageFormat
	(PageInfo_Compression)(0),           // 1: bosdyn.api.PageInfo.Compression
	(DeletePageStatus_Status)(0),        // 2: bosdyn.api.DeletePageStatus.Status
	(*GrpcSpec)(nil),                    // 3: bosdyn.api.GrpcSpec
	(*BlobSpec)(nil),                    // 4: bosdyn.api.BlobSpec
	(*EventSpec)(nil),                   // 5: bosdyn.api.EventSpec
	(*PageInfo)(nil),                    // 6: bosdyn.api.PageInfo
	(*GrpcPages)(nil),                   // 7: bosdyn.api.GrpcPages
	(*BlobPage)(nil),                    // 8: bosdyn.api.BlobPage
	(*BlobPages)(nil),                   // 9: bosdyn.api.BlobPages
	(*PagesAndTimestamp)(nil),           // 10: bosdyn.api.PagesAndTimestamp
	(*DataQuery)(nil),                   // 11: bosdyn.api.DataQuery
	(*DataIndex)(nil),                   // 12: bosdyn.api.DataIndex
	(*EventsCommentsSpec)(nil),          // 13: bosdyn.api.EventsCommentsSpec
	(*EventsComments)(nil),              // 14: bosdyn.api.EventsComments
	(*DataBufferStatus)(nil),            // 15: bosdyn.api.DataBufferStatus
	(*GetDataIndexResponse)(nil),        // 16: bosdyn.api.GetDataIndexResponse
	(*GetDataIndexRequest)(nil),         // 17: bosdyn.api.GetDataIndexRequest
	(*GetEventsCommentsRequest)(nil),    // 18: bosdyn.api.GetEventsCommentsRequest
	(*GetEventsCommentsResponse)(nil),   // 19: bosdyn.api.GetEventsCommentsResponse
	(*GetDataBufferStatusRequest)(nil),  // 20: bosdyn.api.GetDataBufferStatusRequest
	(*GetDataBufferStatusResponse)(nil), // 21: bosdyn.api.GetDataBufferStatusResponse
	(*GetDataPagesRequest)(nil),         // 22: bosdyn.api.GetDataPagesRequest
	(*GetDataPagesResponse)(nil),        // 23: bosdyn.api.GetDataPagesResponse
	(*DeleteDataPagesRequest)(nil),      // 24: bosdyn.api.DeleteDataPagesRequest
	(*DeletePageStatus)(nil),            // 25: bosdyn.api.DeletePageStatus
	(*DeleteDataPagesResponse)(nil),     // 26: bosdyn.api.DeleteDataPagesResponse
	(*wrapperspb.Int32Value)(nil),       // 27: google.protobuf.Int32Value
	(Event_LogPreserveHint)(0),          // 28: bosdyn.api.Event.LogPreserveHint
	(*TimeRange)(nil),                   // 29: bosdyn.api.TimeRange
	(*timestamppb.Timestamp)(nil),       // 30: google.protobuf.Timestamp
	(*Event)(nil),                       // 31: bosdyn.api.Event
	(*OperatorComment)(nil),             // 32: bosdyn.api.OperatorComment
	(*ResponseHeader)(nil),              // 33: bosdyn.api.ResponseHeader
	(*RequestHeader)(nil),               // 34: bosdyn.api.RequestHeader
}
var file_bosdyn_api_data_index_proto_depIdxs = []int32{
	27, // 0: bosdyn.api.EventSpec.level:type_name -> google.protobuf.Int32Value
	28, // 1: bosdyn.api.EventSpec.log_preserve_hint:type_name -> bosdyn.api.Event.LogPreserveHint
	29, // 2: bosdyn.api.PageInfo.time_range:type_name -> bosdyn.api.TimeRange
	0,  // 3: bosdyn.api.PageInfo.format:type_name -> bosdyn.api.PageInfo.PageFormat
	1,  // 4: bosdyn.api.PageInfo.compression:type_name -> bosdyn.api.PageInfo.Compression
	30, // 5: bosdyn.api.PageInfo.deleted_timestamp:type_name -> google.protobuf.Timestamp
	30, // 6: bosdyn.api.PageInfo.download_started_timestamp:type_name -> google.protobuf.Timestamp
	29, // 7: bosdyn.api.GrpcPages.time_range:type_name -> bosdyn.api.TimeRange
	3,  // 8: bosdyn.api.GrpcPages.spec:type_name -> bosdyn.api.GrpcSpec
	6,  // 9: bosdyn.api.GrpcPages.pages:type_name -> bosdyn.api.PageInfo
	4,  // 10: bosdyn.api.BlobPage.spec:type_name -> bosdyn.api.BlobSpec
	6,  // 11: bosdyn.api.BlobPage.page:type_name -> bosdyn.api.PageInfo
	29, // 12: bosdyn.api.BlobPages.time_range:type_name -> bosdyn.api.TimeRange
	8,  // 13: bosdyn.api.BlobPages.pages:type_name -> bosdyn.api.BlobPage
	29, // 14: bosdyn.api.PagesAndTimestamp.time_range:type_name -> bosdyn.api.TimeRange
	6,  // 15: bosdyn.api.PagesAndTimestamp.pages:type_name -> bosdyn.api.PageInfo
	29, // 16: bosdyn.api.DataQuery.time_range:type_name -> bosdyn.api.TimeRange
	4,  // 17: bosdyn.api.DataQuery.blobs:type_name -> bosdyn.api.BlobSpec
	29, // 18: bosdyn.api.DataIndex.time_range:type_name -> bosdyn.api.TimeRange
	9,  // 19: bosdyn.api.DataIndex.blobs:type_name -> bosdyn.api.BlobPages
	10, // 20: bosdyn.api.DataIndex.text_messages:type_name -> bosdyn.api.PagesAndTimestamp
	10, // 21: bosdyn.api.DataIndex.events:type_name -> bosdyn.api.PagesAndTimestamp
	10, // 22: bosdyn.api.DataIndex.comments:type_name -> bosdyn.api.PagesAndTimestamp
	29, // 23: bosdyn.api.EventsCommentsSpec.time_range:type_name -> bosdyn.api.TimeRange
	5,  // 24: bosdyn.api.EventsCommentsSpec.events:type_name -> bosdyn.api.EventSpec
	29, // 25: bosdyn.api.EventsComments.time_range:type_name -> bosdyn.api.TimeRange
	31, // 26: bosdyn.api.EventsComments.events:type_name -> bosdyn.api.Event
	32, // 27: bosdyn.api.EventsComments.operator_comments:type_name -> bosdyn.api.OperatorComment
	4,  // 28: bosdyn.api.DataBufferStatus.blob_specs:type_name -> bosdyn.api.BlobSpec
	33, // 29: bosdyn.api.GetDataIndexResponse.header:type_name -> bosdyn.api.ResponseHeader
	12, // 30: bosdyn.api.GetDataIndexResponse.data_index:type_name -> bosdyn.api.DataIndex
	34, // 31: bosdyn.api.GetDataIndexRequest.header:type_name -> bosdyn.api.RequestHeader
	11, // 32: bosdyn.api.GetDataIndexRequest.data_query:type_name -> bosdyn.api.DataQuery
	34, // 33: bosdyn.api.GetEventsCommentsRequest.header:type_name -> bosdyn.api.RequestHeader
	13, // 34: bosdyn.api.GetEventsCommentsRequest.event_comment_request:type_name -> bosdyn.api.EventsCommentsSpec
	33, // 35: bosdyn.api.GetEventsCommentsResponse.header:type_name -> bosdyn.api.ResponseHeader
	14, // 36: bosdyn.api.GetEventsCommentsResponse.events_comments:type_name -> bosdyn.api.EventsComments
	34, // 37: bosdyn.api.GetDataBufferStatusRequest.header:type_name -> bosdyn.api.RequestHeader
	33, // 38: bosdyn.api.GetDataBufferStatusResponse.header:type_name -> bosdyn.api.ResponseHeader
	15, // 39: bosdyn.api.GetDataBufferStatusResponse.data_buffer_status:type_name -> bosdyn.api.DataBufferStatus
	34, // 40: bosdyn.api.GetDataPagesRequest.header:type_name -> bosdyn.api.RequestHeader
	29, // 41: bosdyn.api.GetDataPagesRequest.time_range:type_name -> bosdyn.api.TimeRange
	33, // 42: bosdyn.api.GetDataPagesResponse.header:type_name -> bosdyn.api.ResponseHeader
	6,  // 43: bosdyn.api.GetDataPagesResponse.pages:type_name -> bosdyn.api.PageInfo
	34, // 44: bosdyn.api.DeleteDataPagesRequest.header:type_name -> bosdyn.api.RequestHeader
	29, // 45: bosdyn.api.DeleteDataPagesRequest.time_range:type_name -> bosdyn.api.TimeRange
	2,  // 46: bosdyn.api.DeletePageStatus.status:type_name -> bosdyn.api.DeletePageStatus.Status
	33, // 47: bosdyn.api.DeleteDataPagesResponse.header:type_name -> bosdyn.api.ResponseHeader
	25, // 48: bosdyn.api.DeleteDataPagesResponse.status:type_name -> bosdyn.api.DeletePageStatus
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_bosdyn_api_data_index_proto_init() }
func file_bosdyn_api_data_index_proto_init() {
	if File_bosdyn_api_data_index_proto != nil {
		return
	}
	file_bosdyn_api_data_buffer_proto_init()
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_time_range_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_data_index_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GrpcPages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlobPages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagesAndTimestamp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsCommentsSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventsComments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBufferStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataIndexResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataIndexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEventsCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataBufferStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataBufferStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataPagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_index_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDataPagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_data_index_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_data_index_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_data_index_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_data_index_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_data_index_proto_msgTypes,
	}.Build()
	File_bosdyn_api_data_index_proto = out.File
	file_bosdyn_api_data_index_proto_rawDesc = nil
	file_bosdyn_api_data_index_proto_goTypes = nil
	file_bosdyn_api_data_index_proto_depIdxs = nil
}
