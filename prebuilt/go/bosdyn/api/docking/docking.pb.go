// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/docking/docking.proto

package docking

import (
	api "github.com/khssnv/spot-sdk/prebuilt/go/bosdyn/api"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of dock
type DockType int32

const (
	// Unknown type of dock
	DockType_DOCK_TYPE_UNKNOWN DockType = 0
	// Prototype version SpotDock
	DockType_DOCK_TYPE_CONTACT_PROTOTYPE DockType = 2
	// Production version SpotDock
	DockType_DOCK_TYPE_SPOT_DOCK DockType = 3
)

// Enum value maps for DockType.
var (
	DockType_name = map[int32]string{
		0: "DOCK_TYPE_UNKNOWN",
		2: "DOCK_TYPE_CONTACT_PROTOTYPE",
		3: "DOCK_TYPE_SPOT_DOCK",
	}
	DockType_value = map[string]int32{
		"DOCK_TYPE_UNKNOWN":           0,
		"DOCK_TYPE_CONTACT_PROTOTYPE": 2,
		"DOCK_TYPE_SPOT_DOCK":         3,
	}
)

func (x DockType) Enum() *DockType {
	p := new(DockType)
	*p = x
	return p
}

func (x DockType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_docking_docking_proto_enumTypes[0].Descriptor()
}

func (DockType) Type() protoreflect.EnumType {
	return &file_bosdyn_api_docking_docking_proto_enumTypes[0]
}

func (x DockType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockType.Descriptor instead.
func (DockType) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{0}
}

// Defines how and whether we use the "pre-docking" pose.
type PrepPoseBehavior int32

const (
	PrepPoseBehavior_PREP_POSE_UNKNOWN   PrepPoseBehavior = 0 // Default behavior, equivalent to PREP_POSE_USE_POSE.
	PrepPoseBehavior_PREP_POSE_USE_POSE  PrepPoseBehavior = 1 // Goes to the pre-docking pose before docking.
	PrepPoseBehavior_PREP_POSE_SKIP_POSE PrepPoseBehavior = 2 // Docks before going to the pre-docking pose.
	PrepPoseBehavior_PREP_POSE_ONLY_POSE PrepPoseBehavior = 3 // Goes to the pre-docking pose, and then returns SUCCESS without docking.
	PrepPoseBehavior_PREP_POSE_UNDOCK    PrepPoseBehavior = 4 // Use this enum to undock a currently docked robot.
)

// Enum value maps for PrepPoseBehavior.
var (
	PrepPoseBehavior_name = map[int32]string{
		0: "PREP_POSE_UNKNOWN",
		1: "PREP_POSE_USE_POSE",
		2: "PREP_POSE_SKIP_POSE",
		3: "PREP_POSE_ONLY_POSE",
		4: "PREP_POSE_UNDOCK",
	}
	PrepPoseBehavior_value = map[string]int32{
		"PREP_POSE_UNKNOWN":   0,
		"PREP_POSE_USE_POSE":  1,
		"PREP_POSE_SKIP_POSE": 2,
		"PREP_POSE_ONLY_POSE": 3,
		"PREP_POSE_UNDOCK":    4,
	}
)

func (x PrepPoseBehavior) Enum() *PrepPoseBehavior {
	p := new(PrepPoseBehavior)
	*p = x
	return p
}

func (x PrepPoseBehavior) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrepPoseBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_docking_docking_proto_enumTypes[1].Descriptor()
}

func (PrepPoseBehavior) Type() protoreflect.EnumType {
	return &file_bosdyn_api_docking_docking_proto_enumTypes[1]
}

func (x PrepPoseBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrepPoseBehavior.Descriptor instead.
func (PrepPoseBehavior) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{1}
}

type DockingCommandResponse_Status int32

const (
	// Status is not specified.
	DockingCommandResponse_STATUS_UNKNOWN DockingCommandResponse_Status = 0
	// Docking command accepted
	DockingCommandResponse_STATUS_OK DockingCommandResponse_Status = 1
	// ERROR: Lease rejected
	DockingCommandResponse_STATUS_ERROR_LEASE DockingCommandResponse_Status = 4
	// ERROR: Dock fiducial not found.
	DockingCommandResponse_STATUS_ERROR_DOCK_NOT_FOUND DockingCommandResponse_Status = 5
	// ERROR: Trying to undock while not docked
	DockingCommandResponse_STATUS_ERROR_NOT_DOCKED DockingCommandResponse_Status = 6
	// ERROR: Trying to dock when the arm is holding an object.
	DockingCommandResponse_STATUS_ERROR_GRIPPER_HOLDING_ITEM DockingCommandResponse_Status = 8
	// ERROR: The dock is not available for docking.
	DockingCommandResponse_STATUS_ERROR_NOT_AVAILABLE DockingCommandResponse_Status = 9
	// ERROR: Internal system error during execution
	// This error cannot be resolved by issuing a new DockingCommand
	// Check the returned message for details
	DockingCommandResponse_STATUS_ERROR_SYSTEM DockingCommandResponse_Status = 7
)

// Enum value maps for DockingCommandResponse_Status.
var (
	DockingCommandResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		4: "STATUS_ERROR_LEASE",
		5: "STATUS_ERROR_DOCK_NOT_FOUND",
		6: "STATUS_ERROR_NOT_DOCKED",
		8: "STATUS_ERROR_GRIPPER_HOLDING_ITEM",
		9: "STATUS_ERROR_NOT_AVAILABLE",
		7: "STATUS_ERROR_SYSTEM",
	}
	DockingCommandResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                    0,
		"STATUS_OK":                         1,
		"STATUS_ERROR_LEASE":                4,
		"STATUS_ERROR_DOCK_NOT_FOUND":       5,
		"STATUS_ERROR_NOT_DOCKED":           6,
		"STATUS_ERROR_GRIPPER_HOLDING_ITEM": 8,
		"STATUS_ERROR_NOT_AVAILABLE":        9,
		"STATUS_ERROR_SYSTEM":               7,
	}
)

func (x DockingCommandResponse_Status) Enum() *DockingCommandResponse_Status {
	p := new(DockingCommandResponse_Status)
	*p = x
	return p
}

func (x DockingCommandResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockingCommandResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_docking_docking_proto_enumTypes[2].Descriptor()
}

func (DockingCommandResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_docking_docking_proto_enumTypes[2]
}

func (x DockingCommandResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockingCommandResponse_Status.Descriptor instead.
func (DockingCommandResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{1, 0}
}

type DockingCommandFeedbackResponse_Status int32

const (
	// Status is not specified.
	DockingCommandFeedbackResponse_STATUS_UNKNOWN DockingCommandFeedbackResponse_Status = 0
	// Docking command is executing.
	DockingCommandFeedbackResponse_STATUS_IN_PROGRESS DockingCommandFeedbackResponse_Status = 1
	// Docking command succeeded, the robot is docked.
	DockingCommandFeedbackResponse_STATUS_DOCKED DockingCommandFeedbackResponse_Status = 2
	// Final success state for `PREP_POSE_ONLY_POSE` or `PREP_POSE_UNDOCK`.
	DockingCommandFeedbackResponse_STATUS_AT_PREP_POSE DockingCommandFeedbackResponse_Status = 11
	// Misaligned was detected between the robot and the dock.
	// The docking command was aborted to save an ending up in an unrecoverable state, please try again.
	DockingCommandFeedbackResponse_STATUS_MISALIGNED DockingCommandFeedbackResponse_Status = 10
	// This DockingCommand overridden by new docking command.
	DockingCommandFeedbackResponse_STATUS_OLD_DOCKING_COMMAND DockingCommandFeedbackResponse_Status = 3
	// ERROR: The sensed dock has been lost and is no longer found.
	DockingCommandFeedbackResponse_STATUS_ERROR_DOCK_LOST DockingCommandFeedbackResponse_Status = 4
	// ERROR: Lease rejected.
	DockingCommandFeedbackResponse_STATUS_ERROR_LEASE DockingCommandFeedbackResponse_Status = 5
	// ERROR: End time has been reached.
	DockingCommandFeedbackResponse_STATUS_ERROR_COMMAND_TIMED_OUT DockingCommandFeedbackResponse_Status = 6
	// ERROR: No Timesync with system.
	DockingCommandFeedbackResponse_STATUS_ERROR_NO_TIMESYNC DockingCommandFeedbackResponse_Status = 7
	// ERROR: Provided end time too far in the future.
	DockingCommandFeedbackResponse_STATUS_ERROR_TOO_DISTANT DockingCommandFeedbackResponse_Status = 8
	// ERROR: The dock is not available for docking.
	DockingCommandFeedbackResponse_STATUS_ERROR_NOT_AVAILABLE DockingCommandFeedbackResponse_Status = 12
	// ERROR: The prior could not be confirmed as a real dock
	DockingCommandFeedbackResponse_STATUS_ERROR_UNREFINED_PRIOR DockingCommandFeedbackResponse_Status = 13
	// ERROR: Internal system error during execution
	// This error cannot be resolved by issuing a new DockingCommand
	// Check the returned message for details
	DockingCommandFeedbackResponse_STATUS_ERROR_SYSTEM DockingCommandFeedbackResponse_Status = 9
)

// Enum value maps for DockingCommandFeedbackResponse_Status.
var (
	DockingCommandFeedbackResponse_Status_name = map[int32]string{
		0:  "STATUS_UNKNOWN",
		1:  "STATUS_IN_PROGRESS",
		2:  "STATUS_DOCKED",
		11: "STATUS_AT_PREP_POSE",
		10: "STATUS_MISALIGNED",
		3:  "STATUS_OLD_DOCKING_COMMAND",
		4:  "STATUS_ERROR_DOCK_LOST",
		5:  "STATUS_ERROR_LEASE",
		6:  "STATUS_ERROR_COMMAND_TIMED_OUT",
		7:  "STATUS_ERROR_NO_TIMESYNC",
		8:  "STATUS_ERROR_TOO_DISTANT",
		12: "STATUS_ERROR_NOT_AVAILABLE",
		13: "STATUS_ERROR_UNREFINED_PRIOR",
		9:  "STATUS_ERROR_SYSTEM",
	}
	DockingCommandFeedbackResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                 0,
		"STATUS_IN_PROGRESS":             1,
		"STATUS_DOCKED":                  2,
		"STATUS_AT_PREP_POSE":            11,
		"STATUS_MISALIGNED":              10,
		"STATUS_OLD_DOCKING_COMMAND":     3,
		"STATUS_ERROR_DOCK_LOST":         4,
		"STATUS_ERROR_LEASE":             5,
		"STATUS_ERROR_COMMAND_TIMED_OUT": 6,
		"STATUS_ERROR_NO_TIMESYNC":       7,
		"STATUS_ERROR_TOO_DISTANT":       8,
		"STATUS_ERROR_NOT_AVAILABLE":     12,
		"STATUS_ERROR_UNREFINED_PRIOR":   13,
		"STATUS_ERROR_SYSTEM":            9,
	}
)

func (x DockingCommandFeedbackResponse_Status) Enum() *DockingCommandFeedbackResponse_Status {
	p := new(DockingCommandFeedbackResponse_Status)
	*p = x
	return p
}

func (x DockingCommandFeedbackResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockingCommandFeedbackResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_docking_docking_proto_enumTypes[3].Descriptor()
}

func (DockingCommandFeedbackResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_docking_docking_proto_enumTypes[3]
}

func (x DockingCommandFeedbackResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockingCommandFeedbackResponse_Status.Descriptor instead.
func (DockingCommandFeedbackResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{3, 0}
}

type DockState_DockedStatus int32

const (
	// Unknown
	DockState_DOCK_STATUS_UNKNOWN DockState_DockedStatus = 0
	// Robot is detected as on a dock
	DockState_DOCK_STATUS_DOCKED DockState_DockedStatus = 1
	// Robot is currently running a docking command
	DockState_DOCK_STATUS_DOCKING DockState_DockedStatus = 2
	// Robot is not detected as on dock
	DockState_DOCK_STATUS_UNDOCKED DockState_DockedStatus = 3
	// Robot is currently running an undocking command
	DockState_DOCK_STATUS_UNDOCKING DockState_DockedStatus = 4
)

// Enum value maps for DockState_DockedStatus.
var (
	DockState_DockedStatus_name = map[int32]string{
		0: "DOCK_STATUS_UNKNOWN",
		1: "DOCK_STATUS_DOCKED",
		2: "DOCK_STATUS_DOCKING",
		3: "DOCK_STATUS_UNDOCKED",
		4: "DOCK_STATUS_UNDOCKING",
	}
	DockState_DockedStatus_value = map[string]int32{
		"DOCK_STATUS_UNKNOWN":   0,
		"DOCK_STATUS_DOCKED":    1,
		"DOCK_STATUS_DOCKING":   2,
		"DOCK_STATUS_UNDOCKED":  3,
		"DOCK_STATUS_UNDOCKING": 4,
	}
)

func (x DockState_DockedStatus) Enum() *DockState_DockedStatus {
	p := new(DockState_DockedStatus)
	*p = x
	return p
}

func (x DockState_DockedStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockState_DockedStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_docking_docking_proto_enumTypes[4].Descriptor()
}

func (DockState_DockedStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_docking_docking_proto_enumTypes[4]
}

func (x DockState_DockedStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockState_DockedStatus.Descriptor instead.
func (DockState_DockedStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{7, 0}
}

type DockState_LinkStatus int32

const (
	// Unknown or Not applicable
	DockState_LINK_STATUS_UNKNOWN DockState_LinkStatus = 0
	// The link status is being detected
	DockState_LINK_STATUS_DETECTING DockState_LinkStatus = 3
	// The link is detected as connected
	DockState_LINK_STATUS_CONNECTED DockState_LinkStatus = 1
	// The link could not be detected
	DockState_LINK_STATUS_ERROR DockState_LinkStatus = 2
)

// Enum value maps for DockState_LinkStatus.
var (
	DockState_LinkStatus_name = map[int32]string{
		0: "LINK_STATUS_UNKNOWN",
		3: "LINK_STATUS_DETECTING",
		1: "LINK_STATUS_CONNECTED",
		2: "LINK_STATUS_ERROR",
	}
	DockState_LinkStatus_value = map[string]int32{
		"LINK_STATUS_UNKNOWN":   0,
		"LINK_STATUS_DETECTING": 3,
		"LINK_STATUS_CONNECTED": 1,
		"LINK_STATUS_ERROR":     2,
	}
)

func (x DockState_LinkStatus) Enum() *DockState_LinkStatus {
	p := new(DockState_LinkStatus)
	*p = x
	return p
}

func (x DockState_LinkStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DockState_LinkStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_docking_docking_proto_enumTypes[5].Descriptor()
}

func (DockState_LinkStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_docking_docking_proto_enumTypes[5]
}

func (x DockState_LinkStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DockState_LinkStatus.Descriptor instead.
func (DockState_LinkStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{7, 1}
}

// Message to command the robot to dock. \
// Note: If the robot is docked, you can undock the robot by issuing a command with
// `prep_pose_behavior=PREP_POSE_UNDOCK`. If undocking, `docking_station_id` is not required.
type DockingCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The Lease to show ownership of the robot.
	Lease *api.Lease `protobuf:"bytes,2,opt,name=lease,proto3" json:"lease,omitempty"`
	// ID of docking station to dock at.
	// This is ignored if undocking the robot, the current dock is used.
	DockingStationId uint32 `protobuf:"varint,3,opt,name=docking_station_id,json=dockingStationId,proto3" json:"docking_station_id,omitempty"`
	// Identifier provided by the time sync service to verify time sync between robot and client.
	ClockIdentifier string `protobuf:"bytes,4,opt,name=clock_identifier,json=clockIdentifier,proto3" json:"clock_identifier,omitempty"`
	// The timestamp (in robot time) by which a command must finish executing.
	// This is a required field and used to prevent runaway commands.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// [Optional] Specify the prep pose behavior
	PrepPoseBehavior PrepPoseBehavior `protobuf:"varint,9,opt,name=prep_pose_behavior,json=prepPoseBehavior,proto3,enum=bosdyn.api.docking.PrepPoseBehavior" json:"prep_pose_behavior,omitempty"`
}

func (x *DockingCommandRequest) Reset() {
	*x = DockingCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockingCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockingCommandRequest) ProtoMessage() {}

func (x *DockingCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockingCommandRequest.ProtoReflect.Descriptor instead.
func (*DockingCommandRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{0}
}

func (x *DockingCommandRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DockingCommandRequest) GetLease() *api.Lease {
	if x != nil {
		return x.Lease
	}
	return nil
}

func (x *DockingCommandRequest) GetDockingStationId() uint32 {
	if x != nil {
		return x.DockingStationId
	}
	return 0
}

func (x *DockingCommandRequest) GetClockIdentifier() string {
	if x != nil {
		return x.ClockIdentifier
	}
	return ""
}

func (x *DockingCommandRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *DockingCommandRequest) GetPrepPoseBehavior() PrepPoseBehavior {
	if x != nil {
		return x.PrepPoseBehavior
	}
	return PrepPoseBehavior_PREP_POSE_UNKNOWN
}

// Response to a DockingCommandRequest
type DockingCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used.
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Result of issued command.
	Status DockingCommandResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.docking.DockingCommandResponse_Status" json:"status,omitempty"`
	// Unique identifier for the command (if accepted, `status=STATUS_OK`).
	DockingCommandId uint32 `protobuf:"varint,5,opt,name=docking_command_id,json=dockingCommandId,proto3" json:"docking_command_id,omitempty"`
}

func (x *DockingCommandResponse) Reset() {
	*x = DockingCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockingCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockingCommandResponse) ProtoMessage() {}

func (x *DockingCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockingCommandResponse.ProtoReflect.Descriptor instead.
func (*DockingCommandResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{1}
}

func (x *DockingCommandResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DockingCommandResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *DockingCommandResponse) GetStatus() DockingCommandResponse_Status {
	if x != nil {
		return x.Status
	}
	return DockingCommandResponse_STATUS_UNKNOWN
}

func (x *DockingCommandResponse) GetDockingCommandId() uint32 {
	if x != nil {
		return x.DockingCommandId
	}
	return 0
}

// Message to get the status of a previously issued DockingCommand
type DockingCommandFeedbackRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Unique identifier of the command to get feedback for.
	DockingCommandId uint32 `protobuf:"varint,2,opt,name=docking_command_id,json=dockingCommandId,proto3" json:"docking_command_id,omitempty"`
}

func (x *DockingCommandFeedbackRequest) Reset() {
	*x = DockingCommandFeedbackRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockingCommandFeedbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockingCommandFeedbackRequest) ProtoMessage() {}

func (x *DockingCommandFeedbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockingCommandFeedbackRequest.ProtoReflect.Descriptor instead.
func (*DockingCommandFeedbackRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{2}
}

func (x *DockingCommandFeedbackRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DockingCommandFeedbackRequest) GetDockingCommandId() uint32 {
	if x != nil {
		return x.DockingCommandId
	}
	return 0
}

// Response to a DockingCommandFeedbackRequest for a particualar docking command ID
type DockingCommandFeedbackResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Details about how the lease was used (unset if unknown).
	LeaseUseResult *api.LeaseUseResult `protobuf:"bytes,2,opt,name=lease_use_result,json=leaseUseResult,proto3" json:"lease_use_result,omitempty"`
	// Current feedback of specified command ID.
	Status DockingCommandFeedbackResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=bosdyn.api.docking.DockingCommandFeedbackResponse_Status" json:"status,omitempty"`
}

func (x *DockingCommandFeedbackResponse) Reset() {
	*x = DockingCommandFeedbackResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockingCommandFeedbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockingCommandFeedbackResponse) ProtoMessage() {}

func (x *DockingCommandFeedbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockingCommandFeedbackResponse.ProtoReflect.Descriptor instead.
func (*DockingCommandFeedbackResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{3}
}

func (x *DockingCommandFeedbackResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *DockingCommandFeedbackResponse) GetLeaseUseResult() *api.LeaseUseResult {
	if x != nil {
		return x.LeaseUseResult
	}
	return nil
}

func (x *DockingCommandFeedbackResponse) GetStatus() DockingCommandFeedbackResponse_Status {
	if x != nil {
		return x.Status
	}
	return DockingCommandFeedbackResponse_STATUS_UNKNOWN
}

// The configuration of a range of dock ID's
type ConfigRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Starting ID
	IdStart uint32 `protobuf:"varint,1,opt,name=id_start,json=idStart,proto3" json:"id_start,omitempty"`
	// Ending ID
	IdEnd uint32 `protobuf:"varint,2,opt,name=id_end,json=idEnd,proto3" json:"id_end,omitempty"`
	// Type of dock for this range
	Type DockType `protobuf:"varint,3,opt,name=type,proto3,enum=bosdyn.api.docking.DockType" json:"type,omitempty"`
}

func (x *ConfigRange) Reset() {
	*x = ConfigRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigRange) ProtoMessage() {}

func (x *ConfigRange) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigRange.ProtoReflect.Descriptor instead.
func (*ConfigRange) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigRange) GetIdStart() uint32 {
	if x != nil {
		return x.IdStart
	}
	return 0
}

func (x *ConfigRange) GetIdEnd() uint32 {
	if x != nil {
		return x.IdEnd
	}
	return 0
}

func (x *ConfigRange) GetType() DockType {
	if x != nil {
		return x.Type
	}
	return DockType_DOCK_TYPE_UNKNOWN
}

type GetDockingConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetDockingConfigRequest) Reset() {
	*x = GetDockingConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDockingConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDockingConfigRequest) ProtoMessage() {}

func (x *GetDockingConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDockingConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDockingConfigRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{5}
}

func (x *GetDockingConfigRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type GetDockingConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// A series of `ConfigRange` specifying details for dock ID numbers.
	DockConfigs []*ConfigRange `protobuf:"bytes,2,rep,name=dock_configs,json=dockConfigs,proto3" json:"dock_configs,omitempty"`
}

func (x *GetDockingConfigResponse) Reset() {
	*x = GetDockingConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDockingConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDockingConfigResponse) ProtoMessage() {}

func (x *GetDockingConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDockingConfigResponse.ProtoReflect.Descriptor instead.
func (*GetDockingConfigResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{6}
}

func (x *GetDockingConfigResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDockingConfigResponse) GetDockConfigs() []*ConfigRange {
	if x != nil {
		return x.DockConfigs
	}
	return nil
}

// Message describing the overall dock state of the robot, including power & comms connections.  \
// Not tied to any particular DockingCommand ID.  \
// Note: [*] indicates fields which are only valid if the status is DOCK_STATUS_DOCKED or DOCK_STATUS_DOCKING  \
// or DOCK_STATUS_UNDOCKING. \
// Note: [^] indicates fields which are only valid if the status is DOCK_STATUS_DOCKED.  \
type DockState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Status of if the robot is on dock
	Status DockState_DockedStatus `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.docking.DockState_DockedStatus" json:"status,omitempty"`
	// [*] Type of the dock
	DockType DockType `protobuf:"varint,2,opt,name=dock_type,json=dockType,proto3,enum=bosdyn.api.docking.DockType" json:"dock_type,omitempty"`
	// [*] ID of the dock
	DockId uint32 `protobuf:"varint,3,opt,name=dock_id,json=dockId,proto3" json:"dock_id,omitempty"`
	// [^] Status of power detection from the dock
	PowerStatus DockState_LinkStatus `protobuf:"varint,4,opt,name=power_status,json=powerStatus,proto3,enum=bosdyn.api.docking.DockState_LinkStatus" json:"power_status,omitempty"`
}

func (x *DockState) Reset() {
	*x = DockState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DockState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DockState) ProtoMessage() {}

func (x *DockState) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DockState.ProtoReflect.Descriptor instead.
func (*DockState) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{7}
}

func (x *DockState) GetStatus() DockState_DockedStatus {
	if x != nil {
		return x.Status
	}
	return DockState_DOCK_STATUS_UNKNOWN
}

func (x *DockState) GetDockType() DockType {
	if x != nil {
		return x.DockType
	}
	return DockType_DOCK_TYPE_UNKNOWN
}

func (x *DockState) GetDockId() uint32 {
	if x != nil {
		return x.DockId
	}
	return 0
}

func (x *DockState) GetPowerStatus() DockState_LinkStatus {
	if x != nil {
		return x.PowerStatus
	}
	return DockState_LINK_STATUS_UNKNOWN
}

// Message to get the overall docking state
type GetDockingStateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *api.RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetDockingStateRequest) Reset() {
	*x = GetDockingStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDockingStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDockingStateRequest) ProtoMessage() {}

func (x *GetDockingStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDockingStateRequest.ProtoReflect.Descriptor instead.
func (*GetDockingStateRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{8}
}

func (x *GetDockingStateRequest) GetHeader() *api.RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// Response of a GetDockingStateRequest
type GetDockingStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header    *api.ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	DockState *DockState          `protobuf:"bytes,2,opt,name=dock_state,json=dockState,proto3" json:"dock_state,omitempty"`
}

func (x *GetDockingStateResponse) Reset() {
	*x = GetDockingStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_docking_docking_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDockingStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDockingStateResponse) ProtoMessage() {}

func (x *GetDockingStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_docking_docking_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDockingStateResponse.ProtoReflect.Descriptor instead.
func (*GetDockingStateResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_docking_docking_proto_rawDescGZIP(), []int{9}
}

func (x *GetDockingStateResponse) GetHeader() *api.ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetDockingStateResponse) GetDockState() *DockState {
	if x != nil {
		return x.DockState
	}
	return nil
}

var File_bosdyn_api_docking_docking_proto protoreflect.FileDescriptor

var file_bosdyn_api_docking_docking_proto_rawDesc = []byte{
	0x0a, 0x20, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64,
	0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x16, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x02, 0x0a, 0x15, 0x44, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2c,
	0x0a, 0x12, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x52,
	0x0a, 0x12, 0x70, 0x72, 0x65, 0x70, 0x5f, 0x70, 0x6f, 0x73, 0x65, 0x5f, 0x62, 0x65, 0x68, 0x61,
	0x76, 0x69, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x50, 0x72, 0x65, 0x70, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x52, 0x10, 0x70, 0x72, 0x65, 0x70, 0x50, 0x6f, 0x73, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69,
	0x6f, 0x72, 0x22, 0xef, 0x03, 0x0a, 0x16, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73,
	0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64,
	0x22, 0xe1, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c,
	0x45, 0x41, 0x53, 0x45, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x4b,
	0x45, 0x44, 0x10, 0x06, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x49, 0x50, 0x50, 0x45, 0x52, 0x5f, 0x48, 0x4f, 0x4c,
	0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x09, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x10, 0x07, 0x22, 0x80, 0x01, 0x0a, 0x1d, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x64, 0x22, 0xf6, 0x04, 0x0a, 0x1e, 0x44, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44,
	0x0a, 0x10, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x5f, 0x50,
	0x52, 0x45, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d, 0x49, 0x53, 0x41, 0x4c, 0x49, 0x47, 0x4e, 0x45, 0x44, 0x10,
	0x0a, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4c, 0x44, 0x5f,
	0x44, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x4c, 0x4f, 0x53, 0x54, 0x10, 0x04, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4c, 0x45,
	0x41, 0x53, 0x45, 0x10, 0x05, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x44, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f,
	0x50, 0x52, 0x49, 0x4f, 0x52, 0x10, 0x0d, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x09,
	0x22, 0x71, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x64,
	0x5f, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x64, 0x45, 0x6e,
	0x64, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x4c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x22, 0x92, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x42, 0x0a, 0x0c, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x63, 0x6b, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x22, 0xf4, 0x03, 0x0a, 0x09, 0x44, 0x6f, 0x63, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x39, 0x0a, 0x09, 0x64, 0x6f, 0x63, 0x6b,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x64, 0x6f, 0x63, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0c,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0c, 0x44, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f,
	0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x43, 0x4b, 0x49,
	0x4e, 0x47, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x03, 0x12, 0x19,
	0x0a, 0x15, 0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x44, 0x4f, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x22, 0x72, 0x0a, 0x0a, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x49, 0x4e, 0x4b, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4c,
	0x49, 0x4e, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x49, 0x4e, 0x4b, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x4b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x6f,
	0x63, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x64, 0x6f, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x44, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x64,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x5b, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x44,
	0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x43, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x44, 0x4f, 0x43, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x4f, 0x54, 0x5f, 0x44,
	0x4f, 0x43, 0x4b, 0x10, 0x03, 0x2a, 0x89, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x70, 0x50, 0x6f,
	0x73, 0x65, 0x42, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52,
	0x45, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x45, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55,
	0x53, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45,
	0x50, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x45,
	0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x52, 0x45, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f,
	0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50,
	0x52, 0x45, 0x50, 0x5f, 0x50, 0x4f, 0x53, 0x45, 0x5f, 0x55, 0x4e, 0x44, 0x4f, 0x43, 0x4b, 0x10,
	0x04, 0x42, 0x49, 0x42, 0x0c, 0x44, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68,
	0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72,
	0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_docking_docking_proto_rawDescOnce sync.Once
	file_bosdyn_api_docking_docking_proto_rawDescData = file_bosdyn_api_docking_docking_proto_rawDesc
)

func file_bosdyn_api_docking_docking_proto_rawDescGZIP() []byte {
	file_bosdyn_api_docking_docking_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_docking_docking_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_docking_docking_proto_rawDescData)
	})
	return file_bosdyn_api_docking_docking_proto_rawDescData
}

var file_bosdyn_api_docking_docking_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_bosdyn_api_docking_docking_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_bosdyn_api_docking_docking_proto_goTypes = []interface{}{
	(DockType)(0),                              // 0: bosdyn.api.docking.DockType
	(PrepPoseBehavior)(0),                      // 1: bosdyn.api.docking.PrepPoseBehavior
	(DockingCommandResponse_Status)(0),         // 2: bosdyn.api.docking.DockingCommandResponse.Status
	(DockingCommandFeedbackResponse_Status)(0), // 3: bosdyn.api.docking.DockingCommandFeedbackResponse.Status
	(DockState_DockedStatus)(0),                // 4: bosdyn.api.docking.DockState.DockedStatus
	(DockState_LinkStatus)(0),                  // 5: bosdyn.api.docking.DockState.LinkStatus
	(*DockingCommandRequest)(nil),              // 6: bosdyn.api.docking.DockingCommandRequest
	(*DockingCommandResponse)(nil),             // 7: bosdyn.api.docking.DockingCommandResponse
	(*DockingCommandFeedbackRequest)(nil),      // 8: bosdyn.api.docking.DockingCommandFeedbackRequest
	(*DockingCommandFeedbackResponse)(nil),     // 9: bosdyn.api.docking.DockingCommandFeedbackResponse
	(*ConfigRange)(nil),                        // 10: bosdyn.api.docking.ConfigRange
	(*GetDockingConfigRequest)(nil),            // 11: bosdyn.api.docking.GetDockingConfigRequest
	(*GetDockingConfigResponse)(nil),           // 12: bosdyn.api.docking.GetDockingConfigResponse
	(*DockState)(nil),                          // 13: bosdyn.api.docking.DockState
	(*GetDockingStateRequest)(nil),             // 14: bosdyn.api.docking.GetDockingStateRequest
	(*GetDockingStateResponse)(nil),            // 15: bosdyn.api.docking.GetDockingStateResponse
	(*api.RequestHeader)(nil),                  // 16: bosdyn.api.RequestHeader
	(*api.Lease)(nil),                          // 17: bosdyn.api.Lease
	(*timestamppb.Timestamp)(nil),              // 18: google.protobuf.Timestamp
	(*api.ResponseHeader)(nil),                 // 19: bosdyn.api.ResponseHeader
	(*api.LeaseUseResult)(nil),                 // 20: bosdyn.api.LeaseUseResult
}
var file_bosdyn_api_docking_docking_proto_depIdxs = []int32{
	16, // 0: bosdyn.api.docking.DockingCommandRequest.header:type_name -> bosdyn.api.RequestHeader
	17, // 1: bosdyn.api.docking.DockingCommandRequest.lease:type_name -> bosdyn.api.Lease
	18, // 2: bosdyn.api.docking.DockingCommandRequest.end_time:type_name -> google.protobuf.Timestamp
	1,  // 3: bosdyn.api.docking.DockingCommandRequest.prep_pose_behavior:type_name -> bosdyn.api.docking.PrepPoseBehavior
	19, // 4: bosdyn.api.docking.DockingCommandResponse.header:type_name -> bosdyn.api.ResponseHeader
	20, // 5: bosdyn.api.docking.DockingCommandResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	2,  // 6: bosdyn.api.docking.DockingCommandResponse.status:type_name -> bosdyn.api.docking.DockingCommandResponse.Status
	16, // 7: bosdyn.api.docking.DockingCommandFeedbackRequest.header:type_name -> bosdyn.api.RequestHeader
	19, // 8: bosdyn.api.docking.DockingCommandFeedbackResponse.header:type_name -> bosdyn.api.ResponseHeader
	20, // 9: bosdyn.api.docking.DockingCommandFeedbackResponse.lease_use_result:type_name -> bosdyn.api.LeaseUseResult
	3,  // 10: bosdyn.api.docking.DockingCommandFeedbackResponse.status:type_name -> bosdyn.api.docking.DockingCommandFeedbackResponse.Status
	0,  // 11: bosdyn.api.docking.ConfigRange.type:type_name -> bosdyn.api.docking.DockType
	16, // 12: bosdyn.api.docking.GetDockingConfigRequest.header:type_name -> bosdyn.api.RequestHeader
	19, // 13: bosdyn.api.docking.GetDockingConfigResponse.header:type_name -> bosdyn.api.ResponseHeader
	10, // 14: bosdyn.api.docking.GetDockingConfigResponse.dock_configs:type_name -> bosdyn.api.docking.ConfigRange
	4,  // 15: bosdyn.api.docking.DockState.status:type_name -> bosdyn.api.docking.DockState.DockedStatus
	0,  // 16: bosdyn.api.docking.DockState.dock_type:type_name -> bosdyn.api.docking.DockType
	5,  // 17: bosdyn.api.docking.DockState.power_status:type_name -> bosdyn.api.docking.DockState.LinkStatus
	16, // 18: bosdyn.api.docking.GetDockingStateRequest.header:type_name -> bosdyn.api.RequestHeader
	19, // 19: bosdyn.api.docking.GetDockingStateResponse.header:type_name -> bosdyn.api.ResponseHeader
	13, // 20: bosdyn.api.docking.GetDockingStateResponse.dock_state:type_name -> bosdyn.api.docking.DockState
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_bosdyn_api_docking_docking_proto_init() }
func file_bosdyn_api_docking_docking_proto_init() {
	if File_bosdyn_api_docking_docking_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_docking_docking_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockingCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockingCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockingCommandFeedbackRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockingCommandFeedbackResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDockingConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDockingConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DockState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDockingStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_docking_docking_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDockingStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_docking_docking_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_docking_docking_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_docking_docking_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_docking_docking_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_docking_docking_proto_msgTypes,
	}.Build()
	File_bosdyn_api_docking_docking_proto = out.File
	file_bosdyn_api_docking_docking_proto_rawDesc = nil
	file_bosdyn_api_docking_docking_proto_goTypes = nil
	file_bosdyn_api_docking_docking_proto_depIdxs = nil
}
