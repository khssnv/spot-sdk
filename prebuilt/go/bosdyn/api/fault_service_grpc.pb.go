// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/fault_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FaultServiceClient is the client API for FaultService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaultServiceClient interface {
	// Sends a ServiceFault to be reporting in robot state.
	TriggerServiceFault(ctx context.Context, in *TriggerServiceFaultRequest, opts ...grpc.CallOption) (*TriggerServiceFaultResponse, error)
	// Clears an active ServiceFault from robot state.
	ClearServiceFault(ctx context.Context, in *ClearServiceFaultRequest, opts ...grpc.CallOption) (*ClearServiceFaultResponse, error)
}

type faultServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFaultServiceClient(cc grpc.ClientConnInterface) FaultServiceClient {
	return &faultServiceClient{cc}
}

func (c *faultServiceClient) TriggerServiceFault(ctx context.Context, in *TriggerServiceFaultRequest, opts ...grpc.CallOption) (*TriggerServiceFaultResponse, error) {
	out := new(TriggerServiceFaultResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.FaultService/TriggerServiceFault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faultServiceClient) ClearServiceFault(ctx context.Context, in *ClearServiceFaultRequest, opts ...grpc.CallOption) (*ClearServiceFaultResponse, error) {
	out := new(ClearServiceFaultResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.FaultService/ClearServiceFault", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaultServiceServer is the server API for FaultService service.
// All implementations must embed UnimplementedFaultServiceServer
// for forward compatibility
type FaultServiceServer interface {
	// Sends a ServiceFault to be reporting in robot state.
	TriggerServiceFault(context.Context, *TriggerServiceFaultRequest) (*TriggerServiceFaultResponse, error)
	// Clears an active ServiceFault from robot state.
	ClearServiceFault(context.Context, *ClearServiceFaultRequest) (*ClearServiceFaultResponse, error)
	mustEmbedUnimplementedFaultServiceServer()
}

// UnimplementedFaultServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFaultServiceServer struct {
}

func (UnimplementedFaultServiceServer) TriggerServiceFault(context.Context, *TriggerServiceFaultRequest) (*TriggerServiceFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerServiceFault not implemented")
}
func (UnimplementedFaultServiceServer) ClearServiceFault(context.Context, *ClearServiceFaultRequest) (*ClearServiceFaultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearServiceFault not implemented")
}
func (UnimplementedFaultServiceServer) mustEmbedUnimplementedFaultServiceServer() {}

// UnsafeFaultServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaultServiceServer will
// result in compilation errors.
type UnsafeFaultServiceServer interface {
	mustEmbedUnimplementedFaultServiceServer()
}

func RegisterFaultServiceServer(s grpc.ServiceRegistrar, srv FaultServiceServer) {
	s.RegisterService(&FaultService_ServiceDesc, srv)
}

func _FaultService_TriggerServiceFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerServiceFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaultServiceServer).TriggerServiceFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.FaultService/TriggerServiceFault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaultServiceServer).TriggerServiceFault(ctx, req.(*TriggerServiceFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FaultService_ClearServiceFault_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearServiceFaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaultServiceServer).ClearServiceFault(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.FaultService/ClearServiceFault",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaultServiceServer).ClearServiceFault(ctx, req.(*ClearServiceFaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FaultService_ServiceDesc is the grpc.ServiceDesc for FaultService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FaultService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.FaultService",
	HandlerType: (*FaultServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerServiceFault",
			Handler:    _FaultService_TriggerServiceFault_Handler,
		},
		{
			MethodName: "ClearServiceFault",
			Handler:    _FaultService_ClearServiceFault_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/fault_service.proto",
}
