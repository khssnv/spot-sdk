// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/arm_command.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NamedArmPositionsCommand_Positions int32

const (
	// Invalid request; do not use.
	NamedArmPositionsCommand_POSITIONS_UNKNOWN NamedArmPositionsCommand_Positions = 0
	// The carry position is a damped, force limited position close to stow, with the hand
	// slightly in front of the robot.
	NamedArmPositionsCommand_POSITIONS_CARRY NamedArmPositionsCommand_Positions = 1
	// Move arm to ready position. The ready position is defined with the hand directly in
	// front of and slightly above the body, with the hand facing forward in the robot body +X
	// direction.
	NamedArmPositionsCommand_POSITIONS_READY NamedArmPositionsCommand_Positions = 2
	// Stow the arm, safely. If the robot is holding something, it will freeze the arm instead
	// of stowing.  Overriding the carry_state to CARRY_STATE_CARRIABLE_AND_STOWABLE, will allow
	// the robot to stow the arm while grasping an item.
	NamedArmPositionsCommand_POSITIONS_STOW NamedArmPositionsCommand_Positions = 3
)

// Enum value maps for NamedArmPositionsCommand_Positions.
var (
	NamedArmPositionsCommand_Positions_name = map[int32]string{
		0: "POSITIONS_UNKNOWN",
		1: "POSITIONS_CARRY",
		2: "POSITIONS_READY",
		3: "POSITIONS_STOW",
	}
	NamedArmPositionsCommand_Positions_value = map[string]int32{
		"POSITIONS_UNKNOWN": 0,
		"POSITIONS_CARRY":   1,
		"POSITIONS_READY":   2,
		"POSITIONS_STOW":    3,
	}
)

func (x NamedArmPositionsCommand_Positions) Enum() *NamedArmPositionsCommand_Positions {
	p := new(NamedArmPositionsCommand_Positions)
	*p = x
	return p
}

func (x NamedArmPositionsCommand_Positions) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamedArmPositionsCommand_Positions) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_command_proto_enumTypes[0].Descriptor()
}

func (NamedArmPositionsCommand_Positions) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_command_proto_enumTypes[0]
}

func (x NamedArmPositionsCommand_Positions) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamedArmPositionsCommand_Positions.Descriptor instead.
func (NamedArmPositionsCommand_Positions) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{3, 0}
}

type NamedArmPositionsCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	NamedArmPositionsCommand_Feedback_STATUS_UNKNOWN NamedArmPositionsCommand_Feedback_Status = 0
	// The arm is at the desired configuration.
	NamedArmPositionsCommand_Feedback_STATUS_COMPLETE NamedArmPositionsCommand_Feedback_Status = 1
	// Robot is re-configuring arm to get to desired configuration.
	NamedArmPositionsCommand_Feedback_STATUS_IN_PROGRESS NamedArmPositionsCommand_Feedback_Status = 2
	// Some positions may refuse to execute if the gripper is holding an item, for example
	// stow.
	NamedArmPositionsCommand_Feedback_STATUS_STALLED_HOLDING_ITEM NamedArmPositionsCommand_Feedback_Status = 3
)

// Enum value maps for NamedArmPositionsCommand_Feedback_Status.
var (
	NamedArmPositionsCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_COMPLETE",
		2: "STATUS_IN_PROGRESS",
		3: "STATUS_STALLED_HOLDING_ITEM",
	}
	NamedArmPositionsCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":              0,
		"STATUS_COMPLETE":             1,
		"STATUS_IN_PROGRESS":          2,
		"STATUS_STALLED_HOLDING_ITEM": 3,
	}
)

func (x NamedArmPositionsCommand_Feedback_Status) Enum() *NamedArmPositionsCommand_Feedback_Status {
	p := new(NamedArmPositionsCommand_Feedback_Status)
	*p = x
	return p
}

func (x NamedArmPositionsCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NamedArmPositionsCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_command_proto_enumTypes[1].Descriptor()
}

func (NamedArmPositionsCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_command_proto_enumTypes[1]
}

func (x NamedArmPositionsCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NamedArmPositionsCommand_Feedback_Status.Descriptor instead.
func (NamedArmPositionsCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{3, 1, 0}
}

// If an axis is set to position mode (default), read desired from SE3Trajectory trajectory
// command.  If mode is set to Force, read desired from WrenchTrajectory wrench_trajectory
// command.  This supports hybrid control of the arm where users can specify, for example, Z
// to be in force control with X and Y in position control.  The elements are expressed in
// the same task_frame as the trajectories.
type ArmCartesianCommand_Request_AxisMode int32

const (
	ArmCartesianCommand_Request_AXIS_MODE_POSITION ArmCartesianCommand_Request_AxisMode = 0
	ArmCartesianCommand_Request_AXIS_MODE_FORCE    ArmCartesianCommand_Request_AxisMode = 1
)

// Enum value maps for ArmCartesianCommand_Request_AxisMode.
var (
	ArmCartesianCommand_Request_AxisMode_name = map[int32]string{
		0: "AXIS_MODE_POSITION",
		1: "AXIS_MODE_FORCE",
	}
	ArmCartesianCommand_Request_AxisMode_value = map[string]int32{
		"AXIS_MODE_POSITION": 0,
		"AXIS_MODE_FORCE":    1,
	}
)

func (x ArmCartesianCommand_Request_AxisMode) Enum() *ArmCartesianCommand_Request_AxisMode {
	p := new(ArmCartesianCommand_Request_AxisMode)
	*p = x
	return p
}

func (x ArmCartesianCommand_Request_AxisMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmCartesianCommand_Request_AxisMode) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_command_proto_enumTypes[2].Descriptor()
}

func (ArmCartesianCommand_Request_AxisMode) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_command_proto_enumTypes[2]
}

func (x ArmCartesianCommand_Request_AxisMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmCartesianCommand_Request_AxisMode.Descriptor instead.
func (ArmCartesianCommand_Request_AxisMode) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{4, 0, 0}
}

type ArmCartesianCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	ArmCartesianCommand_Feedback_STATUS_UNKNOWN ArmCartesianCommand_Feedback_Status = 0
	// Tool frame has reached the end of the trajectory within tracking error bounds.
	ArmCartesianCommand_Feedback_STATUS_TRAJECTORY_COMPLETE ArmCartesianCommand_Feedback_Status = 1
	// Robot is attempting to reach the target.
	ArmCartesianCommand_Feedback_STATUS_IN_PROGRESS ArmCartesianCommand_Feedback_Status = 2
	// Tool frame exceeded maximum allowable tracking error from the desired trajectory.
	ArmCartesianCommand_Feedback_STATUS_TRAJECTORY_CANCELLED ArmCartesianCommand_Feedback_Status = 3
	// The arm has stopped making progress to the goal.  Note, this does not cancel the
	// trajectory. For example, if the requested goal is too far away, walking the base
	// robot closer to the goal will cause the arm to continue along the trajectory once the
	// goal point is inside the workspace.
	ArmCartesianCommand_Feedback_STATUS_TRAJECTORY_STALLED ArmCartesianCommand_Feedback_Status = 4
)

// Enum value maps for ArmCartesianCommand_Feedback_Status.
var (
	ArmCartesianCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_TRAJECTORY_COMPLETE",
		2: "STATUS_IN_PROGRESS",
		3: "STATUS_TRAJECTORY_CANCELLED",
		4: "STATUS_TRAJECTORY_STALLED",
	}
	ArmCartesianCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":              0,
		"STATUS_TRAJECTORY_COMPLETE":  1,
		"STATUS_IN_PROGRESS":          2,
		"STATUS_TRAJECTORY_CANCELLED": 3,
		"STATUS_TRAJECTORY_STALLED":   4,
	}
)

func (x ArmCartesianCommand_Feedback_Status) Enum() *ArmCartesianCommand_Feedback_Status {
	p := new(ArmCartesianCommand_Feedback_Status)
	*p = x
	return p
}

func (x ArmCartesianCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmCartesianCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_command_proto_enumTypes[3].Descriptor()
}

func (ArmCartesianCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_command_proto_enumTypes[3]
}

func (x ArmCartesianCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmCartesianCommand_Feedback_Status.Descriptor instead.
func (ArmCartesianCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{4, 1, 0}
}

type ArmJointMoveCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened
	ArmJointMoveCommand_Feedback_STATUS_UNKNOWN ArmJointMoveCommand_Feedback_Status = 0
	// The arm is at the desired configuration.
	ArmJointMoveCommand_Feedback_STATUS_COMPLETE ArmJointMoveCommand_Feedback_Status = 1
	// Robot is re-configuring arm to get to desired configuration.
	ArmJointMoveCommand_Feedback_STATUS_IN_PROGRESS ArmJointMoveCommand_Feedback_Status = 2
)

// Enum value maps for ArmJointMoveCommand_Feedback_Status.
var (
	ArmJointMoveCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_COMPLETE",
		2: "STATUS_IN_PROGRESS",
	}
	ArmJointMoveCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_COMPLETE":    1,
		"STATUS_IN_PROGRESS": 2,
	}
)

func (x ArmJointMoveCommand_Feedback_Status) Enum() *ArmJointMoveCommand_Feedback_Status {
	p := new(ArmJointMoveCommand_Feedback_Status)
	*p = x
	return p
}

func (x ArmJointMoveCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmJointMoveCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_command_proto_enumTypes[4].Descriptor()
}

func (ArmJointMoveCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_command_proto_enumTypes[4]
}

func (x ArmJointMoveCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmJointMoveCommand_Feedback_Status.Descriptor instead.
func (ArmJointMoveCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{5, 1, 0}
}

type ArmJointMoveCommand_Feedback_PlannerStatus int32

const (
	// PLANNER_STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	ArmJointMoveCommand_Feedback_PLANNER_STATUS_UNKNOWN ArmJointMoveCommand_Feedback_PlannerStatus = 0
	// A solution passing through the desired points and obeying the constraints was found.
	ArmJointMoveCommand_Feedback_PLANNER_STATUS_SUCCESS ArmJointMoveCommand_Feedback_PlannerStatus = 1
	// The planner had to modify the desired points in order to obey the constraints.  For
	// example, if you specify a 1 point trajectory, and tell it to get there in a really short
	// amount of time, but haven't set a high allowable max velocity / acceleration, the planner
	// will do its best to get as close as possible to the final point, but won't reach it. In
	// situations where we've modified you last point, we append a minimum time trajectory (that
	// obeys the velocity and acceleration limits) from the planner's final point to the requested
	// final point.
	ArmJointMoveCommand_Feedback_PLANNER_STATUS_MODIFIED ArmJointMoveCommand_Feedback_PlannerStatus = 2
	// Failed to compute a valid trajectory, will go to first point instead. It is possible
	// that our optimizer till fail to solve the problem instead of returning a sub-optimal
	// solution.  This is un-likely to occur.
	ArmJointMoveCommand_Feedback_PLANNER_STATUS_FAILED ArmJointMoveCommand_Feedback_PlannerStatus = 3
)

// Enum value maps for ArmJointMoveCommand_Feedback_PlannerStatus.
var (
	ArmJointMoveCommand_Feedback_PlannerStatus_name = map[int32]string{
		0: "PLANNER_STATUS_UNKNOWN",
		1: "PLANNER_STATUS_SUCCESS",
		2: "PLANNER_STATUS_MODIFIED",
		3: "PLANNER_STATUS_FAILED",
	}
	ArmJointMoveCommand_Feedback_PlannerStatus_value = map[string]int32{
		"PLANNER_STATUS_UNKNOWN":  0,
		"PLANNER_STATUS_SUCCESS":  1,
		"PLANNER_STATUS_MODIFIED": 2,
		"PLANNER_STATUS_FAILED":   3,
	}
)

func (x ArmJointMoveCommand_Feedback_PlannerStatus) Enum() *ArmJointMoveCommand_Feedback_PlannerStatus {
	p := new(ArmJointMoveCommand_Feedback_PlannerStatus)
	*p = x
	return p
}

func (x ArmJointMoveCommand_Feedback_PlannerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmJointMoveCommand_Feedback_PlannerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_command_proto_enumTypes[5].Descriptor()
}

func (ArmJointMoveCommand_Feedback_PlannerStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_command_proto_enumTypes[5]
}

func (x ArmJointMoveCommand_Feedback_PlannerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmJointMoveCommand_Feedback_PlannerStatus.Descriptor instead.
func (ArmJointMoveCommand_Feedback_PlannerStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{5, 1, 1}
}

type GazeCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	GazeCommand_Feedback_STATUS_UNKNOWN GazeCommand_Feedback_Status = 0
	// Robot is gazing at the target at the end of the trajectory.
	GazeCommand_Feedback_STATUS_TRAJECTORY_COMPLETE GazeCommand_Feedback_Status = 1
	// Robot is re-configuring arm to gaze at the target.
	GazeCommand_Feedback_STATUS_IN_PROGRESS GazeCommand_Feedback_Status = 2
	// The arm has stopped making progress to the goal pose for the tool.
	// Note, this does not cancel the trajectory. For example, if the requested goal is too
	// far away, walking the base robot closer to the goal will cause the arm to continue
	// along the trajectory once it can continue.
	GazeCommand_Feedback_STATUS_TOOL_TRAJECTORY_STALLED GazeCommand_Feedback_Status = 3
)

// Enum value maps for GazeCommand_Feedback_Status.
var (
	GazeCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_TRAJECTORY_COMPLETE",
		2: "STATUS_IN_PROGRESS",
		3: "STATUS_TOOL_TRAJECTORY_STALLED",
	}
	GazeCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                 0,
		"STATUS_TRAJECTORY_COMPLETE":     1,
		"STATUS_IN_PROGRESS":             2,
		"STATUS_TOOL_TRAJECTORY_STALLED": 3,
	}
)

func (x GazeCommand_Feedback_Status) Enum() *GazeCommand_Feedback_Status {
	p := new(GazeCommand_Feedback_Status)
	*p = x
	return p
}

func (x GazeCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GazeCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_arm_command_proto_enumTypes[6].Descriptor()
}

func (GazeCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_arm_command_proto_enumTypes[6]
}

func (x GazeCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GazeCommand_Feedback_Status.Descriptor instead.
func (GazeCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{10, 1, 0}
}

// The synchronized command message for commanding the arm to move.
// A synchronized commands is one of the possible robot command messages for controlling the robot.
type ArmCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmCommand) Reset() {
	*x = ArmCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmCommand) ProtoMessage() {}

func (x *ArmCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmCommand.ProtoReflect.Descriptor instead.
func (*ArmCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{0}
}

// Parameters common across arm commands.
type ArmParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// Whether or not to disable the body force limiter running on the robot. By default, this is
	/// on, and the chance that the body falls over because the arm makes contact in the world is
	/// low. If this is purposely disabled (by setting disable_body_force_limiter to True), the arm
	/// may be able to accelerate faster, and apply more force to the world and to objects than usual,
	/// but there is also added risk of the robot falling over.
	DisableBodyForceLimiter *wrapperspb.BoolValue `protobuf:"bytes,1,opt,name=disable_body_force_limiter,json=disableBodyForceLimiter,proto3" json:"disable_body_force_limiter,omitempty"`
}

func (x *ArmParams) Reset() {
	*x = ArmParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmParams) ProtoMessage() {}

func (x *ArmParams) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmParams.ProtoReflect.Descriptor instead.
func (*ArmParams) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{1}
}

func (x *ArmParams) GetDisableBodyForceLimiter() *wrapperspb.BoolValue {
	if x != nil {
		return x.DisableBodyForceLimiter
	}
	return nil
}

// When controlling the arm with a joystick, because of latency it can often be better to send
// velocity commands rather than position commands.  Both linear and angular velocity can be
// specified.  The linear velocity can be specified in a cylindrical frame around the shoulder or
// with a specified frame.
type ArmVelocityCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmVelocityCommand) Reset() {
	*x = ArmVelocityCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmVelocityCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmVelocityCommand) ProtoMessage() {}

func (x *ArmVelocityCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmVelocityCommand.ProtoReflect.Descriptor instead.
func (*ArmVelocityCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{2}
}

// Command the arm move to a predefined configuration.
type NamedArmPositionsCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamedArmPositionsCommand) Reset() {
	*x = NamedArmPositionsCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedArmPositionsCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedArmPositionsCommand) ProtoMessage() {}

func (x *NamedArmPositionsCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedArmPositionsCommand.ProtoReflect.Descriptor instead.
func (*NamedArmPositionsCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{3}
}

// Command the end effector of the arm.  Each axis in the task frame is allowed to be set to
// position mode (default) or Force mode.  If the axis is set to position, the desired value is read
// from the pose_trajectory_in_task. If the axis is set to force, the desired value is read from
// the wrench_trajectory. This supports hybrid control of the arm where users can specify, for
// example, Z to be in force control with X and Y in position control.
type ArmCartesianCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmCartesianCommand) Reset() {
	*x = ArmCartesianCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmCartesianCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmCartesianCommand) ProtoMessage() {}

func (x *ArmCartesianCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmCartesianCommand.ProtoReflect.Descriptor instead.
func (*ArmCartesianCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{4}
}

// Specify a set of joint angles to move the arm.
type ArmJointMoveCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmJointMoveCommand) Reset() {
	*x = ArmJointMoveCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmJointMoveCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmJointMoveCommand) ProtoMessage() {}

func (x *ArmJointMoveCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmJointMoveCommand.ProtoReflect.Descriptor instead.
func (*ArmJointMoveCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{5}
}

// Position of our 6 arm joints in radians. If a joint angle is not specified,
// we will use the joint position at time the message is received on robot.
type ArmJointPosition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sh0 *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=sh0,proto3" json:"sh0,omitempty"`
	Sh1 *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=sh1,proto3" json:"sh1,omitempty"`
	El0 *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=el0,proto3" json:"el0,omitempty"`
	El1 *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=el1,proto3" json:"el1,omitempty"`
	Wr0 *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=wr0,proto3" json:"wr0,omitempty"`
	Wr1 *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=wr1,proto3" json:"wr1,omitempty"`
}

func (x *ArmJointPosition) Reset() {
	*x = ArmJointPosition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmJointPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmJointPosition) ProtoMessage() {}

func (x *ArmJointPosition) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmJointPosition.ProtoReflect.Descriptor instead.
func (*ArmJointPosition) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{6}
}

func (x *ArmJointPosition) GetSh0() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Sh0
	}
	return nil
}

func (x *ArmJointPosition) GetSh1() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Sh1
	}
	return nil
}

func (x *ArmJointPosition) GetEl0() *wrapperspb.DoubleValue {
	if x != nil {
		return x.El0
	}
	return nil
}

func (x *ArmJointPosition) GetEl1() *wrapperspb.DoubleValue {
	if x != nil {
		return x.El1
	}
	return nil
}

func (x *ArmJointPosition) GetWr0() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Wr0
	}
	return nil
}

func (x *ArmJointPosition) GetWr1() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Wr1
	}
	return nil
}

// Velocity of our 6 arm joints in radians / second. If a velocity
// for a joint is specified, velocities for all joints we are
// trying to move must be specified.
type ArmJointVelocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sh0 *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=sh0,proto3" json:"sh0,omitempty"`
	Sh1 *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=sh1,proto3" json:"sh1,omitempty"`
	El0 *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=el0,proto3" json:"el0,omitempty"`
	El1 *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=el1,proto3" json:"el1,omitempty"`
	Wr0 *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=wr0,proto3" json:"wr0,omitempty"`
	Wr1 *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=wr1,proto3" json:"wr1,omitempty"`
}

func (x *ArmJointVelocity) Reset() {
	*x = ArmJointVelocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmJointVelocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmJointVelocity) ProtoMessage() {}

func (x *ArmJointVelocity) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmJointVelocity.ProtoReflect.Descriptor instead.
func (*ArmJointVelocity) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{7}
}

func (x *ArmJointVelocity) GetSh0() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Sh0
	}
	return nil
}

func (x *ArmJointVelocity) GetSh1() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Sh1
	}
	return nil
}

func (x *ArmJointVelocity) GetEl0() *wrapperspb.DoubleValue {
	if x != nil {
		return x.El0
	}
	return nil
}

func (x *ArmJointVelocity) GetEl1() *wrapperspb.DoubleValue {
	if x != nil {
		return x.El1
	}
	return nil
}

func (x *ArmJointVelocity) GetWr0() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Wr0
	}
	return nil
}

func (x *ArmJointVelocity) GetWr1() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Wr1
	}
	return nil
}

// A set of joint angles and velocities that can be used as a point within a joint trajectory.
type ArmJointTrajectoryPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Desired joint angles in radians
	Position *ArmJointPosition `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// Optional desired joint velocities in radians / sec
	Velocity *ArmJointVelocity `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// The time since reference at which we wish to achieve this position / velocity
	TimeSinceReference *durationpb.Duration `protobuf:"bytes,3,opt,name=time_since_reference,json=timeSinceReference,proto3" json:"time_since_reference,omitempty"`
}

func (x *ArmJointTrajectoryPoint) Reset() {
	*x = ArmJointTrajectoryPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmJointTrajectoryPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmJointTrajectoryPoint) ProtoMessage() {}

func (x *ArmJointTrajectoryPoint) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmJointTrajectoryPoint.ProtoReflect.Descriptor instead.
func (*ArmJointTrajectoryPoint) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{8}
}

func (x *ArmJointTrajectoryPoint) GetPosition() *ArmJointPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *ArmJointTrajectoryPoint) GetVelocity() *ArmJointVelocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *ArmJointTrajectoryPoint) GetTimeSinceReference() *durationpb.Duration {
	if x != nil {
		return x.TimeSinceReference
	}
	return nil
}

// This allows a user to move the arm's joints directly. Each of the arm's joints will never move
// faster than maximum_velocity and never accelerate faster than maximum_acceleration. The user can
// specify a trajectory of joint positions and optional velocities for the arm to follow. The
// trajectory will be acted upon as follows. If a single trajectory point with no time is provided,
// the arm will take the joint currently furthest away from the goal pose and plan a minimum time
// trajectory such that the joint accelerates at maximum_acceleration, coasts at maximum_velocity,
// and decelerates at maximum_acceleration. The other joints will accelerate at
// maximum_acceleration, but then coast at a slower speed such that all joints arrive at the goal
// pose simultaneously with zero velocity. If the user provides trajectory times, the robot will fit
// a piece-wise cubic trajectory (continuous position and velocity) to the user's requested
// positions and (optional) velocities. If the requested trajectory is not achievable because it
// will violate position limits or the maximum_velocity or maximum_acceleration, the robot will pick
// a trajectory that is as close as possible to the user requested without violating velocity or
// acceleration limits.
//
// If the robot is not hitting the desired trajectory, try increasing the time between knot points,
// increasing the max velocity and acceleration, or only specifying joint position goals without a
// velocity
type ArmJointTrajectory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The points in our trajectory. (positions, (optional) velocity, (optional) time)
	Points []*ArmJointTrajectoryPoint `protobuf:"bytes,1,rep,name=points,proto3" json:"points,omitempty"`
	// All trajectory points specify times relative to this reference time. The reference
	// time should be in robot clock. If this field is not included, this time will be
	// the receive time of the command.
	ReferenceTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=reference_time,json=referenceTime,proto3" json:"reference_time,omitempty"`
	// The maximum velocity in rad/s that any joint is allowed to achieve.
	// If this field is not set, a default value will be used.
	MaximumVelocity *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=maximum_velocity,json=maximumVelocity,proto3" json:"maximum_velocity,omitempty"`
	// The maximum acceleration in rad/s^2 that any joint is allowed to
	// achieve. If this field is not set, a default value will be used.
	MaximumAcceleration *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=maximum_acceleration,json=maximumAcceleration,proto3" json:"maximum_acceleration,omitempty"`
}

func (x *ArmJointTrajectory) Reset() {
	*x = ArmJointTrajectory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmJointTrajectory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmJointTrajectory) ProtoMessage() {}

func (x *ArmJointTrajectory) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmJointTrajectory.ProtoReflect.Descriptor instead.
func (*ArmJointTrajectory) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{9}
}

func (x *ArmJointTrajectory) GetPoints() []*ArmJointTrajectoryPoint {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *ArmJointTrajectory) GetReferenceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReferenceTime
	}
	return nil
}

func (x *ArmJointTrajectory) GetMaximumVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumVelocity
	}
	return nil
}

func (x *ArmJointTrajectory) GetMaximumAcceleration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumAcceleration
	}
	return nil
}

/// Move the hand in such a way to point it at a position in the world.
type GazeCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GazeCommand) Reset() {
	*x = GazeCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GazeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GazeCommand) ProtoMessage() {}

func (x *GazeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GazeCommand.ProtoReflect.Descriptor instead.
func (*GazeCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{10}
}

// Stop the arm applying minimal forces to the world. For example, if the arm is in the  middle of
// opening a heavy door and a stop command is sent, the arm will comply and let the door close.
type ArmStopCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmStopCommand) Reset() {
	*x = ArmStopCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmStopCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmStopCommand) ProtoMessage() {}

func (x *ArmStopCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmStopCommand.ProtoReflect.Descriptor instead.
func (*ArmStopCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{11}
}

// The arm request must be one of the basic command primitives.
type ArmCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Only one command can be requested at a time.
	//
	// Types that are assignable to Command:
	//	*ArmCommand_Request_ArmCartesianCommand
	//	*ArmCommand_Request_ArmJointMoveCommand
	//	*ArmCommand_Request_NamedArmPositionCommand
	//	*ArmCommand_Request_ArmVelocityCommand
	//	*ArmCommand_Request_ArmGazeCommand
	//	*ArmCommand_Request_ArmStopCommand
	//	*ArmCommand_Request_ArmDragCommand
	Command isArmCommand_Request_Command `protobuf_oneof:"command"`
	// Any arm parameters to send, common across all arm commands
	Params *ArmParams `protobuf:"bytes,11,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *ArmCommand_Request) Reset() {
	*x = ArmCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmCommand_Request) ProtoMessage() {}

func (x *ArmCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmCommand_Request.ProtoReflect.Descriptor instead.
func (*ArmCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{0, 0}
}

func (m *ArmCommand_Request) GetCommand() isArmCommand_Request_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ArmCommand_Request) GetArmCartesianCommand() *ArmCartesianCommand_Request {
	if x, ok := x.GetCommand().(*ArmCommand_Request_ArmCartesianCommand); ok {
		return x.ArmCartesianCommand
	}
	return nil
}

func (x *ArmCommand_Request) GetArmJointMoveCommand() *ArmJointMoveCommand_Request {
	if x, ok := x.GetCommand().(*ArmCommand_Request_ArmJointMoveCommand); ok {
		return x.ArmJointMoveCommand
	}
	return nil
}

func (x *ArmCommand_Request) GetNamedArmPositionCommand() *NamedArmPositionsCommand_Request {
	if x, ok := x.GetCommand().(*ArmCommand_Request_NamedArmPositionCommand); ok {
		return x.NamedArmPositionCommand
	}
	return nil
}

func (x *ArmCommand_Request) GetArmVelocityCommand() *ArmVelocityCommand_Request {
	if x, ok := x.GetCommand().(*ArmCommand_Request_ArmVelocityCommand); ok {
		return x.ArmVelocityCommand
	}
	return nil
}

func (x *ArmCommand_Request) GetArmGazeCommand() *GazeCommand_Request {
	if x, ok := x.GetCommand().(*ArmCommand_Request_ArmGazeCommand); ok {
		return x.ArmGazeCommand
	}
	return nil
}

func (x *ArmCommand_Request) GetArmStopCommand() *ArmStopCommand_Request {
	if x, ok := x.GetCommand().(*ArmCommand_Request_ArmStopCommand); ok {
		return x.ArmStopCommand
	}
	return nil
}

func (x *ArmCommand_Request) GetArmDragCommand() *ArmDragCommand_Request {
	if x, ok := x.GetCommand().(*ArmCommand_Request_ArmDragCommand); ok {
		return x.ArmDragCommand
	}
	return nil
}

func (x *ArmCommand_Request) GetParams() *ArmParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type isArmCommand_Request_Command interface {
	isArmCommand_Request_Command()
}

type ArmCommand_Request_ArmCartesianCommand struct {
	// Control the end-effector in Cartesian space.
	ArmCartesianCommand *ArmCartesianCommand_Request `protobuf:"bytes,3,opt,name=arm_cartesian_command,json=armCartesianCommand,proto3,oneof"`
}

type ArmCommand_Request_ArmJointMoveCommand struct {
	// Control joint angles of the arm.
	ArmJointMoveCommand *ArmJointMoveCommand_Request `protobuf:"bytes,4,opt,name=arm_joint_move_command,json=armJointMoveCommand,proto3,oneof"`
}

type ArmCommand_Request_NamedArmPositionCommand struct {
	// Move the arm to some predefined configurations.
	NamedArmPositionCommand *NamedArmPositionsCommand_Request `protobuf:"bytes,5,opt,name=named_arm_position_command,json=namedArmPositionCommand,proto3,oneof"`
}

type ArmCommand_Request_ArmVelocityCommand struct {
	// Velocity control of the end-effector.
	ArmVelocityCommand *ArmVelocityCommand_Request `protobuf:"bytes,6,opt,name=arm_velocity_command,json=armVelocityCommand,proto3,oneof"`
}

type ArmCommand_Request_ArmGazeCommand struct {
	// Point the gripper at a point in the world.
	ArmGazeCommand *GazeCommand_Request `protobuf:"bytes,8,opt,name=arm_gaze_command,json=armGazeCommand,proto3,oneof"`
}

type ArmCommand_Request_ArmStopCommand struct {
	// Stop the arm in place with minimal motion.
	ArmStopCommand *ArmStopCommand_Request `protobuf:"bytes,9,opt,name=arm_stop_command,json=armStopCommand,proto3,oneof"`
}

type ArmCommand_Request_ArmDragCommand struct {
	// Use the arm to drag something held in the gripper.
	ArmDragCommand *ArmDragCommand_Request `protobuf:"bytes,10,opt,name=arm_drag_command,json=armDragCommand,proto3,oneof"`
}

func (*ArmCommand_Request_ArmCartesianCommand) isArmCommand_Request_Command() {}

func (*ArmCommand_Request_ArmJointMoveCommand) isArmCommand_Request_Command() {}

func (*ArmCommand_Request_NamedArmPositionCommand) isArmCommand_Request_Command() {}

func (*ArmCommand_Request_ArmVelocityCommand) isArmCommand_Request_Command() {}

func (*ArmCommand_Request_ArmGazeCommand) isArmCommand_Request_Command() {}

func (*ArmCommand_Request_ArmStopCommand) isArmCommand_Request_Command() {}

func (*ArmCommand_Request_ArmDragCommand) isArmCommand_Request_Command() {}

// The feedback for the arm command that will provide information on the progress
// of the command.
type ArmCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The feedback message associated with the requested command. Some commands may have
	// an empty feedback message if they do not provide any updates/progress.
	//
	// Types that are assignable to Feedback:
	//	*ArmCommand_Feedback_ArmCartesianFeedback
	//	*ArmCommand_Feedback_ArmJointMoveFeedback
	//	*ArmCommand_Feedback_NamedArmPositionFeedback
	//	*ArmCommand_Feedback_ArmVelocityFeedback
	//	*ArmCommand_Feedback_ArmGazeFeedback
	//	*ArmCommand_Feedback_ArmStopFeedback
	//	*ArmCommand_Feedback_ArmDragFeedback
	Feedback isArmCommand_Feedback_Feedback    `protobuf_oneof:"feedback"`
	Status   RobotCommandFeedbackStatus_Status `protobuf:"varint,100,opt,name=status,proto3,enum=bosdyn.api.RobotCommandFeedbackStatus_Status" json:"status,omitempty"`
}

func (x *ArmCommand_Feedback) Reset() {
	*x = ArmCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmCommand_Feedback) ProtoMessage() {}

func (x *ArmCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ArmCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{0, 1}
}

func (m *ArmCommand_Feedback) GetFeedback() isArmCommand_Feedback_Feedback {
	if m != nil {
		return m.Feedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetArmCartesianFeedback() *ArmCartesianCommand_Feedback {
	if x, ok := x.GetFeedback().(*ArmCommand_Feedback_ArmCartesianFeedback); ok {
		return x.ArmCartesianFeedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetArmJointMoveFeedback() *ArmJointMoveCommand_Feedback {
	if x, ok := x.GetFeedback().(*ArmCommand_Feedback_ArmJointMoveFeedback); ok {
		return x.ArmJointMoveFeedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetNamedArmPositionFeedback() *NamedArmPositionsCommand_Feedback {
	if x, ok := x.GetFeedback().(*ArmCommand_Feedback_NamedArmPositionFeedback); ok {
		return x.NamedArmPositionFeedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetArmVelocityFeedback() *ArmVelocityCommand_Feedback {
	if x, ok := x.GetFeedback().(*ArmCommand_Feedback_ArmVelocityFeedback); ok {
		return x.ArmVelocityFeedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetArmGazeFeedback() *GazeCommand_Feedback {
	if x, ok := x.GetFeedback().(*ArmCommand_Feedback_ArmGazeFeedback); ok {
		return x.ArmGazeFeedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetArmStopFeedback() *ArmStopCommand_Feedback {
	if x, ok := x.GetFeedback().(*ArmCommand_Feedback_ArmStopFeedback); ok {
		return x.ArmStopFeedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetArmDragFeedback() *ArmDragCommand_Feedback {
	if x, ok := x.GetFeedback().(*ArmCommand_Feedback_ArmDragFeedback); ok {
		return x.ArmDragFeedback
	}
	return nil
}

func (x *ArmCommand_Feedback) GetStatus() RobotCommandFeedbackStatus_Status {
	if x != nil {
		return x.Status
	}
	return RobotCommandFeedbackStatus_STATUS_UNKNOWN
}

type isArmCommand_Feedback_Feedback interface {
	isArmCommand_Feedback_Feedback()
}

type ArmCommand_Feedback_ArmCartesianFeedback struct {
	// Feedback for the end-effector Cartesian command.
	ArmCartesianFeedback *ArmCartesianCommand_Feedback `protobuf:"bytes,3,opt,name=arm_cartesian_feedback,json=armCartesianFeedback,proto3,oneof"`
}

type ArmCommand_Feedback_ArmJointMoveFeedback struct {
	// Feedback for the joint move command.
	ArmJointMoveFeedback *ArmJointMoveCommand_Feedback `protobuf:"bytes,4,opt,name=arm_joint_move_feedback,json=armJointMoveFeedback,proto3,oneof"`
}

type ArmCommand_Feedback_NamedArmPositionFeedback struct {
	// Feedback for the named position move command.
	NamedArmPositionFeedback *NamedArmPositionsCommand_Feedback `protobuf:"bytes,5,opt,name=named_arm_position_feedback,json=namedArmPositionFeedback,proto3,oneof"`
}

type ArmCommand_Feedback_ArmVelocityFeedback struct {
	ArmVelocityFeedback *ArmVelocityCommand_Feedback `protobuf:"bytes,6,opt,name=arm_velocity_feedback,json=armVelocityFeedback,proto3,oneof"`
}

type ArmCommand_Feedback_ArmGazeFeedback struct {
	// Feedback for the gaze command.
	ArmGazeFeedback *GazeCommand_Feedback `protobuf:"bytes,8,opt,name=arm_gaze_feedback,json=armGazeFeedback,proto3,oneof"`
}

type ArmCommand_Feedback_ArmStopFeedback struct {
	ArmStopFeedback *ArmStopCommand_Feedback `protobuf:"bytes,9,opt,name=arm_stop_feedback,json=armStopFeedback,proto3,oneof"`
}

type ArmCommand_Feedback_ArmDragFeedback struct {
	// Feedback for the drag command.
	ArmDragFeedback *ArmDragCommand_Feedback `protobuf:"bytes,10,opt,name=arm_drag_feedback,json=armDragFeedback,proto3,oneof"`
}

func (*ArmCommand_Feedback_ArmCartesianFeedback) isArmCommand_Feedback_Feedback() {}

func (*ArmCommand_Feedback_ArmJointMoveFeedback) isArmCommand_Feedback_Feedback() {}

func (*ArmCommand_Feedback_NamedArmPositionFeedback) isArmCommand_Feedback_Feedback() {}

func (*ArmCommand_Feedback_ArmVelocityFeedback) isArmCommand_Feedback_Feedback() {}

func (*ArmCommand_Feedback_ArmGazeFeedback) isArmCommand_Feedback_Feedback() {}

func (*ArmCommand_Feedback_ArmStopFeedback) isArmCommand_Feedback_Feedback() {}

func (*ArmCommand_Feedback_ArmDragFeedback) isArmCommand_Feedback_Feedback() {}

type ArmVelocityCommand_CylindricalVelocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The linear velocities for the end-effector are specified in unitless cylindrical
	/// coordinates. The origin of the cylindrical coordinate system is the base of the arm
	/// (shoulder).  The Z-axis is aligned with gravity, and the X-axis is the unit vector from
	/// the shoulder to the hand-point. This construction allows for 'Z'-axis velocities to
	/// raise/lower the hand, 'R'-axis velocities will cause the hand to move towards/away from
	/// the shoulder, and 'theta'-axis velocities will cause the hand to travel
	/// clockwise/counter-clockwise around the shoulder. Lastly, the command is unitless, with
	/// values for each axis specified in the range [-1, 1].  A value of 0 denotes no velocity
	/// and values of +/- 1 denote maximum velocity (see max_linear_velocity).
	LinearVelocity *CylindricalCoordinate `protobuf:"bytes,1,opt,name=linear_velocity,json=linearVelocity,proto3" json:"linear_velocity,omitempty"`
	/// The maximum velocity in meters / second for the hand.
	/// If unset and default value of 0 received, will set max_linear_velocity to 0.5 m/s.
	MaxLinearVelocity *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=max_linear_velocity,json=maxLinearVelocity,proto3" json:"max_linear_velocity,omitempty"`
}

func (x *ArmVelocityCommand_CylindricalVelocity) Reset() {
	*x = ArmVelocityCommand_CylindricalVelocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmVelocityCommand_CylindricalVelocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmVelocityCommand_CylindricalVelocity) ProtoMessage() {}

func (x *ArmVelocityCommand_CylindricalVelocity) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmVelocityCommand_CylindricalVelocity.ProtoReflect.Descriptor instead.
func (*ArmVelocityCommand_CylindricalVelocity) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{2, 0}
}

func (x *ArmVelocityCommand_CylindricalVelocity) GetLinearVelocity() *CylindricalCoordinate {
	if x != nil {
		return x.LinearVelocity
	}
	return nil
}

func (x *ArmVelocityCommand_CylindricalVelocity) GetMaxLinearVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLinearVelocity
	}
	return nil
}

type ArmVelocityCommand_CartesianVelocity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The frame to express our velocities in
	FrameName string `protobuf:"bytes,1,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// The x-y-z velocity of the hand (m/s) with respect to the frame
	VelocityInFrameName *Vec3 `protobuf:"bytes,2,opt,name=velocity_in_frame_name,json=velocityInFrameName,proto3" json:"velocity_in_frame_name,omitempty"`
}

func (x *ArmVelocityCommand_CartesianVelocity) Reset() {
	*x = ArmVelocityCommand_CartesianVelocity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmVelocityCommand_CartesianVelocity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmVelocityCommand_CartesianVelocity) ProtoMessage() {}

func (x *ArmVelocityCommand_CartesianVelocity) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmVelocityCommand_CartesianVelocity.ProtoReflect.Descriptor instead.
func (*ArmVelocityCommand_CartesianVelocity) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ArmVelocityCommand_CartesianVelocity) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *ArmVelocityCommand_CartesianVelocity) GetVelocityInFrameName() *Vec3 {
	if x != nil {
		return x.VelocityInFrameName
	}
	return nil
}

type ArmVelocityCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the linear velocity of the hand in either a cylindrical or Cartesian coordinate
	// system.
	//
	// Types that are assignable to Command:
	//	*ArmVelocityCommand_Request_CylindricalVelocity
	//	*ArmVelocityCommand_Request_CartesianVelocity
	Command isArmVelocityCommand_Request_Command `protobuf_oneof:"command"`
	// The angular velocity of the hand frame measured with respect to the odom frame, expressed
	// in the hand frame. A 'X' rate will cause the hand to rotate about its x-axis, e.g. the
	// final wrist twist joint will rotate. And similarly, 'Y' and 'Z' rates will cause the hand
	// to rotate about its y and z axis respectively. \
	// The units should be rad/sec.
	AngularVelocityOfHandRtOdomInHand *Vec3 `protobuf:"bytes,6,opt,name=angular_velocity_of_hand_rt_odom_in_hand,json=angularVelocityOfHandRtOdomInHand,proto3" json:"angular_velocity_of_hand_rt_odom_in_hand,omitempty"`
	// Optional maximum acceleration magnitude of the end-effector. (m/s^2)
	MaximumAcceleration *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=maximum_acceleration,json=maximumAcceleration,proto3" json:"maximum_acceleration,omitempty"`
	// The timestamp (in robot time) by which a command must finish executing.
	// This is a required field and used to prevent runaway commands.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ArmVelocityCommand_Request) Reset() {
	*x = ArmVelocityCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmVelocityCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmVelocityCommand_Request) ProtoMessage() {}

func (x *ArmVelocityCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmVelocityCommand_Request.ProtoReflect.Descriptor instead.
func (*ArmVelocityCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{2, 2}
}

func (m *ArmVelocityCommand_Request) GetCommand() isArmVelocityCommand_Request_Command {
	if m != nil {
		return m.Command
	}
	return nil
}

func (x *ArmVelocityCommand_Request) GetCylindricalVelocity() *ArmVelocityCommand_CylindricalVelocity {
	if x, ok := x.GetCommand().(*ArmVelocityCommand_Request_CylindricalVelocity); ok {
		return x.CylindricalVelocity
	}
	return nil
}

func (x *ArmVelocityCommand_Request) GetCartesianVelocity() *ArmVelocityCommand_CartesianVelocity {
	if x, ok := x.GetCommand().(*ArmVelocityCommand_Request_CartesianVelocity); ok {
		return x.CartesianVelocity
	}
	return nil
}

func (x *ArmVelocityCommand_Request) GetAngularVelocityOfHandRtOdomInHand() *Vec3 {
	if x != nil {
		return x.AngularVelocityOfHandRtOdomInHand
	}
	return nil
}

func (x *ArmVelocityCommand_Request) GetMaximumAcceleration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumAcceleration
	}
	return nil
}

func (x *ArmVelocityCommand_Request) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type isArmVelocityCommand_Request_Command interface {
	isArmVelocityCommand_Request_Command()
}

type ArmVelocityCommand_Request_CylindricalVelocity struct {
	CylindricalVelocity *ArmVelocityCommand_CylindricalVelocity `protobuf:"bytes,1,opt,name=cylindrical_velocity,json=cylindricalVelocity,proto3,oneof"`
}

type ArmVelocityCommand_Request_CartesianVelocity struct {
	CartesianVelocity *ArmVelocityCommand_CartesianVelocity `protobuf:"bytes,2,opt,name=cartesian_velocity,json=cartesianVelocity,proto3,oneof"`
}

func (*ArmVelocityCommand_Request_CylindricalVelocity) isArmVelocityCommand_Request_Command() {}

func (*ArmVelocityCommand_Request_CartesianVelocity) isArmVelocityCommand_Request_Command() {}

type ArmVelocityCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmVelocityCommand_Feedback) Reset() {
	*x = ArmVelocityCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmVelocityCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmVelocityCommand_Feedback) ProtoMessage() {}

func (x *ArmVelocityCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmVelocityCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ArmVelocityCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{2, 3}
}

type NamedArmPositionsCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position NamedArmPositionsCommand_Positions `protobuf:"varint,1,opt,name=position,proto3,enum=bosdyn.api.NamedArmPositionsCommand_Positions" json:"position,omitempty"`
}

func (x *NamedArmPositionsCommand_Request) Reset() {
	*x = NamedArmPositionsCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedArmPositionsCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedArmPositionsCommand_Request) ProtoMessage() {}

func (x *NamedArmPositionsCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedArmPositionsCommand_Request.ProtoReflect.Descriptor instead.
func (*NamedArmPositionsCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{3, 0}
}

func (x *NamedArmPositionsCommand_Request) GetPosition() NamedArmPositionsCommand_Positions {
	if x != nil {
		return x.Position
	}
	return NamedArmPositionsCommand_POSITIONS_UNKNOWN
}

type NamedArmPositionsCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the request.
	Status NamedArmPositionsCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.NamedArmPositionsCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *NamedArmPositionsCommand_Feedback) Reset() {
	*x = NamedArmPositionsCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedArmPositionsCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedArmPositionsCommand_Feedback) ProtoMessage() {}

func (x *NamedArmPositionsCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedArmPositionsCommand_Feedback.ProtoReflect.Descriptor instead.
func (*NamedArmPositionsCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{3, 1}
}

func (x *NamedArmPositionsCommand_Feedback) GetStatus() NamedArmPositionsCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return NamedArmPositionsCommand_Feedback_STATUS_UNKNOWN
}

type ArmCartesianCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root frame is used to set the optional task frame that all trajectories are
	// specified with respect to.  If the optional task frame is left un-specified it defaults
	// to the identity transform and the root frame becomes the task frame.
	RootFrameName string `protobuf:"bytes,19,opt,name=root_frame_name,json=rootFrameName,proto3" json:"root_frame_name,omitempty"`
	// The tool pose relative to the parent link (wrist).
	// Defaults to
	//    [0.19557 0 0]
	//    [1 0 0 0]
	// a frame with it's origin slightly in front of the gripper's palm plate aligned with
	// wrist's orientation.
	WristTformTool *SE3Pose `protobuf:"bytes,6,opt,name=wrist_tform_tool,json=wristTformTool,proto3" json:"wrist_tform_tool,omitempty"`
	// The fields below are specified in this optional task frame.  If unset it defaults
	// to the identity transform and all quantities are therefore expressed in the
	// root_frame_name.
	RootTformTask *SE3Pose `protobuf:"bytes,20,opt,name=root_tform_task,json=rootTformTask,proto3" json:"root_tform_task,omitempty"`
	// A 3D pose trajectory for the tool expressed in the task frame, e.g. task_T_tool.
	// This pose trajectory is optional if requesting a pure wrench at the end-effector,
	// otherwise required for position or mixed force/position end-effector requests.
	PoseTrajectoryInTask *SE3Trajectory `protobuf:"bytes,2,opt,name=pose_trajectory_in_task,json=poseTrajectoryInTask,proto3" json:"pose_trajectory_in_task,omitempty"`
	// Optional Maximum acceleration magnitude of the end-effector.
	// Valid ranges (0, 20]
	MaximumAcceleration *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=maximum_acceleration,json=maximumAcceleration,proto3" json:"maximum_acceleration,omitempty"`
	// Optional Maximum linear velocity magnitude of the end-effector. (m/s)
	MaxLinearVelocity *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=max_linear_velocity,json=maxLinearVelocity,proto3" json:"max_linear_velocity,omitempty"`
	// Optional Maximum angular velocity magnitude of the end-effector. (rad/s)
	MaxAngularVelocity *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=max_angular_velocity,json=maxAngularVelocity,proto3" json:"max_angular_velocity,omitempty"`
	// Maximum allowable tracking error of the tool frame from the desired trajectory
	// before the arm will stop moving and cancel the rest of the trajectory. When this limit is
	// exceeded, the hand will stay at the pose it was at when it exceeded the tracking error,
	// and any other part of the trajectory specified in the rest of this message will be
	// ignored. max position tracking error in meters
	MaxPosTrackingError *wrapperspb.DoubleValue `protobuf:"bytes,15,opt,name=max_pos_tracking_error,json=maxPosTrackingError,proto3" json:"max_pos_tracking_error,omitempty"`
	// max orientation tracking error in radians
	MaxRotTrackingError *wrapperspb.DoubleValue `protobuf:"bytes,16,opt,name=max_rot_tracking_error,json=maxRotTrackingError,proto3" json:"max_rot_tracking_error,omitempty"`
	// Set a "preferred joint configuration" for this trajectory. When near a singularity, the
	// robot will move towards the specified pose. If no pose is provided (i.e. no value is set
	// for this oneof), a default one will be chosen. If the user wishes to explicitly tell the
	// robot to not prefer any pose, (useful if doing a local move, and the user wants to avoid
	// large joint motions) they should set ignore_joint_configuration to be true. The robot's
	// behavior around singularities will then be to simply minimize joint velocity, resulting
	// in the robot coming in and out of the singularity with similar joint angles
	//
	// Types that are assignable to JointConfiguration:
	//	*ArmCartesianCommand_Request_ForceRemainNearCurrentJointConfiguration
	//	*ArmCartesianCommand_Request_PreferredJointConfiguration
	JointConfiguration isArmCartesianCommand_Request_JointConfiguration `protobuf_oneof:"joint_configuration"`
	XAxis              ArmCartesianCommand_Request_AxisMode             `protobuf:"varint,8,opt,name=x_axis,json=xAxis,proto3,enum=bosdyn.api.ArmCartesianCommand_Request_AxisMode" json:"x_axis,omitempty"`
	YAxis              ArmCartesianCommand_Request_AxisMode             `protobuf:"varint,9,opt,name=y_axis,json=yAxis,proto3,enum=bosdyn.api.ArmCartesianCommand_Request_AxisMode" json:"y_axis,omitempty"`
	ZAxis              ArmCartesianCommand_Request_AxisMode             `protobuf:"varint,10,opt,name=z_axis,json=zAxis,proto3,enum=bosdyn.api.ArmCartesianCommand_Request_AxisMode" json:"z_axis,omitempty"`
	RxAxis             ArmCartesianCommand_Request_AxisMode             `protobuf:"varint,11,opt,name=rx_axis,json=rxAxis,proto3,enum=bosdyn.api.ArmCartesianCommand_Request_AxisMode" json:"rx_axis,omitempty"`
	RyAxis             ArmCartesianCommand_Request_AxisMode             `protobuf:"varint,12,opt,name=ry_axis,json=ryAxis,proto3,enum=bosdyn.api.ArmCartesianCommand_Request_AxisMode" json:"ry_axis,omitempty"`
	RzAxis             ArmCartesianCommand_Request_AxisMode             `protobuf:"varint,13,opt,name=rz_axis,json=rzAxis,proto3,enum=bosdyn.api.ArmCartesianCommand_Request_AxisMode" json:"rz_axis,omitempty"`
	// A force/torque trajectory for the tool expressed in the task frame.
	// This trajectory is optional if requesting a pure pose at the end-effector,
	// otherwise required for force or mixed force/position end-effector requests.
	WrenchTrajectoryInTask *WrenchTrajectory `protobuf:"bytes,14,opt,name=wrench_trajectory_in_task,json=wrenchTrajectoryInTask,proto3" json:"wrench_trajectory_in_task,omitempty"`
}

func (x *ArmCartesianCommand_Request) Reset() {
	*x = ArmCartesianCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmCartesianCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmCartesianCommand_Request) ProtoMessage() {}

func (x *ArmCartesianCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmCartesianCommand_Request.ProtoReflect.Descriptor instead.
func (*ArmCartesianCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ArmCartesianCommand_Request) GetRootFrameName() string {
	if x != nil {
		return x.RootFrameName
	}
	return ""
}

func (x *ArmCartesianCommand_Request) GetWristTformTool() *SE3Pose {
	if x != nil {
		return x.WristTformTool
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetRootTformTask() *SE3Pose {
	if x != nil {
		return x.RootTformTask
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetPoseTrajectoryInTask() *SE3Trajectory {
	if x != nil {
		return x.PoseTrajectoryInTask
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetMaximumAcceleration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumAcceleration
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetMaxLinearVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLinearVelocity
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetMaxAngularVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxAngularVelocity
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetMaxPosTrackingError() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxPosTrackingError
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetMaxRotTrackingError() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxRotTrackingError
	}
	return nil
}

func (m *ArmCartesianCommand_Request) GetJointConfiguration() isArmCartesianCommand_Request_JointConfiguration {
	if m != nil {
		return m.JointConfiguration
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetForceRemainNearCurrentJointConfiguration() bool {
	if x, ok := x.GetJointConfiguration().(*ArmCartesianCommand_Request_ForceRemainNearCurrentJointConfiguration); ok {
		return x.ForceRemainNearCurrentJointConfiguration
	}
	return false
}

func (x *ArmCartesianCommand_Request) GetPreferredJointConfiguration() *ArmJointPosition {
	if x, ok := x.GetJointConfiguration().(*ArmCartesianCommand_Request_PreferredJointConfiguration); ok {
		return x.PreferredJointConfiguration
	}
	return nil
}

func (x *ArmCartesianCommand_Request) GetXAxis() ArmCartesianCommand_Request_AxisMode {
	if x != nil {
		return x.XAxis
	}
	return ArmCartesianCommand_Request_AXIS_MODE_POSITION
}

func (x *ArmCartesianCommand_Request) GetYAxis() ArmCartesianCommand_Request_AxisMode {
	if x != nil {
		return x.YAxis
	}
	return ArmCartesianCommand_Request_AXIS_MODE_POSITION
}

func (x *ArmCartesianCommand_Request) GetZAxis() ArmCartesianCommand_Request_AxisMode {
	if x != nil {
		return x.ZAxis
	}
	return ArmCartesianCommand_Request_AXIS_MODE_POSITION
}

func (x *ArmCartesianCommand_Request) GetRxAxis() ArmCartesianCommand_Request_AxisMode {
	if x != nil {
		return x.RxAxis
	}
	return ArmCartesianCommand_Request_AXIS_MODE_POSITION
}

func (x *ArmCartesianCommand_Request) GetRyAxis() ArmCartesianCommand_Request_AxisMode {
	if x != nil {
		return x.RyAxis
	}
	return ArmCartesianCommand_Request_AXIS_MODE_POSITION
}

func (x *ArmCartesianCommand_Request) GetRzAxis() ArmCartesianCommand_Request_AxisMode {
	if x != nil {
		return x.RzAxis
	}
	return ArmCartesianCommand_Request_AXIS_MODE_POSITION
}

func (x *ArmCartesianCommand_Request) GetWrenchTrajectoryInTask() *WrenchTrajectory {
	if x != nil {
		return x.WrenchTrajectoryInTask
	}
	return nil
}

type isArmCartesianCommand_Request_JointConfiguration interface {
	isArmCartesianCommand_Request_JointConfiguration()
}

type ArmCartesianCommand_Request_ForceRemainNearCurrentJointConfiguration struct {
	ForceRemainNearCurrentJointConfiguration bool `protobuf:"varint,17,opt,name=force_remain_near_current_joint_configuration,json=forceRemainNearCurrentJointConfiguration,proto3,oneof"`
}

type ArmCartesianCommand_Request_PreferredJointConfiguration struct {
	PreferredJointConfiguration *ArmJointPosition `protobuf:"bytes,18,opt,name=preferred_joint_configuration,json=preferredJointConfiguration,proto3,oneof"`
}

func (*ArmCartesianCommand_Request_ForceRemainNearCurrentJointConfiguration) isArmCartesianCommand_Request_JointConfiguration() {
}

func (*ArmCartesianCommand_Request_PreferredJointConfiguration) isArmCartesianCommand_Request_JointConfiguration() {
}

type ArmCartesianCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the pose trajectory.
	Status ArmCartesianCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.ArmCartesianCommand_Feedback_Status" json:"status,omitempty"`
	// Current linear tracking error of the tool frame [meters].
	MeasuredPosTrackingError float64 `protobuf:"fixed64,2,opt,name=measured_pos_tracking_error,json=measuredPosTrackingError,proto3" json:"measured_pos_tracking_error,omitempty"`
	// Current rotational tracking error of the tool frame [radians].
	MeasuredRotTrackingError float64 `protobuf:"fixed64,3,opt,name=measured_rot_tracking_error,json=measuredRotTrackingError,proto3" json:"measured_rot_tracking_error,omitempty"`
	// Linear distance from the tool to the tool trajectory's end point [meters].
	MeasuredPosDistanceToGoal float64 `protobuf:"fixed64,4,opt,name=measured_pos_distance_to_goal,json=measuredPosDistanceToGoal,proto3" json:"measured_pos_distance_to_goal,omitempty"`
	// Rotational distance from the tool to the trajectory's end point [radians].
	MeasuredRotDistanceToGoal float64 `protobuf:"fixed64,5,opt,name=measured_rot_distance_to_goal,json=measuredRotDistanceToGoal,proto3" json:"measured_rot_distance_to_goal,omitempty"`
}

func (x *ArmCartesianCommand_Feedback) Reset() {
	*x = ArmCartesianCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmCartesianCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmCartesianCommand_Feedback) ProtoMessage() {}

func (x *ArmCartesianCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmCartesianCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ArmCartesianCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ArmCartesianCommand_Feedback) GetStatus() ArmCartesianCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return ArmCartesianCommand_Feedback_STATUS_UNKNOWN
}

func (x *ArmCartesianCommand_Feedback) GetMeasuredPosTrackingError() float64 {
	if x != nil {
		return x.MeasuredPosTrackingError
	}
	return 0
}

func (x *ArmCartesianCommand_Feedback) GetMeasuredRotTrackingError() float64 {
	if x != nil {
		return x.MeasuredRotTrackingError
	}
	return 0
}

func (x *ArmCartesianCommand_Feedback) GetMeasuredPosDistanceToGoal() float64 {
	if x != nil {
		return x.MeasuredPosDistanceToGoal
	}
	return 0
}

func (x *ArmCartesianCommand_Feedback) GetMeasuredRotDistanceToGoal() float64 {
	if x != nil {
		return x.MeasuredRotDistanceToGoal
	}
	return 0
}

type ArmJointMoveCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: Sending a single point empty trajectory will cause the arm to freeze in place. This
	// is an easy way to lock the arm in its current configuration.
	Trajectory *ArmJointTrajectory `protobuf:"bytes,1,opt,name=trajectory,proto3" json:"trajectory,omitempty"`
}

func (x *ArmJointMoveCommand_Request) Reset() {
	*x = ArmJointMoveCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmJointMoveCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmJointMoveCommand_Request) ProtoMessage() {}

func (x *ArmJointMoveCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmJointMoveCommand_Request.ProtoReflect.Descriptor instead.
func (*ArmJointMoveCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ArmJointMoveCommand_Request) GetTrajectory() *ArmJointTrajectory {
	if x != nil {
		return x.Trajectory
	}
	return nil
}

type ArmJointMoveCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the request.
	Status ArmJointMoveCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.ArmJointMoveCommand_Feedback_Status" json:"status,omitempty"`
	// Current status of the trajectory planner.
	PlannerStatus ArmJointMoveCommand_Feedback_PlannerStatus `protobuf:"varint,2,opt,name=planner_status,json=plannerStatus,proto3,enum=bosdyn.api.ArmJointMoveCommand_Feedback_PlannerStatus" json:"planner_status,omitempty"`
	// Based on the user trajectory, the planned knot points that obey acceleration and
	// velocity constraints. If these knot points don't match the requested knot points,
	// consider increasing velocity/acceleration limits, and/or staying further away from
	// joint position limits. In situations where we've modified you last point, we append
	// a minimum time trajectory (that obeys the velocity and acceleration limits) from the
	// planner's final point to the requested final point. This means that the length of
	// planned_points may be one point larger than the requested.
	PlannedPoints []*ArmJointTrajectoryPoint `protobuf:"bytes,3,rep,name=planned_points,json=plannedPoints,proto3" json:"planned_points,omitempty"`
	// Returns amount of time remaining until the joints are at the goal position.  For
	// multiple point trajectories, this is the time remaining to the final point.
	TimeToGoal *durationpb.Duration `protobuf:"bytes,4,opt,name=time_to_goal,json=timeToGoal,proto3" json:"time_to_goal,omitempty"`
}

func (x *ArmJointMoveCommand_Feedback) Reset() {
	*x = ArmJointMoveCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmJointMoveCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmJointMoveCommand_Feedback) ProtoMessage() {}

func (x *ArmJointMoveCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmJointMoveCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ArmJointMoveCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{5, 1}
}

func (x *ArmJointMoveCommand_Feedback) GetStatus() ArmJointMoveCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return ArmJointMoveCommand_Feedback_STATUS_UNKNOWN
}

func (x *ArmJointMoveCommand_Feedback) GetPlannerStatus() ArmJointMoveCommand_Feedback_PlannerStatus {
	if x != nil {
		return x.PlannerStatus
	}
	return ArmJointMoveCommand_Feedback_PLANNER_STATUS_UNKNOWN
}

func (x *ArmJointMoveCommand_Feedback) GetPlannedPoints() []*ArmJointTrajectoryPoint {
	if x != nil {
		return x.PlannedPoints
	}
	return nil
}

func (x *ArmJointMoveCommand_Feedback) GetTimeToGoal() *durationpb.Duration {
	if x != nil {
		return x.TimeToGoal
	}
	return nil
}

type GazeCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Point(s) to look at expressed in frame1.
	TargetTrajectoryInFrame1 *Vec3Trajectory `protobuf:"bytes,1,opt,name=target_trajectory_in_frame1,json=targetTrajectoryInFrame1,proto3" json:"target_trajectory_in_frame1,omitempty"`
	Frame1Name               string          `protobuf:"bytes,2,opt,name=frame1_name,json=frame1Name,proto3" json:"frame1_name,omitempty"`
	// Optional, desired pose of the tool expressed in frame2.  Will be constrained to 'look at'
	// the target regardless of the requested orientation.
	ToolTrajectoryInFrame2 *SE3Trajectory `protobuf:"bytes,10,opt,name=tool_trajectory_in_frame2,json=toolTrajectoryInFrame2,proto3" json:"tool_trajectory_in_frame2,omitempty"`
	Frame2Name             string         `protobuf:"bytes,11,opt,name=frame2_name,json=frame2Name,proto3" json:"frame2_name,omitempty"`
	// The transformation of the tool pose relative to the parent link (wrist).
	// If the field is left unset, the transform will default to:
	//      The position is wrist_tform_hand.position() [20 cm translation in wrist x].
	//      The rotation is wrist_tform_hand_camera.rotation() [-9 degree pitch about wrist y].
	WristTformTool *SE3Pose `protobuf:"bytes,9,opt,name=wrist_tform_tool,json=wristTformTool,proto3" json:"wrist_tform_tool,omitempty"`
	// Optional velocity to move the target along the shortest path from the gaze's starting
	// position to the first point in the target trajectory.
	TargetTrajectoryInitialVelocity *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=target_trajectory_initial_velocity,json=targetTrajectoryInitialVelocity,proto3" json:"target_trajectory_initial_velocity,omitempty"`
	// Optional Maximum acceleration magnitude of the end-effector.
	// Valid ranges (0, 20]
	MaximumAcceleration *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=maximum_acceleration,json=maximumAcceleration,proto3" json:"maximum_acceleration,omitempty"`
	// Optional Maximum linear velocity magnitude of the end-effector. (m/s)
	MaxLinearVelocity *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=max_linear_velocity,json=maxLinearVelocity,proto3" json:"max_linear_velocity,omitempty"`
	// Optional Maximum angular velocity magnitude of the end-effector. (rad/s)
	MaxAngularVelocity *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=max_angular_velocity,json=maxAngularVelocity,proto3" json:"max_angular_velocity,omitempty"`
}

func (x *GazeCommand_Request) Reset() {
	*x = GazeCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GazeCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GazeCommand_Request) ProtoMessage() {}

func (x *GazeCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GazeCommand_Request.ProtoReflect.Descriptor instead.
func (*GazeCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{10, 0}
}

func (x *GazeCommand_Request) GetTargetTrajectoryInFrame1() *Vec3Trajectory {
	if x != nil {
		return x.TargetTrajectoryInFrame1
	}
	return nil
}

func (x *GazeCommand_Request) GetFrame1Name() string {
	if x != nil {
		return x.Frame1Name
	}
	return ""
}

func (x *GazeCommand_Request) GetToolTrajectoryInFrame2() *SE3Trajectory {
	if x != nil {
		return x.ToolTrajectoryInFrame2
	}
	return nil
}

func (x *GazeCommand_Request) GetFrame2Name() string {
	if x != nil {
		return x.Frame2Name
	}
	return ""
}

func (x *GazeCommand_Request) GetWristTformTool() *SE3Pose {
	if x != nil {
		return x.WristTformTool
	}
	return nil
}

func (x *GazeCommand_Request) GetTargetTrajectoryInitialVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TargetTrajectoryInitialVelocity
	}
	return nil
}

func (x *GazeCommand_Request) GetMaximumAcceleration() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaximumAcceleration
	}
	return nil
}

func (x *GazeCommand_Request) GetMaxLinearVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxLinearVelocity
	}
	return nil
}

func (x *GazeCommand_Request) GetMaxAngularVelocity() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxAngularVelocity
	}
	return nil
}

type GazeCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the command.
	Status GazeCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.GazeCommand_Feedback_Status" json:"status,omitempty"`
	// If we are gazing at the target
	// Rotation from the current gaze point to the trajectory's end [radians]
	GazingAtTarget               bool    `protobuf:"varint,2,opt,name=gazing_at_target,json=gazingAtTarget,proto3" json:"gazing_at_target,omitempty"`
	GazeToTargetRotationMeasured float32 `protobuf:"fixed32,5,opt,name=gaze_to_target_rotation_measured,json=gazeToTargetRotationMeasured,proto3" json:"gaze_to_target_rotation_measured,omitempty"`
	// If the hand's position is at the goal.
	// Distance from the hand's current position to the trajectory's end [meters]
	HandPositionAtGoal         bool    `protobuf:"varint,3,opt,name=hand_position_at_goal,json=handPositionAtGoal,proto3" json:"hand_position_at_goal,omitempty"`
	HandDistanceToGoalMeasured float32 `protobuf:"fixed32,6,opt,name=hand_distance_to_goal_measured,json=handDistanceToGoalMeasured,proto3" json:"hand_distance_to_goal_measured,omitempty"`
	// If the hand's roll is at the goal.
	// Rotation from the current hand position to the desired roll at the trajectory's end
	// [radians]
	HandRollAtGoal               bool    `protobuf:"varint,4,opt,name=hand_roll_at_goal,json=handRollAtGoal,proto3" json:"hand_roll_at_goal,omitempty"`
	HandRollToTargetRollMeasured float32 `protobuf:"fixed32,7,opt,name=hand_roll_to_target_roll_measured,json=handRollToTargetRollMeasured,proto3" json:"hand_roll_to_target_roll_measured,omitempty"`
}

func (x *GazeCommand_Feedback) Reset() {
	*x = GazeCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GazeCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GazeCommand_Feedback) ProtoMessage() {}

func (x *GazeCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GazeCommand_Feedback.ProtoReflect.Descriptor instead.
func (*GazeCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{10, 1}
}

func (x *GazeCommand_Feedback) GetStatus() GazeCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return GazeCommand_Feedback_STATUS_UNKNOWN
}

func (x *GazeCommand_Feedback) GetGazingAtTarget() bool {
	if x != nil {
		return x.GazingAtTarget
	}
	return false
}

func (x *GazeCommand_Feedback) GetGazeToTargetRotationMeasured() float32 {
	if x != nil {
		return x.GazeToTargetRotationMeasured
	}
	return 0
}

func (x *GazeCommand_Feedback) GetHandPositionAtGoal() bool {
	if x != nil {
		return x.HandPositionAtGoal
	}
	return false
}

func (x *GazeCommand_Feedback) GetHandDistanceToGoalMeasured() float32 {
	if x != nil {
		return x.HandDistanceToGoalMeasured
	}
	return 0
}

func (x *GazeCommand_Feedback) GetHandRollAtGoal() bool {
	if x != nil {
		return x.HandRollAtGoal
	}
	return false
}

func (x *GazeCommand_Feedback) GetHandRollToTargetRollMeasured() float32 {
	if x != nil {
		return x.HandRollToTargetRollMeasured
	}
	return 0
}

type ArmStopCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmStopCommand_Request) Reset() {
	*x = ArmStopCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmStopCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmStopCommand_Request) ProtoMessage() {}

func (x *ArmStopCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmStopCommand_Request.ProtoReflect.Descriptor instead.
func (*ArmStopCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{11, 0}
}

type ArmStopCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmStopCommand_Feedback) Reset() {
	*x = ArmStopCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_arm_command_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmStopCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmStopCommand_Feedback) ProtoMessage() {}

func (x *ArmStopCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_arm_command_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmStopCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ArmStopCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_arm_command_proto_rawDescGZIP(), []int{11, 1}
}

var File_bosdyn_api_arm_command_proto protoreflect.FileDescriptor

var file_bosdyn_api_arm_command_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x72, 0x6d,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x1e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x0b, 0x0a, 0x0a, 0x41, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x1a, 0xb8, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5d,
	0x0a, 0x15, 0x61, 0x72, 0x6d, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x43, 0x61,
	0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x72,
	0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5e, 0x0a,
	0x16, 0x61, 0x72, 0x6d, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x72, 0x6d, 0x4a, 0x6f, 0x69,
	0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x6b, 0x0a,
	0x1a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x41, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x17, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x5a, 0x0a, 0x14, 0x61, 0x72,
	0x6d, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x12, 0x61, 0x72, 0x6d, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4b, 0x0a, 0x10, 0x61, 0x72, 0x6d, 0x5f, 0x67, 0x61,
	0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61,
	0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x72, 0x6d, 0x47, 0x61, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x5f,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x44, 0x72,
	0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x61, 0x72, 0x6d, 0x44, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x72, 0x6d, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0xe7, 0x05,
	0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x60, 0x0a, 0x16, 0x61, 0x72,
	0x6d, 0x5f, 0x63, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65,
	0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65,
	0x73, 0x69, 0x61, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x61, 0x0a, 0x17,
	0x61, 0x72, 0x6d, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x14, 0x61, 0x72, 0x6d, 0x4a, 0x6f,
	0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x6e, 0x0a, 0x1b, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x61, 0x72, 0x6d, 0x5f, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x18, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x72, 0x6d, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x5d, 0x0a, 0x15, 0x61, 0x72, 0x6d, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f,
	0x66, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x13, 0x61, 0x72, 0x6d, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4e,
	0x0a, 0x11, 0x61, 0x72, 0x6d, 0x5f, 0x67, 0x61, 0x7a, 0x65, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x61,
	0x72, 0x6d, 0x47, 0x61, 0x7a, 0x65, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x51,
	0x0a, 0x11, 0x61, 0x72, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x66, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x0f, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x51, 0x0a, 0x11, 0x61, 0x72, 0x6d, 0x5f, 0x64, 0x72, 0x61, 0x67, 0x5f, 0x66, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x44, 0x72, 0x61,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x72, 0x6d, 0x44, 0x72, 0x61, 0x67, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x45, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x66,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x64, 0x0a, 0x09, 0x41, 0x72, 0x6d, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x57, 0x0a, 0x1a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x17, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x6f, 0x64,
	0x79, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x72, 0x22, 0xa5, 0x06,
	0x0a, 0x12, 0x41, 0x72, 0x6d, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x1a, 0xaf, 0x01, 0x0a, 0x13, 0x43, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x72,
	0x69, 0x63, 0x61, 0x6c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0f,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72,
	0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x1a, 0x79, 0x0a, 0x11, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73,
	0x69, 0x61, 0x6e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x16, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x13, 0x76, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x1a, 0xd5, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a,
	0x14, 0x63, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x79, 0x6c, 0x69,
	0x6e, 0x64, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x48,
	0x00, 0x52, 0x13, 0x63, 0x79, 0x6c, 0x69, 0x6e, 0x64, 0x72, 0x69, 0x63, 0x61, 0x6c, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x61, 0x0a, 0x12, 0x63, 0x61, 0x72, 0x74, 0x65, 0x73,
	0x69, 0x61, 0x6e, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x41, 0x72, 0x6d, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x56, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61,
	0x6e, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x65, 0x0a, 0x28, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6f, 0x66,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x74, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x5f, 0x69, 0x6e,
	0x5f, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x21, 0x61,
	0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x4f, 0x66,
	0x48, 0x61, 0x6e, 0x64, 0x52, 0x74, 0x4f, 0x64, 0x6f, 0x6d, 0x49, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x12, 0x4f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x9a, 0x03, 0x0a, 0x18, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41,
	0x72, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x1a, 0x55, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x41, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xc4, 0x01, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x41, 0x72, 0x6d, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x6a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4c, 0x4c, 0x45,
	0x44, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x03,
	0x22, 0x60, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e,
	0x53, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x59, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x57,
	0x10, 0x03, 0x22, 0xd3, 0x0f, 0x0a, 0x13, 0x41, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73,
	0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0xcc, 0x0b, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x72, 0x6f, 0x6f, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x10, 0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x6f,
	0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0e, 0x77,
	0x72, 0x69, 0x73, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x3b, 0x0a,
	0x0f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f,
	0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x50, 0x0a, 0x17, 0x70, 0x6f,
	0x73, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e,
	0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x54, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x65, 0x54, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x4f, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e,
	0x65, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63,
	0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75,
	0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x51, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x50, 0x6f,
	0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x51,
	0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x61,
	0x78, 0x52, 0x6f, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x61, 0x0a, 0x2d, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x6a,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x28, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x65, 0x61, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x1d, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1b, 0x70, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x06, 0x78, 0x5f, 0x61, 0x78,
	0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69,
	0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x78, 0x41, 0x78, 0x69,
	0x73, 0x12, 0x47, 0x0a, 0x06, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41,
	0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x79, 0x41, 0x78, 0x69, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x7a, 0x5f,
	0x61, 0x78, 0x69, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65,
	0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x7a, 0x41,
	0x78, 0x69, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x41, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x78,
	0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x78, 0x41, 0x78, 0x69, 0x73, 0x12, 0x49,
	0x0a, 0x07, 0x72, 0x79, 0x5f, 0x61, 0x78, 0x69, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d,
	0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x06, 0x72, 0x79, 0x41, 0x78, 0x69, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x72, 0x7a, 0x5f,
	0x61, 0x78, 0x69, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65,
	0x73, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x72, 0x7a,
	0x41, 0x78, 0x69, 0x73, 0x12, 0x57, 0x0a, 0x19, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x5f, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x73,
	0x6b, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61, 0x6a, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x16, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x54, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x37, 0x0a,
	0x08, 0x41, 0x78, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x58, 0x49,
	0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x58, 0x49, 0x53, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x43, 0x45, 0x10, 0x01, 0x42, 0x15, 0x0a, 0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x04, 0x08,
	0x01, 0x10, 0x02, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08, 0x1a, 0xec, 0x03, 0x0a, 0x08, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x43, 0x61, 0x72, 0x74, 0x65, 0x73, 0x69, 0x61, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x3d, 0x0a, 0x1b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f,
	0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3d,
	0x0a, 0x1b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x74, 0x5f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x18, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x52, 0x6f, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x40, 0x0a,
	0x1d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f,
	0x73, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x47, 0x6f, 0x61, 0x6c, 0x12,
	0x40, 0x0a, 0x1d, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x74, 0x5f,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x19, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64,
	0x52, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x47, 0x6f, 0x61,
	0x6c, 0x22, 0x94, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x45,
	0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0xea, 0x04, 0x0a, 0x13, 0x41, 0x72, 0x6d,
	0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x1a, 0x49, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d,
	0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x87, 0x04, 0x0a, 0x08,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x6f,
	0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x4d,
	0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74,
	0x69, 0x6d, 0x65, 0x54, 0x6f, 0x47, 0x6f, 0x61, 0x6c, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x02, 0x22, 0x7f, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x4c, 0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x4c,
	0x41, 0x4e, 0x4e, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69,
	0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x68,
	0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x68, 0x30, 0x12, 0x2e, 0x0a, 0x03, 0x73, 0x68,
	0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x68, 0x31, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6c,
	0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6c, 0x30, 0x12, 0x2e, 0x0a, 0x03, 0x65, 0x6c,
	0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6c, 0x31, 0x12, 0x2e, 0x0a, 0x03, 0x77, 0x72,
	0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x77, 0x72, 0x30, 0x12, 0x2e, 0x0a, 0x03, 0x77, 0x72,
	0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x77, 0x72, 0x31, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x41,
	0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x2e, 0x0a, 0x03, 0x73, 0x68, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x68, 0x30, 0x12,
	0x2e, 0x0a, 0x03, 0x73, 0x68, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x73, 0x68, 0x31, 0x12,
	0x2e, 0x0a, 0x03, 0x65, 0x6c, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6c, 0x30, 0x12,
	0x2e, 0x0a, 0x03, 0x65, 0x6c, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x65, 0x6c, 0x31, 0x12,
	0x2e, 0x0a, 0x03, 0x77, 0x72, 0x30, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x77, 0x72, 0x30, 0x12,
	0x2e, 0x0a, 0x03, 0x77, 0x72, 0x31, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x77, 0x72, 0x31, 0x22,
	0xda, 0x01, 0x0a, 0x17, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6a,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f,
	0x69, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x4b, 0x0a, 0x14, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x69,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x22, 0xae, 0x02, 0x0a,
	0x12, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x41, 0x72, 0x6d, 0x4a, 0x6f, 0x69, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x76,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x14,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd6, 0x09,
	0x0a, 0x0b, 0x47, 0x61, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0xa1, 0x05,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x1b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33,
	0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x18, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x31, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x31, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x31, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x19, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x72,
	0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x52, 0x16, 0x74, 0x6f, 0x6f, 0x6c, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x32, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x32, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x10,
	0x77, 0x72, 0x69, 0x73, 0x74, 0x5f, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x74, 0x6f, 0x6f, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x33, 0x50, 0x6f, 0x73, 0x65, 0x52, 0x0e, 0x77, 0x72, 0x69,
	0x73, 0x74, 0x54, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x6f, 0x6f, 0x6c, 0x12, 0x69, 0x0a, 0x22, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x1f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x56, 0x65,
	0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4f, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75,
	0x6d, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x63, 0x63, 0x65, 0x6c,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x5f, 0x61, 0x6e, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x41, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x56, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x1a, 0xa2, 0x04, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x3f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x61, 0x7a, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x28, 0x0a, 0x10, 0x67, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x74, 0x5f, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x67, 0x61, 0x7a, 0x69, 0x6e,
	0x67, 0x41, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x46, 0x0a, 0x20, 0x67, 0x61, 0x7a,
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x1c, 0x67, 0x61, 0x7a, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x64, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x68, 0x61, 0x6e, 0x64, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74,
	0x47, 0x6f, 0x61, 0x6c, 0x12, 0x42, 0x0a, 0x1e, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x5f, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x68, 0x61,
	0x6e, 0x64, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x6f, 0x47, 0x6f, 0x61, 0x6c,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x68, 0x61, 0x6e, 0x64,
	0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x61, 0x74, 0x5f, 0x67, 0x6f, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x68, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x41, 0x74, 0x47,
	0x6f, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x21, 0x68, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x6f, 0x6c, 0x6c,
	0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x6c, 0x5f,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1c,
	0x68, 0x61, 0x6e, 0x64, 0x52, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x22, 0x78, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f, 0x4f,
	0x4c, 0x5f, 0x54, 0x52, 0x41, 0x4a, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x4c, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x27, 0x0a, 0x0e, 0x41, 0x72, 0x6d, 0x53, 0x74, 0x6f,
	0x70, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x42,
	0x44, 0x42, 0x0f, 0x41, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_arm_command_proto_rawDescOnce sync.Once
	file_bosdyn_api_arm_command_proto_rawDescData = file_bosdyn_api_arm_command_proto_rawDesc
)

func file_bosdyn_api_arm_command_proto_rawDescGZIP() []byte {
	file_bosdyn_api_arm_command_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_arm_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_arm_command_proto_rawDescData)
	})
	return file_bosdyn_api_arm_command_proto_rawDescData
}

var file_bosdyn_api_arm_command_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_bosdyn_api_arm_command_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_bosdyn_api_arm_command_proto_goTypes = []interface{}{
	(NamedArmPositionsCommand_Positions)(0),         // 0: bosdyn.api.NamedArmPositionsCommand.Positions
	(NamedArmPositionsCommand_Feedback_Status)(0),   // 1: bosdyn.api.NamedArmPositionsCommand.Feedback.Status
	(ArmCartesianCommand_Request_AxisMode)(0),       // 2: bosdyn.api.ArmCartesianCommand.Request.AxisMode
	(ArmCartesianCommand_Feedback_Status)(0),        // 3: bosdyn.api.ArmCartesianCommand.Feedback.Status
	(ArmJointMoveCommand_Feedback_Status)(0),        // 4: bosdyn.api.ArmJointMoveCommand.Feedback.Status
	(ArmJointMoveCommand_Feedback_PlannerStatus)(0), // 5: bosdyn.api.ArmJointMoveCommand.Feedback.PlannerStatus
	(GazeCommand_Feedback_Status)(0),                // 6: bosdyn.api.GazeCommand.Feedback.Status
	(*ArmCommand)(nil),                              // 7: bosdyn.api.ArmCommand
	(*ArmParams)(nil),                               // 8: bosdyn.api.ArmParams
	(*ArmVelocityCommand)(nil),                      // 9: bosdyn.api.ArmVelocityCommand
	(*NamedArmPositionsCommand)(nil),                // 10: bosdyn.api.NamedArmPositionsCommand
	(*ArmCartesianCommand)(nil),                     // 11: bosdyn.api.ArmCartesianCommand
	(*ArmJointMoveCommand)(nil),                     // 12: bosdyn.api.ArmJointMoveCommand
	(*ArmJointPosition)(nil),                        // 13: bosdyn.api.ArmJointPosition
	(*ArmJointVelocity)(nil),                        // 14: bosdyn.api.ArmJointVelocity
	(*ArmJointTrajectoryPoint)(nil),                 // 15: bosdyn.api.ArmJointTrajectoryPoint
	(*ArmJointTrajectory)(nil),                      // 16: bosdyn.api.ArmJointTrajectory
	(*GazeCommand)(nil),                             // 17: bosdyn.api.GazeCommand
	(*ArmStopCommand)(nil),                          // 18: bosdyn.api.ArmStopCommand
	(*ArmCommand_Request)(nil),                      // 19: bosdyn.api.ArmCommand.Request
	(*ArmCommand_Feedback)(nil),                     // 20: bosdyn.api.ArmCommand.Feedback
	(*ArmVelocityCommand_CylindricalVelocity)(nil),  // 21: bosdyn.api.ArmVelocityCommand.CylindricalVelocity
	(*ArmVelocityCommand_CartesianVelocity)(nil),    // 22: bosdyn.api.ArmVelocityCommand.CartesianVelocity
	(*ArmVelocityCommand_Request)(nil),              // 23: bosdyn.api.ArmVelocityCommand.Request
	(*ArmVelocityCommand_Feedback)(nil),             // 24: bosdyn.api.ArmVelocityCommand.Feedback
	(*NamedArmPositionsCommand_Request)(nil),        // 25: bosdyn.api.NamedArmPositionsCommand.Request
	(*NamedArmPositionsCommand_Feedback)(nil),       // 26: bosdyn.api.NamedArmPositionsCommand.Feedback
	(*ArmCartesianCommand_Request)(nil),             // 27: bosdyn.api.ArmCartesianCommand.Request
	(*ArmCartesianCommand_Feedback)(nil),            // 28: bosdyn.api.ArmCartesianCommand.Feedback
	(*ArmJointMoveCommand_Request)(nil),             // 29: bosdyn.api.ArmJointMoveCommand.Request
	(*ArmJointMoveCommand_Feedback)(nil),            // 30: bosdyn.api.ArmJointMoveCommand.Feedback
	(*GazeCommand_Request)(nil),                     // 31: bosdyn.api.GazeCommand.Request
	(*GazeCommand_Feedback)(nil),                    // 32: bosdyn.api.GazeCommand.Feedback
	(*ArmStopCommand_Request)(nil),                  // 33: bosdyn.api.ArmStopCommand.Request
	(*ArmStopCommand_Feedback)(nil),                 // 34: bosdyn.api.ArmStopCommand.Feedback
	(*wrapperspb.BoolValue)(nil),                    // 35: google.protobuf.BoolValue
	(*wrapperspb.DoubleValue)(nil),                  // 36: google.protobuf.DoubleValue
	(*durationpb.Duration)(nil),                     // 37: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),                   // 38: google.protobuf.Timestamp
	(*ArmDragCommand_Request)(nil),                  // 39: bosdyn.api.ArmDragCommand.Request
	(*ArmDragCommand_Feedback)(nil),                 // 40: bosdyn.api.ArmDragCommand.Feedback
	(RobotCommandFeedbackStatus_Status)(0),          // 41: bosdyn.api.RobotCommandFeedbackStatus.Status
	(*CylindricalCoordinate)(nil),                   // 42: bosdyn.api.CylindricalCoordinate
	(*Vec3)(nil),                                    // 43: bosdyn.api.Vec3
	(*SE3Pose)(nil),                                 // 44: bosdyn.api.SE3Pose
	(*SE3Trajectory)(nil),                           // 45: bosdyn.api.SE3Trajectory
	(*WrenchTrajectory)(nil),                        // 46: bosdyn.api.WrenchTrajectory
	(*Vec3Trajectory)(nil),                          // 47: bosdyn.api.Vec3Trajectory
}
var file_bosdyn_api_arm_command_proto_depIdxs = []int32{
	35, // 0: bosdyn.api.ArmParams.disable_body_force_limiter:type_name -> google.protobuf.BoolValue
	36, // 1: bosdyn.api.ArmJointPosition.sh0:type_name -> google.protobuf.DoubleValue
	36, // 2: bosdyn.api.ArmJointPosition.sh1:type_name -> google.protobuf.DoubleValue
	36, // 3: bosdyn.api.ArmJointPosition.el0:type_name -> google.protobuf.DoubleValue
	36, // 4: bosdyn.api.ArmJointPosition.el1:type_name -> google.protobuf.DoubleValue
	36, // 5: bosdyn.api.ArmJointPosition.wr0:type_name -> google.protobuf.DoubleValue
	36, // 6: bosdyn.api.ArmJointPosition.wr1:type_name -> google.protobuf.DoubleValue
	36, // 7: bosdyn.api.ArmJointVelocity.sh0:type_name -> google.protobuf.DoubleValue
	36, // 8: bosdyn.api.ArmJointVelocity.sh1:type_name -> google.protobuf.DoubleValue
	36, // 9: bosdyn.api.ArmJointVelocity.el0:type_name -> google.protobuf.DoubleValue
	36, // 10: bosdyn.api.ArmJointVelocity.el1:type_name -> google.protobuf.DoubleValue
	36, // 11: bosdyn.api.ArmJointVelocity.wr0:type_name -> google.protobuf.DoubleValue
	36, // 12: bosdyn.api.ArmJointVelocity.wr1:type_name -> google.protobuf.DoubleValue
	13, // 13: bosdyn.api.ArmJointTrajectoryPoint.position:type_name -> bosdyn.api.ArmJointPosition
	14, // 14: bosdyn.api.ArmJointTrajectoryPoint.velocity:type_name -> bosdyn.api.ArmJointVelocity
	37, // 15: bosdyn.api.ArmJointTrajectoryPoint.time_since_reference:type_name -> google.protobuf.Duration
	15, // 16: bosdyn.api.ArmJointTrajectory.points:type_name -> bosdyn.api.ArmJointTrajectoryPoint
	38, // 17: bosdyn.api.ArmJointTrajectory.reference_time:type_name -> google.protobuf.Timestamp
	36, // 18: bosdyn.api.ArmJointTrajectory.maximum_velocity:type_name -> google.protobuf.DoubleValue
	36, // 19: bosdyn.api.ArmJointTrajectory.maximum_acceleration:type_name -> google.protobuf.DoubleValue
	27, // 20: bosdyn.api.ArmCommand.Request.arm_cartesian_command:type_name -> bosdyn.api.ArmCartesianCommand.Request
	29, // 21: bosdyn.api.ArmCommand.Request.arm_joint_move_command:type_name -> bosdyn.api.ArmJointMoveCommand.Request
	25, // 22: bosdyn.api.ArmCommand.Request.named_arm_position_command:type_name -> bosdyn.api.NamedArmPositionsCommand.Request
	23, // 23: bosdyn.api.ArmCommand.Request.arm_velocity_command:type_name -> bosdyn.api.ArmVelocityCommand.Request
	31, // 24: bosdyn.api.ArmCommand.Request.arm_gaze_command:type_name -> bosdyn.api.GazeCommand.Request
	33, // 25: bosdyn.api.ArmCommand.Request.arm_stop_command:type_name -> bosdyn.api.ArmStopCommand.Request
	39, // 26: bosdyn.api.ArmCommand.Request.arm_drag_command:type_name -> bosdyn.api.ArmDragCommand.Request
	8,  // 27: bosdyn.api.ArmCommand.Request.params:type_name -> bosdyn.api.ArmParams
	28, // 28: bosdyn.api.ArmCommand.Feedback.arm_cartesian_feedback:type_name -> bosdyn.api.ArmCartesianCommand.Feedback
	30, // 29: bosdyn.api.ArmCommand.Feedback.arm_joint_move_feedback:type_name -> bosdyn.api.ArmJointMoveCommand.Feedback
	26, // 30: bosdyn.api.ArmCommand.Feedback.named_arm_position_feedback:type_name -> bosdyn.api.NamedArmPositionsCommand.Feedback
	24, // 31: bosdyn.api.ArmCommand.Feedback.arm_velocity_feedback:type_name -> bosdyn.api.ArmVelocityCommand.Feedback
	32, // 32: bosdyn.api.ArmCommand.Feedback.arm_gaze_feedback:type_name -> bosdyn.api.GazeCommand.Feedback
	34, // 33: bosdyn.api.ArmCommand.Feedback.arm_stop_feedback:type_name -> bosdyn.api.ArmStopCommand.Feedback
	40, // 34: bosdyn.api.ArmCommand.Feedback.arm_drag_feedback:type_name -> bosdyn.api.ArmDragCommand.Feedback
	41, // 35: bosdyn.api.ArmCommand.Feedback.status:type_name -> bosdyn.api.RobotCommandFeedbackStatus.Status
	42, // 36: bosdyn.api.ArmVelocityCommand.CylindricalVelocity.linear_velocity:type_name -> bosdyn.api.CylindricalCoordinate
	36, // 37: bosdyn.api.ArmVelocityCommand.CylindricalVelocity.max_linear_velocity:type_name -> google.protobuf.DoubleValue
	43, // 38: bosdyn.api.ArmVelocityCommand.CartesianVelocity.velocity_in_frame_name:type_name -> bosdyn.api.Vec3
	21, // 39: bosdyn.api.ArmVelocityCommand.Request.cylindrical_velocity:type_name -> bosdyn.api.ArmVelocityCommand.CylindricalVelocity
	22, // 40: bosdyn.api.ArmVelocityCommand.Request.cartesian_velocity:type_name -> bosdyn.api.ArmVelocityCommand.CartesianVelocity
	43, // 41: bosdyn.api.ArmVelocityCommand.Request.angular_velocity_of_hand_rt_odom_in_hand:type_name -> bosdyn.api.Vec3
	36, // 42: bosdyn.api.ArmVelocityCommand.Request.maximum_acceleration:type_name -> google.protobuf.DoubleValue
	38, // 43: bosdyn.api.ArmVelocityCommand.Request.end_time:type_name -> google.protobuf.Timestamp
	0,  // 44: bosdyn.api.NamedArmPositionsCommand.Request.position:type_name -> bosdyn.api.NamedArmPositionsCommand.Positions
	1,  // 45: bosdyn.api.NamedArmPositionsCommand.Feedback.status:type_name -> bosdyn.api.NamedArmPositionsCommand.Feedback.Status
	44, // 46: bosdyn.api.ArmCartesianCommand.Request.wrist_tform_tool:type_name -> bosdyn.api.SE3Pose
	44, // 47: bosdyn.api.ArmCartesianCommand.Request.root_tform_task:type_name -> bosdyn.api.SE3Pose
	45, // 48: bosdyn.api.ArmCartesianCommand.Request.pose_trajectory_in_task:type_name -> bosdyn.api.SE3Trajectory
	36, // 49: bosdyn.api.ArmCartesianCommand.Request.maximum_acceleration:type_name -> google.protobuf.DoubleValue
	36, // 50: bosdyn.api.ArmCartesianCommand.Request.max_linear_velocity:type_name -> google.protobuf.DoubleValue
	36, // 51: bosdyn.api.ArmCartesianCommand.Request.max_angular_velocity:type_name -> google.protobuf.DoubleValue
	36, // 52: bosdyn.api.ArmCartesianCommand.Request.max_pos_tracking_error:type_name -> google.protobuf.DoubleValue
	36, // 53: bosdyn.api.ArmCartesianCommand.Request.max_rot_tracking_error:type_name -> google.protobuf.DoubleValue
	13, // 54: bosdyn.api.ArmCartesianCommand.Request.preferred_joint_configuration:type_name -> bosdyn.api.ArmJointPosition
	2,  // 55: bosdyn.api.ArmCartesianCommand.Request.x_axis:type_name -> bosdyn.api.ArmCartesianCommand.Request.AxisMode
	2,  // 56: bosdyn.api.ArmCartesianCommand.Request.y_axis:type_name -> bosdyn.api.ArmCartesianCommand.Request.AxisMode
	2,  // 57: bosdyn.api.ArmCartesianCommand.Request.z_axis:type_name -> bosdyn.api.ArmCartesianCommand.Request.AxisMode
	2,  // 58: bosdyn.api.ArmCartesianCommand.Request.rx_axis:type_name -> bosdyn.api.ArmCartesianCommand.Request.AxisMode
	2,  // 59: bosdyn.api.ArmCartesianCommand.Request.ry_axis:type_name -> bosdyn.api.ArmCartesianCommand.Request.AxisMode
	2,  // 60: bosdyn.api.ArmCartesianCommand.Request.rz_axis:type_name -> bosdyn.api.ArmCartesianCommand.Request.AxisMode
	46, // 61: bosdyn.api.ArmCartesianCommand.Request.wrench_trajectory_in_task:type_name -> bosdyn.api.WrenchTrajectory
	3,  // 62: bosdyn.api.ArmCartesianCommand.Feedback.status:type_name -> bosdyn.api.ArmCartesianCommand.Feedback.Status
	16, // 63: bosdyn.api.ArmJointMoveCommand.Request.trajectory:type_name -> bosdyn.api.ArmJointTrajectory
	4,  // 64: bosdyn.api.ArmJointMoveCommand.Feedback.status:type_name -> bosdyn.api.ArmJointMoveCommand.Feedback.Status
	5,  // 65: bosdyn.api.ArmJointMoveCommand.Feedback.planner_status:type_name -> bosdyn.api.ArmJointMoveCommand.Feedback.PlannerStatus
	15, // 66: bosdyn.api.ArmJointMoveCommand.Feedback.planned_points:type_name -> bosdyn.api.ArmJointTrajectoryPoint
	37, // 67: bosdyn.api.ArmJointMoveCommand.Feedback.time_to_goal:type_name -> google.protobuf.Duration
	47, // 68: bosdyn.api.GazeCommand.Request.target_trajectory_in_frame1:type_name -> bosdyn.api.Vec3Trajectory
	45, // 69: bosdyn.api.GazeCommand.Request.tool_trajectory_in_frame2:type_name -> bosdyn.api.SE3Trajectory
	44, // 70: bosdyn.api.GazeCommand.Request.wrist_tform_tool:type_name -> bosdyn.api.SE3Pose
	36, // 71: bosdyn.api.GazeCommand.Request.target_trajectory_initial_velocity:type_name -> google.protobuf.DoubleValue
	36, // 72: bosdyn.api.GazeCommand.Request.maximum_acceleration:type_name -> google.protobuf.DoubleValue
	36, // 73: bosdyn.api.GazeCommand.Request.max_linear_velocity:type_name -> google.protobuf.DoubleValue
	36, // 74: bosdyn.api.GazeCommand.Request.max_angular_velocity:type_name -> google.protobuf.DoubleValue
	6,  // 75: bosdyn.api.GazeCommand.Feedback.status:type_name -> bosdyn.api.GazeCommand.Feedback.Status
	76, // [76:76] is the sub-list for method output_type
	76, // [76:76] is the sub-list for method input_type
	76, // [76:76] is the sub-list for extension type_name
	76, // [76:76] is the sub-list for extension extendee
	0,  // [0:76] is the sub-list for field type_name
}

func init() { file_bosdyn_api_arm_command_proto_init() }
func file_bosdyn_api_arm_command_proto_init() {
	if File_bosdyn_api_arm_command_proto != nil {
		return
	}
	file_bosdyn_api_basic_command_proto_init()
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_trajectory_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_arm_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmVelocityCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedArmPositionsCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmCartesianCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmJointMoveCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmJointPosition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmJointVelocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmJointTrajectoryPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmJointTrajectory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GazeCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmStopCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmVelocityCommand_CylindricalVelocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmVelocityCommand_CartesianVelocity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmVelocityCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmVelocityCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedArmPositionsCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedArmPositionsCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmCartesianCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmCartesianCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmJointMoveCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmJointMoveCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GazeCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GazeCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmStopCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_arm_command_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmStopCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_arm_command_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*ArmCommand_Request_ArmCartesianCommand)(nil),
		(*ArmCommand_Request_ArmJointMoveCommand)(nil),
		(*ArmCommand_Request_NamedArmPositionCommand)(nil),
		(*ArmCommand_Request_ArmVelocityCommand)(nil),
		(*ArmCommand_Request_ArmGazeCommand)(nil),
		(*ArmCommand_Request_ArmStopCommand)(nil),
		(*ArmCommand_Request_ArmDragCommand)(nil),
	}
	file_bosdyn_api_arm_command_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ArmCommand_Feedback_ArmCartesianFeedback)(nil),
		(*ArmCommand_Feedback_ArmJointMoveFeedback)(nil),
		(*ArmCommand_Feedback_NamedArmPositionFeedback)(nil),
		(*ArmCommand_Feedback_ArmVelocityFeedback)(nil),
		(*ArmCommand_Feedback_ArmGazeFeedback)(nil),
		(*ArmCommand_Feedback_ArmStopFeedback)(nil),
		(*ArmCommand_Feedback_ArmDragFeedback)(nil),
	}
	file_bosdyn_api_arm_command_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ArmVelocityCommand_Request_CylindricalVelocity)(nil),
		(*ArmVelocityCommand_Request_CartesianVelocity)(nil),
	}
	file_bosdyn_api_arm_command_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*ArmCartesianCommand_Request_ForceRemainNearCurrentJointConfiguration)(nil),
		(*ArmCartesianCommand_Request_PreferredJointConfiguration)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_arm_command_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_arm_command_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_arm_command_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_arm_command_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_arm_command_proto_msgTypes,
	}.Build()
	File_bosdyn_api_arm_command_proto = out.File
	file_bosdyn_api_arm_command_proto_rawDesc = nil
	file_bosdyn_api_arm_command_proto_goTypes = nil
	file_bosdyn_api_arm_command_proto_depIdxs = nil
}
