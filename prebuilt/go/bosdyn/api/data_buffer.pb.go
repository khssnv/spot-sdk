// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/data_buffer.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TextMessage_Level int32

const (
	// Invalid, do not use.
	TextMessage_LEVEL_UNKNOWN TextMessage_Level = 0
	// Events likely of interest only in a debugging context.
	TextMessage_LEVEL_DEBUG TextMessage_Level = 1
	// Informational message during normal operation.
	TextMessage_LEVEL_INFO TextMessage_Level = 2
	// Information about an unexpected but recoverable condition.
	TextMessage_LEVEL_WARN TextMessage_Level = 3
	// Information about an operation which did not succeed.
	TextMessage_LEVEL_ERROR TextMessage_Level = 4
)

// Enum value maps for TextMessage_Level.
var (
	TextMessage_Level_name = map[int32]string{
		0: "LEVEL_UNKNOWN",
		1: "LEVEL_DEBUG",
		2: "LEVEL_INFO",
		3: "LEVEL_WARN",
		4: "LEVEL_ERROR",
	}
	TextMessage_Level_value = map[string]int32{
		"LEVEL_UNKNOWN": 0,
		"LEVEL_DEBUG":   1,
		"LEVEL_INFO":    2,
		"LEVEL_WARN":    3,
		"LEVEL_ERROR":   4,
	}
)

func (x TextMessage_Level) Enum() *TextMessage_Level {
	p := new(TextMessage_Level)
	*p = x
	return p
}

func (x TextMessage_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TextMessage_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[0].Descriptor()
}

func (TextMessage_Level) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[0]
}

func (x TextMessage_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TextMessage_Level.Descriptor instead.
func (TextMessage_Level) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{5, 0}
}

type SignalSchema_Variable_Type int32

const (
	SignalSchema_Variable_TYPE_UNKNOWN SignalSchema_Variable_Type = 0
	SignalSchema_Variable_TYPE_INT8    SignalSchema_Variable_Type = 1
	SignalSchema_Variable_TYPE_INT16   SignalSchema_Variable_Type = 2
	SignalSchema_Variable_TYPE_INT32   SignalSchema_Variable_Type = 3
	SignalSchema_Variable_TYPE_INT64   SignalSchema_Variable_Type = 4
	SignalSchema_Variable_TYPE_UINT8   SignalSchema_Variable_Type = 5
	SignalSchema_Variable_TYPE_UINT16  SignalSchema_Variable_Type = 6
	SignalSchema_Variable_TYPE_UINT32  SignalSchema_Variable_Type = 7
	SignalSchema_Variable_TYPE_UINT64  SignalSchema_Variable_Type = 8
	SignalSchema_Variable_TYPE_FLOAT32 SignalSchema_Variable_Type = 9
	SignalSchema_Variable_TYPE_FLOAT64 SignalSchema_Variable_Type = 10
)

// Enum value maps for SignalSchema_Variable_Type.
var (
	SignalSchema_Variable_Type_name = map[int32]string{
		0:  "TYPE_UNKNOWN",
		1:  "TYPE_INT8",
		2:  "TYPE_INT16",
		3:  "TYPE_INT32",
		4:  "TYPE_INT64",
		5:  "TYPE_UINT8",
		6:  "TYPE_UINT16",
		7:  "TYPE_UINT32",
		8:  "TYPE_UINT64",
		9:  "TYPE_FLOAT32",
		10: "TYPE_FLOAT64",
	}
	SignalSchema_Variable_Type_value = map[string]int32{
		"TYPE_UNKNOWN": 0,
		"TYPE_INT8":    1,
		"TYPE_INT16":   2,
		"TYPE_INT32":   3,
		"TYPE_INT64":   4,
		"TYPE_UINT8":   5,
		"TYPE_UINT16":  6,
		"TYPE_UINT32":  7,
		"TYPE_UINT64":  8,
		"TYPE_FLOAT32": 9,
		"TYPE_FLOAT64": 10,
	}
)

func (x SignalSchema_Variable_Type) Enum() *SignalSchema_Variable_Type {
	p := new(SignalSchema_Variable_Type)
	*p = x
	return p
}

func (x SignalSchema_Variable_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalSchema_Variable_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[1].Descriptor()
}

func (SignalSchema_Variable_Type) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[1]
}

func (x SignalSchema_Variable_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalSchema_Variable_Type.Descriptor instead.
func (SignalSchema_Variable_Type) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{8, 0, 0}
}

type SignalTick_Encoding int32

const (
	SignalTick_ENCODING_UNKNOWN SignalTick_Encoding = 0
	// Bytes array is a concatination of little-endian machine representations of
	//  the variables from the SignalSchema, in order listed in that schema.
	SignalTick_ENCODING_RAW SignalTick_Encoding = 1
)

// Enum value maps for SignalTick_Encoding.
var (
	SignalTick_Encoding_name = map[int32]string{
		0: "ENCODING_UNKNOWN",
		1: "ENCODING_RAW",
	}
	SignalTick_Encoding_value = map[string]int32{
		"ENCODING_UNKNOWN": 0,
		"ENCODING_RAW":     1,
	}
)

func (x SignalTick_Encoding) Enum() *SignalTick_Encoding {
	p := new(SignalTick_Encoding)
	*p = x
	return p
}

func (x SignalTick_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignalTick_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[2].Descriptor()
}

func (SignalTick_Encoding) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[2]
}

func (x SignalTick_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignalTick_Encoding.Descriptor instead.
func (SignalTick_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{10, 0}
}

// Level, or similarly "visibility," "importance," or "weight" of event.
//  - Higher level events will increase the visibility on the event timeline, relative to other
//    events.
//  - In general, higher level events should be more consequential with respect to the robot
//    operation on a per-occurence basis.
//  - Lower level events should be less consequential on a per occurence basis.
//  - Non-critical events may be one of LOW, MEDIUM, or HIGH.  UNSET is logically equivalent to
//    LOW level.
//  - Critical events may be either mission or system critical.
//  - System-critical is quasi-reserved for internal robot use, and is used to identify events
//    that directly affect robot status or capability, such as the onset of a critical fault or
//    start of an enabling capability.
//  - Mission-critical is quasi-reserved client use, and is intended for events that directly
//    affect the ability of the robot to "do what the user wants," such as the onset of a
//    service fault or start of an enabling capability.
type Event_Level int32

const (
	Event_LEVEL_UNSET Event_Level = 0
	// Non-critical events
	Event_LEVEL_LOW    Event_Level = 1
	Event_LEVEL_MEDIUM Event_Level = 2
	Event_LEVEL_HIGH   Event_Level = 3
	// Critical events
	Event_LEVEL_MISSION_CRITICAL Event_Level = 4
	Event_LEVEL_SYSTEM_CRITICAL  Event_Level = 5
)

// Enum value maps for Event_Level.
var (
	Event_Level_name = map[int32]string{
		0: "LEVEL_UNSET",
		1: "LEVEL_LOW",
		2: "LEVEL_MEDIUM",
		3: "LEVEL_HIGH",
		4: "LEVEL_MISSION_CRITICAL",
		5: "LEVEL_SYSTEM_CRITICAL",
	}
	Event_Level_value = map[string]int32{
		"LEVEL_UNSET":            0,
		"LEVEL_LOW":              1,
		"LEVEL_MEDIUM":           2,
		"LEVEL_HIGH":             3,
		"LEVEL_MISSION_CRITICAL": 4,
		"LEVEL_SYSTEM_CRITICAL":  5,
	}
)

func (x Event_Level) Enum() *Event_Level {
	p := new(Event_Level)
	*p = x
	return p
}

func (x Event_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[3].Descriptor()
}

func (Event_Level) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[3]
}

func (x Event_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Level.Descriptor instead.
func (Event_Level) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{11, 0}
}

// LogPreserveHint may encode a hint to the robot's logging system for whether to preserve
// internal log data near the time of this event.  This could be useful in saving data
// to be used in a service log to send to Boston Dynamics.
type Event_LogPreserveHint int32

const (
	// If this this is unset, it is equivalent to LOG_PRESERVE_HINT_NORMAL.
	Event_LOG_PRESERVE_HINT_UNSET Event_LogPreserveHint = 0
	// Do not change the robot's default log data preservation behavior in response to this
	// event.
	Event_LOG_PRESERVE_HINT_NORMAL Event_LogPreserveHint = 1
	// Request that the robot try to preserve data near the time of this event.
	// Log space on the robot is limited, so this does not guarentee that the data will be
	// preserved.
	Event_LOG_PRESERVE_HINT_PRESERVE Event_LogPreserveHint = 2
)

// Enum value maps for Event_LogPreserveHint.
var (
	Event_LogPreserveHint_name = map[int32]string{
		0: "LOG_PRESERVE_HINT_UNSET",
		1: "LOG_PRESERVE_HINT_NORMAL",
		2: "LOG_PRESERVE_HINT_PRESERVE",
	}
	Event_LogPreserveHint_value = map[string]int32{
		"LOG_PRESERVE_HINT_UNSET":    0,
		"LOG_PRESERVE_HINT_NORMAL":   1,
		"LOG_PRESERVE_HINT_PRESERVE": 2,
	}
)

func (x Event_LogPreserveHint) Enum() *Event_LogPreserveHint {
	p := new(Event_LogPreserveHint)
	*p = x
	return p
}

func (x Event_LogPreserveHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_LogPreserveHint) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[4].Descriptor()
}

func (Event_LogPreserveHint) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[4]
}

func (x Event_LogPreserveHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_LogPreserveHint.Descriptor instead.
func (Event_LogPreserveHint) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{11, 1}
}

type RecordTextMessagesResponse_Error_Type int32

const (
	RecordTextMessagesResponse_Error_NONE         RecordTextMessagesResponse_Error_Type = 0
	RecordTextMessagesResponse_Error_CLIENT_ERROR RecordTextMessagesResponse_Error_Type = 1
	RecordTextMessagesResponse_Error_SERVER_ERROR RecordTextMessagesResponse_Error_Type = 2
)

// Enum value maps for RecordTextMessagesResponse_Error_Type.
var (
	RecordTextMessagesResponse_Error_Type_name = map[int32]string{
		0: "NONE",
		1: "CLIENT_ERROR",
		2: "SERVER_ERROR",
	}
	RecordTextMessagesResponse_Error_Type_value = map[string]int32{
		"NONE":         0,
		"CLIENT_ERROR": 1,
		"SERVER_ERROR": 2,
	}
)

func (x RecordTextMessagesResponse_Error_Type) Enum() *RecordTextMessagesResponse_Error_Type {
	p := new(RecordTextMessagesResponse_Error_Type)
	*p = x
	return p
}

func (x RecordTextMessagesResponse_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordTextMessagesResponse_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[5].Descriptor()
}

func (RecordTextMessagesResponse_Error_Type) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[5]
}

func (x RecordTextMessagesResponse_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordTextMessagesResponse_Error_Type.Descriptor instead.
func (RecordTextMessagesResponse_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{12, 0, 0}
}

type RecordOperatorCommentsResponse_Error_Type int32

const (
	RecordOperatorCommentsResponse_Error_NONE         RecordOperatorCommentsResponse_Error_Type = 0
	RecordOperatorCommentsResponse_Error_CLIENT_ERROR RecordOperatorCommentsResponse_Error_Type = 1
	RecordOperatorCommentsResponse_Error_SERVER_ERROR RecordOperatorCommentsResponse_Error_Type = 2
)

// Enum value maps for RecordOperatorCommentsResponse_Error_Type.
var (
	RecordOperatorCommentsResponse_Error_Type_name = map[int32]string{
		0: "NONE",
		1: "CLIENT_ERROR",
		2: "SERVER_ERROR",
	}
	RecordOperatorCommentsResponse_Error_Type_value = map[string]int32{
		"NONE":         0,
		"CLIENT_ERROR": 1,
		"SERVER_ERROR": 2,
	}
)

func (x RecordOperatorCommentsResponse_Error_Type) Enum() *RecordOperatorCommentsResponse_Error_Type {
	p := new(RecordOperatorCommentsResponse_Error_Type)
	*p = x
	return p
}

func (x RecordOperatorCommentsResponse_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordOperatorCommentsResponse_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[6].Descriptor()
}

func (RecordOperatorCommentsResponse_Error_Type) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[6]
}

func (x RecordOperatorCommentsResponse_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordOperatorCommentsResponse_Error_Type.Descriptor instead.
func (RecordOperatorCommentsResponse_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{13, 0, 0}
}

type RecordDataBlobsResponse_Error_Type int32

const (
	RecordDataBlobsResponse_Error_NONE         RecordDataBlobsResponse_Error_Type = 0
	RecordDataBlobsResponse_Error_CLIENT_ERROR RecordDataBlobsResponse_Error_Type = 1
	RecordDataBlobsResponse_Error_SERVER_ERROR RecordDataBlobsResponse_Error_Type = 2
)

// Enum value maps for RecordDataBlobsResponse_Error_Type.
var (
	RecordDataBlobsResponse_Error_Type_name = map[int32]string{
		0: "NONE",
		1: "CLIENT_ERROR",
		2: "SERVER_ERROR",
	}
	RecordDataBlobsResponse_Error_Type_value = map[string]int32{
		"NONE":         0,
		"CLIENT_ERROR": 1,
		"SERVER_ERROR": 2,
	}
)

func (x RecordDataBlobsResponse_Error_Type) Enum() *RecordDataBlobsResponse_Error_Type {
	p := new(RecordDataBlobsResponse_Error_Type)
	*p = x
	return p
}

func (x RecordDataBlobsResponse_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordDataBlobsResponse_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[7].Descriptor()
}

func (RecordDataBlobsResponse_Error_Type) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[7]
}

func (x RecordDataBlobsResponse_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordDataBlobsResponse_Error_Type.Descriptor instead.
func (RecordDataBlobsResponse_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{14, 0, 0}
}

type RecordSignalTicksResponse_Error_Type int32

const (
	RecordSignalTicksResponse_Error_NONE              RecordSignalTicksResponse_Error_Type = 0
	RecordSignalTicksResponse_Error_CLIENT_ERROR      RecordSignalTicksResponse_Error_Type = 1
	RecordSignalTicksResponse_Error_SERVER_ERROR      RecordSignalTicksResponse_Error_Type = 2
	RecordSignalTicksResponse_Error_INVALID_SCHEMA_ID RecordSignalTicksResponse_Error_Type = 3
)

// Enum value maps for RecordSignalTicksResponse_Error_Type.
var (
	RecordSignalTicksResponse_Error_Type_name = map[int32]string{
		0: "NONE",
		1: "CLIENT_ERROR",
		2: "SERVER_ERROR",
		3: "INVALID_SCHEMA_ID",
	}
	RecordSignalTicksResponse_Error_Type_value = map[string]int32{
		"NONE":              0,
		"CLIENT_ERROR":      1,
		"SERVER_ERROR":      2,
		"INVALID_SCHEMA_ID": 3,
	}
)

func (x RecordSignalTicksResponse_Error_Type) Enum() *RecordSignalTicksResponse_Error_Type {
	p := new(RecordSignalTicksResponse_Error_Type)
	*p = x
	return p
}

func (x RecordSignalTicksResponse_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordSignalTicksResponse_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[8].Descriptor()
}

func (RecordSignalTicksResponse_Error_Type) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[8]
}

func (x RecordSignalTicksResponse_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordSignalTicksResponse_Error_Type.Descriptor instead.
func (RecordSignalTicksResponse_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{15, 0, 0}
}

type RecordEventsResponse_Error_Type int32

const (
	RecordEventsResponse_Error_NONE         RecordEventsResponse_Error_Type = 0
	RecordEventsResponse_Error_CLIENT_ERROR RecordEventsResponse_Error_Type = 1
	RecordEventsResponse_Error_SERVER_ERROR RecordEventsResponse_Error_Type = 2
)

// Enum value maps for RecordEventsResponse_Error_Type.
var (
	RecordEventsResponse_Error_Type_name = map[int32]string{
		0: "NONE",
		1: "CLIENT_ERROR",
		2: "SERVER_ERROR",
	}
	RecordEventsResponse_Error_Type_value = map[string]int32{
		"NONE":         0,
		"CLIENT_ERROR": 1,
		"SERVER_ERROR": 2,
	}
)

func (x RecordEventsResponse_Error_Type) Enum() *RecordEventsResponse_Error_Type {
	p := new(RecordEventsResponse_Error_Type)
	*p = x
	return p
}

func (x RecordEventsResponse_Error_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RecordEventsResponse_Error_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_data_buffer_proto_enumTypes[9].Descriptor()
}

func (RecordEventsResponse_Error_Type) Type() protoreflect.EnumType {
	return &file_bosdyn_api_data_buffer_proto_enumTypes[9]
}

func (x RecordEventsResponse_Error_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RecordEventsResponse_Error_Type.Descriptor instead.
func (RecordEventsResponse_Error_Type) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{16, 0, 0}
}

type RecordTextMessagesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The text messages to be logged.
	TextMessages []*TextMessage `protobuf:"bytes,2,rep,name=text_messages,json=textMessages,proto3" json:"text_messages,omitempty"`
}

func (x *RecordTextMessagesRequest) Reset() {
	*x = RecordTextMessagesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTextMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTextMessagesRequest) ProtoMessage() {}

func (x *RecordTextMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTextMessagesRequest.ProtoReflect.Descriptor instead.
func (*RecordTextMessagesRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{0}
}

func (x *RecordTextMessagesRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordTextMessagesRequest) GetTextMessages() []*TextMessage {
	if x != nil {
		return x.TextMessages
	}
	return nil
}

type RecordOperatorCommentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The operator comments to be logged.
	OperatorComments []*OperatorComment `protobuf:"bytes,2,rep,name=operator_comments,json=operatorComments,proto3" json:"operator_comments,omitempty"`
}

func (x *RecordOperatorCommentsRequest) Reset() {
	*x = RecordOperatorCommentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordOperatorCommentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordOperatorCommentsRequest) ProtoMessage() {}

func (x *RecordOperatorCommentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordOperatorCommentsRequest.ProtoReflect.Descriptor instead.
func (*RecordOperatorCommentsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{1}
}

func (x *RecordOperatorCommentsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordOperatorCommentsRequest) GetOperatorComments() []*OperatorComment {
	if x != nil {
		return x.OperatorComments
	}
	return nil
}

type RecordDataBlobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The data blobs to be logged.
	BlobData []*DataBlob `protobuf:"bytes,2,rep,name=blob_data,json=blobData,proto3" json:"blob_data,omitempty"`
	// When set, the data blob is committed to the log synchronously. The RPC does not return until
	// the data is written.
	Sync bool `protobuf:"varint,3,opt,name=sync,proto3" json:"sync,omitempty"`
}

func (x *RecordDataBlobsRequest) Reset() {
	*x = RecordDataBlobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataBlobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataBlobsRequest) ProtoMessage() {}

func (x *RecordDataBlobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataBlobsRequest.ProtoReflect.Descriptor instead.
func (*RecordDataBlobsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{2}
}

func (x *RecordDataBlobsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordDataBlobsRequest) GetBlobData() []*DataBlob {
	if x != nil {
		return x.BlobData
	}
	return nil
}

func (x *RecordDataBlobsRequest) GetSync() bool {
	if x != nil {
		return x.Sync
	}
	return false
}

type RecordSignalTicksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The signals data to be logged.
	TickData []*SignalTick `protobuf:"bytes,2,rep,name=tick_data,json=tickData,proto3" json:"tick_data,omitempty"`
}

func (x *RecordSignalTicksRequest) Reset() {
	*x = RecordSignalTicksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSignalTicksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSignalTicksRequest) ProtoMessage() {}

func (x *RecordSignalTicksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSignalTicksRequest.ProtoReflect.Descriptor instead.
func (*RecordSignalTicksRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{3}
}

func (x *RecordSignalTicksRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordSignalTicksRequest) GetTickData() []*SignalTick {
	if x != nil {
		return x.TickData
	}
	return nil
}

type RecordEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The events to be logged.
	Events []*Event `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *RecordEventsRequest) Reset() {
	*x = RecordEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventsRequest) ProtoMessage() {}

func (x *RecordEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventsRequest.ProtoReflect.Descriptor instead.
func (*RecordEventsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{4}
}

func (x *RecordEventsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordEventsRequest) GetEvents() []*Event {
	if x != nil {
		return x.Events
	}
	return nil
}

// A text message to add to the log.
// These could be internal text-log messages from a client for use in debugging, for example.
type TextMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String annotation message.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The timestamp of the annotation.  This must be in robot time.
	// If this is not specified, this will default to the time the server received the message.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The client name.
	// This may be used to segregate data for the same variables to different parts of the buffer.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// The relative importance of the message.
	Level TextMessage_Level `protobuf:"varint,4,opt,name=level,proto3,enum=bosdyn.api.TextMessage_Level" json:"level,omitempty"`
	// Optional tag to identify from what code/module this message originated from.
	Tag string `protobuf:"bytes,5,opt,name=tag,proto3" json:"tag,omitempty"`
	// Optional source file name originating the log message.
	Filename string `protobuf:"bytes,6,opt,name=filename,proto3" json:"filename,omitempty"`
	// Optional source file line number originating the log message.
	LineNumber int32 `protobuf:"varint,7,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
}

func (x *TextMessage) Reset() {
	*x = TextMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TextMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMessage) ProtoMessage() {}

func (x *TextMessage) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMessage.ProtoReflect.Descriptor instead.
func (*TextMessage) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{5}
}

func (x *TextMessage) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *TextMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *TextMessage) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *TextMessage) GetLevel() TextMessage_Level {
	if x != nil {
		return x.Level
	}
	return TextMessage_LEVEL_UNKNOWN
}

func (x *TextMessage) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *TextMessage) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *TextMessage) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

// An operator comment to be added to the log.
// These are notes especially intended to mark when logs should be preserved and reviewed
//  to ensure that robot hardware and/or software is working as intended.
type OperatorComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String annotation message to add to the log.
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	// The timestamp of the annotation.  This must be in robot time.
	// If this is not specified, this will default to the time the server received the message.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *OperatorComment) Reset() {
	*x = OperatorComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperatorComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperatorComment) ProtoMessage() {}

func (x *OperatorComment) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperatorComment.ProtoReflect.Descriptor instead.
func (*OperatorComment) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{6}
}

func (x *OperatorComment) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *OperatorComment) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// Message-style data to add to the log.
type DataBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of data in robot clock time.  This is required.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// A general label for this blob.
	// This is distinct from type_id, which identifies how the blob is to be parsed.
	// In practice, this is often the same as the type_id.
	Channel string `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// A description of the data's content and its encoding.  This is required.
	// This should be sufficient for deciding how to deserialize the data.
	// For example, this could be the full name of a protobuf message type.
	TypeId string `protobuf:"bytes,3,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	// Raw data.
	// For example, jpeg data or a serialized protobuf.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataBlob) Reset() {
	*x = DataBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBlob) ProtoMessage() {}

func (x *DataBlob) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBlob.ProtoReflect.Descriptor instead.
func (*DataBlob) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{7}
}

func (x *DataBlob) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *DataBlob) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *DataBlob) GetTypeId() string {
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *DataBlob) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// A description of a set of signals-style variables to log together as timestamped samples.
type SignalSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A SignalTick using this schema contains the values of this ordered list of variables.
	Vars []*SignalSchema_Variable `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty"`
	// The name of the schema.
	SchemaName string `protobuf:"bytes,2,opt,name=schema_name,json=schemaName,proto3" json:"schema_name,omitempty"`
}

func (x *SignalSchema) Reset() {
	*x = SignalSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSchema) ProtoMessage() {}

func (x *SignalSchema) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSchema.ProtoReflect.Descriptor instead.
func (*SignalSchema) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{8}
}

func (x *SignalSchema) GetVars() []*SignalSchema_Variable {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *SignalSchema) GetSchemaName() string {
	if x != nil {
		return x.SchemaName
	}
	return ""
}

type SignalSchemaId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// {schema, id} pair
	SchemaId uint64        `protobuf:"varint,1,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	Schema   *SignalSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *SignalSchemaId) Reset() {
	*x = SignalSchemaId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSchemaId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSchemaId) ProtoMessage() {}

func (x *SignalSchemaId) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSchemaId.ProtoReflect.Descriptor instead.
func (*SignalSchemaId) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{9}
}

func (x *SignalSchemaId) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *SignalSchemaId) GetSchema() *SignalSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

// A timestamped set of signals variable values.
type SignalTick struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Successive ticks should have successive sequence_id's.
	// The robot uses this to determine if a tick was somehow lost.
	SequenceId int64 `protobuf:"varint,1,opt,name=sequence_id,json=sequenceId,proto3" json:"sequence_id,omitempty"`
	// Timestamp at which the variable values were sampled.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The client name.
	// This may be used to segregate data for the same variables to different parts of the buffer.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// This specifies the SignalSchema to be used in interpreting the |data| field.
	// This value was returned by the server when the schema was registered.
	SchemaId uint64 `protobuf:"varint,4,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
	// Format describing how the data bytes array is encoded.
	Encoding SignalTick_Encoding `protobuf:"varint,5,opt,name=encoding,proto3,enum=bosdyn.api.SignalTick_Encoding" json:"encoding,omitempty"`
	// The encoded data representing a tick of multiple values of signal-styles data.
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SignalTick) Reset() {
	*x = SignalTick{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalTick) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalTick) ProtoMessage() {}

func (x *SignalTick) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalTick.ProtoReflect.Descriptor instead.
func (*SignalTick) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{10}
}

func (x *SignalTick) GetSequenceId() int64 {
	if x != nil {
		return x.SequenceId
	}
	return 0
}

func (x *SignalTick) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *SignalTick) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *SignalTick) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

func (x *SignalTick) GetEncoding() SignalTick_Encoding {
	if x != nil {
		return x.Encoding
	}
	return SignalTick_ENCODING_UNKNOWN
}

func (x *SignalTick) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// This message contains event data for logging to the public timeline.
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of event, typically prefixed with a project or organization, e.g. "bosdyn:startup"
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Event description.
	// This is optional.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// A description of the source of this event. May be the client name.
	// - Not required to be unique.
	// - Disambiguates the source of similar event types.
	Source string `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	// Unique identifier to link start and end messages for events with a duration.
	// - Long running events may have separate messages at the start and end, in case the message
	//    for the end of the event is lost.
	// - For events without a separate start and end message (in which case both start_time and
	//    end time should be specified), the 'id' field should not be set.
	// - This id is not tracked internally by the service. It is only used to consume the event
	//    timeline.
	// - To be effective, the id value should be generated randomly by the client.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// Start and end times for the event:
	// - Some events are instantaneous. For these, set start_timestamp and end_timestamp to the
	//    same value and send a single message (without an id).
	// - Some events take time. At the onset, send a message with a unique id, the start time, and
	//    type. The end message should include all data from the start message, any
	//    additional data, and an end time.  If you have the end message, you should not need
	//    the start message since it is a strict subset.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The relative importance of the event.
	Level Event_Level `protobuf:"varint,7,opt,name=level,proto3,enum=bosdyn.api.Event_Level" json:"level,omitempty"`
	// Optional set of event parameters.
	Parameters []*Parameter `protobuf:"bytes,8,rep,name=parameters,proto3" json:"parameters,omitempty"`
	// Optionally request that the robot try to preserve data near this time for a service log.
	LogPreserveHint Event_LogPreserveHint `protobuf:"varint,9,opt,name=log_preserve_hint,json=logPreserveHint,proto3,enum=bosdyn.api.Event_LogPreserveHint" json:"log_preserve_hint,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{11}
}

func (x *Event) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Event) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Event) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Event) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Event) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Event) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Event) GetLevel() Event_Level {
	if x != nil {
		return x.Level
	}
	return Event_LEVEL_UNSET
}

func (x *Event) GetParameters() []*Parameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Event) GetLogPreserveHint() Event_LogPreserveHint {
	if x != nil {
		return x.LogPreserveHint
	}
	return Event_LOG_PRESERVE_HINT_UNSET
}

type RecordTextMessagesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Errors which occurred when logging text message data.
	Errors []*RecordTextMessagesResponse_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RecordTextMessagesResponse) Reset() {
	*x = RecordTextMessagesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTextMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTextMessagesResponse) ProtoMessage() {}

func (x *RecordTextMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTextMessagesResponse.ProtoReflect.Descriptor instead.
func (*RecordTextMessagesResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{12}
}

func (x *RecordTextMessagesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordTextMessagesResponse) GetErrors() []*RecordTextMessagesResponse_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RecordOperatorCommentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Errors which occurred when logging operator comments.
	Errors []*RecordOperatorCommentsResponse_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RecordOperatorCommentsResponse) Reset() {
	*x = RecordOperatorCommentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordOperatorCommentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordOperatorCommentsResponse) ProtoMessage() {}

func (x *RecordOperatorCommentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordOperatorCommentsResponse.ProtoReflect.Descriptor instead.
func (*RecordOperatorCommentsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{13}
}

func (x *RecordOperatorCommentsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordOperatorCommentsResponse) GetErrors() []*RecordOperatorCommentsResponse_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RecordDataBlobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Errors which occurred when logging data blobs.
	Errors []*RecordDataBlobsResponse_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RecordDataBlobsResponse) Reset() {
	*x = RecordDataBlobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataBlobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataBlobsResponse) ProtoMessage() {}

func (x *RecordDataBlobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataBlobsResponse.ProtoReflect.Descriptor instead.
func (*RecordDataBlobsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{14}
}

func (x *RecordDataBlobsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordDataBlobsResponse) GetErrors() []*RecordDataBlobsResponse_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RecordSignalTicksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Errors which occurred when logging signal ticks.
	Errors []*RecordSignalTicksResponse_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RecordSignalTicksResponse) Reset() {
	*x = RecordSignalTicksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSignalTicksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSignalTicksResponse) ProtoMessage() {}

func (x *RecordSignalTicksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSignalTicksResponse.ProtoReflect.Descriptor instead.
func (*RecordSignalTicksResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{15}
}

func (x *RecordSignalTicksResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordSignalTicksResponse) GetErrors() []*RecordSignalTicksResponse_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RecordEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Errors which occurred when logging events.
	Errors []*RecordEventsResponse_Error `protobuf:"bytes,2,rep,name=errors,proto3" json:"errors,omitempty"`
}

func (x *RecordEventsResponse) Reset() {
	*x = RecordEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventsResponse) ProtoMessage() {}

func (x *RecordEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventsResponse.ProtoReflect.Descriptor instead.
func (*RecordEventsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{16}
}

func (x *RecordEventsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RecordEventsResponse) GetErrors() []*RecordEventsResponse_Error {
	if x != nil {
		return x.Errors
	}
	return nil
}

type RegisterSignalSchemaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request/response header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Defines a schema for interpreting SignalTick data containing packed signals-type data.
	Schema *SignalSchema `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *RegisterSignalSchemaRequest) Reset() {
	*x = RegisterSignalSchemaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSignalSchemaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSignalSchemaRequest) ProtoMessage() {}

func (x *RegisterSignalSchemaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSignalSchemaRequest.ProtoReflect.Descriptor instead.
func (*RegisterSignalSchemaRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterSignalSchemaRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegisterSignalSchemaRequest) GetSchema() *SignalSchema {
	if x != nil {
		return x.Schema
	}
	return nil
}

type RegisterSignalSchemaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request/response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Server returns a unique ID based on the client ID and schema definition.
	// Always greater than zero.
	SchemaId uint64 `protobuf:"varint,2,opt,name=schema_id,json=schemaId,proto3" json:"schema_id,omitempty"`
}

func (x *RegisterSignalSchemaResponse) Reset() {
	*x = RegisterSignalSchemaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterSignalSchemaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterSignalSchemaResponse) ProtoMessage() {}

func (x *RegisterSignalSchemaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterSignalSchemaResponse.ProtoReflect.Descriptor instead.
func (*RegisterSignalSchemaResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{18}
}

func (x *RegisterSignalSchemaResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *RegisterSignalSchemaResponse) GetSchemaId() uint64 {
	if x != nil {
		return x.SchemaId
	}
	return 0
}

// A variable of signals-style data, which will be sampled in time.
type SignalSchema_Variable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the variable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of the data.
	Type SignalSchema_Variable_Type `protobuf:"varint,2,opt,name=type,proto3,enum=bosdyn.api.SignalSchema_Variable_Type" json:"type,omitempty"`
	// Zero or one variable in 'vars' may be specified as a time variable.
	// A time variable must have type TYPE_FLOAT64.
	IsTime bool `protobuf:"varint,3,opt,name=is_time,json=isTime,proto3" json:"is_time,omitempty"`
}

func (x *SignalSchema_Variable) Reset() {
	*x = SignalSchema_Variable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalSchema_Variable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalSchema_Variable) ProtoMessage() {}

func (x *SignalSchema_Variable) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalSchema_Variable.ProtoReflect.Descriptor instead.
func (*SignalSchema_Variable) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{8, 0}
}

func (x *SignalSchema_Variable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SignalSchema_Variable) GetType() SignalSchema_Variable_Type {
	if x != nil {
		return x.Type
	}
	return SignalSchema_Variable_TYPE_UNKNOWN
}

func (x *SignalSchema_Variable) GetIsTime() bool {
	if x != nil {
		return x.IsTime
	}
	return false
}

// Text message recording error.
type RecordTextMessagesResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of error: if it was caused by the client or the service.
	Type RecordTextMessagesResponse_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bosdyn.api.RecordTextMessagesResponse_Error_Type" json:"type,omitempty"`
	// An error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The index to identify the data being stored.
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RecordTextMessagesResponse_Error) Reset() {
	*x = RecordTextMessagesResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordTextMessagesResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordTextMessagesResponse_Error) ProtoMessage() {}

func (x *RecordTextMessagesResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordTextMessagesResponse_Error.ProtoReflect.Descriptor instead.
func (*RecordTextMessagesResponse_Error) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{12, 0}
}

func (x *RecordTextMessagesResponse_Error) GetType() RecordTextMessagesResponse_Error_Type {
	if x != nil {
		return x.Type
	}
	return RecordTextMessagesResponse_Error_NONE
}

func (x *RecordTextMessagesResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordTextMessagesResponse_Error) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Operator comment recording error.
type RecordOperatorCommentsResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of error: if it was caused by the client or the service.
	Type RecordOperatorCommentsResponse_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bosdyn.api.RecordOperatorCommentsResponse_Error_Type" json:"type,omitempty"`
	// An error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The index to identify the data being stored.
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RecordOperatorCommentsResponse_Error) Reset() {
	*x = RecordOperatorCommentsResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordOperatorCommentsResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordOperatorCommentsResponse_Error) ProtoMessage() {}

func (x *RecordOperatorCommentsResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordOperatorCommentsResponse_Error.ProtoReflect.Descriptor instead.
func (*RecordOperatorCommentsResponse_Error) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{13, 0}
}

func (x *RecordOperatorCommentsResponse_Error) GetType() RecordOperatorCommentsResponse_Error_Type {
	if x != nil {
		return x.Type
	}
	return RecordOperatorCommentsResponse_Error_NONE
}

func (x *RecordOperatorCommentsResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordOperatorCommentsResponse_Error) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// DataBlob recording error.
type RecordDataBlobsResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of error: if it was caused by the client or the service.
	Type RecordDataBlobsResponse_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bosdyn.api.RecordDataBlobsResponse_Error_Type" json:"type,omitempty"`
	// An error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The index to identify the data being stored.
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RecordDataBlobsResponse_Error) Reset() {
	*x = RecordDataBlobsResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordDataBlobsResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordDataBlobsResponse_Error) ProtoMessage() {}

func (x *RecordDataBlobsResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordDataBlobsResponse_Error.ProtoReflect.Descriptor instead.
func (*RecordDataBlobsResponse_Error) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{14, 0}
}

func (x *RecordDataBlobsResponse_Error) GetType() RecordDataBlobsResponse_Error_Type {
	if x != nil {
		return x.Type
	}
	return RecordDataBlobsResponse_Error_NONE
}

func (x *RecordDataBlobsResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordDataBlobsResponse_Error) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Signal tick recording error.
type RecordSignalTicksResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of error: if it was caused by the client, the service, or something else.
	Type RecordSignalTicksResponse_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bosdyn.api.RecordSignalTicksResponse_Error_Type" json:"type,omitempty"`
	// An error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The index to identify the data being stored.
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RecordSignalTicksResponse_Error) Reset() {
	*x = RecordSignalTicksResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordSignalTicksResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordSignalTicksResponse_Error) ProtoMessage() {}

func (x *RecordSignalTicksResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordSignalTicksResponse_Error.ProtoReflect.Descriptor instead.
func (*RecordSignalTicksResponse_Error) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{15, 0}
}

func (x *RecordSignalTicksResponse_Error) GetType() RecordSignalTicksResponse_Error_Type {
	if x != nil {
		return x.Type
	}
	return RecordSignalTicksResponse_Error_NONE
}

func (x *RecordSignalTicksResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordSignalTicksResponse_Error) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Event recording error.
type RecordEventsResponse_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of error: if it was caused by the client, the service, or something else.
	Type RecordEventsResponse_Error_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bosdyn.api.RecordEventsResponse_Error_Type" json:"type,omitempty"`
	// An error message.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// The index to identify the data being stored.
	Index uint32 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RecordEventsResponse_Error) Reset() {
	*x = RecordEventsResponse_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_data_buffer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecordEventsResponse_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecordEventsResponse_Error) ProtoMessage() {}

func (x *RecordEventsResponse_Error) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_data_buffer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecordEventsResponse_Error.ProtoReflect.Descriptor instead.
func (*RecordEventsResponse_Error) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_data_buffer_proto_rawDescGZIP(), []int{16, 0}
}

func (x *RecordEventsResponse_Error) GetType() RecordEventsResponse_Error_Type {
	if x != nil {
		return x.Type
	}
	return RecordEventsResponse_Error_NONE
}

func (x *RecordEventsResponse_Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RecordEventsResponse_Error) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

var File_bosdyn_api_data_buffer_proto protoreflect.FileDescriptor

var file_bosdyn_api_data_buffer_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x8c, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x3c, 0x0a, 0x0d, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0c, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22,
	0x9c, 0x01, 0x0a, 0x1d, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x10, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x92,
	0x01, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x09,
	0x62, 0x6c, 0x6f, 0x62, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x42, 0x6c, 0x6f, 0x62, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x62, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x79, 0x6e, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x73,
	0x79, 0x6e, 0x63, 0x22, 0x82, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x09, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x52, 0x08,
	0x74, 0x69, 0x63, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x22, 0x73, 0x0a, 0x13, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xdb, 0x02,
	0x0a, 0x0b, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x5c, 0x0a,
	0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56,
	0x45, 0x4c, 0x5f, 0x44, 0x45, 0x42, 0x55, 0x47, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x22, 0x65, 0x0a, 0x0f, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x8b, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x9d, 0x03, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x35, 0x0a, 0x04, 0x76, 0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0xb4, 0x02, 0x0a, 0x08, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xbe, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x09, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x0a,
	0x22, 0x5f, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x22, 0xa1, 0x02, 0x0a, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64,
	0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x32, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a,
	0x10, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f,
	0x52, 0x41, 0x57, 0x10, 0x01, 0x22, 0xfd, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x35,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x48,
	0x69, 0x6e, 0x74, 0x52, 0x0f, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x48, 0x69, 0x6e, 0x74, 0x22, 0x80, 0x01, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x10,
	0x0a, 0x0c, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x48, 0x49, 0x47, 0x48, 0x10, 0x03,
	0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x52, 0x49,
	0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x05, 0x22, 0x6c, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x48, 0x69, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x17, 0x4c, 0x4f,
	0x47, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f,
	0x55, 0x4e, 0x53, 0x45, 0x54, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4c, 0x4f, 0x47, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x47, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x5f, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x10, 0x02, 0x22, 0xcd, 0x02, 0x0a, 0x1a, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xb4,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xd9, 0x02, 0x0a, 0x1e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xb8, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x49, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x34, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x22, 0xc4, 0x02, 0x0a, 0x17, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x1a, 0xb1, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x42,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f,
	0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0xe1, 0x02, 0x0a, 0x19, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x6c, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a,
	0xca, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x54, 0x69, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x4b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x22, 0xbb, 0x02, 0x0a,
	0x14, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x06, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x1a, 0xae, 0x01, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x34, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x82, 0x01, 0x0a, 0x1b, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22,
	0x6f, 0x0a, 0x1c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x49, 0x64,
	0x42, 0x44, 0x42, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f,
	0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_data_buffer_proto_rawDescOnce sync.Once
	file_bosdyn_api_data_buffer_proto_rawDescData = file_bosdyn_api_data_buffer_proto_rawDesc
)

func file_bosdyn_api_data_buffer_proto_rawDescGZIP() []byte {
	file_bosdyn_api_data_buffer_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_data_buffer_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_data_buffer_proto_rawDescData)
	})
	return file_bosdyn_api_data_buffer_proto_rawDescData
}

var file_bosdyn_api_data_buffer_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_bosdyn_api_data_buffer_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_bosdyn_api_data_buffer_proto_goTypes = []interface{}{
	(TextMessage_Level)(0),                         // 0: bosdyn.api.TextMessage.Level
	(SignalSchema_Variable_Type)(0),                // 1: bosdyn.api.SignalSchema.Variable.Type
	(SignalTick_Encoding)(0),                       // 2: bosdyn.api.SignalTick.Encoding
	(Event_Level)(0),                               // 3: bosdyn.api.Event.Level
	(Event_LogPreserveHint)(0),                     // 4: bosdyn.api.Event.LogPreserveHint
	(RecordTextMessagesResponse_Error_Type)(0),     // 5: bosdyn.api.RecordTextMessagesResponse.Error.Type
	(RecordOperatorCommentsResponse_Error_Type)(0), // 6: bosdyn.api.RecordOperatorCommentsResponse.Error.Type
	(RecordDataBlobsResponse_Error_Type)(0),        // 7: bosdyn.api.RecordDataBlobsResponse.Error.Type
	(RecordSignalTicksResponse_Error_Type)(0),      // 8: bosdyn.api.RecordSignalTicksResponse.Error.Type
	(RecordEventsResponse_Error_Type)(0),           // 9: bosdyn.api.RecordEventsResponse.Error.Type
	(*RecordTextMessagesRequest)(nil),              // 10: bosdyn.api.RecordTextMessagesRequest
	(*RecordOperatorCommentsRequest)(nil),          // 11: bosdyn.api.RecordOperatorCommentsRequest
	(*RecordDataBlobsRequest)(nil),                 // 12: bosdyn.api.RecordDataBlobsRequest
	(*RecordSignalTicksRequest)(nil),               // 13: bosdyn.api.RecordSignalTicksRequest
	(*RecordEventsRequest)(nil),                    // 14: bosdyn.api.RecordEventsRequest
	(*TextMessage)(nil),                            // 15: bosdyn.api.TextMessage
	(*OperatorComment)(nil),                        // 16: bosdyn.api.OperatorComment
	(*DataBlob)(nil),                               // 17: bosdyn.api.DataBlob
	(*SignalSchema)(nil),                           // 18: bosdyn.api.SignalSchema
	(*SignalSchemaId)(nil),                         // 19: bosdyn.api.SignalSchemaId
	(*SignalTick)(nil),                             // 20: bosdyn.api.SignalTick
	(*Event)(nil),                                  // 21: bosdyn.api.Event
	(*RecordTextMessagesResponse)(nil),             // 22: bosdyn.api.RecordTextMessagesResponse
	(*RecordOperatorCommentsResponse)(nil),         // 23: bosdyn.api.RecordOperatorCommentsResponse
	(*RecordDataBlobsResponse)(nil),                // 24: bosdyn.api.RecordDataBlobsResponse
	(*RecordSignalTicksResponse)(nil),              // 25: bosdyn.api.RecordSignalTicksResponse
	(*RecordEventsResponse)(nil),                   // 26: bosdyn.api.RecordEventsResponse
	(*RegisterSignalSchemaRequest)(nil),            // 27: bosdyn.api.RegisterSignalSchemaRequest
	(*RegisterSignalSchemaResponse)(nil),           // 28: bosdyn.api.RegisterSignalSchemaResponse
	(*SignalSchema_Variable)(nil),                  // 29: bosdyn.api.SignalSchema.Variable
	(*RecordTextMessagesResponse_Error)(nil),       // 30: bosdyn.api.RecordTextMessagesResponse.Error
	(*RecordOperatorCommentsResponse_Error)(nil),   // 31: bosdyn.api.RecordOperatorCommentsResponse.Error
	(*RecordDataBlobsResponse_Error)(nil),          // 32: bosdyn.api.RecordDataBlobsResponse.Error
	(*RecordSignalTicksResponse_Error)(nil),        // 33: bosdyn.api.RecordSignalTicksResponse.Error
	(*RecordEventsResponse_Error)(nil),             // 34: bosdyn.api.RecordEventsResponse.Error
	(*RequestHeader)(nil),                          // 35: bosdyn.api.RequestHeader
	(*timestamppb.Timestamp)(nil),                  // 36: google.protobuf.Timestamp
	(*Parameter)(nil),                              // 37: bosdyn.api.Parameter
	(*ResponseHeader)(nil),                         // 38: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_data_buffer_proto_depIdxs = []int32{
	35, // 0: bosdyn.api.RecordTextMessagesRequest.header:type_name -> bosdyn.api.RequestHeader
	15, // 1: bosdyn.api.RecordTextMessagesRequest.text_messages:type_name -> bosdyn.api.TextMessage
	35, // 2: bosdyn.api.RecordOperatorCommentsRequest.header:type_name -> bosdyn.api.RequestHeader
	16, // 3: bosdyn.api.RecordOperatorCommentsRequest.operator_comments:type_name -> bosdyn.api.OperatorComment
	35, // 4: bosdyn.api.RecordDataBlobsRequest.header:type_name -> bosdyn.api.RequestHeader
	17, // 5: bosdyn.api.RecordDataBlobsRequest.blob_data:type_name -> bosdyn.api.DataBlob
	35, // 6: bosdyn.api.RecordSignalTicksRequest.header:type_name -> bosdyn.api.RequestHeader
	20, // 7: bosdyn.api.RecordSignalTicksRequest.tick_data:type_name -> bosdyn.api.SignalTick
	35, // 8: bosdyn.api.RecordEventsRequest.header:type_name -> bosdyn.api.RequestHeader
	21, // 9: bosdyn.api.RecordEventsRequest.events:type_name -> bosdyn.api.Event
	36, // 10: bosdyn.api.TextMessage.timestamp:type_name -> google.protobuf.Timestamp
	0,  // 11: bosdyn.api.TextMessage.level:type_name -> bosdyn.api.TextMessage.Level
	36, // 12: bosdyn.api.OperatorComment.timestamp:type_name -> google.protobuf.Timestamp
	36, // 13: bosdyn.api.DataBlob.timestamp:type_name -> google.protobuf.Timestamp
	29, // 14: bosdyn.api.SignalSchema.vars:type_name -> bosdyn.api.SignalSchema.Variable
	18, // 15: bosdyn.api.SignalSchemaId.schema:type_name -> bosdyn.api.SignalSchema
	36, // 16: bosdyn.api.SignalTick.timestamp:type_name -> google.protobuf.Timestamp
	2,  // 17: bosdyn.api.SignalTick.encoding:type_name -> bosdyn.api.SignalTick.Encoding
	36, // 18: bosdyn.api.Event.start_time:type_name -> google.protobuf.Timestamp
	36, // 19: bosdyn.api.Event.end_time:type_name -> google.protobuf.Timestamp
	3,  // 20: bosdyn.api.Event.level:type_name -> bosdyn.api.Event.Level
	37, // 21: bosdyn.api.Event.parameters:type_name -> bosdyn.api.Parameter
	4,  // 22: bosdyn.api.Event.log_preserve_hint:type_name -> bosdyn.api.Event.LogPreserveHint
	38, // 23: bosdyn.api.RecordTextMessagesResponse.header:type_name -> bosdyn.api.ResponseHeader
	30, // 24: bosdyn.api.RecordTextMessagesResponse.errors:type_name -> bosdyn.api.RecordTextMessagesResponse.Error
	38, // 25: bosdyn.api.RecordOperatorCommentsResponse.header:type_name -> bosdyn.api.ResponseHeader
	31, // 26: bosdyn.api.RecordOperatorCommentsResponse.errors:type_name -> bosdyn.api.RecordOperatorCommentsResponse.Error
	38, // 27: bosdyn.api.RecordDataBlobsResponse.header:type_name -> bosdyn.api.ResponseHeader
	32, // 28: bosdyn.api.RecordDataBlobsResponse.errors:type_name -> bosdyn.api.RecordDataBlobsResponse.Error
	38, // 29: bosdyn.api.RecordSignalTicksResponse.header:type_name -> bosdyn.api.ResponseHeader
	33, // 30: bosdyn.api.RecordSignalTicksResponse.errors:type_name -> bosdyn.api.RecordSignalTicksResponse.Error
	38, // 31: bosdyn.api.RecordEventsResponse.header:type_name -> bosdyn.api.ResponseHeader
	34, // 32: bosdyn.api.RecordEventsResponse.errors:type_name -> bosdyn.api.RecordEventsResponse.Error
	35, // 33: bosdyn.api.RegisterSignalSchemaRequest.header:type_name -> bosdyn.api.RequestHeader
	18, // 34: bosdyn.api.RegisterSignalSchemaRequest.schema:type_name -> bosdyn.api.SignalSchema
	38, // 35: bosdyn.api.RegisterSignalSchemaResponse.header:type_name -> bosdyn.api.ResponseHeader
	1,  // 36: bosdyn.api.SignalSchema.Variable.type:type_name -> bosdyn.api.SignalSchema.Variable.Type
	5,  // 37: bosdyn.api.RecordTextMessagesResponse.Error.type:type_name -> bosdyn.api.RecordTextMessagesResponse.Error.Type
	6,  // 38: bosdyn.api.RecordOperatorCommentsResponse.Error.type:type_name -> bosdyn.api.RecordOperatorCommentsResponse.Error.Type
	7,  // 39: bosdyn.api.RecordDataBlobsResponse.Error.type:type_name -> bosdyn.api.RecordDataBlobsResponse.Error.Type
	8,  // 40: bosdyn.api.RecordSignalTicksResponse.Error.type:type_name -> bosdyn.api.RecordSignalTicksResponse.Error.Type
	9,  // 41: bosdyn.api.RecordEventsResponse.Error.type:type_name -> bosdyn.api.RecordEventsResponse.Error.Type
	42, // [42:42] is the sub-list for method output_type
	42, // [42:42] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_bosdyn_api_data_buffer_proto_init() }
func file_bosdyn_api_data_buffer_proto_init() {
	if File_bosdyn_api_data_buffer_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_parameter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_data_buffer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordTextMessagesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordOperatorCommentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataBlobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSignalTicksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TextMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperatorComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSchemaId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalTick); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordTextMessagesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordOperatorCommentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataBlobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSignalTicksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSignalSchemaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterSignalSchemaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignalSchema_Variable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordTextMessagesResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordOperatorCommentsResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordDataBlobsResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordSignalTicksResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_data_buffer_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecordEventsResponse_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_data_buffer_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_data_buffer_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_data_buffer_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_data_buffer_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_data_buffer_proto_msgTypes,
	}.Build()
	File_bosdyn_api_data_buffer_proto = out.File
	file_bosdyn_api_data_buffer_proto_rawDesc = nil
	file_bosdyn_api_data_buffer_proto_goTypes = nil
	file_bosdyn_api_data_buffer_proto_depIdxs = nil
}
