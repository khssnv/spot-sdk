// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/power_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PowerServiceClient is the client API for PowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PowerServiceClient interface {
	// Starts a power command on the robot. A robot can only accept one power command at once.
	// Power commands, are not interruptible. Once a command is issued, it must complete before
	// another command can be issued.
	PowerCommand(ctx context.Context, in *PowerCommandRequest, opts ...grpc.CallOption) (*PowerCommandResponse, error)
	// Check the status of a power command.
	PowerCommandFeedback(ctx context.Context, in *PowerCommandFeedbackRequest, opts ...grpc.CallOption) (*PowerCommandFeedbackResponse, error)
}

type powerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPowerServiceClient(cc grpc.ClientConnInterface) PowerServiceClient {
	return &powerServiceClient{cc}
}

func (c *powerServiceClient) PowerCommand(ctx context.Context, in *PowerCommandRequest, opts ...grpc.CallOption) (*PowerCommandResponse, error) {
	out := new(PowerCommandResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.PowerService/PowerCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *powerServiceClient) PowerCommandFeedback(ctx context.Context, in *PowerCommandFeedbackRequest, opts ...grpc.CallOption) (*PowerCommandFeedbackResponse, error) {
	out := new(PowerCommandFeedbackResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.PowerService/PowerCommandFeedback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PowerServiceServer is the server API for PowerService service.
// All implementations must embed UnimplementedPowerServiceServer
// for forward compatibility
type PowerServiceServer interface {
	// Starts a power command on the robot. A robot can only accept one power command at once.
	// Power commands, are not interruptible. Once a command is issued, it must complete before
	// another command can be issued.
	PowerCommand(context.Context, *PowerCommandRequest) (*PowerCommandResponse, error)
	// Check the status of a power command.
	PowerCommandFeedback(context.Context, *PowerCommandFeedbackRequest) (*PowerCommandFeedbackResponse, error)
	mustEmbedUnimplementedPowerServiceServer()
}

// UnimplementedPowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPowerServiceServer struct {
}

func (UnimplementedPowerServiceServer) PowerCommand(context.Context, *PowerCommandRequest) (*PowerCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerCommand not implemented")
}
func (UnimplementedPowerServiceServer) PowerCommandFeedback(context.Context, *PowerCommandFeedbackRequest) (*PowerCommandFeedbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PowerCommandFeedback not implemented")
}
func (UnimplementedPowerServiceServer) mustEmbedUnimplementedPowerServiceServer() {}

// UnsafePowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PowerServiceServer will
// result in compilation errors.
type UnsafePowerServiceServer interface {
	mustEmbedUnimplementedPowerServiceServer()
}

func RegisterPowerServiceServer(s grpc.ServiceRegistrar, srv PowerServiceServer) {
	s.RegisterService(&PowerService_ServiceDesc, srv)
}

func _PowerService_PowerCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).PowerCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.PowerService/PowerCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).PowerCommand(ctx, req.(*PowerCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PowerService_PowerCommandFeedback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PowerCommandFeedbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PowerServiceServer).PowerCommandFeedback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.PowerService/PowerCommandFeedback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PowerServiceServer).PowerCommandFeedback(ctx, req.(*PowerCommandFeedbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PowerService_ServiceDesc is the grpc.ServiceDesc for PowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.PowerService",
	HandlerType: (*PowerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PowerCommand",
			Handler:    _PowerService_PowerCommand_Handler,
		},
		{
			MethodName: "PowerCommandFeedback",
			Handler:    _PowerService_PowerCommandFeedback_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/power_service.proto",
}
