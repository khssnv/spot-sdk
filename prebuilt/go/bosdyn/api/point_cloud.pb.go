// Copyright (c) 2022 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/point_cloud.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Point clouds may be encoded in different ways to preserve bandwidth or disk space.
type PointCloud_Encoding int32

const (
	// The point cloud has an unknown encoding.
	PointCloud_ENCODING_UNKNOWN PointCloud_Encoding = 0
	// Each point is x,y,z float32 value (12 bytes, little-endian) stored sequentially. This allows
	// the point cloud to be expressed in any range and resolution represented by floating point
	// numbers, but the point cloud will be larger than if one of the other encodings is used.
	PointCloud_ENCODING_XYZ_32F PointCloud_Encoding = 1
	// Each point is 3 signed int8s plus an extra shared signed int8s (4 byte).
	// byte layout: [..., p1_x, p1_y, p1_z, x, ...]
	// Each coordinate is mapped to a value between -1 and +1 (corresponding to a
	// minimum and maximum range).
	// The resulting point is:
	//   P = remap(p1 * f + p2, c * f, m)
	// Where:
	//   p1 = the highest byte in each dimension of the point.
	//   p2 = a vector of "extra" bytes converted to metric units.
	//     = [mod (x, f), mod(x/f, f), mod(x/(f^2), f)] - f/2
	//   x = the "extra" byte for each point.
	//   f = An integer scale factor.
	//   m = [max_x, max_y, max_z], the point cloud max bounds in meters.
	//   c = a remapping constant.
	// And:
	//  remap(a, b, c) = (a + b)/(2 * b) - c
	// Point clouds use 1/3 the memory of XYZ_32F, but have limits on resolution
	// and range. Points must not lie outside of the box of size [-m, m]. Within that box,
	// the resolution of the point cloud will depend on the encoding parameters.
	// For example if m = [10, 10, 10], and f = 5 with c = 127 the resolution is
	// approximately 1.5 cm per point.
	PointCloud_ENCODING_XYZ_4SC PointCloud_Encoding = 2
	// Each point is 3 signed int8s plus two extra shared signed int8s (5 byte).
	// The encoding is the same as XYZ_4SC, except the "extra" value x is a 16 bit integer.
	// This encoding has roughly double the resolution of XYZ_4SC, but takes up
	// an additional byte for each point.
	PointCloud_ENCODING_XYZ_5SC PointCloud_Encoding = 3
)

// Enum value maps for PointCloud_Encoding.
var (
	PointCloud_Encoding_name = map[int32]string{
		0: "ENCODING_UNKNOWN",
		1: "ENCODING_XYZ_32F",
		2: "ENCODING_XYZ_4SC",
		3: "ENCODING_XYZ_5SC",
	}
	PointCloud_Encoding_value = map[string]int32{
		"ENCODING_UNKNOWN": 0,
		"ENCODING_XYZ_32F": 1,
		"ENCODING_XYZ_4SC": 2,
		"ENCODING_XYZ_5SC": 3,
	}
)

func (x PointCloud_Encoding) Enum() *PointCloud_Encoding {
	p := new(PointCloud_Encoding)
	*p = x
	return p
}

func (x PointCloud_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointCloud_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_point_cloud_proto_enumTypes[0].Descriptor()
}

func (PointCloud_Encoding) Type() protoreflect.EnumType {
	return &file_bosdyn_api_point_cloud_proto_enumTypes[0]
}

func (x PointCloud_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointCloud_Encoding.Descriptor instead.
func (PointCloud_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{1, 0}
}

type PointCloudResponse_Status int32

const (
	// UNKNOWN should never be used.
	// An internal PointCloudService issue has happened if UNKNOWN is set.
	// None of the other fields are filled out.
	PointCloudResponse_STATUS_UNKNOWN PointCloudResponse_Status = 0
	// Call succeeded at filling out all the fields.
	PointCloudResponse_STATUS_OK PointCloudResponse_Status = 1
	// Failed to fill out PointCloudSource. All the other fields are not filled out.
	PointCloudResponse_STATUS_SOURCE_DATA_ERROR PointCloudResponse_Status = 2
	// There was a problem with the point cloud data.  Only the PointCloudSource is filled out.
	PointCloudResponse_STATUS_POINT_CLOUD_DATA_ERROR PointCloudResponse_Status = 3
	// Provided point cloud source was not found. One
	PointCloudResponse_STATUS_UNKNOWN_SOURCE PointCloudResponse_Status = 4
)

// Enum value maps for PointCloudResponse_Status.
var (
	PointCloudResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_SOURCE_DATA_ERROR",
		3: "STATUS_POINT_CLOUD_DATA_ERROR",
		4: "STATUS_UNKNOWN_SOURCE",
	}
	PointCloudResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":                0,
		"STATUS_OK":                     1,
		"STATUS_SOURCE_DATA_ERROR":      2,
		"STATUS_POINT_CLOUD_DATA_ERROR": 3,
		"STATUS_UNKNOWN_SOURCE":         4,
	}
)

func (x PointCloudResponse_Status) Enum() *PointCloudResponse_Status {
	p := new(PointCloudResponse_Status)
	*p = x
	return p
}

func (x PointCloudResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointCloudResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_point_cloud_proto_enumTypes[1].Descriptor()
}

func (PointCloudResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_point_cloud_proto_enumTypes[1]
}

func (x PointCloudResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointCloudResponse_Status.Descriptor instead.
func (PointCloudResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{6, 0}
}

// Information about a sensor or process that produces point clouds.
type PointCloudSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the point cloud source. This is intended to be unique accross all point cloud sources,
	// and should be human readable.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The frame name of the sensor. The transformation from vision_tform_sensor can be computed
	// by traversing the tree in the FrameTreeSnapshot.
	FrameNameSensor string `protobuf:"bytes,3,opt,name=frame_name_sensor,json=frameNameSensor,proto3" json:"frame_name_sensor,omitempty"`
	// Time that the data was produced on the sensor in the robot's clock.
	AcquisitionTime *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=acquisition_time,json=acquisitionTime,proto3" json:"acquisition_time,omitempty"`
	// A tree-based collection of transformations, which will include the transformations
	// to the point cloud data frame and the point cloud sensor frame.
	TransformsSnapshot *FrameTreeSnapshot `protobuf:"bytes,31,opt,name=transforms_snapshot,json=transformsSnapshot,proto3" json:"transforms_snapshot,omitempty"`
}

func (x *PointCloudSource) Reset() {
	*x = PointCloudSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointCloudSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointCloudSource) ProtoMessage() {}

func (x *PointCloudSource) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointCloudSource.ProtoReflect.Descriptor instead.
func (*PointCloudSource) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{0}
}

func (x *PointCloudSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PointCloudSource) GetFrameNameSensor() string {
	if x != nil {
		return x.FrameNameSensor
	}
	return ""
}

func (x *PointCloudSource) GetAcquisitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AcquisitionTime
	}
	return nil
}

func (x *PointCloudSource) GetTransformsSnapshot() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshot
	}
	return nil
}

// Data from a point-cloud producing sensor or process.
type PointCloud struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The sensor or process that produced the point cloud.
	Source *PointCloudSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	// The number of points in the point cloud.
	NumPoints int32 `protobuf:"varint,2,opt,name=num_points,json=numPoints,proto3" json:"num_points,omitempty"`
	// Representation of the underlying point cloud data.
	Encoding PointCloud_Encoding `protobuf:"varint,3,opt,name=encoding,proto3,enum=bosdyn.api.PointCloud_Encoding" json:"encoding,omitempty"`
	// Constants needed to decode the point cloud.
	EncodingParameters *PointCloud_EncodingParameters `protobuf:"bytes,4,opt,name=encoding_parameters,json=encodingParameters,proto3" json:"encoding_parameters,omitempty"`
	// Raw byte data representing the points.
	Data []byte `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PointCloud) Reset() {
	*x = PointCloud{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointCloud) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointCloud) ProtoMessage() {}

func (x *PointCloud) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointCloud.ProtoReflect.Descriptor instead.
func (*PointCloud) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{1}
}

func (x *PointCloud) GetSource() *PointCloudSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PointCloud) GetNumPoints() int32 {
	if x != nil {
		return x.NumPoints
	}
	return 0
}

func (x *PointCloud) GetEncoding() PointCloud_Encoding {
	if x != nil {
		return x.Encoding
	}
	return PointCloud_ENCODING_UNKNOWN
}

func (x *PointCloud) GetEncodingParameters() *PointCloud_EncodingParameters {
	if x != nil {
		return x.EncodingParameters
	}
	return nil
}

func (x *PointCloud) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListPointCloudSourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *ListPointCloudSourcesRequest) Reset() {
	*x = ListPointCloudSourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointCloudSourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointCloudSourcesRequest) ProtoMessage() {}

func (x *ListPointCloudSourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointCloudSourcesRequest.ProtoReflect.Descriptor instead.
func (*ListPointCloudSourcesRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{2}
}

func (x *ListPointCloudSourcesRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The GetPointCloud response message which returns any point cloud data associated with that service.
type ListPointCloudSourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response Header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The set of PointCloudSources available from this service.
	// May be empty if the service serves no point clouds (e.g., if no sensors were found on startup).
	PointCloudSources []*PointCloudSource `protobuf:"bytes,2,rep,name=point_cloud_sources,json=pointCloudSources,proto3" json:"point_cloud_sources,omitempty"`
}

func (x *ListPointCloudSourcesResponse) Reset() {
	*x = ListPointCloudSourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPointCloudSourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPointCloudSourcesResponse) ProtoMessage() {}

func (x *ListPointCloudSourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPointCloudSourcesResponse.ProtoReflect.Descriptor instead.
func (*ListPointCloudSourcesResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{3}
}

func (x *ListPointCloudSourcesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *ListPointCloudSourcesResponse) GetPointCloudSources() []*PointCloudSource {
	if x != nil {
		return x.PointCloudSources
	}
	return nil
}

type PointCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the point cloud source to request from.
	PointCloudSourceName string `protobuf:"bytes,1,opt,name=point_cloud_source_name,json=pointCloudSourceName,proto3" json:"point_cloud_source_name,omitempty"`
}

func (x *PointCloudRequest) Reset() {
	*x = PointCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointCloudRequest) ProtoMessage() {}

func (x *PointCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointCloudRequest.ProtoReflect.Descriptor instead.
func (*PointCloudRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{4}
}

func (x *PointCloudRequest) GetPointCloudSourceName() string {
	if x != nil {
		return x.PointCloudSourceName
	}
	return ""
}

// The GetPointCloud request message to ask a specific point cloud service for data.
type GetPointCloudRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Sources to retrieve from. The service will return a response for each PointCloudRequest.
	PointCloudRequests []*PointCloudRequest `protobuf:"bytes,2,rep,name=point_cloud_requests,json=pointCloudRequests,proto3" json:"point_cloud_requests,omitempty"`
}

func (x *GetPointCloudRequest) Reset() {
	*x = GetPointCloudRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPointCloudRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointCloudRequest) ProtoMessage() {}

func (x *GetPointCloudRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointCloudRequest.ProtoReflect.Descriptor instead.
func (*GetPointCloudRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{5}
}

func (x *GetPointCloudRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetPointCloudRequest) GetPointCloudRequests() []*PointCloudRequest {
	if x != nil {
		return x.PointCloudRequests
	}
	return nil
}

type PointCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Return status for the request.
	Status PointCloudResponse_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.PointCloudResponse_Status" json:"status,omitempty"`
	// The current point cloud from the service.
	PointCloud *PointCloud `protobuf:"bytes,2,opt,name=point_cloud,json=pointCloud,proto3" json:"point_cloud,omitempty"`
}

func (x *PointCloudResponse) Reset() {
	*x = PointCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointCloudResponse) ProtoMessage() {}

func (x *PointCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointCloudResponse.ProtoReflect.Descriptor instead.
func (*PointCloudResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{6}
}

func (x *PointCloudResponse) GetStatus() PointCloudResponse_Status {
	if x != nil {
		return x.Status
	}
	return PointCloudResponse_STATUS_UNKNOWN
}

func (x *PointCloudResponse) GetPointCloud() *PointCloud {
	if x != nil {
		return x.PointCloud
	}
	return nil
}

type GetPointCloudResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The resulting point clouds for each requested source.
	PointCloudResponses []*PointCloudResponse `protobuf:"bytes,4,rep,name=point_cloud_responses,json=pointCloudResponses,proto3" json:"point_cloud_responses,omitempty"`
}

func (x *GetPointCloudResponse) Reset() {
	*x = GetPointCloudResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPointCloudResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPointCloudResponse) ProtoMessage() {}

func (x *GetPointCloudResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPointCloudResponse.ProtoReflect.Descriptor instead.
func (*GetPointCloudResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{7}
}

func (x *GetPointCloudResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetPointCloudResponse) GetPointCloudResponses() []*PointCloudResponse {
	if x != nil {
		return x.PointCloudResponses
	}
	return nil
}

// Parameters needed to decode the point cloud.
type PointCloud_EncodingParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Used in the remapping process from bytes to metric units. (unitless)
	ScaleFactor int32 `protobuf:"varint,1,opt,name=scale_factor,json=scaleFactor,proto3" json:"scale_factor,omitempty"`
	// In XYZ_4SC and XYZ_5SC, the point cloud is assumed to lie inside a box
	// centered in the data frame. max_x, max_y, max_z are half the dimensions
	// of that box. These dimensions should be assumed to be meters.
	MaxX float64 `protobuf:"fixed64,2,opt,name=max_x,json=maxX,proto3" json:"max_x,omitempty"`
	// max_y is half the dimensions of the assumed box (for XYZ_4SC and XYZ_5SC). These
	// dimensions should be assumed to be meters.
	MaxY float64 `protobuf:"fixed64,3,opt,name=max_y,json=maxY,proto3" json:"max_y,omitempty"`
	// max_z is half the dimensions of the assumed box (for XYZ_4SC and XYZ_5SC). These
	// dimensions should be assumed to be meters.
	MaxZ float64 `protobuf:"fixed64,4,opt,name=max_z,json=maxZ,proto3" json:"max_z,omitempty"`
	// Used in the remapping process from bytes to metric units. (unitless)
	// For XYZ_4SC and XYZ_5C, this should equal 127.
	RemappingConstant float64 `protobuf:"fixed64,5,opt,name=remapping_constant,json=remappingConstant,proto3" json:"remapping_constant,omitempty"`
	// Number of bytes in each point in this encoding.
	BytesPerPoint int32 `protobuf:"varint,6,opt,name=bytes_per_point,json=bytesPerPoint,proto3" json:"bytes_per_point,omitempty"`
}

func (x *PointCloud_EncodingParameters) Reset() {
	*x = PointCloud_EncodingParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_point_cloud_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointCloud_EncodingParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointCloud_EncodingParameters) ProtoMessage() {}

func (x *PointCloud_EncodingParameters) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_point_cloud_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointCloud_EncodingParameters.ProtoReflect.Descriptor instead.
func (*PointCloud_EncodingParameters) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_point_cloud_proto_rawDescGZIP(), []int{1, 0}
}

func (x *PointCloud_EncodingParameters) GetScaleFactor() int32 {
	if x != nil {
		return x.ScaleFactor
	}
	return 0
}

func (x *PointCloud_EncodingParameters) GetMaxX() float64 {
	if x != nil {
		return x.MaxX
	}
	return 0
}

func (x *PointCloud_EncodingParameters) GetMaxY() float64 {
	if x != nil {
		return x.MaxY
	}
	return 0
}

func (x *PointCloud_EncodingParameters) GetMaxZ() float64 {
	if x != nil {
		return x.MaxZ
	}
	return 0
}

func (x *PointCloud_EncodingParameters) GetRemappingConstant() float64 {
	if x != nil {
		return x.RemappingConstant
	}
	return 0
}

func (x *PointCloud_EncodingParameters) GetBytesPerPoint() int32 {
	if x != nil {
		return x.BytesPerPoint
	}
	return 0
}

var File_bosdyn_api_point_cloud_proto protoreflect.FileDescriptor

var file_bosdyn_api_point_cloud_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xef, 0x01, 0x0a, 0x10, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x6e, 0x73, 0x6f, 0x72, 0x12, 0x45, 0x0a, 0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75,
	0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xce, 0x04, 0x0a, 0x0a, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x13, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0xcd, 0x01, 0x0a, 0x12, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x63, 0x61,
	0x6c, 0x65, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x05,
	0x6d, 0x61, 0x78, 0x5f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x78,
	0x58, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x5f, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x04, 0x6d, 0x61, 0x78, 0x59, 0x12, 0x13, 0x0a, 0x05, 0x6d, 0x61, 0x78, 0x5f, 0x7a, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x78, 0x5a, 0x12, 0x2d, 0x0a, 0x12, 0x72,
	0x65, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x22, 0x62, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x10, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x58, 0x59, 0x5a, 0x5f, 0x33, 0x32, 0x46, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x58, 0x59, 0x5a, 0x5f, 0x34, 0x53, 0x43, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x58, 0x59, 0x5a,
	0x5f, 0x35, 0x53, 0x43, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x09,
	0x10, 0x0a, 0x22, 0x51, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4c, 0x0a, 0x13, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x11, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x4f, 0x0a, 0x14, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x12,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x73, 0x22, 0x96, 0x02, 0x0a, 0x12, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x0a, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x21, 0x0a,
	0x1d, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x04, 0x22, 0x9f, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x52, 0x0a, 0x15, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x13, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x42, 0x44, 0x42,
	0x0f, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73,
	0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65,
	0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_point_cloud_proto_rawDescOnce sync.Once
	file_bosdyn_api_point_cloud_proto_rawDescData = file_bosdyn_api_point_cloud_proto_rawDesc
)

func file_bosdyn_api_point_cloud_proto_rawDescGZIP() []byte {
	file_bosdyn_api_point_cloud_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_point_cloud_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_point_cloud_proto_rawDescData)
	})
	return file_bosdyn_api_point_cloud_proto_rawDescData
}

var file_bosdyn_api_point_cloud_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_bosdyn_api_point_cloud_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_bosdyn_api_point_cloud_proto_goTypes = []interface{}{
	(PointCloud_Encoding)(0),              // 0: bosdyn.api.PointCloud.Encoding
	(PointCloudResponse_Status)(0),        // 1: bosdyn.api.PointCloudResponse.Status
	(*PointCloudSource)(nil),              // 2: bosdyn.api.PointCloudSource
	(*PointCloud)(nil),                    // 3: bosdyn.api.PointCloud
	(*ListPointCloudSourcesRequest)(nil),  // 4: bosdyn.api.ListPointCloudSourcesRequest
	(*ListPointCloudSourcesResponse)(nil), // 5: bosdyn.api.ListPointCloudSourcesResponse
	(*PointCloudRequest)(nil),             // 6: bosdyn.api.PointCloudRequest
	(*GetPointCloudRequest)(nil),          // 7: bosdyn.api.GetPointCloudRequest
	(*PointCloudResponse)(nil),            // 8: bosdyn.api.PointCloudResponse
	(*GetPointCloudResponse)(nil),         // 9: bosdyn.api.GetPointCloudResponse
	(*PointCloud_EncodingParameters)(nil), // 10: bosdyn.api.PointCloud.EncodingParameters
	(*timestamppb.Timestamp)(nil),         // 11: google.protobuf.Timestamp
	(*FrameTreeSnapshot)(nil),             // 12: bosdyn.api.FrameTreeSnapshot
	(*RequestHeader)(nil),                 // 13: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),                // 14: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_point_cloud_proto_depIdxs = []int32{
	11, // 0: bosdyn.api.PointCloudSource.acquisition_time:type_name -> google.protobuf.Timestamp
	12, // 1: bosdyn.api.PointCloudSource.transforms_snapshot:type_name -> bosdyn.api.FrameTreeSnapshot
	2,  // 2: bosdyn.api.PointCloud.source:type_name -> bosdyn.api.PointCloudSource
	0,  // 3: bosdyn.api.PointCloud.encoding:type_name -> bosdyn.api.PointCloud.Encoding
	10, // 4: bosdyn.api.PointCloud.encoding_parameters:type_name -> bosdyn.api.PointCloud.EncodingParameters
	13, // 5: bosdyn.api.ListPointCloudSourcesRequest.header:type_name -> bosdyn.api.RequestHeader
	14, // 6: bosdyn.api.ListPointCloudSourcesResponse.header:type_name -> bosdyn.api.ResponseHeader
	2,  // 7: bosdyn.api.ListPointCloudSourcesResponse.point_cloud_sources:type_name -> bosdyn.api.PointCloudSource
	13, // 8: bosdyn.api.GetPointCloudRequest.header:type_name -> bosdyn.api.RequestHeader
	6,  // 9: bosdyn.api.GetPointCloudRequest.point_cloud_requests:type_name -> bosdyn.api.PointCloudRequest
	1,  // 10: bosdyn.api.PointCloudResponse.status:type_name -> bosdyn.api.PointCloudResponse.Status
	3,  // 11: bosdyn.api.PointCloudResponse.point_cloud:type_name -> bosdyn.api.PointCloud
	14, // 12: bosdyn.api.GetPointCloudResponse.header:type_name -> bosdyn.api.ResponseHeader
	8,  // 13: bosdyn.api.GetPointCloudResponse.point_cloud_responses:type_name -> bosdyn.api.PointCloudResponse
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_bosdyn_api_point_cloud_proto_init() }
func file_bosdyn_api_point_cloud_proto_init() {
	if File_bosdyn_api_point_cloud_proto != nil {
		return
	}
	file_bosdyn_api_header_proto_init()
	file_bosdyn_api_geometry_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_point_cloud_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointCloudSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointCloud); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointCloudSourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPointCloudSourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPointCloudRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPointCloudResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_point_cloud_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointCloud_EncodingParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_point_cloud_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_point_cloud_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_point_cloud_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_point_cloud_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_point_cloud_proto_msgTypes,
	}.Build()
	File_bosdyn_api_point_cloud_proto = out.File
	file_bosdyn_api_point_cloud_proto_rawDesc = nil
	file_bosdyn_api_point_cloud_proto_goTypes = nil
	file_bosdyn_api_point_cloud_proto_depIdxs = nil
}
