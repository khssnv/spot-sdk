// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/local_grid.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Describes the data type of a cell.
type LocalGrid_CellFormat int32

const (
	// Not specified -- not a valid value.
	LocalGrid_CELL_FORMAT_UNKNOWN LocalGrid_CellFormat = 0
	// Each cell of the local grid is encoded as a little-endian 32-bit floating point number.
	LocalGrid_CELL_FORMAT_FLOAT32 LocalGrid_CellFormat = 1
	// Each cell of the local grid is encoded as a little-endian 64-bit floating point number.
	LocalGrid_CELL_FORMAT_FLOAT64 LocalGrid_CellFormat = 2
	// Each cell of the local grid is encoded as a signed 8-bit integer.
	LocalGrid_CELL_FORMAT_INT8 LocalGrid_CellFormat = 3
	// Each cell of the local grid is encoded as an unsigned 8-bit integer.
	LocalGrid_CELL_FORMAT_UINT8 LocalGrid_CellFormat = 4
	// Each cell of the local grid is encoded as a little-endian signed 16-bit integer.
	LocalGrid_CELL_FORMAT_INT16 LocalGrid_CellFormat = 5
	// Each cell of the local grid is encoded as a little-endian unsigned 16-bit integer.
	LocalGrid_CELL_FORMAT_UINT16 LocalGrid_CellFormat = 6
)

// Enum value maps for LocalGrid_CellFormat.
var (
	LocalGrid_CellFormat_name = map[int32]string{
		0: "CELL_FORMAT_UNKNOWN",
		1: "CELL_FORMAT_FLOAT32",
		2: "CELL_FORMAT_FLOAT64",
		3: "CELL_FORMAT_INT8",
		4: "CELL_FORMAT_UINT8",
		5: "CELL_FORMAT_INT16",
		6: "CELL_FORMAT_UINT16",
	}
	LocalGrid_CellFormat_value = map[string]int32{
		"CELL_FORMAT_UNKNOWN": 0,
		"CELL_FORMAT_FLOAT32": 1,
		"CELL_FORMAT_FLOAT64": 2,
		"CELL_FORMAT_INT8":    3,
		"CELL_FORMAT_UINT8":   4,
		"CELL_FORMAT_INT16":   5,
		"CELL_FORMAT_UINT16":  6,
	}
)

func (x LocalGrid_CellFormat) Enum() *LocalGrid_CellFormat {
	p := new(LocalGrid_CellFormat)
	*p = x
	return p
}

func (x LocalGrid_CellFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalGrid_CellFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_local_grid_proto_enumTypes[0].Descriptor()
}

func (LocalGrid_CellFormat) Type() protoreflect.EnumType {
	return &file_bosdyn_api_local_grid_proto_enumTypes[0]
}

func (x LocalGrid_CellFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalGrid_CellFormat.Descriptor instead.
func (LocalGrid_CellFormat) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{3, 0}
}

// Encoding used for storing the local grid.
type LocalGrid_Encoding int32

const (
	// Not specified -- not a valid value.
	LocalGrid_ENCODING_UNKNOWN LocalGrid_Encoding = 0
	// Cells are stored packed uncompressed.
	LocalGrid_ENCODING_RAW LocalGrid_Encoding = 1
	// Run-length encoding: repeat counts stored in rle_counts.
	LocalGrid_ENCODING_RLE LocalGrid_Encoding = 2
)

// Enum value maps for LocalGrid_Encoding.
var (
	LocalGrid_Encoding_name = map[int32]string{
		0: "ENCODING_UNKNOWN",
		1: "ENCODING_RAW",
		2: "ENCODING_RLE",
	}
	LocalGrid_Encoding_value = map[string]int32{
		"ENCODING_UNKNOWN": 0,
		"ENCODING_RAW":     1,
		"ENCODING_RLE":     2,
	}
)

func (x LocalGrid_Encoding) Enum() *LocalGrid_Encoding {
	p := new(LocalGrid_Encoding)
	*p = x
	return p
}

func (x LocalGrid_Encoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalGrid_Encoding) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_local_grid_proto_enumTypes[1].Descriptor()
}

func (LocalGrid_Encoding) Type() protoreflect.EnumType {
	return &file_bosdyn_api_local_grid_proto_enumTypes[1]
}

func (x LocalGrid_Encoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalGrid_Encoding.Descriptor instead.
func (LocalGrid_Encoding) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{3, 1}
}

type LocalGridResponse_Status int32

const (
	// Not specified -- not a valid value.
	LocalGridResponse_STATUS_UNKNOWN LocalGridResponse_Status = 0
	// LocalGrid was returned successfully.
	LocalGridResponse_STATUS_OK LocalGridResponse_Status = 1
	// The requested local grid-type is unknown.
	LocalGridResponse_STATUS_NO_SUCH_GRID LocalGridResponse_Status = 2
	// The request local grid data is not available at this time.
	LocalGridResponse_STATUS_DATA_UNAVAILABLE LocalGridResponse_Status = 3
	// The local grid data was not valid for some reason.
	LocalGridResponse_STATUS_DATA_INVALID LocalGridResponse_Status = 4
)

// Enum value maps for LocalGridResponse_Status.
var (
	LocalGridResponse_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_OK",
		2: "STATUS_NO_SUCH_GRID",
		3: "STATUS_DATA_UNAVAILABLE",
		4: "STATUS_DATA_INVALID",
	}
	LocalGridResponse_Status_value = map[string]int32{
		"STATUS_UNKNOWN":          0,
		"STATUS_OK":               1,
		"STATUS_NO_SUCH_GRID":     2,
		"STATUS_DATA_UNAVAILABLE": 3,
		"STATUS_DATA_INVALID":     4,
	}
)

func (x LocalGridResponse_Status) Enum() *LocalGridResponse_Status {
	p := new(LocalGridResponse_Status)
	*p = x
	return p
}

func (x LocalGridResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LocalGridResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_local_grid_proto_enumTypes[2].Descriptor()
}

func (LocalGridResponse_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_local_grid_proto_enumTypes[2]
}

func (x LocalGridResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LocalGridResponse_Status.Descriptor instead.
func (LocalGridResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{4, 0}
}

// Representation of an available type of local grid.
type LocalGridType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *LocalGridType) Reset() {
	*x = LocalGridType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGridType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGridType) ProtoMessage() {}

func (x *LocalGridType) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGridType.ProtoReflect.Descriptor instead.
func (*LocalGridType) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{0}
}

func (x *LocalGridType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// LocalGrids are requested by LocalGridType string name.
type LocalGridRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LocalGridTypeName string `protobuf:"bytes,1,opt,name=local_grid_type_name,json=localGridTypeName,proto3" json:"local_grid_type_name,omitempty"`
}

func (x *LocalGridRequest) Reset() {
	*x = LocalGridRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGridRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGridRequest) ProtoMessage() {}

func (x *LocalGridRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGridRequest.ProtoReflect.Descriptor instead.
func (*LocalGridRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{1}
}

func (x *LocalGridRequest) GetLocalGridTypeName() string {
	if x != nil {
		return x.LocalGridTypeName
	}
	return ""
}

// Information about the dimensions of the local grid, including the number of grid cells and
// the size of each cell.
type LocalGridExtent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of each side of the individual cells in the local grid (in meters).
	// The area of a grid cell will be (cell_size x cell_size).
	CellSize float64 `protobuf:"fixed64,2,opt,name=cell_size,json=cellSize,proto3" json:"cell_size,omitempty"`
	// Number of cells along x extent of local grid (number of columns in local grid/ the local
	// grid width). Note, that the (num_cells_x)x(num_cells_y) represents the total number of grid
	// cells in the local grid.
	NumCellsX int32 `protobuf:"varint,3,opt,name=num_cells_x,json=numCellsX,proto3" json:"num_cells_x,omitempty"`
	// Number of cells along y extent of local grid (number of rows in local grid).
	// Note, that the (num_cells_x)x(num_cells_y) represents the totla number of grid
	// cells in the local grid.
	NumCellsY int32 `protobuf:"varint,4,opt,name=num_cells_y,json=numCellsY,proto3" json:"num_cells_y,omitempty"`
}

func (x *LocalGridExtent) Reset() {
	*x = LocalGridExtent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGridExtent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGridExtent) ProtoMessage() {}

func (x *LocalGridExtent) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGridExtent.ProtoReflect.Descriptor instead.
func (*LocalGridExtent) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{2}
}

func (x *LocalGridExtent) GetCellSize() float64 {
	if x != nil {
		return x.CellSize
	}
	return 0
}

func (x *LocalGridExtent) GetNumCellsX() int32 {
	if x != nil {
		return x.NumCellsX
	}
	return 0
}

func (x *LocalGridExtent) GetNumCellsY() int32 {
	if x != nil {
		return x.NumCellsY
	}
	return 0
}

// A grid-based local grid structure, which can represent different kinds of data, such as terrain
// or obstacle data.
type LocalGrid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The human readable string name that is used to identify the type of local grid data.
	LocalGridTypeName string `protobuf:"bytes,1,opt,name=local_grid_type_name,json=localGridTypeName,proto3" json:"local_grid_type_name,omitempty"`
	// The time at which the local grid data was computed and last valid at.
	AcquisitionTime *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=acquisition_time,json=acquisitionTime,proto3" json:"acquisition_time,omitempty"`
	// A tree-based collection of transformations, which will include the transformations to each of
	// the returned local grids in addition to transformations to the common frames ("vision", "body", "odom").
	// All transforms within the snapshot are at the acquistion time of the local grid.
	TransformsSnapshot *FrameTreeSnapshot `protobuf:"bytes,31,opt,name=transforms_snapshot,json=transformsSnapshot,proto3" json:"transforms_snapshot,omitempty"`
	// The frame name for the local grid data. This frame refers to the corner of cell (0, 0), such that
	// the map data is in the +x, +y quadrant.
	// The cell data is packed in x-y order, so the cell at:
	//   data[xi + extent.num_cells_x * yj]
	// has its center at position:
	//   {(xi + 0.5) * extent.cell_size, (yj + 0.5) * extent.cell_size}.
	FrameNameLocalGridData string `protobuf:"bytes,11,opt,name=frame_name_local_grid_data,json=frameNameLocalGridData,proto3" json:"frame_name_local_grid_data,omitempty"`
	// Location, size and resolution of the local grid.
	Extent *LocalGridExtent `protobuf:"bytes,3,opt,name=extent,proto3" json:"extent,omitempty"`
	// The data type of all individual cells in the local grid.
	CellFormat LocalGrid_CellFormat `protobuf:"varint,4,opt,name=cell_format,json=cellFormat,proto3,enum=bosdyn.api.LocalGrid_CellFormat" json:"cell_format,omitempty"`
	// The encoding for the 'data' field of the local grid message.
	Encoding LocalGrid_Encoding `protobuf:"varint,5,opt,name=encoding,proto3,enum=bosdyn.api.LocalGrid_Encoding" json:"encoding,omitempty"`
	// The encoded local grid representation.
	// Cells are encoded according to the encoding enum, and are stored in in row-major order (x-major).
	// This means that the data field has data entered row by row. The grid cell located at (i, j) will be
	// at the (index = i * num_cells_x + j) within the data array.
	Data []byte `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	// RLE pixel repetition counts: use data[i] repeated rle_counts[i] times when decoding the
	// bytes data field.
	RleCounts []int32 `protobuf:"varint,7,rep,packed,name=rle_counts,json=rleCounts,proto3" json:"rle_counts,omitempty"`
	// The scale for the cell value data; only valid if it is a non-zero number.
	CellValueScale float64 `protobuf:"fixed64,8,opt,name=cell_value_scale,json=cellValueScale,proto3" json:"cell_value_scale,omitempty"`
	// A fixed value offset that is applied to each value of the cell data.
	// Actual values in local grid are: (({value from data} * cell_value_scale) + cell_value_offset).
	CellValueOffset float64 `protobuf:"fixed64,9,opt,name=cell_value_offset,json=cellValueOffset,proto3" json:"cell_value_offset,omitempty"`
}

func (x *LocalGrid) Reset() {
	*x = LocalGrid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGrid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGrid) ProtoMessage() {}

func (x *LocalGrid) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGrid.ProtoReflect.Descriptor instead.
func (*LocalGrid) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{3}
}

func (x *LocalGrid) GetLocalGridTypeName() string {
	if x != nil {
		return x.LocalGridTypeName
	}
	return ""
}

func (x *LocalGrid) GetAcquisitionTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AcquisitionTime
	}
	return nil
}

func (x *LocalGrid) GetTransformsSnapshot() *FrameTreeSnapshot {
	if x != nil {
		return x.TransformsSnapshot
	}
	return nil
}

func (x *LocalGrid) GetFrameNameLocalGridData() string {
	if x != nil {
		return x.FrameNameLocalGridData
	}
	return ""
}

func (x *LocalGrid) GetExtent() *LocalGridExtent {
	if x != nil {
		return x.Extent
	}
	return nil
}

func (x *LocalGrid) GetCellFormat() LocalGrid_CellFormat {
	if x != nil {
		return x.CellFormat
	}
	return LocalGrid_CELL_FORMAT_UNKNOWN
}

func (x *LocalGrid) GetEncoding() LocalGrid_Encoding {
	if x != nil {
		return x.Encoding
	}
	return LocalGrid_ENCODING_UNKNOWN
}

func (x *LocalGrid) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *LocalGrid) GetRleCounts() []int32 {
	if x != nil {
		return x.RleCounts
	}
	return nil
}

func (x *LocalGrid) GetCellValueScale() float64 {
	if x != nil {
		return x.CellValueScale
	}
	return 0
}

func (x *LocalGrid) GetCellValueOffset() float64 {
	if x != nil {
		return x.CellValueOffset
	}
	return 0
}

// The local grid response message will contain either the local grid or an error status.
type LocalGridResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type name of the local grid included in this response.
	LocalGridTypeName string `protobuf:"bytes,1,opt,name=local_grid_type_name,json=localGridTypeName,proto3" json:"local_grid_type_name,omitempty"`
	// Status of the request for the individual local grid.
	Status LocalGridResponse_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.LocalGridResponse_Status" json:"status,omitempty"`
	// The requested local grid data.
	LocalGrid *LocalGrid `protobuf:"bytes,3,opt,name=local_grid,json=localGrid,proto3" json:"local_grid,omitempty"`
}

func (x *LocalGridResponse) Reset() {
	*x = LocalGridResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalGridResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalGridResponse) ProtoMessage() {}

func (x *LocalGridResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalGridResponse.ProtoReflect.Descriptor instead.
func (*LocalGridResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{4}
}

func (x *LocalGridResponse) GetLocalGridTypeName() string {
	if x != nil {
		return x.LocalGridTypeName
	}
	return ""
}

func (x *LocalGridResponse) GetStatus() LocalGridResponse_Status {
	if x != nil {
		return x.Status
	}
	return LocalGridResponse_STATUS_UNKNOWN
}

func (x *LocalGridResponse) GetLocalGrid() *LocalGrid {
	if x != nil {
		return x.LocalGrid
	}
	return nil
}

// The GetLocalGridTypes request message asks to the local grid types.
type GetLocalGridTypesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *GetLocalGridTypesRequest) Reset() {
	*x = GetLocalGridTypesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalGridTypesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalGridTypesRequest) ProtoMessage() {}

func (x *GetLocalGridTypesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalGridTypesRequest.ProtoReflect.Descriptor instead.
func (*GetLocalGridTypesRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{5}
}

func (x *GetLocalGridTypesRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

// The GetLocalGridTypes response message returns to get all known string names for local grid types.
type GetLocalGridTypesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The list of available local grid types.
	LocalGridType []*LocalGridType `protobuf:"bytes,2,rep,name=local_grid_type,json=localGridType,proto3" json:"local_grid_type,omitempty"`
}

func (x *GetLocalGridTypesResponse) Reset() {
	*x = GetLocalGridTypesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalGridTypesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalGridTypesResponse) ProtoMessage() {}

func (x *GetLocalGridTypesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalGridTypesResponse.ProtoReflect.Descriptor instead.
func (*GetLocalGridTypesResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{6}
}

func (x *GetLocalGridTypesResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetLocalGridTypesResponse) GetLocalGridType() []*LocalGridType {
	if x != nil {
		return x.LocalGridType
	}
	return nil
}

// The GetLocalGrid request message can request for multiple different types of local grids at one time.
type GetLocalGridsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common request header.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Specifications of the requested local grids.
	LocalGridRequests []*LocalGridRequest `protobuf:"bytes,2,rep,name=local_grid_requests,json=localGridRequests,proto3" json:"local_grid_requests,omitempty"`
}

func (x *GetLocalGridsRequest) Reset() {
	*x = GetLocalGridsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalGridsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalGridsRequest) ProtoMessage() {}

func (x *GetLocalGridsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalGridsRequest.ProtoReflect.Descriptor instead.
func (*GetLocalGridsRequest) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{7}
}

func (x *GetLocalGridsRequest) GetHeader() *RequestHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetLocalGridsRequest) GetLocalGridRequests() []*LocalGridRequest {
	if x != nil {
		return x.LocalGridRequests
	}
	return nil
}

// The GetLocalGrid response message replies with all of the local grid data for the requested types, and
// a numerical count representing the amount of status errors that occurred when getting this data.
type GetLocalGridsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Common response header.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// Response of local grid or error status for each requested local grid.
	LocalGridResponses []*LocalGridResponse `protobuf:"bytes,2,rep,name=local_grid_responses,json=localGridResponses,proto3" json:"local_grid_responses,omitempty"`
	// The number of individual local grids requests which could not be satisfied.
	NumLocalGridErrors int32 `protobuf:"varint,3,opt,name=num_local_grid_errors,json=numLocalGridErrors,proto3" json:"num_local_grid_errors,omitempty"`
}

func (x *GetLocalGridsResponse) Reset() {
	*x = GetLocalGridsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_local_grid_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalGridsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalGridsResponse) ProtoMessage() {}

func (x *GetLocalGridsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_local_grid_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalGridsResponse.ProtoReflect.Descriptor instead.
func (*GetLocalGridsResponse) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_local_grid_proto_rawDescGZIP(), []int{8}
}

func (x *GetLocalGridsResponse) GetHeader() *ResponseHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *GetLocalGridsResponse) GetLocalGridResponses() []*LocalGridResponse {
	if x != nil {
		return x.LocalGridResponses
	}
	return nil
}

func (x *GetLocalGridsResponse) GetNumLocalGridErrors() int32 {
	if x != nil {
		return x.NumLocalGridErrors
	}
	return 0
}

var File_bosdyn_api_local_grid_proto protoreflect.FileDescriptor

var file_bosdyn_api_local_grid_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x23,
	0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x0f, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x47, 0x72, 0x69, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x63, 0x65, 0x6c, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x58, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x5f, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e,
	0x75, 0x6d, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x59, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0xc8,
	0x06, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a,
	0x10, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0f, 0x61, 0x63, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x54, 0x72, 0x65, 0x65, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x33, 0x0a, 0x06, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x65,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69,
	0x64, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0a, 0x63, 0x65,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69,
	0x64, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x72, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x63, 0x65,
	0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0xb3, 0x01,
	0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x17, 0x0a, 0x13,
	0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x17,
	0x0a, 0x13, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x46, 0x4c,
	0x4f, 0x41, 0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x45, 0x4c, 0x4c, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x49, 0x4e,
	0x54, 0x38, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x52,
	0x4d, 0x41, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x43,
	0x45, 0x4c, 0x4c, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x55, 0x49, 0x4e, 0x54, 0x31,
	0x36, 0x10, 0x06, 0x22, 0x44, 0x0a, 0x08, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e,
	0x47, 0x5f, 0x52, 0x41, 0x57, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x5f, 0x52, 0x4c, 0x45, 0x10, 0x02, 0x22, 0xb4, 0x02, 0x0a, 0x11, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x34,
	0x0a, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x47, 0x72, 0x69, 0x64, 0x22, 0x7a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x5f, 0x53,
	0x55, 0x43, 0x48, 0x5f, 0x47, 0x52, 0x49, 0x44, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04,
	0x22, 0x4d, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22,
	0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x97, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x47, 0x72, 0x69, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x4c, 0x0a, 0x13, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x11, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0xcf,
	0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x4f, 0x0a, 0x14,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x47, 0x72, 0x69, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x31, 0x0a,
	0x15, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6e, 0x75,
	0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x42, 0x43, 0x42, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x47, 0x72, 0x69, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b,
	0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73, 0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70,
	0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79,
	0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_local_grid_proto_rawDescOnce sync.Once
	file_bosdyn_api_local_grid_proto_rawDescData = file_bosdyn_api_local_grid_proto_rawDesc
)

func file_bosdyn_api_local_grid_proto_rawDescGZIP() []byte {
	file_bosdyn_api_local_grid_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_local_grid_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_local_grid_proto_rawDescData)
	})
	return file_bosdyn_api_local_grid_proto_rawDescData
}

var file_bosdyn_api_local_grid_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_bosdyn_api_local_grid_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_bosdyn_api_local_grid_proto_goTypes = []interface{}{
	(LocalGrid_CellFormat)(0),         // 0: bosdyn.api.LocalGrid.CellFormat
	(LocalGrid_Encoding)(0),           // 1: bosdyn.api.LocalGrid.Encoding
	(LocalGridResponse_Status)(0),     // 2: bosdyn.api.LocalGridResponse.Status
	(*LocalGridType)(nil),             // 3: bosdyn.api.LocalGridType
	(*LocalGridRequest)(nil),          // 4: bosdyn.api.LocalGridRequest
	(*LocalGridExtent)(nil),           // 5: bosdyn.api.LocalGridExtent
	(*LocalGrid)(nil),                 // 6: bosdyn.api.LocalGrid
	(*LocalGridResponse)(nil),         // 7: bosdyn.api.LocalGridResponse
	(*GetLocalGridTypesRequest)(nil),  // 8: bosdyn.api.GetLocalGridTypesRequest
	(*GetLocalGridTypesResponse)(nil), // 9: bosdyn.api.GetLocalGridTypesResponse
	(*GetLocalGridsRequest)(nil),      // 10: bosdyn.api.GetLocalGridsRequest
	(*GetLocalGridsResponse)(nil),     // 11: bosdyn.api.GetLocalGridsResponse
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
	(*FrameTreeSnapshot)(nil),         // 13: bosdyn.api.FrameTreeSnapshot
	(*RequestHeader)(nil),             // 14: bosdyn.api.RequestHeader
	(*ResponseHeader)(nil),            // 15: bosdyn.api.ResponseHeader
}
var file_bosdyn_api_local_grid_proto_depIdxs = []int32{
	12, // 0: bosdyn.api.LocalGrid.acquisition_time:type_name -> google.protobuf.Timestamp
	13, // 1: bosdyn.api.LocalGrid.transforms_snapshot:type_name -> bosdyn.api.FrameTreeSnapshot
	5,  // 2: bosdyn.api.LocalGrid.extent:type_name -> bosdyn.api.LocalGridExtent
	0,  // 3: bosdyn.api.LocalGrid.cell_format:type_name -> bosdyn.api.LocalGrid.CellFormat
	1,  // 4: bosdyn.api.LocalGrid.encoding:type_name -> bosdyn.api.LocalGrid.Encoding
	2,  // 5: bosdyn.api.LocalGridResponse.status:type_name -> bosdyn.api.LocalGridResponse.Status
	6,  // 6: bosdyn.api.LocalGridResponse.local_grid:type_name -> bosdyn.api.LocalGrid
	14, // 7: bosdyn.api.GetLocalGridTypesRequest.header:type_name -> bosdyn.api.RequestHeader
	15, // 8: bosdyn.api.GetLocalGridTypesResponse.header:type_name -> bosdyn.api.ResponseHeader
	3,  // 9: bosdyn.api.GetLocalGridTypesResponse.local_grid_type:type_name -> bosdyn.api.LocalGridType
	14, // 10: bosdyn.api.GetLocalGridsRequest.header:type_name -> bosdyn.api.RequestHeader
	4,  // 11: bosdyn.api.GetLocalGridsRequest.local_grid_requests:type_name -> bosdyn.api.LocalGridRequest
	15, // 12: bosdyn.api.GetLocalGridsResponse.header:type_name -> bosdyn.api.ResponseHeader
	7,  // 13: bosdyn.api.GetLocalGridsResponse.local_grid_responses:type_name -> bosdyn.api.LocalGridResponse
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_bosdyn_api_local_grid_proto_init() }
func file_bosdyn_api_local_grid_proto_init() {
	if File_bosdyn_api_local_grid_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_header_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_local_grid_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGridType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGridRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGridExtent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGrid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalGridResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalGridTypesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalGridTypesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalGridsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_local_grid_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalGridsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_local_grid_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_local_grid_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_local_grid_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_local_grid_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_local_grid_proto_msgTypes,
	}.Build()
	File_bosdyn_api_local_grid_proto = out.File
	file_bosdyn_api_local_grid_proto_rawDesc = nil
	file_bosdyn_api_local_grid_proto_goTypes = nil
	file_bosdyn_api_local_grid_proto_depIdxs = nil
}
