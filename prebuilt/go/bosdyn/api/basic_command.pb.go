// Copyright (c) 2021 Boston Dynamics, Inc.  All rights reserved.
//
// Downloading, reproducing, distributing or otherwise using the SDK Software
// is subject to the terms and conditions of the Boston Dynamics Software
// Development Kit License (20191101-BDSDK-SL).

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: bosdyn/api/basic_command.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RobotCommandFeedbackStatus_Status int32

const (
	/// Behavior execution is in an unknown / unexpected state.
	RobotCommandFeedbackStatus_STATUS_UNKNOWN RobotCommandFeedbackStatus_Status = 0
	/// The robot is actively working on the command
	RobotCommandFeedbackStatus_STATUS_PROCESSING RobotCommandFeedbackStatus_Status = 1
	/// The command was replaced by a new command
	RobotCommandFeedbackStatus_STATUS_COMMAND_OVERRIDDEN RobotCommandFeedbackStatus_Status = 2
	/// The command expired
	RobotCommandFeedbackStatus_STATUS_COMMAND_TIMED_OUT RobotCommandFeedbackStatus_Status = 3
	/// The robot is in an unsafe state, and will only respond to known safe commands.
	RobotCommandFeedbackStatus_STATUS_ROBOT_FROZEN RobotCommandFeedbackStatus_Status = 4
	/// The request cannot be executed because the required hardware is missing.
	/// For example, an armless robot receiving a synchronized command with an arm_command
	/// request will return this value in the arm_command_feedback status.
	RobotCommandFeedbackStatus_STATUS_INCOMPATIBLE_HARDWARE RobotCommandFeedbackStatus_Status = 5
)

// Enum value maps for RobotCommandFeedbackStatus_Status.
var (
	RobotCommandFeedbackStatus_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_PROCESSING",
		2: "STATUS_COMMAND_OVERRIDDEN",
		3: "STATUS_COMMAND_TIMED_OUT",
		4: "STATUS_ROBOT_FROZEN",
		5: "STATUS_INCOMPATIBLE_HARDWARE",
	}
	RobotCommandFeedbackStatus_Status_value = map[string]int32{
		"STATUS_UNKNOWN":               0,
		"STATUS_PROCESSING":            1,
		"STATUS_COMMAND_OVERRIDDEN":    2,
		"STATUS_COMMAND_TIMED_OUT":     3,
		"STATUS_ROBOT_FROZEN":          4,
		"STATUS_INCOMPATIBLE_HARDWARE": 5,
	}
)

func (x RobotCommandFeedbackStatus_Status) Enum() *RobotCommandFeedbackStatus_Status {
	p := new(RobotCommandFeedbackStatus_Status)
	*p = x
	return p
}

func (x RobotCommandFeedbackStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RobotCommandFeedbackStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[0].Descriptor()
}

func (RobotCommandFeedbackStatus_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[0]
}

func (x RobotCommandFeedbackStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RobotCommandFeedbackStatus_Status.Descriptor instead.
func (RobotCommandFeedbackStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{0, 0}
}

type BatteryChangePoseCommand_Request_DirectionHint int32

const (
	// Unknown direction, just hold still
	BatteryChangePoseCommand_Request_HINT_UNKNOWN BatteryChangePoseCommand_Request_DirectionHint = 0
	// Roll over right (right feet end up under the robot)
	BatteryChangePoseCommand_Request_HINT_RIGHT BatteryChangePoseCommand_Request_DirectionHint = 1
	// Roll over left (left feet end up under the robot)
	BatteryChangePoseCommand_Request_HINT_LEFT BatteryChangePoseCommand_Request_DirectionHint = 2
)

// Enum value maps for BatteryChangePoseCommand_Request_DirectionHint.
var (
	BatteryChangePoseCommand_Request_DirectionHint_name = map[int32]string{
		0: "HINT_UNKNOWN",
		1: "HINT_RIGHT",
		2: "HINT_LEFT",
	}
	BatteryChangePoseCommand_Request_DirectionHint_value = map[string]int32{
		"HINT_UNKNOWN": 0,
		"HINT_RIGHT":   1,
		"HINT_LEFT":    2,
	}
)

func (x BatteryChangePoseCommand_Request_DirectionHint) Enum() *BatteryChangePoseCommand_Request_DirectionHint {
	p := new(BatteryChangePoseCommand_Request_DirectionHint)
	*p = x
	return p
}

func (x BatteryChangePoseCommand_Request_DirectionHint) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryChangePoseCommand_Request_DirectionHint) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[1].Descriptor()
}

func (BatteryChangePoseCommand_Request_DirectionHint) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[1]
}

func (x BatteryChangePoseCommand_Request_DirectionHint) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryChangePoseCommand_Request_DirectionHint.Descriptor instead.
func (BatteryChangePoseCommand_Request_DirectionHint) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{1, 0, 0}
}

type BatteryChangePoseCommand_Feedback_Status int32

const (
	BatteryChangePoseCommand_Feedback_STATUS_UNKNOWN BatteryChangePoseCommand_Feedback_Status = 0
	// Robot is finished rolling
	BatteryChangePoseCommand_Feedback_STATUS_COMPLETED BatteryChangePoseCommand_Feedback_Status = 1
	// Robot still in process of rolling over
	BatteryChangePoseCommand_Feedback_STATUS_IN_PROGRESS BatteryChangePoseCommand_Feedback_Status = 2
	// Robot has failed to roll onto its side
	BatteryChangePoseCommand_Feedback_STATUS_FAILED BatteryChangePoseCommand_Feedback_Status = 3
)

// Enum value maps for BatteryChangePoseCommand_Feedback_Status.
var (
	BatteryChangePoseCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_COMPLETED",
		2: "STATUS_IN_PROGRESS",
		3: "STATUS_FAILED",
	}
	BatteryChangePoseCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_COMPLETED":   1,
		"STATUS_IN_PROGRESS": 2,
		"STATUS_FAILED":      3,
	}
)

func (x BatteryChangePoseCommand_Feedback_Status) Enum() *BatteryChangePoseCommand_Feedback_Status {
	p := new(BatteryChangePoseCommand_Feedback_Status)
	*p = x
	return p
}

func (x BatteryChangePoseCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BatteryChangePoseCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[2].Descriptor()
}

func (BatteryChangePoseCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[2]
}

func (x BatteryChangePoseCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BatteryChangePoseCommand_Feedback_Status.Descriptor instead.
func (BatteryChangePoseCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{1, 1, 0}
}

type SafePowerOffCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	SafePowerOffCommand_Feedback_STATUS_UNKNOWN SafePowerOffCommand_Feedback_Status = 0
	// Robot has powered off.
	SafePowerOffCommand_Feedback_STATUS_POWERED_OFF SafePowerOffCommand_Feedback_Status = 1
	// Robot is trying to safely power off.
	SafePowerOffCommand_Feedback_STATUS_IN_PROGRESS SafePowerOffCommand_Feedback_Status = 2
)

// Enum value maps for SafePowerOffCommand_Feedback_Status.
var (
	SafePowerOffCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_POWERED_OFF",
		2: "STATUS_IN_PROGRESS",
	}
	SafePowerOffCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_POWERED_OFF": 1,
		"STATUS_IN_PROGRESS": 2,
	}
)

func (x SafePowerOffCommand_Feedback_Status) Enum() *SafePowerOffCommand_Feedback_Status {
	p := new(SafePowerOffCommand_Feedback_Status)
	*p = x
	return p
}

func (x SafePowerOffCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SafePowerOffCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[3].Descriptor()
}

func (SafePowerOffCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[3]
}

func (x SafePowerOffCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SafePowerOffCommand_Feedback_Status.Descriptor instead.
func (SafePowerOffCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{5, 1, 0}
}

type SE2TrajectoryCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	SE2TrajectoryCommand_Feedback_STATUS_UNKNOWN SE2TrajectoryCommand_Feedback_Status = 0
	// The robot has arrived and is standing at the goal.
	SE2TrajectoryCommand_Feedback_STATUS_AT_GOAL SE2TrajectoryCommand_Feedback_Status = 1
	// The robot has arrived at the goal and is doing final positioning.
	SE2TrajectoryCommand_Feedback_STATUS_NEAR_GOAL SE2TrajectoryCommand_Feedback_Status = 3
	// The robot is attempting to go to a goal.
	SE2TrajectoryCommand_Feedback_STATUS_GOING_TO_GOAL SE2TrajectoryCommand_Feedback_Status = 2
)

// Enum value maps for SE2TrajectoryCommand_Feedback_Status.
var (
	SE2TrajectoryCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_AT_GOAL",
		3: "STATUS_NEAR_GOAL",
		2: "STATUS_GOING_TO_GOAL",
	}
	SE2TrajectoryCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":       0,
		"STATUS_AT_GOAL":       1,
		"STATUS_NEAR_GOAL":     3,
		"STATUS_GOING_TO_GOAL": 2,
	}
)

func (x SE2TrajectoryCommand_Feedback_Status) Enum() *SE2TrajectoryCommand_Feedback_Status {
	p := new(SE2TrajectoryCommand_Feedback_Status)
	*p = x
	return p
}

func (x SE2TrajectoryCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SE2TrajectoryCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[4].Descriptor()
}

func (SE2TrajectoryCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[4]
}

func (x SE2TrajectoryCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SE2TrajectoryCommand_Feedback_Status.Descriptor instead.
func (SE2TrajectoryCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{6, 1, 0}
}

type SE2TrajectoryCommand_Feedback_BodyMovementStatus int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	SE2TrajectoryCommand_Feedback_BODY_STATUS_UNKNOWN SE2TrajectoryCommand_Feedback_BodyMovementStatus = 0
	// The robot body is not settled at the goal.
	SE2TrajectoryCommand_Feedback_BODY_STATUS_MOVING SE2TrajectoryCommand_Feedback_BodyMovementStatus = 1
	// The robot is at the goal and the body has stopped moving.
	SE2TrajectoryCommand_Feedback_BODY_STATUS_SETTLED SE2TrajectoryCommand_Feedback_BodyMovementStatus = 2
)

// Enum value maps for SE2TrajectoryCommand_Feedback_BodyMovementStatus.
var (
	SE2TrajectoryCommand_Feedback_BodyMovementStatus_name = map[int32]string{
		0: "BODY_STATUS_UNKNOWN",
		1: "BODY_STATUS_MOVING",
		2: "BODY_STATUS_SETTLED",
	}
	SE2TrajectoryCommand_Feedback_BodyMovementStatus_value = map[string]int32{
		"BODY_STATUS_UNKNOWN": 0,
		"BODY_STATUS_MOVING":  1,
		"BODY_STATUS_SETTLED": 2,
	}
)

func (x SE2TrajectoryCommand_Feedback_BodyMovementStatus) Enum() *SE2TrajectoryCommand_Feedback_BodyMovementStatus {
	p := new(SE2TrajectoryCommand_Feedback_BodyMovementStatus)
	*p = x
	return p
}

func (x SE2TrajectoryCommand_Feedback_BodyMovementStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SE2TrajectoryCommand_Feedback_BodyMovementStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[5].Descriptor()
}

func (SE2TrajectoryCommand_Feedback_BodyMovementStatus) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[5]
}

func (x SE2TrajectoryCommand_Feedback_BodyMovementStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SE2TrajectoryCommand_Feedback_BodyMovementStatus.Descriptor instead.
func (SE2TrajectoryCommand_Feedback_BodyMovementStatus) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{6, 1, 1}
}

type SitCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	SitCommand_Feedback_STATUS_UNKNOWN SitCommand_Feedback_Status = 0
	// Robot is currently sitting.
	SitCommand_Feedback_STATUS_IS_SITTING SitCommand_Feedback_Status = 1
	// Robot is trying to sit.
	SitCommand_Feedback_STATUS_IN_PROGRESS SitCommand_Feedback_Status = 2
)

// Enum value maps for SitCommand_Feedback_Status.
var (
	SitCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_IS_SITTING",
		2: "STATUS_IN_PROGRESS",
	}
	SitCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_IS_SITTING":  1,
		"STATUS_IN_PROGRESS": 2,
	}
)

func (x SitCommand_Feedback_Status) Enum() *SitCommand_Feedback_Status {
	p := new(SitCommand_Feedback_Status)
	*p = x
	return p
}

func (x SitCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SitCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[6].Descriptor()
}

func (SitCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[6]
}

func (x SitCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SitCommand_Feedback_Status.Descriptor instead.
func (SitCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{8, 1, 0}
}

type StandCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	StandCommand_Feedback_STATUS_UNKNOWN StandCommand_Feedback_Status = 0
	// Robot has finished standing up and has completed desired body trajectory.
	// Robot is not attempting to move.
	StandCommand_Feedback_STATUS_IS_STANDING StandCommand_Feedback_Status = 1
	// Robot is trying to come to a steady stand.
	StandCommand_Feedback_STATUS_IN_PROGRESS StandCommand_Feedback_Status = 2
)

// Enum value maps for StandCommand_Feedback_Status.
var (
	StandCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_IS_STANDING",
		2: "STATUS_IN_PROGRESS",
	}
	StandCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":     0,
		"STATUS_IS_STANDING": 1,
		"STATUS_IN_PROGRESS": 2,
	}
)

func (x StandCommand_Feedback_Status) Enum() *StandCommand_Feedback_Status {
	p := new(StandCommand_Feedback_Status)
	*p = x
	return p
}

func (x StandCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StandCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[7].Descriptor()
}

func (StandCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[7]
}

func (x StandCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StandCommand_Feedback_Status.Descriptor instead.
func (StandCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{9, 1, 0}
}

type StanceCommand_Feedback_Status int32

const (
	StanceCommand_Feedback_STATUS_UNKNOWN StanceCommand_Feedback_Status = 0
	// Robot has finished moving feet and they are at the specified position
	StanceCommand_Feedback_STATUS_STANCED StanceCommand_Feedback_Status = 1
	// Robot is in the process of moving feet to specified position
	StanceCommand_Feedback_STATUS_GOING_TO_STANCE StanceCommand_Feedback_Status = 2
	// Robot is not moving, the specified stance was too far away.
	// Hint: Try using SE2TrajectoryCommand to safely put the robot at the
	//       correct location first.
	StanceCommand_Feedback_STATUS_TOO_FAR_AWAY StanceCommand_Feedback_Status = 3
)

// Enum value maps for StanceCommand_Feedback_Status.
var (
	StanceCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_STANCED",
		2: "STATUS_GOING_TO_STANCE",
		3: "STATUS_TOO_FAR_AWAY",
	}
	StanceCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":         0,
		"STATUS_STANCED":         1,
		"STATUS_GOING_TO_STANCE": 2,
		"STATUS_TOO_FAR_AWAY":    3,
	}
)

func (x StanceCommand_Feedback_Status) Enum() *StanceCommand_Feedback_Status {
	p := new(StanceCommand_Feedback_Status)
	*p = x
	return p
}

func (x StanceCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StanceCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[8].Descriptor()
}

func (StanceCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[8]
}

func (x StanceCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StanceCommand_Feedback_Status.Descriptor instead.
func (StanceCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{10, 1, 0}
}

type ArmDragCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	ArmDragCommand_Feedback_STATUS_UNKNOWN ArmDragCommand_Feedback_Status = 0
	// Robot is dragging.
	ArmDragCommand_Feedback_STATUS_DRAGGING ArmDragCommand_Feedback_Status = 1
	// Robot is not dragging because grasp failed.
	// This could be due to a lost grasp during a drag, or because the gripper isn't in a good
	// position at the time of request. You'll have to reposition or regrasp and then send a
	// new drag request to overcome this type of error.
	// Note: When requesting drag, make sure the gripper is positioned in front of the robot (not to the side of or
	// above the robot body).
	ArmDragCommand_Feedback_STATUS_GRASP_FAILED ArmDragCommand_Feedback_Status = 2
	// Robot is not dragging for another reason.
	// This might be because the gripper isn't holding an item.
	// You can continue dragging once you resolve this type of error (i.e. by sending an ApiGraspOverride request).
	// Note: When requesting drag, be sure to that the robot knows it's holding something (or use APIGraspOverride to
	// OVERRIDE_HOLDING).
	ArmDragCommand_Feedback_STATUS_OTHER_FAILURE ArmDragCommand_Feedback_Status = 3
)

// Enum value maps for ArmDragCommand_Feedback_Status.
var (
	ArmDragCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_DRAGGING",
		2: "STATUS_GRASP_FAILED",
		3: "STATUS_OTHER_FAILURE",
	}
	ArmDragCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":       0,
		"STATUS_DRAGGING":      1,
		"STATUS_GRASP_FAILED":  2,
		"STATUS_OTHER_FAILURE": 3,
	}
)

func (x ArmDragCommand_Feedback_Status) Enum() *ArmDragCommand_Feedback_Status {
	p := new(ArmDragCommand_Feedback_Status)
	*p = x
	return p
}

func (x ArmDragCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmDragCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[9].Descriptor()
}

func (ArmDragCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[9]
}

func (x ArmDragCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmDragCommand_Feedback_Status.Descriptor instead.
func (ArmDragCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{13, 1, 0}
}

// Geometrical category of a task. See the constrained_manipulation_helper function
// for examples of each of these categories. For e.g. SE3_CIRCLE_FORCE_TORQUE corresponds
// to lever type objects.
type ConstrainedManipulationCommand_Request_TaskType int32

const (
	ConstrainedManipulationCommand_Request_TASK_TYPE_UNKNOWN ConstrainedManipulationCommand_Request_TaskType = 0
	// This task type corresponds to circular tasks where
	// both the end-effector position and orientation rotate about a circle to manipulate.
	// The constrained manipulation logic will generate forces and torques in this case.
	// Example tasks are: A lever or a ball valve with a solid grasp
	// This task type will require an initial force vector specified
	// in init_wrench_direction_in_frame_name. A torque vector can be specified
	// as well if a good initial guess of the axis of rotation of the task is available.
	ConstrainedManipulationCommand_Request_TASK_TYPE_SE3_CIRCLE_FORCE_TORQUE ConstrainedManipulationCommand_Request_TaskType = 1
	// This task type corresponds to circular tasks that have an extra degree of freedom.
	// In these tasks the end-effector position rotates about a circle
	// but the orientation does not need to follow a circle (can remain fixed).
	// The constrained manipulation logic will generate translational forces in this case.
	// Example tasks are: A crank that has a loose handle and moves in a circle
	// and the end-effector is free to rotate about the handle in one direction.
	// This task type will require an initial force vector specified
	// in init_wrench_direction_in_frame_name.
	ConstrainedManipulationCommand_Request_TASK_TYPE_R3_CIRCLE_EXTRADOF_FORCE ConstrainedManipulationCommand_Request_TaskType = 2
	// This task type corresponds to purely rotational tasks.
	// In these tasks the orientation of the end-effector follows a circle,
	// and the position remains fixed. The robot will apply a torque at the
	// end-effector in these tasks.
	// Example tasks are: rotating a knob or valve that does not have a lever arm.
	// This task type will require an initial torque vector specified
	// in init_wrench_direction_in_frame_name.
	ConstrainedManipulationCommand_Request_TASK_TYPE_SE3_ROTATIONAL_TORQUE ConstrainedManipulationCommand_Request_TaskType = 3
	// This task type corresponds to circular tasks where
	// the end-effector position and orientation rotate about a circle
	// but the orientation does always strictly follow the circle due to slips.
	// The constrained manipulation logic will generate translational forces in this case.
	// Example tasks are: manipulating a cabinet where the grasp on handle is not very rigid
	// or can often slip.
	// This task type will require an initial force vector specified
	// in init_wrench_direction_in_frame_name.
	ConstrainedManipulationCommand_Request_TASK_TYPE_R3_CIRCLE_FORCE ConstrainedManipulationCommand_Request_TaskType = 4
	// This task type corresponds to linear tasks where
	// the end-effector position moves in a line
	// but the orientation does not need to change.
	// The constrained manipulation logic will generate a force in this case.
	// Example tasks are: A crank that has a loose handle, or manipulating
	// a cabinet where the grasp of the handle is loose and the end-effector is free
	// to rotate about the handle in one direction.
	// This task type will require an initial force vector specified
	// in init_wrench_direction_in_frame_name.
	ConstrainedManipulationCommand_Request_TASK_TYPE_R3_LINEAR_FORCE ConstrainedManipulationCommand_Request_TaskType = 5
	// This option simply holds the hand in place with stiff impedance control.
	// You can use this mode at the beginning of a constrained manipulation task or to
	// hold position while transitioning between two different constrained manipulation tasks.
	// The target pose to hold will be the measured hand pose upon transitioning to constrained
	// manipulation or upon switching to this task type.
	// This mode should only be used during constrained manipulation tasks,
	// since it uses impedance control to hold the hand in place.
	// This is not intended to stop the arm during position control moves.
	ConstrainedManipulationCommand_Request_TASK_TYPE_HOLD_POSE ConstrainedManipulationCommand_Request_TaskType = 6
)

// Enum value maps for ConstrainedManipulationCommand_Request_TaskType.
var (
	ConstrainedManipulationCommand_Request_TaskType_name = map[int32]string{
		0: "TASK_TYPE_UNKNOWN",
		1: "TASK_TYPE_SE3_CIRCLE_FORCE_TORQUE",
		2: "TASK_TYPE_R3_CIRCLE_EXTRADOF_FORCE",
		3: "TASK_TYPE_SE3_ROTATIONAL_TORQUE",
		4: "TASK_TYPE_R3_CIRCLE_FORCE",
		5: "TASK_TYPE_R3_LINEAR_FORCE",
		6: "TASK_TYPE_HOLD_POSE",
	}
	ConstrainedManipulationCommand_Request_TaskType_value = map[string]int32{
		"TASK_TYPE_UNKNOWN":                  0,
		"TASK_TYPE_SE3_CIRCLE_FORCE_TORQUE":  1,
		"TASK_TYPE_R3_CIRCLE_EXTRADOF_FORCE": 2,
		"TASK_TYPE_SE3_ROTATIONAL_TORQUE":    3,
		"TASK_TYPE_R3_CIRCLE_FORCE":          4,
		"TASK_TYPE_R3_LINEAR_FORCE":          5,
		"TASK_TYPE_HOLD_POSE":                6,
	}
)

func (x ConstrainedManipulationCommand_Request_TaskType) Enum() *ConstrainedManipulationCommand_Request_TaskType {
	p := new(ConstrainedManipulationCommand_Request_TaskType)
	*p = x
	return p
}

func (x ConstrainedManipulationCommand_Request_TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstrainedManipulationCommand_Request_TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[10].Descriptor()
}

func (ConstrainedManipulationCommand_Request_TaskType) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[10]
}

func (x ConstrainedManipulationCommand_Request_TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstrainedManipulationCommand_Request_TaskType.Descriptor instead.
func (ConstrainedManipulationCommand_Request_TaskType) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{14, 0, 0}
}

type ConstrainedManipulationCommand_Feedback_Status int32

const (
	// STATUS_UNKNOWN should never be used. If used, an internal error has happened.
	ConstrainedManipulationCommand_Feedback_STATUS_UNKNOWN ConstrainedManipulationCommand_Feedback_Status = 0
	// Constrained manipulation is working as expected
	ConstrainedManipulationCommand_Feedback_STATUS_RUNNING ConstrainedManipulationCommand_Feedback_Status = 1
	// Arm is stuck, either force is being applied in a direction
	// where the affordance can't move or not enough force is applied
	ConstrainedManipulationCommand_Feedback_STATUS_ARM_IS_STUCK ConstrainedManipulationCommand_Feedback_Status = 2
	// The grasp was lost. In this situation, constrained manipulation
	// will stop applying force, and will hold the last position.
	ConstrainedManipulationCommand_Feedback_STATUS_GRASP_IS_LOST ConstrainedManipulationCommand_Feedback_Status = 3
)

// Enum value maps for ConstrainedManipulationCommand_Feedback_Status.
var (
	ConstrainedManipulationCommand_Feedback_Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_RUNNING",
		2: "STATUS_ARM_IS_STUCK",
		3: "STATUS_GRASP_IS_LOST",
	}
	ConstrainedManipulationCommand_Feedback_Status_value = map[string]int32{
		"STATUS_UNKNOWN":       0,
		"STATUS_RUNNING":       1,
		"STATUS_ARM_IS_STUCK":  2,
		"STATUS_GRASP_IS_LOST": 3,
	}
)

func (x ConstrainedManipulationCommand_Feedback_Status) Enum() *ConstrainedManipulationCommand_Feedback_Status {
	p := new(ConstrainedManipulationCommand_Feedback_Status)
	*p = x
	return p
}

func (x ConstrainedManipulationCommand_Feedback_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConstrainedManipulationCommand_Feedback_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_bosdyn_api_basic_command_proto_enumTypes[11].Descriptor()
}

func (ConstrainedManipulationCommand_Feedback_Status) Type() protoreflect.EnumType {
	return &file_bosdyn_api_basic_command_proto_enumTypes[11]
}

func (x ConstrainedManipulationCommand_Feedback_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConstrainedManipulationCommand_Feedback_Status.Descriptor instead.
func (ConstrainedManipulationCommand_Feedback_Status) EnumDescriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{14, 1, 0}
}

type RobotCommandFeedbackStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RobotCommandFeedbackStatus) Reset() {
	*x = RobotCommandFeedbackStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RobotCommandFeedbackStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RobotCommandFeedbackStatus) ProtoMessage() {}

func (x *RobotCommandFeedbackStatus) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RobotCommandFeedbackStatus.ProtoReflect.Descriptor instead.
func (*RobotCommandFeedbackStatus) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{0}
}

// Get the robot into a convenient pose for changing the battery
type BatteryChangePoseCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BatteryChangePoseCommand) Reset() {
	*x = BatteryChangePoseCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryChangePoseCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryChangePoseCommand) ProtoMessage() {}

func (x *BatteryChangePoseCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryChangePoseCommand.ProtoReflect.Descriptor instead.
func (*BatteryChangePoseCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{1}
}

// Move the robot into a "ready" position from which it can sit or stand up.
type SelfRightCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SelfRightCommand) Reset() {
	*x = SelfRightCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfRightCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfRightCommand) ProtoMessage() {}

func (x *SelfRightCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfRightCommand.ProtoReflect.Descriptor instead.
func (*SelfRightCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{2}
}

// Stop the robot in place with minimal motion.
type StopCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCommand) Reset() {
	*x = StopCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCommand) ProtoMessage() {}

func (x *StopCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCommand.ProtoReflect.Descriptor instead.
func (*StopCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{3}
}

// Freeze all joints at their current positions (no balancing control).
type FreezeCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FreezeCommand) Reset() {
	*x = FreezeCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreezeCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeCommand) ProtoMessage() {}

func (x *FreezeCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeCommand.ProtoReflect.Descriptor instead.
func (*FreezeCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{4}
}

// Get robot into a position where it is safe to power down, then power down. If the robot has
// fallen, it will power down directly. If the robot is not in a safe position, it will get to a
// safe position before powering down. The robot will not power down until it is in a safe state.
type SafePowerOffCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SafePowerOffCommand) Reset() {
	*x = SafePowerOffCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafePowerOffCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafePowerOffCommand) ProtoMessage() {}

func (x *SafePowerOffCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafePowerOffCommand.ProtoReflect.Descriptor instead.
func (*SafePowerOffCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{5}
}

// Move along a trajectory in 2D space.
type SE2TrajectoryCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SE2TrajectoryCommand) Reset() {
	*x = SE2TrajectoryCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2TrajectoryCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2TrajectoryCommand) ProtoMessage() {}

func (x *SE2TrajectoryCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2TrajectoryCommand.ProtoReflect.Descriptor instead.
func (*SE2TrajectoryCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{6}
}

// Move the robot at a specific SE2 velocity for a fixed amount of time.
type SE2VelocityCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SE2VelocityCommand) Reset() {
	*x = SE2VelocityCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2VelocityCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2VelocityCommand) ProtoMessage() {}

func (x *SE2VelocityCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2VelocityCommand.ProtoReflect.Descriptor instead.
func (*SE2VelocityCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{7}
}

// Sit the robot down in its current position.
type SitCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SitCommand) Reset() {
	*x = SitCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitCommand) ProtoMessage() {}

func (x *SitCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitCommand.ProtoReflect.Descriptor instead.
func (*SitCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{8}
}

// The stand the robot up in its current position.
type StandCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StandCommand) Reset() {
	*x = StandCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandCommand) ProtoMessage() {}

func (x *StandCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandCommand.ProtoReflect.Descriptor instead.
func (*StandCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{9}
}

// Precise foot placement
// This can be used to reposition the robots feet in place.
type StanceCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StanceCommand) Reset() {
	*x = StanceCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StanceCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StanceCommand) ProtoMessage() {}

func (x *StanceCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StanceCommand.ProtoReflect.Descriptor instead.
func (*StanceCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{10}
}

type Stance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The frame name which the desired foot_positions are described in.
	Se2FrameName string `protobuf:"bytes,3,opt,name=se2_frame_name,json=se2FrameName,proto3" json:"se2_frame_name,omitempty"`
	// Map of foot name to its x,y location in specified frame.
	// Required positions for spot: "fl", "fr", "hl", "hr".
	FootPositions map[string]*Vec2 `protobuf:"bytes,2,rep,name=foot_positions,json=footPositions,proto3" json:"foot_positions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Required foot positional accuracy in meters
	// Advised = 0.05 ( 5cm)
	// Minimum = 0.02 ( 2cm)
	// Maximum = 0.10 (10cm)
	Accuracy float32 `protobuf:"fixed32,4,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
}

func (x *Stance) Reset() {
	*x = Stance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stance) ProtoMessage() {}

func (x *Stance) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stance.ProtoReflect.Descriptor instead.
func (*Stance) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{11}
}

func (x *Stance) GetSe2FrameName() string {
	if x != nil {
		return x.Se2FrameName
	}
	return ""
}

func (x *Stance) GetFootPositions() map[string]*Vec2 {
	if x != nil {
		return x.FootPositions
	}
	return nil
}

func (x *Stance) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

// The base will move in response to the hand's location, allow the arm to reach beyond
// its current workspace.  If the hand is moved forward, the body will begin walking
// forward to keep the base at the desired offset from the hand.
type FollowArmCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FollowArmCommand) Reset() {
	*x = FollowArmCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowArmCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowArmCommand) ProtoMessage() {}

func (x *FollowArmCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowArmCommand.ProtoReflect.Descriptor instead.
func (*FollowArmCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{12}
}

type ArmDragCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmDragCommand) Reset() {
	*x = ArmDragCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmDragCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmDragCommand) ProtoMessage() {}

func (x *ArmDragCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmDragCommand.ProtoReflect.Descriptor instead.
func (*ArmDragCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{13}
}

type ConstrainedManipulationCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConstrainedManipulationCommand) Reset() {
	*x = ConstrainedManipulationCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstrainedManipulationCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstrainedManipulationCommand) ProtoMessage() {}

func (x *ConstrainedManipulationCommand) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstrainedManipulationCommand.ProtoReflect.Descriptor instead.
func (*ConstrainedManipulationCommand) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{14}
}

type BatteryChangePoseCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DirectionHint BatteryChangePoseCommand_Request_DirectionHint `protobuf:"varint,1,opt,name=direction_hint,json=directionHint,proto3,enum=bosdyn.api.BatteryChangePoseCommand_Request_DirectionHint" json:"direction_hint,omitempty"`
}

func (x *BatteryChangePoseCommand_Request) Reset() {
	*x = BatteryChangePoseCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryChangePoseCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryChangePoseCommand_Request) ProtoMessage() {}

func (x *BatteryChangePoseCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryChangePoseCommand_Request.ProtoReflect.Descriptor instead.
func (*BatteryChangePoseCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BatteryChangePoseCommand_Request) GetDirectionHint() BatteryChangePoseCommand_Request_DirectionHint {
	if x != nil {
		return x.DirectionHint
	}
	return BatteryChangePoseCommand_Request_HINT_UNKNOWN
}

type BatteryChangePoseCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status BatteryChangePoseCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.BatteryChangePoseCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *BatteryChangePoseCommand_Feedback) Reset() {
	*x = BatteryChangePoseCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatteryChangePoseCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatteryChangePoseCommand_Feedback) ProtoMessage() {}

func (x *BatteryChangePoseCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatteryChangePoseCommand_Feedback.ProtoReflect.Descriptor instead.
func (*BatteryChangePoseCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{1, 1}
}

func (x *BatteryChangePoseCommand_Feedback) GetStatus() BatteryChangePoseCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return BatteryChangePoseCommand_Feedback_STATUS_UNKNOWN
}

type SelfRightCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SelfRightCommand_Request) Reset() {
	*x = SelfRightCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfRightCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfRightCommand_Request) ProtoMessage() {}

func (x *SelfRightCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfRightCommand_Request.ProtoReflect.Descriptor instead.
func (*SelfRightCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{2, 0}
}

type SelfRightCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SelfRightCommand_Feedback) Reset() {
	*x = SelfRightCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SelfRightCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SelfRightCommand_Feedback) ProtoMessage() {}

func (x *SelfRightCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SelfRightCommand_Feedback.ProtoReflect.Descriptor instead.
func (*SelfRightCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{2, 1}
}

type StopCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCommand_Request) Reset() {
	*x = StopCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCommand_Request) ProtoMessage() {}

func (x *StopCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCommand_Request.ProtoReflect.Descriptor instead.
func (*StopCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{3, 0}
}

type StopCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StopCommand_Feedback) Reset() {
	*x = StopCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StopCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StopCommand_Feedback) ProtoMessage() {}

func (x *StopCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StopCommand_Feedback.ProtoReflect.Descriptor instead.
func (*StopCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{3, 1}
}

type FreezeCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FreezeCommand_Request) Reset() {
	*x = FreezeCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreezeCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeCommand_Request) ProtoMessage() {}

func (x *FreezeCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeCommand_Request.ProtoReflect.Descriptor instead.
func (*FreezeCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{4, 0}
}

type FreezeCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FreezeCommand_Feedback) Reset() {
	*x = FreezeCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FreezeCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreezeCommand_Feedback) ProtoMessage() {}

func (x *FreezeCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreezeCommand_Feedback.ProtoReflect.Descriptor instead.
func (*FreezeCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{4, 1}
}

type SafePowerOffCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SafePowerOffCommand_Request) Reset() {
	*x = SafePowerOffCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafePowerOffCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafePowerOffCommand_Request) ProtoMessage() {}

func (x *SafePowerOffCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafePowerOffCommand_Request.ProtoReflect.Descriptor instead.
func (*SafePowerOffCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{5, 0}
}

type SafePowerOffCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the command.
	Status SafePowerOffCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.SafePowerOffCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *SafePowerOffCommand_Feedback) Reset() {
	*x = SafePowerOffCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SafePowerOffCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SafePowerOffCommand_Feedback) ProtoMessage() {}

func (x *SafePowerOffCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SafePowerOffCommand_Feedback.ProtoReflect.Descriptor instead.
func (*SafePowerOffCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{5, 1}
}

func (x *SafePowerOffCommand_Feedback) GetStatus() SafePowerOffCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return SafePowerOffCommand_Feedback_STATUS_UNKNOWN
}

type SE2TrajectoryCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp (in robot time) by which a command must finish executing.
	// This is a required field and used to prevent runaway commands.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The name of the frame that trajectory is relative to. The trajectory
	// must be expressed in a gravity aligned frame, so either "vision",
	// "odom", or "body". Any other provided se2_frame_name will be rejected
	// and the trajectory command will not be exectuted.
	Se2FrameName string `protobuf:"bytes,3,opt,name=se2_frame_name,json=se2FrameName,proto3" json:"se2_frame_name,omitempty"`
	// The trajectory that the robot should follow, expressed in the frame
	// identified by se2_frame_name.
	Trajectory *SE2Trajectory `protobuf:"bytes,2,opt,name=trajectory,proto3" json:"trajectory,omitempty"`
}

func (x *SE2TrajectoryCommand_Request) Reset() {
	*x = SE2TrajectoryCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2TrajectoryCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2TrajectoryCommand_Request) ProtoMessage() {}

func (x *SE2TrajectoryCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2TrajectoryCommand_Request.ProtoReflect.Descriptor instead.
func (*SE2TrajectoryCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{6, 0}
}

func (x *SE2TrajectoryCommand_Request) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SE2TrajectoryCommand_Request) GetSe2FrameName() string {
	if x != nil {
		return x.Se2FrameName
	}
	return ""
}

func (x *SE2TrajectoryCommand_Request) GetTrajectory() *SE2Trajectory {
	if x != nil {
		return x.Trajectory
	}
	return nil
}

type SE2TrajectoryCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the command.
	Status SE2TrajectoryCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.SE2TrajectoryCommand_Feedback_Status" json:"status,omitempty"`
	// Current status of how the body is moving
	BodyMovementStatus SE2TrajectoryCommand_Feedback_BodyMovementStatus `protobuf:"varint,2,opt,name=body_movement_status,json=bodyMovementStatus,proto3,enum=bosdyn.api.SE2TrajectoryCommand_Feedback_BodyMovementStatus" json:"body_movement_status,omitempty"`
}

func (x *SE2TrajectoryCommand_Feedback) Reset() {
	*x = SE2TrajectoryCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2TrajectoryCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2TrajectoryCommand_Feedback) ProtoMessage() {}

func (x *SE2TrajectoryCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2TrajectoryCommand_Feedback.ProtoReflect.Descriptor instead.
func (*SE2TrajectoryCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{6, 1}
}

func (x *SE2TrajectoryCommand_Feedback) GetStatus() SE2TrajectoryCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return SE2TrajectoryCommand_Feedback_STATUS_UNKNOWN
}

func (x *SE2TrajectoryCommand_Feedback) GetBodyMovementStatus() SE2TrajectoryCommand_Feedback_BodyMovementStatus {
	if x != nil {
		return x.BodyMovementStatus
	}
	return SE2TrajectoryCommand_Feedback_BODY_STATUS_UNKNOWN
}

type SE2VelocityCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp (in robot time) by which a command must finish executing. This is a
	// required field and used to prevent runaway commands.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The name of the frame that velocity and slew_rate_limit are relative to.
	// The trajectory must be expressed in a gravity aligned frame, so either
	// "vision", "odom", or "flat_body". Any other provided
	// se2_frame_name will be rejected and the velocity command will not be executed.
	Se2FrameName string `protobuf:"bytes,5,opt,name=se2_frame_name,json=se2FrameName,proto3" json:"se2_frame_name,omitempty"`
	// Desired planar velocity of the robot body relative to se2_frame_name.
	Velocity *SE2Velocity `protobuf:"bytes,2,opt,name=velocity,proto3" json:"velocity,omitempty"`
	// If set, limits how quickly velocity can change relative to se2_frame_name.
	// Otherwise, robot may decide to limit velocities using default settings.
	// These values should be non-negative.
	SlewRateLimit *SE2Velocity `protobuf:"bytes,4,opt,name=slew_rate_limit,json=slewRateLimit,proto3" json:"slew_rate_limit,omitempty"`
}

func (x *SE2VelocityCommand_Request) Reset() {
	*x = SE2VelocityCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2VelocityCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2VelocityCommand_Request) ProtoMessage() {}

func (x *SE2VelocityCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2VelocityCommand_Request.ProtoReflect.Descriptor instead.
func (*SE2VelocityCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SE2VelocityCommand_Request) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *SE2VelocityCommand_Request) GetSe2FrameName() string {
	if x != nil {
		return x.Se2FrameName
	}
	return ""
}

func (x *SE2VelocityCommand_Request) GetVelocity() *SE2Velocity {
	if x != nil {
		return x.Velocity
	}
	return nil
}

func (x *SE2VelocityCommand_Request) GetSlewRateLimit() *SE2Velocity {
	if x != nil {
		return x.SlewRateLimit
	}
	return nil
}

type SE2VelocityCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SE2VelocityCommand_Feedback) Reset() {
	*x = SE2VelocityCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SE2VelocityCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SE2VelocityCommand_Feedback) ProtoMessage() {}

func (x *SE2VelocityCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SE2VelocityCommand_Feedback.ProtoReflect.Descriptor instead.
func (*SE2VelocityCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{7, 1}
}

type SitCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SitCommand_Request) Reset() {
	*x = SitCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitCommand_Request) ProtoMessage() {}

func (x *SitCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitCommand_Request.ProtoReflect.Descriptor instead.
func (*SitCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{8, 0}
}

type SitCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the command.
	Status SitCommand_Feedback_Status `protobuf:"varint,2,opt,name=status,proto3,enum=bosdyn.api.SitCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *SitCommand_Feedback) Reset() {
	*x = SitCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SitCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SitCommand_Feedback) ProtoMessage() {}

func (x *SitCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SitCommand_Feedback.ProtoReflect.Descriptor instead.
func (*SitCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{8, 1}
}

func (x *SitCommand_Feedback) GetStatus() SitCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return SitCommand_Feedback_STATUS_UNKNOWN
}

type StandCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StandCommand_Request) Reset() {
	*x = StandCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandCommand_Request) ProtoMessage() {}

func (x *StandCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandCommand_Request.ProtoReflect.Descriptor instead.
func (*StandCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{9, 0}
}

type StandCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current status of the command.
	Status StandCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.StandCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *StandCommand_Feedback) Reset() {
	*x = StandCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StandCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StandCommand_Feedback) ProtoMessage() {}

func (x *StandCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StandCommand_Feedback.ProtoReflect.Descriptor instead.
func (*StandCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{9, 1}
}

func (x *StandCommand_Feedback) GetStatus() StandCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return StandCommand_Feedback_STATUS_UNKNOWN
}

type StanceCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	/// The timestamp (in robot time) by which a command must finish executing.
	/// This is a required field and used to prevent runaway commands.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Stance  *Stance                `protobuf:"bytes,2,opt,name=stance,proto3" json:"stance,omitempty"`
}

func (x *StanceCommand_Request) Reset() {
	*x = StanceCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StanceCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StanceCommand_Request) ProtoMessage() {}

func (x *StanceCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StanceCommand_Request.ProtoReflect.Descriptor instead.
func (*StanceCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{10, 0}
}

func (x *StanceCommand_Request) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *StanceCommand_Request) GetStance() *Stance {
	if x != nil {
		return x.Stance
	}
	return nil
}

type StanceCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status StanceCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.StanceCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *StanceCommand_Feedback) Reset() {
	*x = StanceCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StanceCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StanceCommand_Feedback) ProtoMessage() {}

func (x *StanceCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StanceCommand_Feedback.ProtoReflect.Descriptor instead.
func (*StanceCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{10, 1}
}

func (x *StanceCommand_Feedback) GetStatus() StanceCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return StanceCommand_Feedback_STATUS_UNKNOWN
}

type FollowArmCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional body offset from the hand.
	// For example, to have the body 0.75 meters behind the hand, use (0.75, 0, 0)
	BodyOffsetFromHand *Vec3 `protobuf:"bytes,1,opt,name=body_offset_from_hand,json=bodyOffsetFromHand,proto3" json:"body_offset_from_hand,omitempty"`
	// Optional. If true, the body will be restricted to body orientation offsets only.
	DisableWalking bool `protobuf:"varint,2,opt,name=disable_walking,json=disableWalking,proto3" json:"disable_walking,omitempty"`
}

func (x *FollowArmCommand_Request) Reset() {
	*x = FollowArmCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowArmCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowArmCommand_Request) ProtoMessage() {}

func (x *FollowArmCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowArmCommand_Request.ProtoReflect.Descriptor instead.
func (*FollowArmCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{12, 0}
}

func (x *FollowArmCommand_Request) GetBodyOffsetFromHand() *Vec3 {
	if x != nil {
		return x.BodyOffsetFromHand
	}
	return nil
}

func (x *FollowArmCommand_Request) GetDisableWalking() bool {
	if x != nil {
		return x.DisableWalking
	}
	return false
}

type FollowArmCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FollowArmCommand_Feedback) Reset() {
	*x = FollowArmCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FollowArmCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FollowArmCommand_Feedback) ProtoMessage() {}

func (x *FollowArmCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FollowArmCommand_Feedback.ProtoReflect.Descriptor instead.
func (*FollowArmCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{12, 1}
}

type ArmDragCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArmDragCommand_Request) Reset() {
	*x = ArmDragCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmDragCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmDragCommand_Request) ProtoMessage() {}

func (x *ArmDragCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmDragCommand_Request.ProtoReflect.Descriptor instead.
func (*ArmDragCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{13, 0}
}

type ArmDragCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ArmDragCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.ArmDragCommand_Feedback_Status" json:"status,omitempty"`
}

func (x *ArmDragCommand_Feedback) Reset() {
	*x = ArmDragCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArmDragCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArmDragCommand_Feedback) ProtoMessage() {}

func (x *ArmDragCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArmDragCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ArmDragCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{13, 1}
}

func (x *ArmDragCommand_Feedback) GetStatus() ArmDragCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return ArmDragCommand_Feedback_STATUS_UNKNOWN
}

type ConstrainedManipulationCommand_Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frame that the initial wrench will be expressed in
	FrameName string `protobuf:"bytes,1,opt,name=frame_name,json=frameName,proto3" json:"frame_name,omitempty"`
	// Direction of the initial wrench to be applied
	// Depending on the task, either the force vector or the
	// torque vector are required to be specified. The required
	// vector should not have a magnitude of zero and will be
	// normalized to 1. For tasks that require the force vector,
	// the torque vector can still be specified as a non-zero vector
	// if it is a good guess of the axis of rotation of the task.
	// (for e.g. TASK_TYPE_SE3_ROTATIONAL_TORQUE task types.)
	// Note that if both vectors are non-zero, they have to be perpendicular.
	// Once the constrained manipulation system estimates the
	// constraint, the init_wrench_direction and frame_name
	// will no longer be used.
	InitWrenchDirectionInFrameName *Wrench `protobuf:"bytes,2,opt,name=init_wrench_direction_in_frame_name,json=initWrenchDirectionInFrameName,proto3" json:"init_wrench_direction_in_frame_name,omitempty"`
	// The desired velocity to move the object
	// For all tasks besides SE3_ROTATIONAL_TORQUE, set
	// tangential_speed in units of m/s. For SE3_ROTATIONAL_TORQUE,
	// set rotational_speed with units of rad/s.
	//
	// Types that are assignable to TaskSpeed:
	//	*ConstrainedManipulationCommand_Request_TangentialSpeed
	//	*ConstrainedManipulationCommand_Request_RotationalSpeed
	TaskSpeed isConstrainedManipulationCommand_Request_TaskSpeed `protobuf_oneof:"task_speed"`
	// The limit on the force that is applied on any translation direction
	// Value must be positive
	// If unspecified, a default value of 40 N will be used.
	ForceLimit *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=force_limit,json=forceLimit,proto3" json:"force_limit,omitempty"`
	// The limit on the torque that is applied on any rotational direction
	// Value must be positive
	// If unspecified, a default value of 4 Nm will be used.
	TorqueLimit *wrapperspb.DoubleValue                         `protobuf:"bytes,6,opt,name=torque_limit,json=torqueLimit,proto3" json:"torque_limit,omitempty"`
	TaskType    ConstrainedManipulationCommand_Request_TaskType `protobuf:"varint,7,opt,name=task_type,json=taskType,proto3,enum=bosdyn.api.ConstrainedManipulationCommand_Request_TaskType" json:"task_type,omitempty"`
	// The timestamp (in robot time) by which a command must finish executing.
	// This is a required field and used to prevent runaway commands.
	EndTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *ConstrainedManipulationCommand_Request) Reset() {
	*x = ConstrainedManipulationCommand_Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstrainedManipulationCommand_Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstrainedManipulationCommand_Request) ProtoMessage() {}

func (x *ConstrainedManipulationCommand_Request) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstrainedManipulationCommand_Request.ProtoReflect.Descriptor instead.
func (*ConstrainedManipulationCommand_Request) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{14, 0}
}

func (x *ConstrainedManipulationCommand_Request) GetFrameName() string {
	if x != nil {
		return x.FrameName
	}
	return ""
}

func (x *ConstrainedManipulationCommand_Request) GetInitWrenchDirectionInFrameName() *Wrench {
	if x != nil {
		return x.InitWrenchDirectionInFrameName
	}
	return nil
}

func (m *ConstrainedManipulationCommand_Request) GetTaskSpeed() isConstrainedManipulationCommand_Request_TaskSpeed {
	if m != nil {
		return m.TaskSpeed
	}
	return nil
}

func (x *ConstrainedManipulationCommand_Request) GetTangentialSpeed() float64 {
	if x, ok := x.GetTaskSpeed().(*ConstrainedManipulationCommand_Request_TangentialSpeed); ok {
		return x.TangentialSpeed
	}
	return 0
}

func (x *ConstrainedManipulationCommand_Request) GetRotationalSpeed() float64 {
	if x, ok := x.GetTaskSpeed().(*ConstrainedManipulationCommand_Request_RotationalSpeed); ok {
		return x.RotationalSpeed
	}
	return 0
}

func (x *ConstrainedManipulationCommand_Request) GetForceLimit() *wrapperspb.DoubleValue {
	if x != nil {
		return x.ForceLimit
	}
	return nil
}

func (x *ConstrainedManipulationCommand_Request) GetTorqueLimit() *wrapperspb.DoubleValue {
	if x != nil {
		return x.TorqueLimit
	}
	return nil
}

func (x *ConstrainedManipulationCommand_Request) GetTaskType() ConstrainedManipulationCommand_Request_TaskType {
	if x != nil {
		return x.TaskType
	}
	return ConstrainedManipulationCommand_Request_TASK_TYPE_UNKNOWN
}

func (x *ConstrainedManipulationCommand_Request) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

type isConstrainedManipulationCommand_Request_TaskSpeed interface {
	isConstrainedManipulationCommand_Request_TaskSpeed()
}

type ConstrainedManipulationCommand_Request_TangentialSpeed struct {
	// Recommended values are in the range of [-4, 4] m/s
	TangentialSpeed float64 `protobuf:"fixed64,3,opt,name=tangential_speed,json=tangentialSpeed,proto3,oneof"`
}

type ConstrainedManipulationCommand_Request_RotationalSpeed struct {
	// Recommended values are in the range of [-4, 4] rad/s
	RotationalSpeed float64 `protobuf:"fixed64,4,opt,name=rotational_speed,json=rotationalSpeed,proto3,oneof"`
}

func (*ConstrainedManipulationCommand_Request_TangentialSpeed) isConstrainedManipulationCommand_Request_TaskSpeed() {
}

func (*ConstrainedManipulationCommand_Request_RotationalSpeed) isConstrainedManipulationCommand_Request_TaskSpeed() {
}

type ConstrainedManipulationCommand_Feedback struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status ConstrainedManipulationCommand_Feedback_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bosdyn.api.ConstrainedManipulationCommand_Feedback_Status" json:"status,omitempty"`
	// Desired wrench in odom world frame, applied at hand frame origin
	DesiredWrenchOdomFrame *Wrench `protobuf:"bytes,2,opt,name=desired_wrench_odom_frame,json=desiredWrenchOdomFrame,proto3" json:"desired_wrench_odom_frame,omitempty"`
}

func (x *ConstrainedManipulationCommand_Feedback) Reset() {
	*x = ConstrainedManipulationCommand_Feedback{}
	if protoimpl.UnsafeEnabled {
		mi := &file_bosdyn_api_basic_command_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstrainedManipulationCommand_Feedback) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstrainedManipulationCommand_Feedback) ProtoMessage() {}

func (x *ConstrainedManipulationCommand_Feedback) ProtoReflect() protoreflect.Message {
	mi := &file_bosdyn_api_basic_command_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstrainedManipulationCommand_Feedback.ProtoReflect.Descriptor instead.
func (*ConstrainedManipulationCommand_Feedback) Descriptor() ([]byte, []int) {
	return file_bosdyn_api_basic_command_proto_rawDescGZIP(), []int{14, 1}
}

func (x *ConstrainedManipulationCommand_Feedback) GetStatus() ConstrainedManipulationCommand_Feedback_Status {
	if x != nil {
		return x.Status
	}
	return ConstrainedManipulationCommand_Feedback_STATUS_UNKNOWN
}

func (x *ConstrainedManipulationCommand_Feedback) GetDesiredWrenchOdomFrame() *Wrench {
	if x != nil {
		return x.DesiredWrenchOdomFrame
	}
	return nil
}

var File_bosdyn_api_basic_command_proto protoreflect.FileDescriptor

var file_bosdyn_api_basic_command_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x61, 0x73,
	0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x1a, 0x19, 0x62, 0x6f,
	0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6f, 0x6d, 0x65, 0x74, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a, 0x1a, 0x52, 0x6f, 0x62, 0x6f, 0x74, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0xab, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x4f, 0x56, 0x45,
	0x52, 0x52, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45,
	0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x04,
	0x12, 0x20, 0x0a, 0x1c, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d,
	0x50, 0x41, 0x54, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x48, 0x41, 0x52, 0x44, 0x57, 0x41, 0x52, 0x45,
	0x10, 0x05, 0x22, 0x85, 0x03, 0x0a, 0x18, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a,
	0xae, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x0e, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f,
	0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x52,
	0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x22, 0x40,
	0x0a, 0x0d, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x69, 0x6e, 0x74, 0x12,
	0x10, 0x0a, 0x0c, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x49, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x02,
	0x1a, 0xb7, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x4c, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5d, 0x0a, 0x06, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x22, 0x29, 0x0a, 0x10, 0x53, 0x65,
	0x6c, 0x66, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x24, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x26, 0x0a, 0x0d, 0x46,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09, 0x0a, 0x07,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09, 0x0a, 0x07, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0xa1, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x61, 0x66, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x4f, 0x46, 0x46,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f,
	0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0xc3, 0x04, 0x0a, 0x14, 0x53,
	0x45, 0x32, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x1a, 0xa1, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x32, 0x5f, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x65, 0x32, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45,
	0x32, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x86, 0x03, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x53, 0x45, 0x32, 0x54, 0x72, 0x61, 0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x6e,
	0x0a, 0x14, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3c, 0x2e, 0x62,
	0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x54, 0x72, 0x61,
	0x6a, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46,
	0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x62, 0x6f, 0x64, 0x79,
	0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x60,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x01,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x45, 0x41, 0x52, 0x5f,
	0x47, 0x4f, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x47, 0x4f, 0x41, 0x4c, 0x10, 0x02,
	0x22, 0x5e, 0x0a, 0x12, 0x42, 0x6f, 0x64, 0x79, 0x4d, 0x6f, 0x76, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x16, 0x0a, 0x12, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4d,
	0x4f, 0x56, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x44, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x22, 0x85, 0x02, 0x0a, 0x12, 0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0xe2, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65,
	0x32, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x32, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x08, 0x76, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x45, 0x32, 0x56, 0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x76, 0x65, 0x6c,
	0x6f, 0x63, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a, 0x0f, 0x73, 0x6c, 0x65, 0x77, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x45, 0x32, 0x56,
	0x65, 0x6c, 0x6f, 0x63, 0x69, 0x74, 0x79, 0x52, 0x0d, 0x73, 0x6c, 0x65, 0x77, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x1a, 0x0a, 0x0a, 0x08,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x53, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x97, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12,
	0x3e, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x69, 0x74,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x4b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x49, 0x54, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49,
	0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0xb6, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x9a, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4c, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x49, 0x53, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52,
	0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0xb4, 0x02, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x6c, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x73, 0x64,
	0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0xb4, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x29, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65,
	0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x65, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x47, 0x4f, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x46, 0x41, 0x52, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x10, 0x03, 0x22, 0xec, 0x01, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x65, 0x32, 0x5f, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x32, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0e, 0x66, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x74, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x66, 0x6f,
	0x6f, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61,
	0x63, 0x63, 0x75, 0x72, 0x61, 0x63, 0x79, 0x1a, 0x52, 0x0a, 0x12, 0x46, 0x6f, 0x6f, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x32,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x10,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x1a, 0x77, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x15, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x68, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x62, 0x6f, 0x73,
	0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x56, 0x65, 0x63, 0x33, 0x52, 0x12, 0x62, 0x6f,
	0x64, 0x79, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x48, 0x61, 0x6e, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x61, 0x6c, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x57, 0x61, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x1a, 0x0a, 0x0a, 0x08, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xd2, 0x01, 0x0a, 0x0e, 0x41, 0x72, 0x6d, 0x44, 0x72, 0x61,
	0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x09, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0xb4, 0x01, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b,
	0x12, 0x42, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2a, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72,
	0x6d, 0x44, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65,
	0x64, 0x62, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x64, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x52, 0x41,
	0x47, 0x47, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x22, 0xa9, 0x08, 0x0a, 0x1e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0xf1, 0x05,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5f, 0x0a, 0x23, 0x69, 0x6e, 0x69, 0x74,
	0x5f, 0x77, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x1e, 0x69, 0x6e, 0x69, 0x74, 0x57,
	0x72, 0x65, 0x6e, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x74, 0x61, 0x6e,
	0x67, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x6e, 0x67, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x00, 0x52, 0x0f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x3f, 0x0a, 0x0c, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x74, 0x6f, 0x72, 0x71, 0x75, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d,
	0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xec, 0x01, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x33, 0x5f, 0x43, 0x49, 0x52, 0x43, 0x4c, 0x45,
	0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x54, 0x4f, 0x52, 0x51, 0x55, 0x45, 0x10, 0x01, 0x12,
	0x26, 0x0a, 0x22, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x33, 0x5f,
	0x43, 0x49, 0x52, 0x43, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x44, 0x4f, 0x46, 0x5f,
	0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x02, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x33, 0x5f, 0x52, 0x4f, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x41, 0x4c, 0x5f, 0x54, 0x4f, 0x52, 0x51, 0x55, 0x45, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x33, 0x5f, 0x43, 0x49, 0x52,
	0x43, 0x4c, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x33, 0x5f, 0x4c, 0x49, 0x4e, 0x45,
	0x41, 0x52, 0x5f, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x50, 0x4f, 0x53,
	0x45, 0x10, 0x06, 0x42, 0x0c, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x70, 0x65, 0x65,
	0x64, 0x1a, 0x92, 0x02, 0x0a, 0x08, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x52,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a,
	0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x46, 0x65, 0x65, 0x64, 0x62,
	0x61, 0x63, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4d, 0x0a, 0x19, 0x64, 0x65, 0x73, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x77, 0x72,
	0x65, 0x6e, 0x63, 0x68, 0x5f, 0x6f, 0x64, 0x6f, 0x6d, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x52, 0x16, 0x64, 0x65, 0x73, 0x69, 0x72,
	0x65, 0x64, 0x57, 0x72, 0x65, 0x6e, 0x63, 0x68, 0x4f, 0x64, 0x6f, 0x6d, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x22, 0x63, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x52,
	0x4d, 0x5f, 0x49, 0x53, 0x5f, 0x53, 0x54, 0x55, 0x43, 0x4b, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x47, 0x52, 0x41, 0x53, 0x50, 0x5f, 0x49, 0x53, 0x5f,
	0x4c, 0x4f, 0x53, 0x54, 0x10, 0x03, 0x42, 0x46, 0x42, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x31, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x68, 0x73, 0x73, 0x6e, 0x76, 0x2f, 0x73,
	0x70, 0x6f, 0x74, 0x2d, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x65, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x2f, 0x67, 0x6f, 0x2f, 0x62, 0x6f, 0x73, 0x64, 0x79, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_bosdyn_api_basic_command_proto_rawDescOnce sync.Once
	file_bosdyn_api_basic_command_proto_rawDescData = file_bosdyn_api_basic_command_proto_rawDesc
)

func file_bosdyn_api_basic_command_proto_rawDescGZIP() []byte {
	file_bosdyn_api_basic_command_proto_rawDescOnce.Do(func() {
		file_bosdyn_api_basic_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_bosdyn_api_basic_command_proto_rawDescData)
	})
	return file_bosdyn_api_basic_command_proto_rawDescData
}

var file_bosdyn_api_basic_command_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_bosdyn_api_basic_command_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_bosdyn_api_basic_command_proto_goTypes = []interface{}{
	(RobotCommandFeedbackStatus_Status)(0),                // 0: bosdyn.api.RobotCommandFeedbackStatus.Status
	(BatteryChangePoseCommand_Request_DirectionHint)(0),   // 1: bosdyn.api.BatteryChangePoseCommand.Request.DirectionHint
	(BatteryChangePoseCommand_Feedback_Status)(0),         // 2: bosdyn.api.BatteryChangePoseCommand.Feedback.Status
	(SafePowerOffCommand_Feedback_Status)(0),              // 3: bosdyn.api.SafePowerOffCommand.Feedback.Status
	(SE2TrajectoryCommand_Feedback_Status)(0),             // 4: bosdyn.api.SE2TrajectoryCommand.Feedback.Status
	(SE2TrajectoryCommand_Feedback_BodyMovementStatus)(0), // 5: bosdyn.api.SE2TrajectoryCommand.Feedback.BodyMovementStatus
	(SitCommand_Feedback_Status)(0),                       // 6: bosdyn.api.SitCommand.Feedback.Status
	(StandCommand_Feedback_Status)(0),                     // 7: bosdyn.api.StandCommand.Feedback.Status
	(StanceCommand_Feedback_Status)(0),                    // 8: bosdyn.api.StanceCommand.Feedback.Status
	(ArmDragCommand_Feedback_Status)(0),                   // 9: bosdyn.api.ArmDragCommand.Feedback.Status
	(ConstrainedManipulationCommand_Request_TaskType)(0),  // 10: bosdyn.api.ConstrainedManipulationCommand.Request.TaskType
	(ConstrainedManipulationCommand_Feedback_Status)(0),   // 11: bosdyn.api.ConstrainedManipulationCommand.Feedback.Status
	(*RobotCommandFeedbackStatus)(nil),                    // 12: bosdyn.api.RobotCommandFeedbackStatus
	(*BatteryChangePoseCommand)(nil),                      // 13: bosdyn.api.BatteryChangePoseCommand
	(*SelfRightCommand)(nil),                              // 14: bosdyn.api.SelfRightCommand
	(*StopCommand)(nil),                                   // 15: bosdyn.api.StopCommand
	(*FreezeCommand)(nil),                                 // 16: bosdyn.api.FreezeCommand
	(*SafePowerOffCommand)(nil),                           // 17: bosdyn.api.SafePowerOffCommand
	(*SE2TrajectoryCommand)(nil),                          // 18: bosdyn.api.SE2TrajectoryCommand
	(*SE2VelocityCommand)(nil),                            // 19: bosdyn.api.SE2VelocityCommand
	(*SitCommand)(nil),                                    // 20: bosdyn.api.SitCommand
	(*StandCommand)(nil),                                  // 21: bosdyn.api.StandCommand
	(*StanceCommand)(nil),                                 // 22: bosdyn.api.StanceCommand
	(*Stance)(nil),                                        // 23: bosdyn.api.Stance
	(*FollowArmCommand)(nil),                              // 24: bosdyn.api.FollowArmCommand
	(*ArmDragCommand)(nil),                                // 25: bosdyn.api.ArmDragCommand
	(*ConstrainedManipulationCommand)(nil),                // 26: bosdyn.api.ConstrainedManipulationCommand
	(*BatteryChangePoseCommand_Request)(nil),              // 27: bosdyn.api.BatteryChangePoseCommand.Request
	(*BatteryChangePoseCommand_Feedback)(nil),             // 28: bosdyn.api.BatteryChangePoseCommand.Feedback
	(*SelfRightCommand_Request)(nil),                      // 29: bosdyn.api.SelfRightCommand.Request
	(*SelfRightCommand_Feedback)(nil),                     // 30: bosdyn.api.SelfRightCommand.Feedback
	(*StopCommand_Request)(nil),                           // 31: bosdyn.api.StopCommand.Request
	(*StopCommand_Feedback)(nil),                          // 32: bosdyn.api.StopCommand.Feedback
	(*FreezeCommand_Request)(nil),                         // 33: bosdyn.api.FreezeCommand.Request
	(*FreezeCommand_Feedback)(nil),                        // 34: bosdyn.api.FreezeCommand.Feedback
	(*SafePowerOffCommand_Request)(nil),                   // 35: bosdyn.api.SafePowerOffCommand.Request
	(*SafePowerOffCommand_Feedback)(nil),                  // 36: bosdyn.api.SafePowerOffCommand.Feedback
	(*SE2TrajectoryCommand_Request)(nil),                  // 37: bosdyn.api.SE2TrajectoryCommand.Request
	(*SE2TrajectoryCommand_Feedback)(nil),                 // 38: bosdyn.api.SE2TrajectoryCommand.Feedback
	(*SE2VelocityCommand_Request)(nil),                    // 39: bosdyn.api.SE2VelocityCommand.Request
	(*SE2VelocityCommand_Feedback)(nil),                   // 40: bosdyn.api.SE2VelocityCommand.Feedback
	(*SitCommand_Request)(nil),                            // 41: bosdyn.api.SitCommand.Request
	(*SitCommand_Feedback)(nil),                           // 42: bosdyn.api.SitCommand.Feedback
	(*StandCommand_Request)(nil),                          // 43: bosdyn.api.StandCommand.Request
	(*StandCommand_Feedback)(nil),                         // 44: bosdyn.api.StandCommand.Feedback
	(*StanceCommand_Request)(nil),                         // 45: bosdyn.api.StanceCommand.Request
	(*StanceCommand_Feedback)(nil),                        // 46: bosdyn.api.StanceCommand.Feedback
	nil,                                                   // 47: bosdyn.api.Stance.FootPositionsEntry
	(*FollowArmCommand_Request)(nil),                      // 48: bosdyn.api.FollowArmCommand.Request
	(*FollowArmCommand_Feedback)(nil),                     // 49: bosdyn.api.FollowArmCommand.Feedback
	(*ArmDragCommand_Request)(nil),                        // 50: bosdyn.api.ArmDragCommand.Request
	(*ArmDragCommand_Feedback)(nil),                       // 51: bosdyn.api.ArmDragCommand.Feedback
	(*ConstrainedManipulationCommand_Request)(nil),        // 52: bosdyn.api.ConstrainedManipulationCommand.Request
	(*ConstrainedManipulationCommand_Feedback)(nil),       // 53: bosdyn.api.ConstrainedManipulationCommand.Feedback
	(*timestamppb.Timestamp)(nil),                         // 54: google.protobuf.Timestamp
	(*SE2Trajectory)(nil),                                 // 55: bosdyn.api.SE2Trajectory
	(*SE2Velocity)(nil),                                   // 56: bosdyn.api.SE2Velocity
	(*Vec2)(nil),                                          // 57: bosdyn.api.Vec2
	(*Vec3)(nil),                                          // 58: bosdyn.api.Vec3
	(*Wrench)(nil),                                        // 59: bosdyn.api.Wrench
	(*wrapperspb.DoubleValue)(nil),                        // 60: google.protobuf.DoubleValue
}
var file_bosdyn_api_basic_command_proto_depIdxs = []int32{
	47, // 0: bosdyn.api.Stance.foot_positions:type_name -> bosdyn.api.Stance.FootPositionsEntry
	1,  // 1: bosdyn.api.BatteryChangePoseCommand.Request.direction_hint:type_name -> bosdyn.api.BatteryChangePoseCommand.Request.DirectionHint
	2,  // 2: bosdyn.api.BatteryChangePoseCommand.Feedback.status:type_name -> bosdyn.api.BatteryChangePoseCommand.Feedback.Status
	3,  // 3: bosdyn.api.SafePowerOffCommand.Feedback.status:type_name -> bosdyn.api.SafePowerOffCommand.Feedback.Status
	54, // 4: bosdyn.api.SE2TrajectoryCommand.Request.end_time:type_name -> google.protobuf.Timestamp
	55, // 5: bosdyn.api.SE2TrajectoryCommand.Request.trajectory:type_name -> bosdyn.api.SE2Trajectory
	4,  // 6: bosdyn.api.SE2TrajectoryCommand.Feedback.status:type_name -> bosdyn.api.SE2TrajectoryCommand.Feedback.Status
	5,  // 7: bosdyn.api.SE2TrajectoryCommand.Feedback.body_movement_status:type_name -> bosdyn.api.SE2TrajectoryCommand.Feedback.BodyMovementStatus
	54, // 8: bosdyn.api.SE2VelocityCommand.Request.end_time:type_name -> google.protobuf.Timestamp
	56, // 9: bosdyn.api.SE2VelocityCommand.Request.velocity:type_name -> bosdyn.api.SE2Velocity
	56, // 10: bosdyn.api.SE2VelocityCommand.Request.slew_rate_limit:type_name -> bosdyn.api.SE2Velocity
	6,  // 11: bosdyn.api.SitCommand.Feedback.status:type_name -> bosdyn.api.SitCommand.Feedback.Status
	7,  // 12: bosdyn.api.StandCommand.Feedback.status:type_name -> bosdyn.api.StandCommand.Feedback.Status
	54, // 13: bosdyn.api.StanceCommand.Request.end_time:type_name -> google.protobuf.Timestamp
	23, // 14: bosdyn.api.StanceCommand.Request.stance:type_name -> bosdyn.api.Stance
	8,  // 15: bosdyn.api.StanceCommand.Feedback.status:type_name -> bosdyn.api.StanceCommand.Feedback.Status
	57, // 16: bosdyn.api.Stance.FootPositionsEntry.value:type_name -> bosdyn.api.Vec2
	58, // 17: bosdyn.api.FollowArmCommand.Request.body_offset_from_hand:type_name -> bosdyn.api.Vec3
	9,  // 18: bosdyn.api.ArmDragCommand.Feedback.status:type_name -> bosdyn.api.ArmDragCommand.Feedback.Status
	59, // 19: bosdyn.api.ConstrainedManipulationCommand.Request.init_wrench_direction_in_frame_name:type_name -> bosdyn.api.Wrench
	60, // 20: bosdyn.api.ConstrainedManipulationCommand.Request.force_limit:type_name -> google.protobuf.DoubleValue
	60, // 21: bosdyn.api.ConstrainedManipulationCommand.Request.torque_limit:type_name -> google.protobuf.DoubleValue
	10, // 22: bosdyn.api.ConstrainedManipulationCommand.Request.task_type:type_name -> bosdyn.api.ConstrainedManipulationCommand.Request.TaskType
	54, // 23: bosdyn.api.ConstrainedManipulationCommand.Request.end_time:type_name -> google.protobuf.Timestamp
	11, // 24: bosdyn.api.ConstrainedManipulationCommand.Feedback.status:type_name -> bosdyn.api.ConstrainedManipulationCommand.Feedback.Status
	59, // 25: bosdyn.api.ConstrainedManipulationCommand.Feedback.desired_wrench_odom_frame:type_name -> bosdyn.api.Wrench
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_bosdyn_api_basic_command_proto_init() }
func file_bosdyn_api_basic_command_proto_init() {
	if File_bosdyn_api_basic_command_proto != nil {
		return
	}
	file_bosdyn_api_geometry_proto_init()
	file_bosdyn_api_trajectory_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_bosdyn_api_basic_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RobotCommandFeedbackStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryChangePoseCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfRightCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreezeCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafePowerOffCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2TrajectoryCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2VelocityCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StanceCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowArmCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmDragCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstrainedManipulationCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryChangePoseCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatteryChangePoseCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfRightCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SelfRightCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StopCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreezeCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FreezeCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafePowerOffCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SafePowerOffCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2TrajectoryCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2TrajectoryCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2VelocityCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SE2VelocityCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SitCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StandCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StanceCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StanceCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowArmCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FollowArmCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmDragCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArmDragCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstrainedManipulationCommand_Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_bosdyn_api_basic_command_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstrainedManipulationCommand_Feedback); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_bosdyn_api_basic_command_proto_msgTypes[40].OneofWrappers = []interface{}{
		(*ConstrainedManipulationCommand_Request_TangentialSpeed)(nil),
		(*ConstrainedManipulationCommand_Request_RotationalSpeed)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_bosdyn_api_basic_command_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bosdyn_api_basic_command_proto_goTypes,
		DependencyIndexes: file_bosdyn_api_basic_command_proto_depIdxs,
		EnumInfos:         file_bosdyn_api_basic_command_proto_enumTypes,
		MessageInfos:      file_bosdyn_api_basic_command_proto_msgTypes,
	}.Build()
	File_bosdyn_api_basic_command_proto = out.File
	file_bosdyn_api_basic_command_proto_rawDesc = nil
	file_bosdyn_api_basic_command_proto_goTypes = nil
	file_bosdyn_api_basic_command_proto_depIdxs = nil
}
