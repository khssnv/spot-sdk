// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: bosdyn/api/point_cloud_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PointCloudServiceClient is the client API for PointCloudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PointCloudServiceClient interface {
	// Obtain the list of PointCloudSources for this given service.
	// Note that there may be multiple PointCloudServices running, each with their own set of sources
	// The name field keys access to individual point clouds when calling GetPointCloud.
	ListPointCloudSources(ctx context.Context, in *ListPointCloudSourcesRequest, opts ...grpc.CallOption) (*ListPointCloudSourcesResponse, error)
	// Request point clouds by source name.
	GetPointCloud(ctx context.Context, in *GetPointCloudRequest, opts ...grpc.CallOption) (*GetPointCloudResponse, error)
}

type pointCloudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPointCloudServiceClient(cc grpc.ClientConnInterface) PointCloudServiceClient {
	return &pointCloudServiceClient{cc}
}

func (c *pointCloudServiceClient) ListPointCloudSources(ctx context.Context, in *ListPointCloudSourcesRequest, opts ...grpc.CallOption) (*ListPointCloudSourcesResponse, error) {
	out := new(ListPointCloudSourcesResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.PointCloudService/ListPointCloudSources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pointCloudServiceClient) GetPointCloud(ctx context.Context, in *GetPointCloudRequest, opts ...grpc.CallOption) (*GetPointCloudResponse, error) {
	out := new(GetPointCloudResponse)
	err := c.cc.Invoke(ctx, "/bosdyn.api.PointCloudService/GetPointCloud", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PointCloudServiceServer is the server API for PointCloudService service.
// All implementations must embed UnimplementedPointCloudServiceServer
// for forward compatibility
type PointCloudServiceServer interface {
	// Obtain the list of PointCloudSources for this given service.
	// Note that there may be multiple PointCloudServices running, each with their own set of sources
	// The name field keys access to individual point clouds when calling GetPointCloud.
	ListPointCloudSources(context.Context, *ListPointCloudSourcesRequest) (*ListPointCloudSourcesResponse, error)
	// Request point clouds by source name.
	GetPointCloud(context.Context, *GetPointCloudRequest) (*GetPointCloudResponse, error)
	mustEmbedUnimplementedPointCloudServiceServer()
}

// UnimplementedPointCloudServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPointCloudServiceServer struct {
}

func (UnimplementedPointCloudServiceServer) ListPointCloudSources(context.Context, *ListPointCloudSourcesRequest) (*ListPointCloudSourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPointCloudSources not implemented")
}
func (UnimplementedPointCloudServiceServer) GetPointCloud(context.Context, *GetPointCloudRequest) (*GetPointCloudResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPointCloud not implemented")
}
func (UnimplementedPointCloudServiceServer) mustEmbedUnimplementedPointCloudServiceServer() {}

// UnsafePointCloudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PointCloudServiceServer will
// result in compilation errors.
type UnsafePointCloudServiceServer interface {
	mustEmbedUnimplementedPointCloudServiceServer()
}

func RegisterPointCloudServiceServer(s grpc.ServiceRegistrar, srv PointCloudServiceServer) {
	s.RegisterService(&PointCloudService_ServiceDesc, srv)
}

func _PointCloudService_ListPointCloudSources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPointCloudSourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointCloudServiceServer).ListPointCloudSources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.PointCloudService/ListPointCloudSources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointCloudServiceServer).ListPointCloudSources(ctx, req.(*ListPointCloudSourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PointCloudService_GetPointCloud_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPointCloudRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PointCloudServiceServer).GetPointCloud(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bosdyn.api.PointCloudService/GetPointCloud",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PointCloudServiceServer).GetPointCloud(ctx, req.(*GetPointCloudRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PointCloudService_ServiceDesc is the grpc.ServiceDesc for PointCloudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PointCloudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bosdyn.api.PointCloudService",
	HandlerType: (*PointCloudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPointCloudSources",
			Handler:    _PointCloudService_ListPointCloudSources_Handler,
		},
		{
			MethodName: "GetPointCloud",
			Handler:    _PointCloudService_GetPointCloud_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bosdyn/api/point_cloud_service.proto",
}
